[
  {
    "code": "   :language: cpp\n   :copyable: true\n\n.. tip:: Reuse Your Client\n\n   Because each ``mongocxx::client`` object represents a pool of connections to the\n   database, most applications require only a single instance of\n   ``mongocxx::client``, even across multiple requests.\n\nAPI Documentation\n-----------------\n\nTo learn more about creating a ``mongocxx::client`` object in {+driver-short+},\nsee the following API documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ \n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/client.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-connection-uri\n   :end-before: // end-connection-uri\n   :emphasize-lines: 8\n\n.. _cpp-client-object:\n\nUsing a ``mongocxx::options::client`` Object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``mongocxx::client`` constructor includes a ``client_options`` parameter that\naccepts an instance of the ``mongocxx::options::client`` class. You can specify\ncertain options in the ``client_options`` parameter instead of including them in your\nconnection URI.\n\nThe following example shows how to use the ``client_options`` parameter\nto set connection options:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-options.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-client-options \n   :end-before: // end-client-options\n   :emphasize-lines: 8-12, 15\n\nRead Connection Options\n-----------------------\n\nAfter constructing a ``mongocxx::client`` object, you can read the values of certain\nconnection options by using properties of the\n``mongocxx::uri`` object.\n\nThe following example shows how to read the value of the ``tls`` connection options\nby using the ``tls()`` property:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-options.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-uri-object\n   :end-before: // end-uri-object\n   :emphasize-lines: 8, 10\n\nThe following sections show the corresponding ``mongocxx::uri`` property for\neach connection option that supports it.\n\nConnection URI Options\n----------------------\n\nThe following sections describe the connection options that you can set in the connection\nURI passed to the {+driver-short+}. Each connection option links to\nthe {+mdb-server+} manual and to its corresponding ``mongocxx::uri``\nproperty, if supported.\n\nReplica Set Options\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n\n   * - :manual:`directConnection </reference/connection-string/#mongodb-urioption-urioption.directConnection>`\n     - `direct_connection() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a4d4e43c3ef3f30f81c990c04082b1655>`__\n   \n   * - :manual:`replicaSet </reference/connection-string/#mongodb-urioption-urioption.replicaSet>`\n     - `replica_set() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ad2d71ae778881db9ffc64fc7c07e0dad>`__\n   \nConnection Options\n~~~~~~~~~~~~~~~~~~\n\nTLS Options\n```````````\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n\n   * - :manual:`tls </reference/connection-string/#mongodb-urioption-urioption.tls>`\n     - `tls() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a41c20bd79917a3c550ba8a93294f5e11>`__\n   \n   * - :manual:`tlsCertificateKeyFile </reference/connection-string/#mongodb-urioption-urioption.tlsCertificateKeyFile>`\n     - `tls_certificate_key_file() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a65658767e1caedd886c91c113c32b9b5>`__\n\n   * - :manual:`tlsCertificateKeyFilePassword </reference/connection-string/#mongodb-urioption-urioption.tlsCertificateKeyPassword>`\n     - `tls_certificate_key_file_password() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a3b452ef17e64652acf8f23c939a28721>`__\n\n   * - :manual:`tlsCAFile </reference/connection-string/#mongodb-urioption-urioption.tlsCaFile>`\n     - `tls_ca_file() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a98acecf397e11f747cc1978c17a8bc16>`__\n\n   * - :manual:`tlsAllowInvalidCertificates </reference/connection-string/#mongodb-urioption-urioption.tlsAllowInvalidCertificates>`\n     - `tls_allow_invalid_certificates() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a3ad427853248963a53d2a9e9ed1942bb>`__\n\n   * - :manual:`tlsAllowInvalidHostnames </reference/connection-string/#mongodb-urioption-urioption.tlsAllowInvalidHostnames>`\n     - `tls_allow_invalid_hostnames() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#acc5e213a292666bc72b1d3f02da3e8b4>`__\n\n   * - :manual:`tlsInsecure </reference/connection-string/#mongodb-urioption-urioption.tlsInsecure>`\n     - `tls_insecure() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a1f0a5f89d558c182404005f6787a8a87>`__\n\n   * - :manual:`tlsDisableCertificateRevocationCheck </reference/connection-string/#mongodb-urioption-urioption.tlsDisableCertificateRevocationCheck>`\n     - `tls_disable_certificate_revocation_check() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ab55633851e897346c5b4c8922e39a0a7>`__\n\n   * - :manual:`tlsDisableOCSPEndpointCheck </reference/connection-string/#mongodb-urioption-urioption.tlsDisableOcspEndpointCheck>`\n     - `tls_disable_ocsp_endpoint_check() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a9ec2fe40f261f7feae672ef6d1a8c5a5>`__\n\n.. tip::\n\n   You can set most TLS options by using the ``client_options`` parameter. See the\n   `mongocxx::options::tls <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1options_1_1tls.html>`__\n   API documentation for more information.\n\nTimeout Options\n```````````````\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n\n   * - :manual:`connectTimeoutMS </reference/connection-string/#mongodb-urioption-urioption.connecttimeoutms>`\n     - `connect_timeout_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a3f6b8de687ba1c9a6f04873849d151a5>`__\n\n   * - :manual:`socketTimeoutMS </reference/connection-string/#mongodb-urioption-urioption.sockettimeoutms>`\n     - `socket_timoeout_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a3a0bddf7cf54c047bdf6114ceaa4d443>`__\n\n.. _cpp-compression-options:\n\nCompression Options\n```````````````````\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n\n   * - :manual:`compressors </reference/connection-string/#mongodb-urioption-urioption.compressors>`\n     - `compressors() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a5e6c61e2fa272d1cc18c12a1fa8b4f67>`__\n\n   * - :manual:`zlibCompressionLevel </reference/connection-string/#mongodb-urioption-urioption.zlibcompressionlevel>`\n     - `zlib_compression_level() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a5fe96af45aba8e8afcaad7ec8b3d42b1>`__\n\nConnection Pool Options\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n\n   * - :manual:`maxPoolSize </reference/connection-string/#mongodb-urioption-urioption.maxpoolsize>`\n     - `max_pool_size() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a0a56e5ca293f780646b8137e60987e3a>`__\n\n   * - :manual:`waitQueueTimeoutMS </reference/connection-string/#mongodb-urioption-urioption.waitqueuetimeoutms>`\n     - `wait_queue_timeout_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ae37c656f35e753fdc35eceb3c8d2b60d>`__\n\nWrite Concern Options\n~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`w </reference/connection-string/#mongodb-urioption-urioption.w>` \n     - `write_concern() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ad04c12d62bb115e187093922831f721b>`__\n\n   * - :manual:`wTimeoutMS </reference/connection-string/#mongodb-urioption-urioption.wtimeoutms>`\n     - N/A\n\n   * - :manual:`journal </reference/connection-string/#mongodb-urioption-urioption.journal>` \n     - N/A\n\nRead Concern Options\n~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`readConcernLevel </reference/connection-string/#mongodb-urioption-urioption.readconcernlevel>`\n     - `read_concern() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a4d123cfaae73668f9f7590d348b0045d>`__\n\nRead Preference Options\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`readPreference </reference/connection-string/#mongodb-urioption-urioption.readpreference>`\n     - `read_preference() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a317a88b7a0ae693e18579458ac0d31be>`__\n   \n   * - :manual:`maxStalenessSeconds </reference/connection-string/#mongodb-urioption-urioption.maxstalenessseconds>`\n     - N/A\n\n   * - :manual:`readPreferenceTags </reference/connection-string/#mongodb-urioption-urioption.readpreferencetags>`\n     - N/A \n\nAuthentication Options\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`authMechanism </reference/connection-string/#mongodb-urioption-urioption.authmechanism>`\n     - `auth_mechanism() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a1a2ad55a4d98f6233b3cd23d1890d333>`__\n\n   * - :manual:`authMechanismProperties </reference/connection-string/#mongodb-urioption-urioption.authmechanismproperties>`\n     - `auth_mechanism_properties() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#aa25773468f3c808bcc9a3c534c787c32>`__\n\n   * - :manual:`authSource </reference/connection-string/#mongodb-urioption-urioption.authsource>`\n     - `auth_source() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a5431ca7628050cc54eec8d113b1cd583>`__\n\nServer Selection and Discovery Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`localThresholdMS </reference/connection-string/#mongodb-urioption-urioption.localthresholdms>`\n     - `local_threshold_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a4c7ecb56b4ef71647183da2076fba7e2>`__\n\n   * - :manual:`serverSelectionTimeoutMS </reference/connection-string/#mongodb-urioption-urioption.serverselectiontimeoutms>`\n     - `server_selection_timeout_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a0e2111e680eceecff55877cb38dcfcf6>`__\n\n   * - :manual:`serverSelectionTryOnce </reference/connection-string/#mongodb-urioption-urioption.serverselectiontryonce>`\n     - `server_selection_try_once() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#aafbf7c0506ba606f984eb00f2363b8f5>`__\n\n   * - :manual:`heartbeatFrequencyMS </reference/connection-string/#mongodb-urioption-urioption.heartbeatfrequencyms>`\n     - `heartbeat_frequency_ms() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ae63c37a8113c567d056c9c7dfb20befd>`__\n\n   * - :manual:`socketCheckIntervalMS </reference/connection-string/#mongodb-urioption-urioption.socketcheckintervalms>`\n     - N/A\n\nMiscellaneous Configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Connection URI Option\n     - ``mongocxx::uri`` Member\n   \n   * - :manual:`appName </reference/connection-string/#mongodb-urioption-urioption.appname>`\n     - `appname() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#aa4cca307af41312f3aa75569eb028f31>`__\n\n   * - :manual:`retryReads </reference/connection-string/#mongodb-urioption-urioption.retryreads>`\n     - `retry_reads() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a053db534d47f80aa8b57cea8f46f4969>`__\n\n   * - :manual:`retryWrites </reference/connection-string/#mongodb-urioption-urioption.retrywrites>`\n     - `retry_writes() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#a3de8a718821e0b66b3a05d1ed098e047>`__\n   \n   * - :manual:`loadBalanced </reference/connection-string/#mongodb-urioption-urioption.loadbalanced>`\n     - N/A\n\n   * - :manual:`srvMaxHosts </reference/connection-string/#mongodb-urioption-urioption.srvmaxhosts>`\n     - `srv_max_hosts() <https://mongocxx.org/api/current/classmongocxx_1_1v__noabi_1_1uri.html#ab8e54c967d2d97fbe9c0304c6408e43b>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-options.txt"
  },
  {
    "code": "   :copyable: true\n   :language: cpp\n\n.. tip::\n\n   Follow the :atlas:`Atlas driver connection guide </driver-connection>`\n   to retrieve your connection string.\n\n.. _cpp-connection-local:\n\nLocal Deployments\n-----------------\n\nTo connect to a local MongoDB deployment, use ``localhost`` as the hostname. By\ndefault, the ``mongod`` process runs on port 27017, though you can customize this for\nyour deployment.\n\nThe following code shows how to use the {+driver-short+} to connect to a local MongoDB\ndeployment:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-targets.txt"
  },
  {
    "code": "      :language: cpp\n      :copyable: true\n\n.. _cpp-connection-replica-set:\n\nReplica Sets\n------------\n\nTo connect to a replica set, specify the hostnames (or IP addresses) and \nport numbers of the replica set members in your connection string.\n\nIf you aren't able to provide a full list of hosts in the replica set, you can \nspecify one or more of the hosts in the replica set and instruct the {+driver-short+} to \nperform automatic discovery to find the others. To instruct the driver to perform\nautomatic discovery, perform one of the following actions:\n\n- Specify the name of the replica set as the value of the ``replicaSet`` parameter.\n- Specify ``false`` as the value of the ``directConnection`` parameter.\n- Specify more than one host in the replica set.\n\nIn the following example, the driver uses a sample connection URI to connect to the \nMongoDB replica set ``sampleRS``, which is running on port ``27017`` of three different\nhosts, including ``host1``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-targets.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n\nInitialization\n~~~~~~~~~~~~~~\n\nTo initialize a replica set, you must connect directly to a single member. To do so,\nset the ``directConnection`` connection\noption to ``true`` in the connection string. The following code example shows how to\nset this connection option: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-targets.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n\nAPI Documentation\n-----------------\n\nTo learn more about the types used on this page,\nsee the following API documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ \n- `mongocxx::uri <{+api+}/classmongocxx_1_1v__noabi_1_1uri.html>`__ \n- `mongocxx::instance <{+api+}/classmongocxx_1_1v__noabi_1_1instance.html>`__ \n- `mongocxx::options::client <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1client.html>`__ \n- `mongocxx::options::server_api <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1server__api.html>`__ \n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/connection-targets.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n\n.. important::\n\n   You must create a ``mongocxx::instance`` object before you use the\n   {+driver-short+}, and this object must remain\n   alive for as long as any other MongoDB objects are in scope.\n\nAPI Documentation\n-----------------\n\nTo learn more about the ``mongocxx::instance`` class in the {+driver-short+},\nsee the following API documentation:\n\n- `mongocxx::instance <{+api+}/classmongocxx_1_1v__noabi_1_1instance.html>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/instance.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :emphasize-lines: 8\n   :start-after: // start-all-compression\n   :end-before: // end-all-compression\n\nSet the zlib Compression Level\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you specify ``zlib`` as one of your compression algorithms, you can also use the\n``zlibCompressionLevel`` option to specify a compression level. This option accepts\nan integer value between ``-1`` and ``9``:\n\n- **-1:** *(Default).* zlib uses its default compression level (usually ``6``).\n- **0:** No compression.\n- **1:** Fastest speed but lowest compression.\n- **9:** Best compression but slowest speed.\n\nThe following code example specifies the ``zlib`` compression algorithm and a value of\n``1`` for the ``zlibCompressionLevel`` option:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/network-compression.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :emphasize-lines: 8\n   :start-after: // start-zlib-compression\n   :end-before: // end-zlib-compression\n\nAPI Documentation\n-----------------\n\nTo learn more about the types and options used on this page,\nsee the following API documentation:\n\n- `mongocxx::instance <{+api+}/classmongocxx_1_1v__noabi_1_1instance.html>`__\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__\n- `mongocxx::uri <{+api+}/classmongocxx_1_1v__noabi_1_1uri.html>`__ \n- :ref:`<cpp-compression-options>`\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/network-compression.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-specify-v1\n   :end-before: // end-specify-v1\n   :emphasize-lines: 10-13\n\n.. note::\n\n   After you create a ``mongocxx::client`` instance with\n   a specified API version, all commands you run with the client use the specified\n   version. If you need to run commands using more than one version of the \n   {+stable-api+}, create a new ``mongocxx::client`` instance.\n\n.. _stable-api-options:\n\nConfigure the {+stable-api+}\n------------------------\n\nThe following table describes the properties of the ``server_api_options`` class. You can use\nthese properties to customize the behavior of the {+stable-api+}.\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 25,75\n\n   * - Option Name\n     - Description\n\n   * - strict\n     - | **Optional**. When ``true``, if you call a command that isn't part of \n         the declared API version, the driver raises an exception.\n       |\n       | Default: ``false``\n\n   * -  deprecation_errors\n     - | **Optional**. When ``true``, if you call a command that is deprecated in the \n         declared API version, the driver raises an exception.\n       |\n       | Default: ``false``\n\nThe following code example shows how you can use these parameters when constructing a \n``ServerApi`` object:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/stable-api.txt"
  },
  {
    "code": "      :language: cpp\n      :copyable: true\n      :start-after: // start-stable-api-options\n      :end-before: // end-stable-api-options\n      :emphasize-lines: 10-12\n\nAPI Documentation\n-----------------\n\nFor more information about using the {+stable-api+} with the {+driver-short+}, see the \nfollowing API documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ \n- `mongocxx::uri <{+api+}/classmongocxx_1_1v__noabi_1_1uri.html>`__ \n- `mongocxx::instance <{+api+}/classmongocxx_1_1v__noabi_1_1instance.html>`__ \n- `mongocxx::options::client <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1client.html>`__ \n- `mongocxx::options::server_api <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1server__api.html>`__ \n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/stable-api.txt"
  },
  {
    "code": "      :language: cpp\n      :copyable: true\n\n.. tip:: \n   \n   This option corresponds to the OpenSSL\n   `SSL_CTX_load_verify_locations <https://linux.die.net/man/3/ssl_ctx_load_verify_locations>`__\n   parameter and\n   the LibreSSL `tls_config_set_ca_path <https://man.openbsd.org/tls_load_file.3>`__\n   parameter. \n\n.. _cpp-certificate-revocation:\n\nCheck Certificate Revocation\n----------------------------\n\nWhen an X.509 certificate is no longer trustworthy—for example, if its private key\nhas been compromised—the CA revokes the certificate. The {+driver-short+} includes two ways\nto check whether a server's certificate has been revoked.\n\n.. _cpp-disable-ocsp:\n\nOCSP\n~~~~\n\nThe Online Certificate Status Protocol (OCSP) process varies depending on the version of\n{+mdb-server+} you're connecting to:\n\n- **MongoDB v4.4 or later:** The server staples a\n  time-stamped OCSP response to its certificate. The {+driver-short+} validates the certificate\n  against the OCSP response. If the CA has revoked the certificate, or if the OCSP response\n  is otherwise invalid, the TLS handshake fails.\n- **MongoDB v4.3 or earlier:** The server supplies an OCSP endpoint, which the {+driver-short+}\n  contacts directly. The {+driver-short+} then validates the certificate against the OCSP\n  response. If the CA hasn't revoked the certificate, the TLS handshake continues, even if\n  the OCSP response is invalid or malformed.\n\nTo stop the {+driver-short+} from contacting the OCSP endpoint,\nset the ``tlsDisableOCSPEndpointCheck`` connection option to ``true`` in your\nconnection string, as shown in the following code example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/tls.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n\n.. tip::\n\n   You can specify a CRL file in either the ``.pem`` or ``.der`` format.\n\n.. _cpp-client-cert:\n\nPresent a Client Certificate\n----------------------------\n\nSome MongoDB deployments require every connecting application to present a client certificate\nthat proves its identity. To specify the client certificate for the {+driver-short+} to\npresent, specify the file path of the ``.pem`` file that\ncontains your certificate and private key.\n\nYou can do this in two ways: by setting a property on a ``mongocxx::options::tls`` object,\nor by using the ``tlsCertificateKeyFile`` parameter in your connection string.\n\n.. include:: /includes/connect/client-cert-tabs.rst\n\n.. important::\n   \n   Your client certificate and private key must be in the same ``.pem`` file. If they\n   are stored in different files, you must concatenate them. The following example\n   shows how to concatenate a key file and a certificate file into a third file called\n   ``combined.pem`` on a Unix system: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect/tls.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :linenos:\n   :emphasize-lines: 16-18\n\nConnection\n----------\n\nAtlas\n~~~~~\n\nThe following code shows how to connect to a MongoDB Atlas deployment:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-atlas\n    :end-before: end-atlas\n\nTo learn more about connecting to an Atlas deployment, see :ref:`cpp-connection-atlas`\nin the Connection Targets guide.\n\nLocal Deployment\n~~~~~~~~~~~~~~~~\n\nThe following code shows how to connect to a local MongoDB deployment:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-local\n    :end-before: end-local\n\nTo learn more about connecting to a local deployment, see :ref:`cpp-connection-local`\nin the Connection Targets guide.\n\nReplica Set\n~~~~~~~~~~~\n\nThe following code shows how to connect to a replica set deployment:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-replica-set\n    :end-before: end-replica-set\n\nTo learn more about connecting to a replica set, see :ref:`cpp-connection-replica-set`\nin the Connection Targets guide.\n\nTransport Layer Security (TLS)\n------------------------------\n\nEnable TLS\n~~~~~~~~~~\n\nThe following code shows how to enable TLS for the connection to your\nMongoDB instance:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-enable-tls\n    :end-before: end-enable-tls\n\nTo learn more about enabling TLS, see :ref:`cpp-enable-tls` in\nthe TLS configuration guide.\n\nSpecify a Certificate Authority (CA) File\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to specify the path to your CA file\nfor the connection to your MongoDB instance:\n\n.. include:: /includes/connect/ca-file-tabs.rst\n\nTo learn more about specifying a CA file, see :ref:`cpp-specify-ca-file` in\nthe TLS configuration guide.\n\nDisable OCSP Checks\n~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to prevent the driver from contacting\nthe OCSP endpoint:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-disable-ocsp\n    :end-before: end-disable-ocsp\n\nTo learn more about disabling OCSP checks, see :ref:`cpp-disable-ocsp` in\nthe TLS configuration guide.\n\nSpecify a Certificate Revocation List (CRL)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to instruct the driver to verify the server's \ncertificate against a CRL:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-crl\n    :end-before: end-crl\n\nTo learn more about specifying a CRL, see :ref:`cpp-crl` in the TLS\nconfiguration guide.\n\nPresent a Client Certificate\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to specify the client certificate that\nthe driver presents to your MongoDB deployment:\n\n.. include:: /includes/connect/client-cert-tabs.rst\n\nTo learn more about specifying a client certificate, see :ref:`cpp-client-cert` in\nthe TLS configuration guide.\n\nProvide a Certificate Key File Password\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to specify the password for your\nclient certificate:\n\n.. include:: /includes/connect/key-file-password.rst\n\nTo learn more about providing a key file password, see :ref:`cpp-key-file-password` in\nthe TLS configuration guide.\n\nAllow Insecure TLS\n~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to disable certificate verification:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-insecure-tls\n    :end-before: end-insecure-tls\n\nTo learn more about allowing insecure TLS, see :ref:`cpp-insecure-tls` in\nthe TLS configuration guide.\n\nDisable Certificate Validation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to disable certificate validation:\n\n.. include:: /includes/connect/disable-cert-validation-tabs.rst\n\nTo learn more about disabling certificate validation, see :ref:`cpp-insecure-tls` in\nthe TLS configuration guide.\n\nDisable Hostname Verification\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to disable hostname verification:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-disable-hostname\n    :end-before: end-disable-hostname\n\nTo learn more about disabling hostname verification, see :ref:`cpp-insecure-tls` in\nthe TLS configuration guide.\n\nNetwork Compression\n-------------------\n\nCompression Algorithms\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to enable compression for the connection\nto your MongoDB instance by specifying each compression algorithm:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-compression-all\n    :end-before: end-compression-all\n\nTo learn more about specifying compression algorithms, see\n:ref:`cpp-enable-compression` in the Network Compression guide.\n\nzlib Compression Level\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to specify the ``zlib`` compression algorithm\nand set its compression level:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-compression-zlib\n    :end-before: end-compression-zlib\n\nTo learn more about setting the zlib compression level, see\n:ref:`cpp-enable-compression` in the Network Compression guide.\n\n{+stable-api+}\n--------------\n\nThe following code shows how to enable the {+stable-api+} for the\nconnection to your MongoDB instance:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-stable-api\n    :end-before: end-stable-api\n\nTo learn more about the {+stable-api+}, see the :ref:`cpp-stable-api` guide.\n\n.. TODO:\n Server Selection\n ----------------\n Limit Server Execution Time\n ---------------------------\n\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/connect.txt"
  },
  {
    "code": "   :start-after: start-create-ts\n   :end-before: end-create-ts\n   :language: php\n   :dedent:\n\nTo verify that you successfully created the time series collection, run\nthe ``list_collections()`` method on the database and print the results:\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/time-series.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/data-formats/time-series.cpp\n      :start-after: start-list-colls\n      :end-before: end-list-colls\n      :language: php\n      :dedent:\n\n   .. output::\n      :language: console\n      :visible: false\n\n      { \"name\" : \"sept2023\", \"type\" : \"timeseries\", \"options\" : { \"timeseries\" :\n      { \"timeField\" : \"timestamp\", \"metaField\" : \"location\", \"granularity\" :\n      \"minutes\", \"bucketMaxSpanSeconds\" : 86400 } }, \"info\" : ... }\n\n.. _cpp-time-series-store:\n\nStore Time Series Data\n----------------------\n\nYou can insert data into a time series collection by using the ``insert_one()``\nor ``insert_many()`` methods and specifying the measurement, timestamp, and metadata\nin each inserted document.\n\n.. tip::\n\n   To learn more about inserting documents into a collection, see the :ref:`cpp-write-insert`\n   guide.\n\nExample\n~~~~~~~\n\nThis example inserts New York City precipitation data into the ``sept2023``\ntime series collection created in the :ref:`Create a Time Series Collection example\n<cpp-time-series-create-example>`. Each document contains the following fields:\n\n- ``precipitation_mm``, which stores precipitation measurements in millimeters\n- ``location``, which stores location metadata\n- ``timestamp``, which stores the time of the measurement collection\n\n",
    "language": "php",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/time-series.txt"
  },
  {
    "code": "   :start-after: start-insert-ts\n   :end-before: end-insert-ts\n   :language: php\n   :dedent:\n\n.. _cpp-time-series-query:\n\nQuery Time Series Data\n----------------------\n\nYou can use the same syntax and conventions to query data stored in a time \nseries collection as you use when performing read or aggregation operations on\nother collections. To find more information about these operations, see\nthe :ref:`Additional Information <cpp-time-series-addtl-info>` section.\n\n.. _cpp-time-series-addtl-info:\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts mentioned in this guide, see the\nfollowing Server manual entries:\n\n- :manual:`Time Series </core/timeseries-collections/>`\n- :manual:`Create and Query a Time Series Collection </core/timeseries/timeseries-procedures/>`\n- :manual:`Set Granularity for Time Series Data </core/timeseries/timeseries-granularity/>`\n\nTo learn more about performing read operations, see :ref:`cpp-read`.\n\nTo learn more about performing aggregation operations, see the :ref:`cpp-aggregation`\nguide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods mentioned in this guide, see the following\nAPI documentation:\n\n- `create_collection() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a8989a894e021e87d704288a8d2522069>`__\n- `list_collections() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#aacef87f0bc585c536ce0dfae67cfefe8>`__\n- `insert_many() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a533e1d929fb71a6e85303769f3175275>`__\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/time-series.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-bson-list\n    :end-before: end-bson-list\n\n.. _cpp-bson-basic:\n\nBasic Builder\n~~~~~~~~~~~~~\n\nThe ``builder::basic`` interface is a builder-style interface for constructing a BSON document. \nTo create a BSON document by using the basic builder, specify your document's data in a list of\nkey-value pair objects. You can create these key-value pair objects by passing a key and value\nto the ``builder::basic::kvp()`` method. The key must be a ``string`` type, and\nthe value must be a ``bson_value::value`` type or implicitly convertible to one. \n\nYou can use the basic builder's ``make_document()`` method to create a document and\nconvert it to a ``bsoncxx::document::value`` in a single statement, as shown in the\nfollowing code:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-bson-make-document\n    :end-before: end-bson-make-document\n\nAlternatively, you can create a BSON document across multiple statements\nby appending key-value pairs to a basic builder object. This \nexample uses the basic builder to perform the following actions:\n\n- Initialize a ``builder::basic::document`` object\n- Store data in the document by using the ``append()`` method\n- Convert the builder document to a ``bsoncxx::document::value`` object\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-bson-append\n    :end-before: end-bson-append\n\n.. _cpp-bson-stream:\n\nStream Builder\n~~~~~~~~~~~~~~\n\n.. important::\n\n   We recommend using the :ref:`basic builder <cpp-bson-basic>` instead \n   of the stream builder. \n   \n   To properly append each new value, a stream builder must keep track\n   of the state of the current document. You cannot reuse the initial\n   stream builder after this state changes. As a result, all intermediate\n   values must be stored in new variables if you build a document\n   across multiple statements. Due to this complexity, use of the stream\n   builder is discouraged.\n\nThe ``builder::stream`` interface is a streaming interface for constructing\ncomplex BSON objects. To create a BSON document by using the stream builder,\ninitialize a ``builder::stream::document`` object. Then, you can use the ``<<``\noperator to stream keys and values into your builder. \n\nThe following code shows how to use the stream builder to perform the\nfollowing actions:\n\n- Build a document\n- Convert the document to a ``bsoncxx::document::value`` object\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-bson-stream\n    :end-before: end-bson-stream\n\nYou can also convert the stream to a ``bsoncxx::document::value`` by using the\n``builder::stream::finalize`` token, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-bson-stream-finalize\n    :end-before: end-bson-stream-finalize\n\n.. _cpp-bson-print:\n\nPrint a BSON Document\n---------------------\n\nBSON is a binary-encoded serialization of JSON documents that is not human-readable.\nTo preview the contents of a BSON document in a human-readable format, you can use the \n``bsoncxx::to_json()`` method to convert your document to extended JSON format.  \n\nExtended JSON format is an extension of standard JSON that includes string representations of BSON data types. \nTo learn more, see the :manual:`MongoDB Extended JSON </reference/mongodb-extended-json>`\nguide in the {+mdb-server+} manual.\n\nThe ``bsoncxx::to_json()`` method accepts a ``bsoncxx::document::view`` of the BSON document\nyou want to convert. This method returns an ``std::string`` object representing your BSON\ndocument in extended JSON format. \n\nThe following code shows how to convert a BSON document to extended JSON format and print the results: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/data-formats/bson.cpp\n      :start-after: start-bson-print\n      :end-before: end-bson-print\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :visible: false\n\n      { \"title\" : \"Screenwriting\", \"department\" : \"English\" }\n\n.. _cpp-bson-addtl-info:\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts mentioned in this guide, see the\nfollowing Server manual entries:\n\n- :manual:`BSON Types </reference/bson-types/>`\n- :manual:`MongoDB Extended JSON (v2) </reference/mongodb-extended-json/>`\n\nTo learn more about performing read operations, see :ref:`cpp-read`.\n\nTo learn more about performing aggregation operations, see the :ref:`cpp-aggregation`\nguide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the types and methods mentioned in this guide, see the following API documentation:\n\n- `bsoncxx::builder::list <{+api+}/classbsoncxx_1_1builder_1_1list.html>`__\n- `bsoncxx::builder::basic::document <{+api+}/classbsoncxx_1_1builder_1_1basic_1_1document.html>`__\n- `bsoncxx::builder::stream::document <{+api+}/classbsoncxx_1_1builder_1_1stream_1_1document.html>`__\n- `bsoncxx::document::value <{+api+}/classbsoncxx_1_1document_1_1value.html>`__\n- `bsoncxx::document::view <{+api+}/classbsoncxx_1_1document_1_1view.html>`__\n- `bsoncxx::to_json() <{+api+}/namespacebsoncxx.html#a066323daaa4ae47a337c7134b81fc08b>`__\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/data-formats/working-with-bson.txt"
  },
  {
    "code": "   :start-after: start-access-database-method\n   :end-before: end-access-database-method\n   :language: cpp\n   :copyable:\n   :dedent:\n\nAlternatively, you can use the ``[]`` operator on a ``mongocxx::client``\nas a shorthand for the ``database()`` function, as shown in the following code:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-access-database-operator\n   :end-before: end-access-database-operator\n   :language: cpp\n   :copyable:\n   :dedent:\n\nAccess a Collection\n-------------------\n\nYou can access a collection by calling the ``collection()`` function on\na ``mongocxx::database`` object and passing the name of the collection as\nan argument.\n\nThe following example accesses a collection named ``\"test_collection\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-access-collection-method\n   :end-before: end-access-collection-method\n   :language: cpp\n   :copyable:\n   :dedent:\n\nAlternatively, you can use the ``[]`` operator on a ``mongocxx::database``\nas a shorthand for the ``collection()`` function, as shown in the following code:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-access-collection-operator\n   :end-before: end-access-collection-operator\n   :language: cpp\n   :copyable:\n   :dedent:\n\n.. tip::\n\n   If the provided collection name does not already exist in the database,\n   MongoDB implicitly creates the collection when you first insert data\n   into it.\n\nCreate a Collection\n-------------------\n\nYou can use the ``create_collection()`` function to explicitly create a collection in a\nMongoDB database.\n\nThe following example creates a collection called ``\"example_collection\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-create-collection\n   :end-before: end-create-collection\n   :language: cpp\n   :copyable:\n   :dedent:\n\nYou can specify collection options, such as maximum size and document\nvalidation rules, by passing them inside a BSON document as the second parameter\nto the ``create_collection()`` function. For a full list of\noptional parameters, see the :manual:`create command </reference/command/create>`\ndocumentation in the {+mdb-server+} manual.\n\nGet a List of Collections\n-------------------------\n\nYou can retrieve a list of collections in a database by calling the\n``list_collections()`` function. The function returns a cursor containing all\ncollections in the database and their associated metadata.\n\nThe following example calls the ``list_collections()`` function and iterates over\nthe cursor to print the results:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/databases-collections/databases-collections.cpp\n      :language: cpp\n      :start-after: start-find-collections\n      :end-before: end-find-collections\n      :dedent:\n\n   .. output::\n      :language: cpponsole\n      :visible: false\n\n      Collection: { \"name\" : \"test_collection\", \"type\" : \"collection\", ...}\n      Collection: { \"name\" : \"example_collection\", \"type\" : \"collection\", ... }\n\nTo query for only the names of the collections in the database, call the\n``list_collection_names()`` function as shown in the following example:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/databases-collections/databases-collections.cpp\n      :language: cpp\n      :start-after: start-find-collection-names\n      :end-before: end-find-collection-names\n      :dedent:\n\n   .. output::\n      :language: console\n      :visible: false\n\n      test_collection\n      example_collection\n\nFor more information about iterating over a cursor, see the :ref:`cpp-cursors`\nguide. \n\nDelete a Collection\n-------------------\n\nYou can delete a collection from the database by using the ``drop()``\nfunction.\n\nThe following example deletes the ``\"test_collection\"`` collection:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-delete-collection\n   :end-before: end-delete-collection\n   :language: cpp\n   :copyable:\n   :dedent:\n\n.. warning:: Dropping a Collection Deletes All Data in the Collection\n\n   Dropping a collection from your database permanently deletes all\n   documents and all indexes within that collection.\n\n   Drop a collection only if the data in it is no longer needed.\n\n.. _cpp-config-read-write:\n\nConfigure Read and Write Operations\n-----------------------------------\n\nYou can control how the driver routes read operations by setting a **read preference**.\nYou can also control options for how the driver waits for acknowledgment of\nread and write operations on a replica set by setting a **read concern** and a\n**write concern**.\n\nBy default, databases inherit these settings from the ``mongocxx::client`` object,\nand collections inherit them from the database. However, you can change these\nsettings by using one of the following functions on your database or collection:\n\n- ``read_preference()``\n- ``read_concern()``\n- ``write_concern()``\n\nTo learn more about read and write settings, see the following guides in the\n{+mdb-server+} manual:\n\n- :manual:`Read Preference </core/read-preference/>`\n- :manual:`Read Concern </reference/read-concern/>`\n- :manual:`Write Concern </reference/write-concern/>`\n\nConfigure Database Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example shows how to configure read settings for your database\nby using the following functions:\n\n- ``read_preference()``: Sets the read preference to ``k_secondary``\n- ``read_concern()``: Sets the read concern to ``k_majority``\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-database-read-settings\n   :end-before: end-database-read-settings\n   :language: cpp\n   :copyable:\n   :dedent:\n\n.. tip::\n\n   To see a description of each read preference and read concern option, see the\n   following API documentation:\n\n   - `Read preference modes <{+api+}/classmongocxx_1_1v__noabi_1_1read__preference.html#a7e9a58e6c82169d2eb569f7993325154>`__\n   - `Read concern levels <{+api+}/classmongocxx_1_1v__noabi_1_1read__concern.html#a795c8037f826a1e64e052997fde61407>`__\n\nConfigure Collection Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example shows how to specify your collection's read and write concern\nby using the following functions:\n\n- ``read_concern()``: Sets the read concern to ``k_local``\n- ``write_concern()``: Sets the write concern to ``k_acknowledged``\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-collection-read-write-settings\n   :end-before: end-collection-read-write-settings\n   :language: cpp\n   :copyable:\n   :dedent:\n\n.. tip::\n\n   To see a description of each read and write concern level, see the\n   following API documentation:\n\n   - `Read concern levels <{+api+}/classmongocxx_1_1v__noabi_1_1read__concern.html#a795c8037f826a1e64e052997fde61407>`__\n   - `Write concern levels <{+api+}/classmongocxx_1_1v__noabi_1_1write__concern.html#a756cc9e4f51467924887b2ceda9c8856>`__\n\nTag Sets\n~~~~~~~~\n\nIn the {+mdb-server+}, you can apply key-value :manual:`tags\n</core/read-preference-tags/>` to replica-set\nmembers according to any criteria you choose. You can then use\nthose tags to target one or more members for a read operation.\n\nBy default, the {+driver-short+} ignores tags\nwhen choosing a member to read from. To instruct the {+driver-short+}\nto prefer certain tags, create a ``mongocxx::read_preference`` object\nand call its ``tags()`` member function. Pass your preferred tags as\nan array argument to ``tags()``.\n\nIn the following code example, the tag set passed to the ``tags()``\nfunction instructs the {+driver-short+} to prefer reads from the\nNew York data center (``\"dc\": \"ny\"``) and to fall back to the San Francisco data\ncenter (``\"dc\": \"sf\"``):\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-tags\n   :end-before: end-tags\n   :language: cpp\n   :copyable:\n   :dedent:\n\nLocal Threshold\n~~~~~~~~~~~~~~~\n\nIf multiple replica-set members match the read preference and tag sets you specify,\nthe {+driver-short+} reads from the nearest replica-set members, chosen according to\ntheir ping time.\n\nBy default, the driver uses only those members whose ping times are within 15 milliseconds\nof the nearest member for queries. To distribute reads between members with\nhigher latencies, include the ``localThresholdMS`` parameter in your connection string URI.\n\nThe following example connects to a MongoDB deployment running on ``localhost:27017``\nand specifies a local threshold of 35 milliseconds:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "   :start-after: start-local-threshold\n   :end-before: end-local-threshold\n   :language: cpp\n   :copyable:\n   :dedent:\n\nIn the preceding example, the {+driver-short+} distributes reads between matching members\nwithin 35 milliseconds of the closest member's ping time.\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the functions discussed in this\nguide, see the following API documentation:\n\n- `database() <{+api+}/classmongocxx_1_1v__noabi_1_1client.html#ae28b50918e732e84ff78beb5748e3364>`__\n- `collection() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#aba36d8296f118306e92168b1b72d04c4>`__\n- `create_collection() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a77bec925146cb2dfd395b0a46d5be3a6>`__\n- `list_collections() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#aacef87f0bc585c536ce0dfae67cfefe8>`__\n- `list_collection_names() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a96f96c0fc00c1fc30c8151577cff935a>`__\n- `drop() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a693cb2671c724f8a01e47339928283cb>`__\n- `read_preference() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#ab9fe9fd6ffe5c3811e9fbb7a7d7fe5bc>`__\n- `read_concern() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a0bac544e0439575b673a7f25c8abc356>`__\n- `write_concern() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a4ae21da062a6bf0870cc98337f09ed7a>`__\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/databases-collections.txt"
  },
  {
    "code": "            :copyable: false\n\n            dyld[54430]: Library not loaded: @rpath/libmongocxx._noabi.dylib\n \n         To resolve this error, use the ``-Wl,-rpath`` linker option to set the ``@rpath``, as shown\n         in the following code: \n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"_id\" : { \"$oid\" : \"573a1399f29313caabceeb20\" },\n         \"plot\" : \"Two imprisoned men bond over a number of years, finding solace\n         and eventual redemption through acts of common decency.\",\n         ...\n         \"title\" : \"The Shawshank Redemption\", \n         ...\n\n      If you encounter an error or see no output, ensure that you specified the\n      proper connection string in the ``quickstart.cpp`` file and that you loaded the\n      sample data.\n\nAfter you complete these steps, you have a working application that\nuses the driver to connect to your MongoDB deployment, runs a query on\nthe sample data, and prints out the result.\n\n.. include:: /includes/get-started/troubleshoot.rst\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "  :caption: /home/user/project1/CMakeLists.txt\n  :start-after: -- sphinx-include-start --\n\nThen, run the following commands to build your project:\n\n",
    "language": "",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/include-link.txt"
  },
  {
    "code": "  :caption: /home/user/project2/CMakeLists.txt\n  :start-after: -- sphinx-include-start --\n\n.. note::\n\n   The preceding example uses the ``bsoncxx_shared`` CMake target without the ``mongo::`` namespace. The namespace\n   is added as part of the CMake module installation, which is not performed\n   in this approach.\n\nThen, run the following commands to build your project:\n\n",
    "language": "",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/include-link.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :copyable:\n    :dedent:\n\nThen, call the ``search_indexes()`` method\non your ``collection`` variable to instantiate a ``mongocxx::search_index_view`` on your collection: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "    :start-after: start-siv\n    :end-before: end-siv\n    :language: cpp\n    :copyable:\n    :dedent:\n\nThe ``mongocxx::search_index_view`` class contains the following member functions that allow you to interact with Atlas Search indexes: \n\n- :ref:`create_one() <cpp-atlas-search-index-create>`: Creates an Atlas Search index with the specified configuration \n- :ref:`create_many() <cpp-atlas-search-index-create-static>`: Creates multiple Atlas Search indexes with the specified configurations\n- :ref:`list() <cpp-atlas-search-index-list>`: Returns a ``mongocxx::cursor`` instance that points to a list of Atlas Search indexes on the collection\n- :ref:`update_one() <cpp-atlas-search-index-update>`: Updates the definition of the specified Atlas Search index\n- :ref:`drop_one() <cpp-atlas-search-index-drop>`: Removes the specified index from the collection \n\n.. note:: Atlas Search Index Management is Asynchronous\n\n   The {+driver-long+} manages Atlas Search indexes asynchronously. The\n   library methods described in the following sections return the server\n   response immediately, but the changes to your Atlas Search indexes take\n   place in the background and might not complete until some time later.\n\nThe following sections provide code examples that demonstrate how to use\neach Atlas Search index management method.\n\n.. _cpp-atlas-search-index-create:\n\nCreate an Atlas Search Index\n----------------------------\n\nTo create a single Atlas Search index on a collection, call the ``create_one()`` method on a ``mongocxx::search_index_view`` instance and pass in a ``mongoxcc::search_index_model`` \ninstance specifying the index that you want to create. \n\nThe ``mongocxx::search_index_model`` constructor requires the following arguments:\n\n- ``name``: String specifying the name for your index\n- ``definition``: Document containing the ``mappings`` field, which specifies how to configure fields in your index\n\n.. tip:: \n\n   For a full list of fields that you can configure in an Atlas Search index, see the :atlas:`Review Atlas Search Index Syntax </atlas-search/index-definitions/>` guide in the Atlas Search documentation.\n\nThe following sections show how to create a single Atlas Search index that uses static or dynamic mappings. \n\n.. _cpp-atlas-search-index-create-static:\n\nCreate an Atlas Search Index with Static Mappings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse static mappings in your Atlas Search index to specify the fields that you want to index and configure index options for individual fields.\n\nTo create a single Atlas Search index that uses static mappings, first create a ``definition`` document containing the ``mappings`` field.\nIn the ``mappings`` field, specify a document containing the following fields and values: \n\n-  ``dynamic``: Set to ``false``. \n- ``fields``: Document specifying the names of the fields that you want to index and their index configurations. To learn more about ``mappings.fields`` \n  options, see the :atlas:`Static Mapping Example </atlas-search/define-field-mappings/#static-mapping-example>` in the Atlas Search documentation.\n\nThen, pass a ``name`` string and the ``definition`` document into a ``mongocxx::search_index_model`` constructor to instantiate a ``mongocxx::search_index_model``. \nPass this ``mongocxx::search_index_model`` instance into the ``create_one()`` method to add the specified Atlas Search index to your collection.\n\nThe following example shows how to create a single Atlas Search index that uses static mappings: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-create-static-search-index\n      :end-before: end-create-static-search-index\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n      \n      New index name: myStaticIndex\n\n.. important:: \n\n   You can't index fields that contain the dollar (``$``) sign at the start of the field name.\n\nTo learn more about when to use static mappings, see the :atlas:`Static Mappings </atlas-search/define-field-mappings/#static-mappings>` section in the Atlas Search documentation.\n\n.. _cpp-atlas-search-index-create-dynamic:\n\nCreate an Atlas Search Index with Dynamic Mappings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse dynamic mappings in your Atlas Search index to automatically index all fields of supported types.\nFor a list of supported BSON data types, see the :atlas:`Data Types </atlas-search/define-field-mappings/#data-types>` section in the Atlas Search documentation. \n\nTo create a single Atlas Search index that uses dynamic mappings, first create a ``definition`` document containing the ``mappings`` field. \nIn the ``mappings`` field, specify a document containing the ``dynamic`` field with its value set to ``true``. \nThen, pass a ``name`` string and the ``definition`` document into a ``mongocxx::search_index_model`` constructor to instantiate a ``mongocxx::search_index_model``. \nPass this ``mongocxx::search_index_model`` instance into the ``create_one()`` method to add the specified Atlas Search index to your collection.\n\nThe following example shows how to to create a single Atlas Search index that uses dynamic mappings:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-create-dynamic-search-index\n      :end-before: end-create-dynamic-search-index\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n      \n      New index name: myDynamicIndex\n\nTo learn more about when to use dynamic mappings, see the :atlas:`Dynamic Mappings </atlas-search/define-field-mappings/#dynamic-mappings>` section in the Atlas Search documentation.\n\n.. _cpp-atlas-search-index-create-multiple:\n\nCreate Multiple Atlas Search Indexes\n------------------------------------\n\nTo create multiple Atlas Search indexes, call the ``create_many()`` method on a ``mongocxx::search_index_view`` instance\nand pass in a vector of ``mongocxx::search_index_model`` instances specifying the Atlas Search indexes that you want to create. \n\nThe following example shows how to create multiple Atlas Search indexes:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-create-multiple-search-indexes\n      :end-before: end-create-multiple-search-indexes\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n      \n      New index names:\n      myDynamicIndex\n      myStaticIndex\n\n.. _cpp-atlas-search-index-list:\n\nList Atlas Search Indexes\n-------------------------\n\nTo list the Atlas Search indexes on a collection, call the ``list()`` method on a ``mongocxx::search_index_view`` instance. This method returns a ``mongocxx::cursor`` instance that you can\nuse to iterate over the collection's Atlas Search indexes. \n\nThe following example prints a list of Atlas Search indexes by iterating over a ``cursor::iterator`` instance \nthat points to the indexes from :ref:`Create Multiple Atlas Search Indexes <cpp-atlas-search-index-create-multiple>`: \n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-list-search-indexes\n      :end-before: end-list-search-indexes\n      :language: cpp\n      :dedent:\n\n   .. output:: \n      :language: cli\n      :visible: false\n\n      { \"id\" : ..., \"name\" : \"myDynamicIndex\", \"type\" : \"search\", ...,\n        \"latestDefinition\" : { \"mappings\" : { \"dynamic\" : true } }, ...} \n\n      { \"id\" : ..., \"name\" : \"myStaticIndex\", \"type\" : \"search\", ...,\n        \"latestDefinition\" : { \"mappings\" : { \"dynamic\" : false, \"fields\" : { \"title\" : { \"type\" : \"string\", \"analyzer\" : \"lucene.standard\" }, \"year\" : { \"type\" : \"number\" } } } }, ...} \n\nAlternatively, you can list a specific Atlas Search index by passing an index name into the ``list()`` method. \nThis returns a ``mongocxx::cursor`` instance that points to a result set containing only the specified index. \n\nThe following example uses the ``list()`` method to print an index with the name ``myDynamicIndex``:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-list-search-index\n      :end-before: end-list-search-index\n      :language: cpp\n      :dedent:\n\n   .. output:: \n      :language: cli\n      :visible: false\n      \n      { \"id\" : ..., \"name\" : \"myDynamicIndex\", \"type\" : \"search\", ...,\n        \"latestDefinition\" : { \"mappings\" : { \"dynamic\" : true } }, ...} \n\n.. _cpp-atlas-search-index-update:\n\nUpdate an Atlas Search Index\n----------------------------\n\nTo update an Atlas Search index, call the ``update_one()`` method on a ``mongocxx::search_index_view`` instance and pass in the name of the index that\nyou want to update and the definition to update the index to.\n\nThe following example shows how to update the Atlas Search index from :ref:`Create a Search Index with Static Mappings <cpp-atlas-search-index-create-static>` to use a simple \nanalyzer on the ``title`` field: \n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-update-search-index\n   :end-before: end-update-search-index\n\n.. _cpp-atlas-search-index-drop:\n\nRemove an Atlas Search Index\n----------------------------\n\nTo remove an Atlas Search index from a collection, call the ``drop_one()`` method on a ``mongocxx::search_index_view`` instance and pass in \nthe name of the index that you want to remove. \n\nThe following example shows how to remove an Atlas Search index named ``myDynamicIndex``: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-remove-search-index\n   :end-before: end-remove-search-index\n\nAdditional Information\n----------------------\n\nTo view runnable examples that demonstrate how to manage indexes, see :ref:`Optimize Queries with Indexes.\n<cpp-indexes>`\n\nFor more detailed guides about how to use the Atlas Search feature and define Atlas Search indexes,\nsee the following Atlas Search documentation pages: \n\n- :atlas:`Atlas Search Overview </atlas-search/atlas-search-overview/>`\n- :atlas:`Get Started with Atlas Search </atlas-search/tutorial/>`\n- :atlas:`Create and Run Atlas Search Queries </atlas-search/searching/>`\n- :atlas:`Create an Atlas Search Index </atlas-search/create-index/>` \n- :atlas:`Define Field Mappings </atlas-search/define-field-mappings/>`\n- :atlas:`Review Atlas Search Index Syntax </atlas-search/index-definitions/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods discussed in this guide, see the\nfollowing API documentation:\n\n- `search_indexes() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a1ff18a94afc676f1d85f4aa9570e9c0f>`__\n- `create_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a980873272536347345ef68cc2d5d7408>`__\n- `create_many() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#aad93b8f9fe525bf7c133d4408f5d1e5f>`__\n- `list() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a54caee8c3c16ad099d823270086dceef>`__\n- `drop_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a184088ce06247b26c44c3c0d2ee8b99b>`__\n- `update_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#aec3f5a861d36d573c8489d8e488597c8>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :copyable:\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nCreate Compound Index\n---------------------\n\nThe following example creates an ascending compound index on the ``title`` and ``year`` fields:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/compound-index.txt"
  },
  {
    "code": "   :start-after: start-index-compound\n   :end-before: end-index-compound\n   :language: cpp\n   :copyable:\n   :dedent:\n\nThe following query is covered by the index\ncreated in the preceding code example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/compound-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-index-compound-query\n      :end-before: end-index-compound-query\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n\n      { \"_id\" :..., \"plot\" : \"Peter Pan enters the nursery of the Darling children...\", \n      ..., \"year\" : 1924, \"imdb\" : ..., \"type\", \"movie\",...}\n      \nAdditional Information\n----------------------\n\nTo view runnable examples that demonstrate how to manage indexes, see\n:ref:`cpp-indexes`.\n\nTo learn more about indexes, see the following resources in the {+mdb-server+} manual: \n\n- :manual:`Indexes </indexes>` \n- :manual:`Compound Indexes </core/index-compound>` \n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods discussed in this guide, see the\nfollowing API documentation:\n\n- `create_index() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a39cf05fd8da3a7993929c8bfd3de9b46>`__\n- `find_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a85f4d18d0d3bb3426109a445196ac587>`__\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/compound-index.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nCreate Single-Field Index\n-------------------------\n\nThe following example uses the ``create_index()`` method to \ncreate an ascending single field index on the ``title`` field:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/single-field-index.txt"
  },
  {
    "code": "   :start-after: start-index-single\n   :end-before: end-index-single\n   :language: cpp\n   :copyable:\n   :dedent:\n\n\nThe following query is covered by the index\ncreated in the preceding code example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/single-field-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.cpp\n      :start-after: start-index-single-query\n      :end-before: end-index-single-query\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n      \n      { \"_id\" :..., \"plot\" : \"Peter Pan enters the nursery of the Darling children...\",\n      \"genres\" : [ \"Adventure\", \"Fantasy\", \"Family\" ], \"runtime\" : 105,...}\n\nAdditional Information\n----------------------\n\nTo view runnable examples that demonstrate how to manage indexes, see\n:ref:`cpp-indexes`.\n\nTo learn more about indexes, see the following resources in the {+mdb-server+} manual: \n\n- :manual:`Indexes </indexes>` \n- :manual:`Single Field Indexes </core/index-single>` \n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods discussed in this guide, see the\nfollowing API documentation:\n\n- `create_index() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a39cf05fd8da3a7993929c8bfd3de9b46>`__\n- `find_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a85f4d18d0d3bb3426109a445196ac587>`__\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/single-field-index.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nCreate an Index\n---------------\n\nMongoDB supports several index types to help query your data.\nThe following pages describe different index types and provide sample\ncode to create each type of index:\n\n- :ref:`cpp-single-field-index`\n- :ref:`cpp-compound-index`\n- :ref:`cpp-atlas-search-index`\n\n.. _cpp-indexes-remove:\n\nRemove an Index\n---------------\n\nYou can remove any unused index except the default unique index on the\n``_id`` field.\n\nThe following sections provide examples that show how to remove one or more indexes from a collection.\n\nRemove a Single Index\n~~~~~~~~~~~~~~~~~~~~~\n\nTo remove a single index from a collection, call the ``drop_one()`` method and pass in \nthe index name or an instance of the index you want to remove.  \n\nThe following example removes an index with the name ``\"title_1\"`` from the ``movies``\ncollection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/work-with-indexes.txt"
  },
  {
    "code": "   :language: cpp\n   :start-after: start-remove-index\n   :end-before: end-remove-index\n   :dedent:\n\n.. note::\n\n   You cannot remove a single field from a compound text index. You must\n   drop the entire index and create a new one to update the indexed\n   fields.\n\nRemove All Indexes\n~~~~~~~~~~~~~~~~~~\n\nStarting with MongoDB 4.2, you can drop all indexes by calling the\n``drop_all()`` method on the index view in your collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/work-with-indexes.txt"
  },
  {
    "code": "   :language: cpp\n   :start-after: start-remove-all-indexes\n   :end-before: end-remove-all-indexes\n   :dedent:\n\nFor earlier versions of MongoDB, pass ``\"*\"`` as a parameter to your call to\n``drop_one()`` on the index view in your collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/work-with-indexes.txt"
  },
  {
    "code": "   :language: cpp\n   :start-after: start-remove-all-wildcard\n   :end-before: end-remove-all-wildcard\n   :dedent:\n\nAdditional Information\n----------------------\n\nTo learn more about indexes in MongoDB, see the :manual:`Indexes </indexes>`\nguide in the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods or types discussed in this\nguide, see the following API documentation:\n\n- `create_index() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a39cf05fd8da3a7993929c8bfd3de9b46>`__\n- `drop_one() <{+api+}/classmongocxx_1_1v__noabi_1_1index__view.html#a1779a23bd9565cf295cc2479b6e5981a>`__\n- `drop_all() <{+api+}/classmongocxx_1_1v__noabi_1_1index__view.html#a2fc4f2778ce800076368f026fd2649d8>`__\n- `indexes() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#aac9843f8a560d39b85ef24a651d66e3b>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes/work-with-indexes.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable:\n   :linenos:\n   :emphasize-lines: 23-25\n\nSingle-Field Index\n------------------\n\nThe following code shows how to create an ascending single-field index:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/usage-examples/index-code-examples.cpp\n      :start-after: start-single-field\n      :end-before: end-single-field\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n   \n      Index created: { \"name\" : \"fieldName_1\" }\n\nTo learn more about single-field indexes, see the\n:ref:`cpp-single-field-index` guide.\n\nCompound Index\n------------------\n\nThe following code shows how to create a descending compound index:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/usage-examples/index-code-examples.cpp\n      :start-after: start-compound-field\n      :end-before: end-compound-field\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n   \n      Index created: { \"name\" : \"fieldName1_-1_fieldName2_-1\" }\n\nTo learn more about compound indexes, see the\n:ref:`cpp-compound-index` guide.\n\nRemove an Index\n---------------\n\nThe following code shows how to remove an index:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/usage-examples/index-code-examples.cpp\n      :start-after: start-remove-index\n      :end-before: end-remove-index\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n\n      Index dropped.\n\nTo learn more about removing indexes, see the\n:ref:`cpp-indexes-remove` section of the Work With Indexes guide.\n\nRemove All Indexes\n------------------\n\nThe following code shows how to remove all indexes in a collection:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/usage-examples/index-code-examples.cpp\n      :start-after: start-remove-all-indexes\n      :end-before: end-remove-all-indexes\n      :language: cpp\n      :dedent:\n   \n   .. output::\n      :language: cli\n      :visible: false\n\n      All indexes removed. \n\nTo learn more about removing indexes, see the\n:ref:`cpp-indexes-remove` section of the Work With Indexes guide.\n\nAtlas Search Index Management\n-----------------------------\n\nThe following sections contain code examples that describe how to manage Atlas Search indexes. \nTo learn more about Atlas Search indexes, see the :ref:`Atlas Search Indexes <cpp-atlas-search-index>` guide. \n\nCreate Search Index\n~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to create an Atlas Search index that dynamically indexes all supported fields in the specified collection: \n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/usage-examples/index-code-examples.cpp\n      :start-after: start-create-search-index\n      :end-before: end-create-search-index\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n      \n      New index name: searchIndexName\n\nList Search Indexes\n~~~~~~~~~~~~~~~~~~~\n\nThe following code prints a list of Atlas Search indexes in the specified collection: \n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-list-search-indexes\n   :end-before: end-list-search-indexes\n   :language: cpp\n   :copyable:\n   :dedent:\n\nUpdate Search Indexes\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following code updates an existing Atlas Search index with the specified new index definition: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-update-search-index\n   :end-before: end-update-search-index\n   :language: cpp\n   :copyable:\n   :dedent:\n\nDelete Search Indexes \n~~~~~~~~~~~~~~~~~~~~~\n\nThe following code deletes an Atlas Search index with the specified name: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-remove-search-index\n   :end-before: end-remove-search-index\n   :language: cpp\n   :copyable:\n   :dedent:\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/indexes.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nOpen a Change Stream\n--------------------\n\nTo open a change stream, call the ``watch()`` method. The instance on which you\ncall the ``watch()`` method on determines the scope of events that the change\nstream listens for. You can call the ``watch()`` method on the following\nclasses:\n\n- ``mongocxx::client``: Monitor all changes in the MongoDB deployment\n- ``mongocxx::database``: Monitor changes in all collections in the database\n- ``mongocxx::collection``: Monitor changes in the collection\n\nThe following example opens a change stream on the ``restaurants`` collection\nand outputs changes as they occur:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-open-change-stream\n   :end-before: end-open-change-stream\n   :language: cpp\n   :dedent:\n\nTo begin watching for changes, run the preceding code. Then, in a separate\napplication or shell, modify the ``restaurants`` collection. The following\nexample updates a document that has a ``name`` field value of ``Blarney Castle``:\n\n.. _cpp-change-stream-update:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-update-for-change-stream\n   :end-before: end-update-for-change-stream\n   :language: cpp\n   :dedent:\n\nWhen you update the collection, the change stream application prints the change\nas it occurs. The printed change event resembles the following output:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"_data\" : \"...\" }, \"operationType\" : \"update\", \"clusterTime\" : \n   { \"$timestamp\" : { ... }, \"wallTime\" : { \"$date\" : ... }, \"ns\" : \n   { \"db\" : \"sample_restaurants\", \"coll\" : \"restaurants\" }, \"documentKey\" : \n   { \"_id\" : { \"$oid\" : \"...\" } }, \"updateDescription\" : { \"updatedFields\" :\n   { \"cuisine\" : \"Irish\" }, \"removedFields\" : [  ], \"truncatedArrays\" : [  ] } }\n\nModify the Change Stream Output\n-------------------------------\n\nYou can pass a ``mongocxx::pipeline`` instance as an argument to the ``watch()`` method\nto modify the change stream output. The following list includes some of the ``mongocxx::pipeline``\nfields you can set by calling their corresponding setter methods:\n\n- ``add_fields``: Adds new fields to documents\n- ``match``: Filters the documents\n- ``project``: Projects a subset of the document fields\n- ``redact``: Restricts the contents of the documents\n- ``group``: Groups documents by a specified expression\n- ``merge``: Outputs the results to a collection\n\n.. tip::\n\n   For a full list of ``mongocxx::pipeline`` fields, see the `mongocxx::pipeline\n   <{+api+}/classmongocxx_1_1v__noabi_1_1pipeline.html>`__ API documentation.\n\nThe following example sets the ``match`` field of a ``mongocxx::pipeline`` instance,\nthen passes the pipeline to the ``watch()`` method. This instructs the ``watch()`` method\nto output only update operations:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-change-stream-pipeline\n   :end-before: end-change-stream-pipeline\n   :language: cpp\n   :dedent:\n\nModify ``watch()`` Behavior\n---------------------------\n\nYou can modify the behavior of the ``watch()`` method by passing an instance\nof the ``mongocxx::options::change_stream`` class as a parameter. The following table\ndescribes the fields you can set in a ``mongocxx::options::change_stream`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field\n     - Description\n\n   * - ``full_document``\n     - | Specifies whether to show the full document after the change, rather\n         than showing only the changes made to the document. To learn more about\n         this option, see :ref:`cpp-change-stream-pre-post-image`.\n\n   * - ``full_document_before_change``\n     - | Specifies whether to show the full document as it was before the change, rather\n         than showing only the changes made to the document. To learn more about\n         this option, see :ref:`cpp-change-stream-pre-post-image`.\n    \n   * - ``resume_after``\n     - | Instructs ``watch()`` to resume returning changes after the\n         operation specified in the resume token.\n       | Each change stream event document includes a resume token as the ``_id``\n         field. Pass the entire ``_id`` field of the change event document that\n         represents the operation you want to resume after.\n       | ``resume_after`` is mutually exclusive with ``start_after`` and ``start_at_operation_time``.\n\n   * - ``start_after``\n     - | Instructs ``watch()`` to start a new change stream after the\n         operation specified in the resume token. This field allows notifications to\n         resume after an invalidate event.\n       | Each change stream event document includes a resume token as the ``_id``\n         field. Pass the entire ``_id`` field of the change event document that\n         represents the operation you want to resume after.\n       | ``start_after`` is mutually exclusive with ``resume_after`` and ``start_at_operation_time``.\n       \n   * - ``start_at_operation_time``\n     - | Instructs ``watch()`` to return only events that occur after the\n         specified timestamp.\n       | ``start_at_operation_time`` is mutually exclusive with ``resume_after`` and ``start_after``.\n\n   * - ``max_await_time_ms``\n     - | Sets the maximum amount of time, in milliseconds, the server waits for new\n         data changes to report to the change stream cursor before returning an\n         empty batch. Defaults to 1000 milliseconds.\n\n   * - ``batch_size``\n     - | Sets the maximum number of change events to return in each batch of the\n         response from the MongoDB cluster.\n\n   * - ``collation``\n     - | Sets the collation to use for the change stream cursor.\n\n   * - ``comment``\n     - | Attaches a comment to the operation.\n\n.. _cpp-change-stream-pre-post-image:\n\nInclude Pre-Images and Post-Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. important::\n\n   You can enable pre-images and post-images on collections only if your\n   deployment uses MongoDB v6.0 or later.\n\nBy default, when you perform an operation on a collection, the\ncorresponding change event includes only the delta of the fields\nmodified by that operation. To see the full document before or after a\nchange, specify the ``full_document_before_change`` or the ``full_document``\nfields of a ``mongocxx::options::change_stream`` instance.\n\nThe **pre-image** is the full version of a document *before* a change. To include the\npre-image in the change stream event, set the ``full_document_before_change``\nfield to one of the following strings:\n\n- ``\"whenAvailable\"``: The change event includes a pre-image of the\n  modified document for change events only if the pre-image is available.\n- ``\"required\"``: The change event includes a pre-image of the\n  modified document for change events. If the pre-image is not available, the\n  driver raises an error.\n\nThe **post-image** is the full version of a document *after* a change. To include the\npost-image in the change stream event, set the ``full_document`` field to\none of the following strings:\n\n- ``\"updateLookup\"``: The change event includes a copy of the entire changed\n  document from some time after the change.\n- ``\"whenAvailable\"``: The change event includes a post-image of the\n  modified document for change events only if the post-image is available.\n- ``\"required\"``: The change event includes a post-image of the\n  modified document for change events. If the post-image is not available, the\n  driver raises an error.\n\nThe following example calls the ``watch()`` method on a collection and includes the post-image\nof updated documents by setting the ``full_document`` field of a ``mongocxx::options::change_stream``\ninstance:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-change-stream-post-image\n   :end-before: end-change-stream-post-image\n   :language: cpp\n   :dedent:\n\nWith the change stream application running, updating a document in the\n``restaurants`` collection by using the :ref:`preceding update example\n<cpp-change-stream-update>` prints a change event resembling the following\ncode:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3,4,5,6\n\n   { \"_id\" : { \"_data\" : \"...\" }, \"operationType\" : \"update\", \"clusterTime\" :\n   { \"$timestamp\" : { ... } }, \"wallTime\" : { \"$date\" : ... },\n   \"fullDocument\" : { \"_id\" : { \"$oid\" : \"...\" }, \"address\" : { \"building\" : \"202-24\",\n   \"coord\" : [ -73.925044200000002093, 40.559546199999999772 ], \"street\" :\n   \"Rockaway Point Boulevard\", \"zipcode\" : \"11697\" }, \"borough\" : \"Queens\", \"cuisine\" :\n   \"Irish\", \"grades\" : [ ... ], \"name\" : \"Blarney Castle\", \"restaurant_id\" : \"40366356\" },\n   \"ns\" : { \"db\" : \"sample_restaurants\", \"coll\" : \"restaurants\" }, \"documentKey\" :\n   { \"_id\" : { \"$oid\" : \"...\" } }, \"updateDescription\" : { \"updatedFields\" :\n   { \"cuisine\" : \"Irish\" }, \"removedFields\" : [  ], \"truncatedArrays\" : [  ] } }\n\n.. tip::\n\n   To learn more about pre-images and post-images, see \n   :manual:`Change Streams with Document Pre- and Post-Images </changeStreams#change-streams-with-document-pre--and-post-images>` \n   in the {+mdb-server+} manual.\n\nAdditional Information\n----------------------\n\nTo learn more about change streams, see :manual:`Change Streams\n</changeStreams>` in the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `watch() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a1618a354ef5a84299e3680e02636e64e>`__\n- `update_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#ab7dc140185de1492c52187b19e83d736>`__\n- `mongocxx::pipeline <{+api+}/classmongocxx_1_1v__noabi_1_1pipeline.html>`__\n- `mongocxx::options::change_stream <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1change__stream.html>`__\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/change-streams.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\n.. _cpp-accurate-count:\n\nRetrieve an Accurate Count\n--------------------------\n\nUse the ``count_documents()`` method to count the number of documents that are in a\ncollection. To count the number of documents that match a specific search\ncritera, pass a query filter document to the ``count_documents()`` method.\n\nTo learn more about specifying a query, see the :ref:`cpp-specify-query` guide.\n\nCount All Documents\n~~~~~~~~~~~~~~~~~~~\n\nTo return a count of all documents in the collection, pass an empty filter document to\nthe ``count_documents()`` method, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/count.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\n.. _cpp-cursors-iterate:\n\nRetrieve All Cursor Documents\n-----------------------------\n\nTo iterate over the contents of a ``mongocxx::cursor`` instance, use a ``for`` loop.\n\nThe following example uses the ``find()`` method to retrieve all documents that have a\n``name`` value of ``\"Dunkin' Donuts\"``. It then prints each document from the cursor returned\nby the ``find()`` method:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/cursor.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/cursor.cpp\n      :start-after: start-cursor-all\n      :end-before: end-cursor-all\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : { \"$oid\" : \"...\" }, ... \"name\" : \"Dunkin' Donuts\", \"restaurant_id\" : \"40379573\" }\n      { \"_id\" : { \"$oid\" : \"...\" }, ... \"name\" : \"Dunkin' Donuts\", \"restaurant_id\" : \"40363098\" }\n      { \"_id\" : { \"$oid\" : \"...\" }, ... \"name\" : \"Dunkin' Donuts\", \"restaurant_id\" : \"40395071\" }\n      ...\n\nRetrieve Documents Individually\n-------------------------------\n\nTo retrieve an individual document from a cursor, call the ``begin()`` method on\na ``mongocxx::cursor`` instance. This method returns an instance of ``mongocxx::cursor::iterator``\nthat points to the first document in the cursor.\n\nThe following example finds all documents in a collection that have a ``name`` value\nof ``\"Dunkin' Donuts\"``. It then prints the first document from the cursor by calling the\n``begin()`` method:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/cursor.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/cursor.cpp\n      :start-after: start-cursor-first\n      :end-before: end-cursor-first\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : { \"$oid\" : \"...\" }, ... \"name\" : \"Dunkin' Donuts\", \"restaurant_id\" : \"40379573\" }\n      \nTailable Cursors\n----------------\n\nWhen querying on a :manual:`capped collection </core/capped-collections/>`, you\ncan use a **tailable cursor** that remains open after the client exhausts the\nresults in a cursor. To create a tailable cursor, instantiate a ``mongocxx::options::find``\nobject and set its ``cursor_type`` field to ``mongocxx::cursor::type::k_tailable``. Then,\npass your ``mongocxx::options::find`` instance as an argument to the ``find()`` method.\n\nFor example, you can create a capped collection called ``vegetables`` that stores\ndocuments representing vegetables, as shown in the following code:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/cursor.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-capped-coll\n    :end-before: end-capped-coll\n\nThe following code uses a tailable cursor to retrieve all documents in the ``vegetables``\ncollection. After the cursor is exhausted, it remains open until retrieving three documents:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/cursor.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/cursor.cpp\n      :start-after: start-tailable\n      :end-before: end-tailable\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : { \"$oid\" : \"...\" }, \"name\" : \"cauliflower\" }\n      { \"_id\" : { \"$oid\" : \"...\" }, \"name\" : \"zucchini\" }\n\nIf you insert another document into the ``vegetables`` collection, the preceding code prints\nthe new document and closes the ``while`` loop.\n\nTo learn more about tailable cursors, see the :manual:`Tailable Cursors guide\n</core/tailable-cursors/>` in the {+mdb-server+} manual.\n\nAdditional Information\n----------------------\n\nTo learn more about read operations, see the :ref:`cpp-retrieve` guide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `mongocxx::cursor <{+api+}/classmongocxx_1_1v__noabi_1_1cursor>`__\n- `find() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#ada76e1596a65c7615e7af7d34a8140d6>`__\n- `begin() <{+api+}/classmongocxx_1_1v__noabi_1_1cursor.html#a85122947e05eb53535c6b62a9c2a1a35>`__\n- `mongocxx::options::find <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html>`__\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/cursor.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\n``distinct()`` Method\n---------------------\n\nTo retrieve the distinct values for a specified field, call the ``distinct()``\nmethod and pass in the name of the field you want to find distinct values for.\n\nRetrieve Distinct Values Across a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the distinct values of the ``borough`` field in\nthe ``restaurants`` collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/distinct.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nProjection Types\n----------------\n\nYou can use a projection to specify which fields to include in a return\ndocument, or to specify which fields to exclude. You cannot combine inclusion and\nexclusion statements in a single projection, unless you are excluding the\n``_id`` field.\n\nSpecify Fields to Include\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo specify the fields to include in the result, create an instance of the \n``mongocxx::options::find`` class and set its ``projection`` field. To set\nthis field, use the following syntax:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/project.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\n.. _cpp-retrieve-find:\n\nFind Documents\n--------------\n\nThe {+driver-short+} includes two methods for retrieving documents from a collection:\n``find_one()`` and ``find()``.\nThese methods take a **query filter** and return one or more matching documents.\nA query filter is an object that specifies the documents you want to retrieve in\nyour query. \n\n.. tip::\n\n   To learn more about query filters, see :ref:`cpp-specify-query`.\n\n.. _cpp-retrieve-find-one:\n\nFind One Document\n~~~~~~~~~~~~~~~~~\n\nTo find a single document in a collection, call the ``find_one()`` method and pass a query\nfilter that specifies the criteria of the document you want to find.\n\nThe ``find_one()`` method returns an instance of ``std::optional< bsoncxx::document::value >``.\nIf the query filter matches a document, the ``optional`` object contains a value of type\n``bsoncxx::document::value``. If the query filter does not match any documents, the ``optional``\nobject contains no value.\n\nIf the query filter matches more than one document, the ``find_one()`` method returns the *first*\nmatching document from the retrieved results.\n\n.. tip::\n   \n   The ``find_one()`` method is useful when you know there's only one matching document\n   or if you're only interested in the first match.  \n\nThe following example uses the ``find_one()`` method to find the first document in which\nthe ``name`` field has the value ``\"LinkedIn\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/retrieve.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-find-many\n    :end-before: end-find-many\n\nThe ``find()`` method returns an instance of ``mongocxx::cursor``, which you can\niterate over to see the matching documents. A cursor is a mechanism that allows an\napplication to iterate over database results while holding only a subset of them in\nmemory at a given time. Cursors are useful when your ``find()`` method returns a large\namount of documents.\n\nYou can iterate over the documents in a cursor by using a range-based ``for`` loop, as shown in\nthe following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/retrieve.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-modify\n    :end-before: end-modify\n\nFor a full list of ``mongocxx::options::find`` object fields, see the\n`API documentation <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html>`__.\n\n.. _cpp-retrieve-additional-information:\n\nAdditional Information\n----------------------\n\nTo learn more about query filters, see :ref:`cpp-specify-query`.\n\nFor runnable code examples of retrieving documents with the {+driver-short+},\nsee :ref:`cpp-read`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `find() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#ada76e1596a65c7615e7af7d34a8140d6>`__\n- `find_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a85f4d18d0d3bb3426109a445196ac587>`__\n- `limit() <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html#aa8245eed102202a625dab67047903738>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/retrieve.txt"
  },
  {
    "code": "   :start-after: start-setup\n   :end-before: end-setup\n   :language: cpp\n   :dedent:\n   :copyable:\n\n.. include:: /includes/assumes-instance.rst\n\nExact Match\n-----------\n\nLiteral value queries return documents that have an exact match to your query filter.\n\nThe following example specifies a query filter as a parameter to the ``find()``\nmethod. The code returns all documents in which the value of the ``color`` field\nis ``\"yellow\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: \n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-exact\n      :end-before: end-find-exact\n      :language: cpp\n      :dedent:\n\n   .. output::\n      \n      { \"_id\" : 2, \"name\" : \"bananas\", \"qty\" : 7, \"rating\" : 4, \"color\" : \"yellow\", \"type\" : [ \"cavendish\" ] }\n      { \"_id\" : 4, \"name\" : \"pineapple\", \"qty\" : 3, \"rating\" : 5, \"color\" : \"yellow\" }\n\n.. tip:: Find All Documents\n\n   To find all documents in a collection, call the ``find()`` method and pass it an\n   empty query filter. The following example finds all documents in a\n   collection:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "      :start-after: start-find-all\n      :end-before: end-find-all\n      :language: cpp\n      :dedent:\n      :copyable:\n\nComparison Operators\n--------------------\n\nComparison operators evaluate a document field value against a specified value\nin your query filter. The following list defines common comparison operators:\n\n- ``$gt``: Greater than\n- ``$lte``: Less than or Equal\n- ``$ne``: Not equal\n\nTo view a full list of comparison operators, see the :manual:`Comparison Query Operators\n</reference/operator/query-comparison/>` guide in the {+mdb-server+} manual.\n\nThe following example specifies a comparison operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents that have a\n``rating`` field value greater than ``2``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: \n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-comparison\n      :end-before: end-find-comparison\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : 1, \"name\" : \"apples\", \"qty\" : 5, \"rating\" : 3, \"color\" : \"red\", \"type\" : [ \"fuji\", \"honeycrisp\" ] }\n      { \"_id\" : 2, \"name\" : \"bananas\", \"qty\" : 7, \"rating\" : 4, \"color\" : \"yellow\", \"type\" : [ \"cavendish\" ] }\n      { \"_id\" : 4, \"name\" : \"pineapples\", \"qty\" : 3, \"rating\" : 5, \"color\" : \"yellow\" }\n\nLogical Operators\n-----------------\n\nLogical operators match documents by using logic applied to the results of two or\nmore sets of expressions. The following list describes each logical operator: \n\n- ``$and``: Returns all documents that match the conditions of *all* clauses\n- ``$or``: Returns all documents that match the conditions of *one* clause\n- ``$nor``: Returns all documents that *do not* match the conditions of any clause\n- ``$not``: Returns all documents that *do not* match the expression\n\nTo learn more about logical operators, see the :manual:`Logical Query Operators\n</reference/operator/query-logical/>` guide in the {+mdb-server+} manual.\n\nThe following example specifies a logical operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents in which the\n``qty`` field value is greater than ``5`` **or** the ``color`` field value is\n``\"yellow\"``:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-logical\n      :end-before: end-find-logical\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : 2, \"name\" : \"bananas\", \"qty\" : 7, \"rating\" : 4, \"color\" : \"yellow\", \"type\" : [ \"cavendish\" ] }\n      { \"_id\" : 3, \"name\" : \"oranges\", \"qty\" : 6, \"rating\" : 2, \"type\" : [ \"naval\", \"mandarin\" ] }\n      { \"_id\" : 4, \"name\" : \"pineapples\", \"qty\" : 3, \"rating\" : 5, \"color\" : \"yellow\" }\n\nArray Operators\n---------------\n\nArray operators match documents based on the value or quantity of elements in an\narray field. The following list describes the available array operators:\n\n- ``$all``: Returns documents with arrays that contain all elements in the query\n- ``$elemMatch``: Returns documents if an element in their array field matches all conditions in the query\n- ``$size``: Returns all documents with arrays of a specified size\n\nTo learn more about array operators, see the :manual:`Array Query Operators\n</reference/operator/query-array/>` guide in the {+mdb-server+} manual.\n\nThe following example specifies an array operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents in which the\n``type`` array field contains ``2`` elements:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-array\n      :end-before: end-find-array\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : 1, \"name\" : \"apples\", \"qty\" : 5, \"rating\" : 3, \"color\" : \"red\", \"type\" : [ \"fuji\", \"honeycrisp\" ] }\n      { \"_id\" : 3, \"name\" : \"oranges\", \"qty\" : 6, \"rating\" : 2, \"type\" : [ \"naval\", \"mandarin\" ] }\n\nElement Operators\n-----------------\n\nElement operators query data based on the presence or type of a field.\n\nTo learn more about element operators, see the :manual:`Element Query Operators\n</reference/operator/query-element/>` guide in the {+mdb-server+} manual.\n\nThe following example specifies an element operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents that have a\n``color`` field:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-element\n      :end-before: end-find-element\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : 1, \"name\" : \"apples\", \"qty\" : 5, \"rating\" : 3, \"color\" : \"red\", \"type\" : [ \"fuji\", \"honeycrisp\" ] }\n      { \"_id\" : 2, \"name\" : \"bananas\", \"qty\" : 7, \"rating\" : 4, \"color\" : \"yellow\", \"type\" : [ \"cavendish\" ] }\n      { \"_id\" : 4, \"name\" : \"pineapples\", \"qty\" : 3, \"rating\" : 5, \"color\" : \"yellow\" }\n\nEvaluation Operators\n--------------------\n\nEvaluation operators return data based on evaluations of either individual\nfields or the entire collection's documents.\n\nThe following list describes common evaluation operators:\n\n- ``$text``: Performs a text search on the documents\n- ``$regex``: Returns documents that match a specified regular expression\n- ``$mod``: Performs a modulo operation on the value of a field and\n  returns documents where the remainder is a specified value\n\nTo view a full list of evaluation operators, see the :manual:`Evaluation Query Operators\n</reference/operator/query-evaluation/>` guide in the {+mdb-server+} manual.\n\nThe following example specifies an evaluation operator in a query filter as a\nparameter to the ``find()`` method. The code uses a regular expression to return\nall documents in which the ``name`` field value has at least two consecutive\n``\"p\"`` characters:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/specify-queries.cpp\n      :start-after: start-find-evaluation\n      :end-before: end-find-evaluation\n      :language: cpp\n      :dedent:\n\n   .. output::\n\n      { \"_id\" : 1, \"name\" : \"apples\", \"qty\" : 5, \"rating\" : 3, \"color\" : \"red\", \"type\" : [ \"fuji\", \"honeycrisp\" ] }\n      { \"_id\" : 4, \"name\" : \"pineapples\", \"qty\" : 3, \"rating\" : 5, \"color\" : \"yellow\" }\n\nAdditional Information\n----------------------\n\nTo learn more about querying documents, see the :manual:`Query Documents\n</tutorial/query-documents/>` guide in the {+mdb-server+} manual.\n\nTo learn more about retrieving documents with the {+driver-short+}, see the\n:ref:`cpp-retrieve` guide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `find() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#adcbb56b329ffbc28e517ba7a2e111908>`__\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-a-query.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see\nthe :atlas:`Get Started with Atlas </getting-started>` guide.\n\n.. _cpp-return-documents-limit:\n\nLimit\n-----\n\nTo specify the maximum number of documents returned from a read operation, create\nan instance of the ``mongocxx::options::find`` class and set its ``limit`` field.\nThen, pass your ``mongocxx::options::find`` instance as an argument to the\n``find()`` method.\n\nThe following example finds all restaurants that have a ``cuisine`` field value\nof ``\"Italian\"`` and limits the results to ``5`` documents:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :linenos:\n   :emphasize-lines: 23-25\n\nFind One\n--------\n\nThe following code shows how to retrieve a single document from a collection\nthat matches the specified criteria:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-find-one\n   :end-before: end-find-one\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``find_one()`` method, see the :ref:`cpp-retrieve-find-one`\nsection in the Retrieve Data guide.\n\nFind Multiple\n-------------\n\nThe following code shows how to retrieve all documents from a collection\nthat match the specified criteria:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-find-multiple\n   :end-before: end-find-multiple\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``find()`` method, see the :ref:`cpp-retrieve-find-multiple`\nsection in the Retrieve Data guide.\n\nCount Documents in a Collection\n-------------------------------\n\nThe following code shows how to count the number of documents in\na collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-count\n   :end-before: end-count\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``count_documents()`` method, see the\n:ref:`cpp-accurate-count` section in the Count Documents guide.\n\nCount Documents Returned from a Query\n-------------------------------------\n\nThe following code shows how to count documents in a collection\nthat match the specified criteria:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-count-query\n   :end-before: end-count-query\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``count_documents()`` method, see the\n:ref:`cpp-accurate-count` section in the Count Documents guide.\n\nEstimated Document Count\n------------------------\n\nThe following code shows how to retrieve an estimated count of the\nnumber of documents in a collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-count-estimate\n   :end-before: end-count-estimate\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``estimated_document_count()`` method, see the\n:ref:`cpp-estimated-count` section in the Count Documents guide.\n\nRetrieve Distinct Values\n------------------------\n\nThe following code shows how to retrieve the unique values of a field\nfor documents that match the specified criteria:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-distinct\n   :end-before: end-distinct\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``distinct()`` method, see the\n:ref:`cpp-distinct` guide.\n\nMonitor Data Changes\n--------------------\n\nThe following code shows how to monitor and print changes to a\ncollection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :start-after: start-change-stream\n   :end-before: end-change-stream\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``watch()`` method, see the\n:ref:`cpp-change-streams` guide.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/read.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/run-command.cpp\n      :start-after: start-run-hello\n      :end-before: end-run-hello\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n   \n      { \n        \"topologyVersion\" : { \n                                \"processId\" : ..., \n                                \"counter\" : ... \n        }, \n        \"hosts\" : [ ... ],\n        \"setName\" : ..., \n        \"setVersion\" : ..., \n        \"isWritablePrimary\" : ..., \n        \"secondary\" :  ..., \n        \"primary\" : ..., \n        \"tags\" : { \n                    \"region\" : ..., \n                    \"availabilityZone\" : ..., \n                    \"provider\" : ..., \n                    \"workloadType\" : ..., \n                    \"nodeType\" : ..., \n                    \"diskState\" : ...\n        }, \n        \"me\" : ..., \n        \"electionId\" : ..., \n        \"lastWrite\" : ..., \n        \"lastWriteDate\" : ..., \n        \"majorityOpTime\" : ..., \n        \"majorityWriteDate\" : ...,\n        \"maxBsonObjectSize\" : ..., \n        \"maxMessageSizeBytes\" : ..., \n        \"maxWriteBatchSize\" : ..., \n        \"localTime\" : ..., \n        \"logicalSessionTimeoutMinutes\" : ..., \n        \"connectionId\" : ..., \n        \"minWireVersion\" : ..., \n        \"maxWireVersion\" : ..., \n        \"readOnly\" : ..., \n        \"ok\" : ..., \n        \"$clusterTime\" : ..., \n        \"signature\" : ... \n       } \n\n.. cpp-command-options:\n\nCommand Options\n---------------\n\nTo customize command execution behavior, you can set options in the command \ndocument that you pass to the ``run_command()`` method. To learn more about \na command and the options that it accepts, locate the command and follow the \ncorresponding link on the :manual:`Database Commands </reference/command/>` page \nin the {+mdb-server+} manual. \n\nFor example, you can instruct the ``connectionStatus`` command \nto return the full set of privileges that currently-authenticated users possess by setting the ``showPrivileges`` \noption to ``true`` in the command document: \n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/run-command.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/run-command.cpp\n      :start-after: start-run-connectionStatus\n      :end-before: end-run-connectionStatus\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n\n      { \n        \"authInfo\" : { \"authenticatedUsers\" : [ { \"user\" : ..., \"db\" : ... } ], \n        \"authenticatedUserRoles\" : [ { \"role\" : ..., \"db\" : ... } ], \n        \"authenticatedUserPrivileges\" : [ \n                                          { \"resource\" : { \"db\" : \"\", \"collection\" : \"\" }, \"actions\" : [ ... ] }, \n                                          { \"resource\" : { \"db\" : \"config\", \"collection\" : \"system.sessions\" }, \"actions\" : [ ... ] }, \n                                          ..., \n                                          { \"resource\" : { \"db\" : \"\", \"collection\" : \"\" }, \"actions\" : [ ... ] }\n        ] \n      }, \n         \"ok\" : 1 \n      }\n\nResponse\n--------\n\nThe ``run_command()`` method returns a ``bsoncxx::document::value`` object that contains\nthe response from the database after the command has been executed. Each\ndatabase command performs a different function, so the response content\ncan vary across commands. However, every response contains documents\nwith the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Field\n     - Description\n\n   * - <command result>\n     - Provides fields specific to the database command. For example,\n       ``count`` returns the ``n`` field and ``explain`` returns the\n       ``queryPlanner`` field.\n\n   * - ``ok``\n     - Indicates whether the command has succeeded (``1``)\n       or failed (``0``).\n\n   * - ``operationTime``\n     - Indicates the logical time of the operation. MongoDB uses the\n       logical time to order operations.\n       \n   * - ``$clusterTime``\n     - Provides a document that returns the signed cluster time. Cluster time is a\n       logical time used for ordering of operations.\n\n       The document contains the following fields:\n\n       - ``clusterTime``, which is the timestamp of the highest known cluster time for the member.\n       - ``signature``, which is a document that contains the hash of the cluster time and the ID\n         of the key used to sign the cluster time.\n\n.. _addl-info-runcommand:\n\nAdditional Information\n----------------------\n\nFor more information about the concepts in this guide, see the following documentation:\n\n- :manual:`db.runCommand() </reference/method/db.runCommand/>`\n- :manual:`Database Commands </reference/command/>`\n- :manual:`hello Command </reference/command/hello/>`\n- :manual:`connectionStatus Command </reference/command/connectionStatus/>`\n\nTo learn more about the methods or types discussed in this\nguide, see the following API documentation:\n\n- `run_command() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#a1e11c0874c945f8bb9ca39f1a30c9271>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/run-command.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-scram-sha-256\n   :end-before: // end-scram-sha-256\n\n.. _cpp-scram-sha-1:\n\nSCRAM-SHA-1\n-----------\n\nSCRAM-SHA-1, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__,\nis the default authentication mechanism on MongoDB deployments\nrunning MongoDB v3.6.\n\nTo authenticate with this mechanism, set the following connection options:\n\n- ``db_username``: The username to authenticate. \n- ``db_password``: The password to authenticate.\n- ``authSource``: The MongoDB database to authenticate against. By default,\n  {+driver-short+} authenticates against the ``admin`` database.\n- ``authMechanism``: Set to ``\"SCRAM-SHA-1\"``.\n\nYou can set these options in the connection string when creating a\n``mongocxx::client`` object, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-scram-sha-1\n   :end-before: // end-scram-sha-1\n\n.. _cpp-x509:\n\nMONGODB X.509\n-------------\n\nIf you enable TLS, during the TLS handshake, the {+driver-short+} can present an X.509\nclient certificate to MongoDB to prove its identity. The ``MONGODB-X509`` authentication\nmechanism uses this certificate to authenticate the client.\n\nTo authenticate with this mechanism, set the following connection options:\n\n- ``tls``: Set to ``True``.\n- ``tlsCertificateKeyFile``: The file path of the ``.pem`` file that contains your\n  client certificate and private key.\n- ``authMechanism``: Set to ``\"MONGODB-X509\"``.\n\nYou can set these options in the connection string when creating a\n``mongocxx::client`` object, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-x509\n   :end-before: // end-x509\n\nTo learn more about enabling TLS, see :ref:`cpp-tls`.\n\n.. _cpp-mongo-aws:\n\nMONGODB-AWS\n-----------\n\n.. important::\n\n   The MONGODB-AWS authentication mechanism requires MongoDB v4.4 or later.\n\nThe ``MONGODB-AWS`` authentication mechanism uses AWS IAM (Amazon Web Services Identity and\nAccess Management) or AWS Lambda credentials to authenticate your application.\nTo authenticate using this mechanism, first create a user with an associated Amazon Resource Name (ARN) on\nthe ``$external`` database, then specify the ``MONGODB-AWS`` authMechanism in the\nURI.\n\nWhen you use the ``MONGODB-AWS`` mechanism, the {+driver-short+} attempts to\nretrieve your AWS credentials from the following sources, in the order listed:\n\n1. Named parameters passed to the Connection URI\n#. Environment variables\n#. AWS EKS AssumeRoleWithWebIdentity request\n#. ECS container metadata\n#. EC2 instance metadata\n\nThe following sections describe how to use the {+driver-short+} to retrieve credentials from\nthese sources and use them to authenticate your application.\n\nConnection URI\n~~~~~~~~~~~~~~\n\nFirst, the {+driver-short+} checks whether you passed AWS credentials to the\n``MongoClient`` constructor as part of the connection\nURI. To pass your credentials in the connection URI, set the following connection\noptions:\n\n- ``username``: The AWS IAM access key ID to authenticate.\n- ``password``: The AWS IAM secret access key.\n- ``authMechanism``: Set to ``\"MONGODB-AWS\"``.\n\nYou can set these options in the connection string when creating a\n``mongocxx::client`` object, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-connection-uri\n   :end-before: // end-aws-connection-uri\n\nYou can also include an AWS session token by passing it into the\n``authMechanismProperties`` parameter:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-connection-uri-session\n   :end-before: // end-aws-connection-uri-session\n\n.. _cpp-mongo-aws-environment:\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\nIf you don't provide a username and password when you construct your ``MongoClient``\nobject, the {+driver-short+} tries to retrieve AWS credentials from the following\nenvironment variables:\n\n- ``AWS_ACCESS_KEY_ID``\n- ``AWS_SECRET_ACCESS_KEY``\n- ``AWS_SESSION_TOKEN`` (optional)\n\nTo use these environment variables to authenticate your application, first set them to the\nAWS IAM values needed for authentication, as shown in the following code\nexample:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\n.. _cpp-mongo-aws-assume-role:\n\nAssumeRoleWithWebIdentity Request\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application authenticates users for your EKS cluster from an OpenID Connect (OIDC)\nidentity provider, the {+driver-short+} can make an ``AssumeRoleWithWebIdentity`` request\nto exchange the OIDC token for temporary AWS credentials for your application. \n\nTo authenticate with temporary AWS IAM credentials returned by an\n``AssumeRoleWithWebIdentity`` request, ensure that the AWS config file exists in your\nenvironment and is configured with the ``AWS_WEB_IDENTITY_TOKEN_FILE``\nand ``AWS_ROLE_ARN`` environment variables. To learn how to create and configure\nan AWS config file, see `Configuration <https://docs.aws.amazon.com/sdkref/latest/guide/creds-config-files.html>`__\nin the AWS documentation.\n\nAfter you configure your environment for an ``AssumeRoleWithWebIdentity`` request,\nset the ``authMechanism`` parameter in your connection URI to ``\"MONGODB-AWS\"``,\nas shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\nFor more information about using an ``AssumeRoleWithWebIdentity`` request to\nauthenticate your application, see the following AWS documentation:\n\n- `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__\n- `Authenticating users for your cluster from an OpenID Connect identity provider <https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html>`__\n\n.. _cpp-mongo-aws-ecs:\n\nECS Metadata\n~~~~~~~~~~~~\n\nIf your application runs in an Elastic Container Service (ECS) container,\nthe {+driver-short+} can automatically retrieve temporary AWS credentials from an\nECS endpoint. To do so, specify the URI of the ECS endpoint in an environment variable called\n``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\n.. _cpp-mongo-aws-ec2:\n\nEC2 Instance Metadata\n~~~~~~~~~~~~~~~~~~~~~\n\nThe {+driver-short+} can automatically retrieve temporary AWS credentials from an\nAmazon Elastic Cloud Compute (EC2) instance. To use temporary credentials from\nwithin an EC2 instance, set the ``authMechanism`` parameter in your connection\nURI to ``\"MONGODB-AWS\"``, as shown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\n.. note::\n\n   If you set any of the environment variables from the preceding AWS authentication\n   methods, the {+driver-short+} attempts to retrieve credentials by using those\n   methods before attempting to retrieve them from an EC2 instance. To attempt\n   to retrieve credentials only from an EC2 instance, ensure that the\n   environment variables are not set.\n\nError Handling\n--------------\n\nYou can handle authentication errors by catching ``mongocxx::exception``\nerrors. Inspect the error message string by using the ``what()`` method, as\nshown in the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-auth-err\n   :end-before: // end-auth-err\n\nFor more information, see `Operation Exceptions\n<{+api+}/topic-mongocxx-examples-operation-exceptions.html>`__ in the API\ndocumentation.\n\nAPI Documentation\n-----------------\n\nTo learn more about creating a ``mongocxx::client`` object in {+driver-short+},\nsee the following API documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/authentication.txt"
  },
  {
    "code": "         :copyable: false\n      \n         $ kinit mongodbuser@EXAMPLE.COM\n         mongodbuser@EXAMPLE.COM's Password:\n         $ klist\n         Credentials cache: FILE:/tmp/krb5cc_1000\n                 Principal: mongodbuser@EXAMPLE.COM\n      \n         Issued                Expires               Principal\n         Feb  9 13:48:51 2013  Feb  9 23:48:51 2013  krbtgt/mongodbuser@EXAMPLE.COM\n\n   .. step:: Set the Connection Options\n\n      Next, set the following connection options:\n\n      - ``Kerberos principal``: The Kerberos principal to authenticate.\n      - ``authMechanism``: Set to ``\"GSSAPI\"``.\n      - ``authMechanismProperties``: Optional. By default, MongoDB uses ``mongodb`` as\n        the authentication service name. To specify a different service name, set\n        this option to ``\"SERVICE_NAME:<authentication service name>\"``.\n\n      You can set these options through parameters in your connection URI, as shown in\n      the following example:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/enterprise-authentication.txt"
  },
  {
    "code": "          :language: cpp\n          :copyable: true\n          :start-after: // start-kerberos\n          :end-before: // end-kerberos\n\n      .. note::\n\n         You must replace the ``@`` symbol in the principal with ``%40``, as shown\n         in the preceding example.\n\n.. _cpp-plain:\n\nPLAIN SASL\n----------\n\nThe PLAIN Simple Authentication and Security Layer (SASL), as defined\nby `RFC 4616 <https://www.rfc-editor.org/rfc/rfc4616>`__, is a username-password\nauthentication mechanism often used with TLS or another encryption layer.\n\n.. important::\n\n   PLAIN SASL is a clear-text authentication mechanism. We strongly recommend that you\n   use TLS/SSL with certificate validation when using PLAIN SASL to authenticate to MongoDB.\n\nTo learn more about how to enable TLS for your connection, see :ref:`<cpp-tls>`.\n\nTo authenticate with SASL, set the ``authMechanism`` connection option to ``PLAIN``.\nYou can set this option through a parameter in your connection string, as shown\nin the following example:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/enterprise-authentication.txt"
  },
  {
    "code": "    :language: cpp\n    :copyable: true\n    :start-after: // start-plain\n    :end-before: // end-plain\n\nAPI Documentation\n-----------------\n\nTo learn more about creating a ``mongocxx::client`` object in {+driver-short+},\nsee the following API documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ \n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security/enterprise-authentication.txt"
  },
  {
    "code": "      :language: cpp\n      :copyable: true\n      :linenos:\n      :emphasize-lines: 16-18\n\nSCRAM-SHA-256\n-------------\n\nThe following code shows how to create a connection URI to authenticate by using\nthe ``SCRAM-SHA-256`` authentication mechanism:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-scram-sha-256\n   :end-before: // end-scram-sha-256\n\nTo learn more about SCRAM-SHA-256 authentication, see :ref:`cpp-scram-sha-256` in\nthe Authentication guide.\n\nSCRAM-SHA-1\n-----------\n\nThe following code shows how to create a connection URI to authenticate by using\nthe ``SCRAM-SHA-1`` authentication mechanism:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-scram-sha-1\n   :end-before: // end-scram-sha-1\n\nTo learn more about SCRAM-SHA-1 authentication, see :ref:`cpp-scram-sha-1` in\nthe Authentication guide.\n\nMONGODB X.509\n-------------\n\nThe following code shows how to create a connection URI to authenticate by using\nthe ``X.509`` authentication mechanism:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-x509\n   :end-before: // end-x509\n\nTo learn more about X.509 authentication, see :ref:`cpp-x509` in\nthe Authentication guide.\n\nMONGODB-AWS\n-----------\n\nThe following sections show how to connect to MongoDB by using the ``MONGODB-AWS``\nauthentication mechanism. When you use the ``MONGODB-AWS`` mechanism, the {+driver-short+} attempts to\nretrieve your AWS credentials from the following sources, in the order listed:\n\n1. Named parameters passed to the Connection URI\n#. Environment variables\n#. AWS EKS AssumeRoleWithWebIdentity request\n#. ECS container metadata\n#. EC2 instance metadata\n \nEach section shows how to create the connection URI to authenticate with\n``MONGODB-AWS`` when retrieving your AWS credentials from the specified source.\n\nTo learn more about authenticating with AWS, see\n:ref:`cpp-mongo-aws` in the Authentication guide.\n\nConnection URI\n~~~~~~~~~~~~~~\n\nThe following code shows how to create a connection URI that includes AWS credentials to\nauthenticate with ``MONGODB-AWS``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-connection-uri\n   :end-before: // end-aws-connection-uri\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to create a connection URI to\nauthenticate with ``MONGODB-AWS`` when obtaining credentials from environment\nvariables. Ensure you have your environment variables specified before running\nthis code.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\nTo learn more about authenticating with AWS by using environment\nvariables, see :ref:`cpp-mongo-aws-environment`.\n\nAssumeRoleWithWebIdentity Request\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to create a connection URI to\nauthenticate with ``MONGODB-AWS`` when obtaining credentials from an\n``AssumeRoleWithWebIdentity`` request. Ensure that an AWS config file exists in your\nenvironment and is configured with the ``AWS_WEB_IDENTITY_TOKEN_FILE``\nand ``AWS_ROLE_ARN`` environment variables.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\nTo learn more about authenticating with AWS by using an\n``AssumeRoleWithWebIdentity`` request, see :ref:`cpp-mongo-aws-assume-role`.\n\nECS Metadata\n~~~~~~~~~~~~\n\nThe following code shows how to create a connection URI to\nauthenticate with ``MONGODB-AWS`` when obtaining credentials from ECS metadata.\nEnsure that you specify the URI of the ECS endpoint in an environment variable called\n``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\nTo learn more about authenticating with AWS by using ECS metadata, see :ref:`cpp-mongo-aws-ecs`.\n\nEC2 Instance Metadata\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to create a connection URI to\nauthenticate with ``MONGODB-AWS`` when obtaining credentials from EC2 instance\nmetadata. Ensure that you configure your EC2 instance with your temporary credentials.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "   :language: cpp\n   :copyable: true\n   :start-after: // start-aws-environment\n   :end-before: // end-aws-environment\n\nTo learn more about authenticating with AWS by using EC2 instance metadata, see :ref:`cpp-mongo-aws-ec2`.\n\nKerberos\n--------\n\n.. note:: MongoDB Enterprise Only\n\n   Kerberos authentication is available only in MongoDB Enterprise.\n\nThe following code shows how to create a connection URI to\nauthenticate with Kerberos:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "    :language: cpp\n    :copyable: true\n    :start-after: // start-kerberos\n    :end-before: // end-kerberos\n\nTo learn more about authenticating with Kerberos, see\n:ref:`cpp-kerberos` in the Enterprise Authentication guide.\n\nPLAIN SASL\n----------\n\n.. note:: MongoDB Enterprise Only\n\n   PLAIN SASL authentication is available only in MongoDB Enterprise.\n\nThe following code shows how to create a connection URI to\nauthenticate with PLAIN SASL:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "    :language: cpp\n    :copyable: true\n    :start-after: // start-plain\n    :end-before: // end-plain\n\nTo learn more about authenticating with PLAIN SASL, see\n:ref:`cpp-plain` in the Enterprise Authentication guide.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/security.txt"
  },
  {
    "code": "     :copyable: false\n\n     bsoncxx::v_noabi::types::bson_value::value::value(const uint8_t*, uint32_t, uint32_t, uint32_t)\n\n     bsoncxx::v_noabi::types::bson_value::view::_init(void*)\n\n     bsoncxx::v_noabi::types::bson_value::view::view(const uint8_t*, uint32_t, uint32_t, uint32_t)\n\n     bsoncxx::v_noabi::types::bson_value::view::view(void*)\n\n\n- Removes export of the following private member functions in the mongocxx\n  ABI:\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/upgrade.txt"
  },
  {
    "code": "     :copyable: false \n     \n     mongocxx::v_noabi::options::change_stream::as_bson()\n\n     mongocxx::v_noabi::options::aggregate::append(bsoncxx::v_noabi::builder::basic::document&)\n\n     mongocxx::v_noabi::options::index::storage_options()\n\n\n- Declare all exported functions symbols with ``__cdecl`` when compiled with\n  MSVC. This is an ABI breaking change if you use an alternative\n  default calling convention when building projects.\n\n.. _version-3.10-breaking-changes:\n\nVersion 3.10\n~~~~~~~~~~~~\n\nBuild System Breaking Changes in v3.10\n``````````````````````````````````````\n\nThe v3.10 driver introduces the following breaking changes to the build system:\n\n- Drops support for calling ``find_package(libbsoncxx)`` and\n  ``find_package(libmongocxx)``. Use ``find_package(bsoncxx)`` and\n  ``find_package(mongocxx)`` instead.\n- Drops support for the ``LIBBSONCXX_*`` and ``LIBMONGOCXX_*`` CMake variables\n  provided by the legacy CMake package config files. Use the ``mongo::bsoncxx_*`` and\n  ``mongo::mongocxx_*`` CMake targets instead.\n- Removes the ``BSONCXX_POLY_USE_STD_EXPERIMENTAL`` CMake option and drops support for selecting\n  the experimental C++ standard library as a polyfill option.\n\n.. _version-3.9-breaking-changes:\n\nVersion 3.9\n~~~~~~~~~~~\n\nBuild System Breaking Changes in v3.9\n`````````````````````````````````````\n\nThe v3.9 driver introduces the following breaking changes:\n\n- Removes support for exported targets from the CMake project build tree\n- Drops support for macOS 10.14, macOS 10.15, and Ubuntu 14.04\n- Requires MongoDB C Driver v1.25.0 or later\n- Requires CMake v3.15 or later to support the ``FetchContent`` module\n\nVersion 3.8 and Earlier\n~~~~~~~~~~~~~~~~~~~~~~~\n\nFor driver versions 3.8 and earlier, see the\nrelease notes and associated JIRA tickets for each release\non `GitHub. <https://github.com/mongodb/mongo-cxx-driver/releases>`__\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/upgrade.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\n.. _cpp-bulk-start-operation:\n\nCreate a Bulk Write Instance\n----------------------------\n\nBefore running a bulk write operation, call the ``create_bulk_write()`` method on\na collection. This method returns an instance of the ``mongocxx::bulk_write``\nclass that you can use to store instructions about which types of bulk writes to\nperform.\n\nThe following example calls the ``create_bulk_write()`` method on the ``restaurants``\ncollection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "    :start-after: start-create-bulk-write\n    :end-before: end-create-bulk-write\n    :language: cpp\n    :dedent:\n\nYou can then append write models to your ``mongocxx::bulk_write`` instance to define\nthe bulk operation. For more information, see the following :ref:`cpp-bulk-define-write-models`\nsection.\n\n.. _cpp-bulk-define-write-models:\n\nDefine the Write Operations\n---------------------------\n\nFor each write operation you want to perform, create an instance of one of\nthe following model classes:\n\n- ``mongocxx::model::insert_one``\n- ``mongocxx::model::update_one``\n- ``mongocxx::model::update_many``\n- ``mongocxx::model::replace_one``\n- ``mongocxx::model::delete_one``\n- ``mongocxx::model::delete_many``\n\nThen, append each write model to the ``mongocxx::bulk_write`` instance returned\nby the ``create_bulk_write()`` method.\n\nThe following sections show how to create and use instances of the preceding\nwrite model classes.\n\n.. _cpp-bulk-insert-model:\n\nInsert Operations\n~~~~~~~~~~~~~~~~~\n\nTo perform an insert operation, create an instance of the ``mongocxx::model::insert_one``\nclass and specify the document you want to insert. Then, append the model instance\nto an instance of the ``mongocxx::bulk_write`` class.\n\nThe following example creates an instance of ``mongocxx::model::insert_one`` and appends\nit to a ``mongocxx::bulk_write`` instance called ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-insert-one\n   :end-before: end-bulk-insert-one\n   :language: cpp\n   :dedent:\n\nTo insert multiple documents, create an instance of ``mongocxx::model::insert_one``\nfor each document.\n\n.. _cpp-bulk-update-model:\n\nUpdate Operations\n~~~~~~~~~~~~~~~~~\n\nTo update a document, create an instance of ``mongocxx::model::update_one``. This model\ninstructs the driver to update *the first* document that matches your query filter. Then,\nappend the model instance to an instance of the ``mongocxx::bulk_write`` class. \n\nPass the following arguments to the ``mongocxx::model::update_one`` model:\n\n- **Query filter** document, which specifies the criteria used to match documents\n  in your collection.\n- **Update** document, which specifies the kind of update to perform. For more information\n  about update operations, see the :manual:`Field Update Operators\n  </reference/operator/update-field/>` guide in the {+mdb-server+} manual.\n\nThe following example creates an instance of ``mongocxx::model::update_one`` and appends\nit to a ``mongocxx::bulk_write`` instance called ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-one\n   :end-before: end-bulk-update-one\n   :language: cpp\n   :dedent:\n\nTo update multiple documents, create an instance of ``mongocxx::model::update_many``\nand pass in the same arguments. This model instructs the driver to update *all* documents\nthat match your query filter.\n\nThe following example creates an instance of ``mongocxx::model::update_many`` and appends\nit to ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-many\n   :end-before: end-bulk-update-many\n   :language: cpp\n   :dedent:\n\n.. _cpp-bulk-replace-model:\n\nReplace Operations\n~~~~~~~~~~~~~~~~~~\n\nA replace operation removes all fields and values of a specified document and\nreplaces them with new ones. To perform a replace operation, create an instance\nof the ``mongocxx::model::replace_one`` class and pass it a query filter and\nthe fields and values you want to store in the matching document. Then, append\nthe model instance to an instance of the ``mongocxx::bulk_write`` class.\n\nThe following example creates an instance of ``mongocxx::model::replace_one`` and appends\nit to a ``mongocxx::bulk_write`` instance called ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-replace-one\n   :end-before: end-bulk-replace-one\n   :language: cpp\n   :dedent:\n\nTo replace multiple documents, you must create a new instance of ``mongocxx::model::replace_one``\nfor each document.\n\n.. _cpp-bulk-delete-model:\n\nDelete Operations\n~~~~~~~~~~~~~~~~~\n\nTo delete a document, create an instance of the ``mongocxx::model::delete_one`` class and\npass in a query filter specifying the document you want to delete. This model instructs\nthe driver to delete only *the first* document that matches your query filter. Then, append\nthe model instance to an instance of the ``mongocxx::bulk_write`` class.\n\nThe following example creates an instance of ``mongocxx::model::delete_one`` and appends\nit to a ``mongocxx::bulk_write`` instance called ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-one\n   :end-before: end-bulk-delete-one\n   :language: cpp\n   :dedent:\n\nTo delete multiple documents, create an instance of the ``mongocxx::model::delete_many``\nclass and pass in a query filter specifying the document you want to delete. This model\ninstructs the driver to delete *all* documents that match your query filter.\n\nThe following example creates an instance of ``mongocxx::model::delete_many`` and appends\nit to ``bulk``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-many\n   :end-before: end-bulk-delete-many\n   :language: cpp\n   :dedent:\n\nRun the Bulk Operation\n----------------------\n\nTo run a bulk operation, call the ``execute()`` method on an instance of the \n``mongocxx::bulk_write`` class that contains your write models. By default, the\n``execute()`` method runs the operations in the order they're appended to the\n``mongocxx::bulk_write`` instance.\n\nThe following example performs the :ref:`insert <cpp-bulk-insert-model>`,\n:ref:`update <cpp-bulk-update-model>`, :ref:`replace <cpp-bulk-replace-model>`,\nand :ref:`delete <cpp-bulk-delete-model>` operations specified in the preceding\nsections of this guide by appending each corresponding write model to an instance\nof ``mongocxx::bulk_write`` and calling the ``execute()`` method. Then, it prints\nthe number of modified documents:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-write-unordered\n   :end-before: end-bulk-write-unordered\n   :language: cpp\n   :dedent:\n\nIf any of the write operations in an unordered bulk write fail, the {+driver-short+}\nreports the errors only after attempting all operations.\n\n.. note::\n\n   Unordered bulk operations do not guarantee order of execution. The order can\n   differ from the way you list them to optimize the runtime.\n\n.. _cpp-bulk-return-value:\n\nReturn Value\n------------\n\nThe ``execute()`` method returns an instance of the ``mongocxx::result::bulk_write`` class.\nThe ``mongocxx::result::bulk_write`` class contains the following member functions:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Function\n     - Description\n         \n   * - ``deleted_count()``\n     - | Returns the number of documents deleted, if any.\n\n   * - ``inserted_count()``\n     - | Returns the number of documents inserted, if any.\n\n   * - ``matched_count()``\n     - | Returns the number of documents matched for an update, if applicable.\n\n   * - ``modified_count()``\n     - | Returns the number of documents modified, if any.\n\n   * - ``upserted_count()``\n     - | Returns the number of documents upserted, if any.\n\n   * - ``upserted_ids()``\n     - | Returns a map of the operation's index to the ``_id`` of the upserted documents, if\n         applicable.\n\nAdditional Information\n----------------------\n\nTo learn how to perform individual write operations, see the following guides:\n\n- :ref:`cpp-write-insert`\n- :ref:`cpp-write-update`\n- :ref:`cpp-write-delete`\n\n.. TODO:\n - :ref:`cpp-write-replace`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `create_bulk_write() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#abbf0932175201384cc902c80740adfdc>`__\n- `mongocxx::model::insert_one <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1insert__one.html>`__\n- `mongocxx::model::update_one <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1update__one.html>`__\n- `mongocxx::model::update_many <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1update__many.html>`__\n- `mongocxx::model::replace_one <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1replace__one.html>`__\n- `mongocxx::model::delete_one <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1delete__one.html>`__\n- `mongocxx::model::delete_many <{+api+}/classmongocxx_1_1v__noabi_1_1model_1_1delete__many.html>`__\n- `execute() <{+api+}/classmongocxx_1_1v__noabi_1_1bulk__write.html#a13476d87ed6d00dca52c39dc04b98568>`__\n- `mongocxx::options::bulk_write <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1bulk__write.html>`__\n- `mongocxx::result::bulk_write <{+api+}/classmongocxx_1_1v__noabi_1_1result_1_1bulk__write.html>`__\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/bulk-write.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nDelete Operations\n-----------------\n\nYou can perform delete operations by using the following methods:\n\n- ``delete_one()``, which deletes *the first document* that matches the search criteria\n- ``delete_many()``, which deletes *all documents* that match the search criteria\n\nEach delete method requires a **query filter** document, which specifies the\nsearch criteria to determine which documents to select for removal.\nFor more information about query filters, see the \n:manual:`Query Filter Documents section </core/document/#query-filter-documents>` in\nthe {+mdb-server+} manual.\n\nDelete One Document\n~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``delete_one()`` method to remove a document in\nthe ``restaurants`` collection that has a ``name`` value of ``\"Ready Penny Inn\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-one\n   :end-before: end-delete-one\n   :language: cpp\n   :dedent:\n\nDelete Multiple Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``delete_many()`` method to remove all documents\nin the ``restaurants`` collection that have a ``borough`` value of ``\"Brooklyn\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-many\n   :end-before: end-delete-many\n   :language: cpp\n   :dedent:\n\nCustomize the Delete Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``delete_one()`` and ``delete_many()`` methods by\npassing an instance of the ``mongocxx::options::delete_options`` class as an optional\nparameter. The following table describes the fields you can set in a\n``mongocxx::options::delete_options`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field\n     - Description\n\n   * - ``collation``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``write_concern``\n     - | Sets the write concern for the operation.\n         For more information, see :manual:`Write Concern </reference/write-concern/>`\n         in the {+mdb-server+} manual.\n\n   * - ``hint``\n     - | Gets or sets the index to scan for documents. \n         For more information, see the :manual:`hint statement </reference/command/delete/#std-label-deletes-array-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``let``\n     - | Specifies a document with a list of values to improve operation readability.\n         Values must be constant or closed expressions that don't reference document\n         fields. For more information, see the :manual:`let statement\n         </reference/command/delete/#std-label-delete-let-syntax>` in the\n         {+mdb-server+} manual.\n\n   * - ``comment``\n     - | Attaches a comment to the operation. For more information, see the :manual:`delete command\n         fields </reference/command/delete/#command-fields>` guide in the\n         {+mdb-server+} manual.\n\nThe following example calls the ``delete_many()`` method to delete all documents in\nthe ``restaurants`` collection that have a ``name`` value containing the string ``\"Mongo\"``.\nIt also sets the ``comment`` field of a ``mongocxx::options::delete_options`` instance\nto add a comment to the operation:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-options\n   :end-before: end-delete-options\n   :language: cpp\n   :dedent:\n\n.. tip::\n\n   If the preceding example used the ``delete_one()`` method instead of\n   ``delete_many()``, the driver would delete only the first document that has\n   a ``name`` value containing ``\"Mongo\"``.\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``delete_one()`` and ``delete_many()`` methods return an instance of\nthe ``mongocxx::result::delete_result`` class. This class contains the\nfollowing member functions:\n\n- ``result()``, which returns the raw bulk write result\n- ``deleted_count()``, which returns the number of documents deleted\n\nIf the query filter does not match any documents, the driver doesn't delete any\ndocuments and ``deleted_count`` is 0.\n\nThe following example calls the ``delete_many()`` method to delete documents\nthat have a ``cuisine`` value of ``\"Greek\"``. It then calls the ``deleted_count()``\nmember function to print the number of deleted documents:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/delete.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-create-bucket\n   :end-before: end-create-bucket\n\n.. _gridfs-create-custom-bucket:\n\nCustomize the Bucket\n~~~~~~~~~~~~~~~~~~~~\n\nYou can customize the GridFS bucket configuration by passing an instance\nof the ``mongocxx::options::gridfs::bucket`` class as an optional argument to \nthe ``gridfs_bucket()`` method. The following table describes the fields you\ncan set in a ``mongocxx::options::gridfs::bucket`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field \n     - Description\n\n   * - ``bucket_name`` \n     - | Specifies the bucket name to use as a prefix for the files and chunks collections.\n         The default value is ``\"fs\"``.\n       | **Type**: ``std::string``\n\n   * - ``chunk_size_bytes`` \n     - | Specifies the chunk size that GridFS splits files into. The default value is ``261120``.\n       | **Type**: ``std::int32_t``\n\n   * - ``read_concern`` \n     - | Specifies the read concern to use for bucket operations. The default value is the \n         database's read concern.\n       | **Type**: ``mongocxx::read_concern``\n\n   * - ``read_preference`` \n     - | Specifies the read preference to use for bucket operations. The default value is the \n         database's read preference.\n       | **Type**: ``mongocxx::read_preference``\n\n   * - ``write_concern`` \n     - | Specifies the write concern to use for bucket operations. The default value is the \n         database's write concern.\n       | **Type**: ``mongocxx::write_concern``\n\nThe following example creates a bucket named ``\"myCustomBucket\"`` by setting\nthe ``bucket_name`` field of a ``mongocxx::options::gridfs::bucket`` instance:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-create-custom-bucket\n   :end-before: end-create-custom-bucket\n\n.. _gridfs-upload-files:\n\nUpload Files\n------------\n\nYou can upload files to a GridFS bucket by using the following methods:\n\n- :ref:`open_upload_stream() <gridfs-open-upload-stream>`: Opens a new upload stream to which\n  you can write file contents\n- :ref:`upload_from_stream() <gridfs-upload-from-stream>`: Uploads the contents of an existing\n  stream to a GridFS file\n\n.. _gridfs-open-upload-stream:\n\nWrite to an Upload Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``open_upload_stream()`` method to create an upload stream for a given\nfile name. The ``open_upload_stream()`` method allows you to specify configuration\ninformation in an ``options::gridfs::upload`` instance, which you can pass as a\nparameter.\n\nThis example uses an upload stream to perform the following\nactions:\n\n- Sets the ``chunk_size_bytes`` field of an options instance\n- Opens a writable stream for a new GridFS file named ``\"my_file\"``\n  and applies the ``chunk_size_bytes`` option\n- Calls the ``write()`` method to write data to ``my_file``, which the stream points to\n- Calls the ``close()`` method to close the stream pointing to ``my_file`` \n \n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-open-upload-stream\n   :end-before: end-open-upload-stream\n\n.. _gridfs-upload-from-stream:\n\nUpload an Existing Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``upload_from_stream()`` method to upload the contents of a stream to\na new GridFS file. The ``upload_from_stream()`` method allows you to specify configuration\ninformation in an ``options::gridfs::upload`` instance, which you can pass as a\nparameter.\n\nThis example performs the following actions:\n\n- Opens a file located at ``/path/to/input_file`` as a stream in binary read mode\n- Calls the ``upload_from_stream()`` method to upload the contents of the stream\n  to a GridFS file named ``\"new_file\"`` \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-upload-from-stream\n   :end-before: end-upload-from-stream\n\n.. _gridfs-retrieve-file-info:\n\nRetrieve File Information\n-------------------------\n\nIn this section, you can learn how to retrieve file metadata stored in the\n``files`` collection of the GridFS bucket. The metadata contains information\nabout the file it refers to, including:\n\n- The ``_id`` of the file\n- The name of the file\n- The length/size of the file\n- The upload date and time\n- A ``metadata`` document in which you can store other information\n\nTo retrieve files from a GridFS bucket, call the ``mongocxx::gridfs::bucket::find()``\nmethod on your bucket. The method returns a ``mongocxx::cursor`` instance from\nwhich you can access the results. To learn more about cursors, see the\n:ref:`<cpp-cursors>` guide.\n\nExample \n~~~~~~~\n\nThe following code example shows how to retrieve and print file metadata\nfrom files in a GridFS bucket. It uses a ``for`` loop to iterate through\nthe returned cursor and display the contents of the files uploaded in the\n:ref:`gridfs-upload-files` examples:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/write/gridfs.cpp\n      :start-after: start-retrieve-file-info\n      :end-before: end-retrieve-file-info\n      :language: cpp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 13, \"chunkSize\" : 261120, \"uploadDate\" :\n      { \"$date\" : ... }, \"filename\" : \"new_file\" }\n      { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 50, \"chunkSize\" : 1048576, \"uploadDate\" :\n      { \"$date\" : ... }, \"filename\" : \"my_file\" }\n\nThe ``find()`` method accepts various query specifications. You can use its\n``mongocxx::options::find`` parameter to specify the sort order, maximum number of\ndocuments to return, and the number of documents to skip before returning. To\nview a list of available options, see the `API documentation <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html>`__.\n\n.. _gridfs-download-files:\n\nDownload Files\n--------------\n\nYou can download files from a GridFS bucket by using the following methods:\n\n- :ref:`open_download_stream() <gridfs-open-download-stream>`: Opens a new download stream\n  from which you can read the file contents\n- :ref:`download_to_stream() <gridfs-download_to_stream>`: Writes the entire file to an\n  existing download stream\n\n.. _gridfs-open-download-stream:\n\nRead From a Download Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can download files from your MongoDB database by using the\n``open_download_stream()`` method to create a download stream.\n\nThis example uses a download stream to perform the following actions:\n\n- Retrieves the ``_id`` value of the GridFS file named ``\"new_file\"``\n- Passes the ``_id`` value to the ``open_download_stream()`` method to\n  open the file as a readable stream \n- Creates a ``buffer`` vector to store the file contents\n- Calls the ``read()`` method to read the file contents from the ``downloader``\n  stream into the vector\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-open-download-stream\n   :end-before: end-open-download-stream\n\n.. _gridfs-download_to_stream:\n\nDownload to an Existing Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can download the contents of a GridFS file to an existing stream\nby calling the ``download_to_stream()`` method on your bucket.\n\nThis example performs the following actions:\n\n- Opens a file located at ``/path/to/output_file`` as a stream in binary write\n  mode\n- Retrieves the ``_id`` value of the GridFS file named ``\"new_file\"``\n- Passes the ``_id`` value to ``download_to_stream()`` to download the file\n  to the stream\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-download-to-stream\n   :end-before: end-download-to-stream\n\n.. _gridfs-delete-files:\n\nDelete Files\n------------\n\nUse the ``delete_file()`` method to remove a file's collection document\nand associated chunks from your bucket. This effectively deletes the file.\nYou must specify the file by its ``_id`` field rather than its file name.\n\nThe following example shows how to delete a file named ``\"my_file\"`` by\npassing its ``_id`` value to ``delete_file()``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-delete-files\n   :end-before: end-delete-files\n\n.. note:: File Revisions\n\n   The ``delete_file()`` method supports deleting only one file at a time. If\n   you want to delete each file revision, or files with different upload\n   times that share the same file name, collect the ``_id`` values of each revision.\n   Then, pass each ``_id`` value in separate calls to the ``delete_file()`` method.\n\nAPI Documentation\n-----------------\n\nTo learn more about using the {+driver-short+} to store and retrieve large files,\nsee the following API documentation:\n\n- `gridfs_bucket() <{+api+}/classmongocxx_1_1v__noabi_1_1database.html#afe549c42c37bfbf67d77a1ac1eaec422>`__\n- `mongocxx::options::gridfs::bucket <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1gridfs_1_1bucket.html>`__\n- `open_upload_stream() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#ad1f2b7ea5ee9068a9e2c0424ad3b3673>`__\n- `upload_from_stream() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#ad8fa27fb5be7c209211bdb071c5cca44>`__\n- `find() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#acd33e4ce5db96ec7bc50edf498a174c4>`__\n- `open_download_stream() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#a0ba68864a0cbaf60baf3fc1ef864858a>`__\n- `download_to_stream() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#ab6e51f650e11c5c6e8aea8f71a6ba04f>`__\n- `delete_file() <{+api+}/classmongocxx_1_1v__noabi_1_1gridfs_1_1bucket.html#a3c231ffa4ed1b1f278ca1f3ea2ca044d>`__\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/gridfs.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-db-coll\n    :end-before: end-db-coll\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nThe ``_id`` Field\n-----------------\n\nIn a MongoDB collection, each document *must* contain an ``_id`` field\nwith a unique field value.\n\nMongoDB allows you to manage this field in two ways:\n\n- You can set this field for each document yourself, ensuring each\n  ``_id`` field value is unique.\n- You can let the driver automatically generate unique ``ObjectId``\n  values for each document ``_id``.\n\nUnless you can guarantee uniqueness, we recommend\nletting the driver automatically generate ``_id`` values.\n\n.. note::\n\n   Duplicate ``_id`` values violate unique index constraints, which\n   causes the driver to return a ``mongocxx::bulk_write_exception``\n   error.\n\nTo learn more about the ``_id`` field, see the\n:manual:`Unique Indexes </core/index-unique/>` guide in the {+mdb-server+} manual.\n\nTo learn more about document structure and rules, see the\n:manual:`Documents </core/document>` guide in the {+mdb-server+} manual.\n\nInsert One Document\n-------------------\n\nTo add a single document to a MongoDB collection, call the ``insert_one()``\nmethod and pass the document you want to add.\n\nThe following example inserts a document into the ``restaurants`` collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/insert.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-insert-one\n    :end-before: end-insert-one\n\nInsert Multiple Documents\n-------------------------\n\nTo add multiple documents to a MongoDB collection, call the ``insert_many()``\nmethod and pass a vector that stores the documents you want to add.\n\nThe following example inserts two documents into the ``restaurants`` collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/insert.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-insert-many\n    :end-before: end-insert-many\n\nModify Insert Behavior\n----------------------\n\nYou can modify the behavior of the ``insert_one()`` and ``insert_many()`` methods by\npassing an instance of the ``mongocxx::options::insert`` class as an optional\nparameter. The following table describes the fields you can set in a\n``mongocxx::options::insert`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field\n     - Description\n\n   * - ``bypass_document_validation``\n     - | If set to ``true``, allows the write to opt out of\n         :manual:`document-level validation </core/schema-validation>`. \n       | Defaults to ``false``.\n       | **Type**: ``bool``\n\n   * - ``write_concern``\n     - | Sets the write concern for the operation.\n       | Defaults to the write concern of the namespace.\n       | **Type**: ``mongocxx::write_concern``\n\n   * - ``ordered``\n     - | If set to ``true``, the operation stops inserting documents when one insert\n         fails. If ``false``, the operation continues to insert the remaining documents\n         when one insert fails.\n       | Defaults to ``true``.\n       | **Type**: ``bool``\n\n   * - ``comment``\n     - | A comment to attach to the operation. For more information, see the :manual:`insert command\n         fields </reference/command/insert/#command-fields>` guide in the\n         {+mdb-server+} manual.\n       | **Type**: ``bsoncxx::types::bson_value::view_or_value``\n       \nExample\n~~~~~~~\n\nThe following code uses the ``insert_many()`` method to insert three new\ndocuments into a collection. Because the ``bypass_document_validation`` field\nis set to ``true`` in a ``mongocxx::options::insert`` instance, this\ninsert operation bypasses document-level validation:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/insert.txt"
  },
  {
    "code": "    :language: cpp\n    :dedent:\n    :start-after: start-modify\n    :end-before: end-modify\n\nAdditional Information\n----------------------\n\nFor runnable code examples of inserting documents with the {+driver-short+}, see\n:ref:`cpp-write`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `insert_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#af040f1fcb1ac406037bf1cbcdb300061>`__\n- `insert_many() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a61ebaa0c63296761637ce45115512085>`__\n- `mongocxx::options::insert <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1insert.html>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/insert.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :copyable:\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nReplace Operation\n-----------------\n\nYou can perform a replace operation by calling the ``replace_one()`` method.\nThis method removes all fields except the ``_id`` field from the first document that\nmatches the search criteria. It then inserts the fields and values you specify into the document. \n\nThe ``replace_one()`` method requires the following parameters:\n\n- **Query filter** document: Specifies which document to replace. For\n  more information about query filters, see \n  :manual:`Query Filter Documents </core/document/#query-filter-documents>` in\n  the {+mdb-server+} manual.\n\n- **Replace** document: Specifies the fields and values to insert in the new document. \n\n.. important:: \n\n   The values of ``_id`` fields are immutable. If your replacement document specifies a value for the ``_id`` field, \n   it must match the ``_id`` value of the existing document.\n\nReplace One Document Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``replace_one()`` method to replace \na document that has a ``name`` field value of ``\"Nobu\"`` with a new document \nthat has a ``name`` field value of ``\"La Bernadin\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :start-after: start-replace-one\n   :end-before: end-replace-one\n   :language: cpp\n   :copyable:\n   :dedent:\n\nTo check if you successfully replaced the document, you can use the ``find_one()`` method to print out the new document:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/write/replace.cpp\n      :start-after: start-replace-one-io\n      :end-before: end-replace-one-io\n      :language: cpp\n      :dedent:\n   \n   .. output:: \n      :language: cli\n      :visible: false\n      \n      New document: { \"_id\" : { \"$oid\" : \"...\" }, \"name\" : \"La Bernadin\" }  \n\nTo learn more about the ``find_one()`` method, see :ref:`cpp-retrieve-find-one` in the Retrieve Data guide.\n\nOptions \n~~~~~~~\n\nYou can modify the behavior of the ``replace_one()`` method by\npassing an instance of the ``mongocxx::options::replace`` class as an optional\nargument. The following table describes the fields you can set in a\n``mongocxx::options::replace`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field \n     - Description\n\n   * - ``bypass_document_validation``\n     - | Specifies whether the replace operation bypasses document validation. When set to ``true``, this lets you replace a document with a new document that doesn't meet the schema validation requirements. \n         For more information, see :manual:`Schema Validation </core/schema-validation/#schema-validation>` in the {+mdb-server+} manual.\n       | Defaults to ``false``.\n\n   * - ``collation``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``comment``\n     - | Specifies a comment of any valid BSON type to attach to the operation. \n         Once set, this comment appears alongside records of this command in the following locations:\n\n       - :ref:`mongod log messages <log-messages-ref>`, in the\n         ``attr.command.cursor.comment`` field\n       - :ref:`Database profiler output <profiler>`, in the :data:`system.profile.command <system.profile.command>` ``comment`` field\n       - :dbcommand:`currentOp` output, in the :data:`currentOp.command\n         <currentOp.command>` ``comment`` field\n\n       | For more information, see the :manual:`insert Command\n         Fields guide </reference/command/insert/#command-fields>` in the {+mdb-server+} manual.\n\n   * - ``hint``\n     - | Specifies the index to scan for documents that match the query filter.\n         For more information, see the :manual:`hint field </reference/command/update/#std-label-update-command-hint>`\n         in the {+mdb-server+} manual. \n\n   * - ``let``\n     - | Specifies a document containing variables and their values to be used in the ``replace_one()`` method. \n         This allows you to improve code readability by separating the variables from the operation text. \n         Values must be constant or closed expressions that don't reference document fields. \n         For more information, see the \n         :manual:`let field </reference/command/update/#std-label-update-let-syntax>`\n         in the {+mdb-server+} manual.\n\n   * - ``upsert``\n     - | Specifies whether the replace operation performs an upsert operation if no \n         documents match the query filter.\n       | Defaults to ``false``.\n\n   * - ``write_concern``\n     - | Sets the write concern for the operation.\n         For more information, see :manual:`Write Concern </reference/write-concern/>`\n         in the {+mdb-server+} manual.\n\nExample: hint Option\n^^^^^^^^^^^^^^^^^^^^\n\nThe following example uses the ``create_index()`` method to create an ascending single-field index \non the ``name`` field. It then passes a ``mongocxx::options::replace`` object to the ``replace_one()``\nmethod after setting its ``hint`` field to the new index. This instructs the replace operation to search the ``name`` \nfield index when replacing a document that has a ``name`` field value of ``\"Nobu\"``:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :start-after: start-replace-options-hint\n   :end-before: end-replace-options-hint\n   :language: cpp\n   :copyable:\n   :dedent:\n\nTo learn more about indexes, see the :ref:`Optimize Queries with Indexes <cpp-indexes>` guide.\n\nExample: upsert Option\n^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example passes a ``mongocxx::options::replace`` object to the ``replace_one()`` method \nafter setting its ``upsert`` field value to ``true``.  \nBecause no documents match the query filter, this instructs the replace operation to insert a new document\nwith a ``name`` field value of ``\"Shake Shack\"`` into the collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/write/replace.cpp\n      :start-after: start-replace-options-upsert\n      :end-before: end-replace-options-upsert\n      :language: cpp\n      :dedent:\n\n   .. output:: \n      :language: cli\n      :visible: false\n      \n      Total document count before replace_one(): 25359\n      Total document count after replace_one(): 25360\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``replace_one()`` method returns an instance of\nthe ``mongocxx::result::replace`` class. This class contains the following\nmember functions:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Function\n     - Description\n\n   * - ``matched_count()``\n     - | Returns the number of documents that matched the query filter, regardless of\n         how many were replaced.\n\n   * - ``modified_count()``\n     - | Returns number of documents modified by the replace operation. If a replaced\n         document is identical to the original, it is not included in this\n         count.\n         \n   * - ``result()``\n     - | Returns the bulk write result for the operation.\n\n   * - ``upserted_id()``\n     - | Returns the ID of the document that was upserted in the database, if the driver\n         performed an upsert.\n\nExample: matched_count()\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example uses the ``replace_one()`` method to replace a document that has\na ``name`` field value of ``\"Shake Shack\"`` with a new document that has a ``name`` \nfield value of ``\"In-N-Out Burger\"``. It then calls the ``matched_count()`` member \nfunction to print the number of documents that match the query filter:\n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/write/replace.cpp\n      :start-after: start-replace-result-matched\n      :end-before: end-replace-result-matched\n      :language: cpp\n      :dedent:\n\n   .. output:: \n      :language: cli\n      :visible: false\n\n      Matched documents: 11\n\nExample: upserted_id()\n^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example uses the ``replace_one()`` method to replace a document that has a ``name`` field value of ``\"In-N-Out Burger\"``. \nBecause the ``upsert`` option is set to ``true``, the {+driver-short+} inserts a new document when the query filter doesn't match any existing documents. \nThen, the code calls the ``upserted_id()`` member function to print the ``_id`` field value of the upserted document: \n\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/write/replace.cpp\n      :start-after: start-replace-result-upsert\n      :end-before: end-replace-result-upsert\n      :language: cpp\n      :dedent:\n\n   .. output:: \n      :language: cli\n      :visible: false\n\n      // Your ID value may differ\n      Upserted ID: 67128c5ecc1f8c15ea26fcf8\n\nAdditional Information \n----------------------\n\nTo learn more about creating query filters, see the :ref:`cpp-specify-query` guide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `replace_one() <{+api+}/classmongocxx_1_1model_1_1replace__one.html>`__\n- `mongocxx::options::replace <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1replace.html>`__\n- `mongocxx::result::replace <{+api+}/classmongocxx_1_1v__noabi_1_1result_1_1replace__one.html>`__\n",
    "language": "cpp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/replace.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-callback-api\n   :end-before: end-callback-api\n\n.. _cpp-core-api: \n\nCore API \n~~~~~~~~\n\nUse the core API to manage the life cycle of your transaction. To implement this API, you must make explicit calls to methods in the ``mongocxx::client_session`` interface \nto start a transaction, commit an active transaction, and end a transaction if an error occurs. The core API doesn't automatically incorporate error handling logic, \nand instead allows you to implement custom handling logic for errors including ``TransientTransactionError`` and ``UnknownTransactionCommitResult``. \n\nThe following table describes the core API methods provided by the ``mongocxx::client_session`` interface:  \n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``start_transaction()``\n     - | Starts a new transaction on the current client session. Accepts an optional ``mongocxx::options::transaction`` \n         instance as an argument to set options. For a full list of options, see `mongocxx::options::transaction <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1transaction.html>`__\n         in the API documentation.\n       |\n       | Raises an exception if the options are misconfigured, if there are network or other transient failures, or if there \n         are other errors such as a session with a transaction already in progress. If an error is returned with the ``TransientTransactionError`` label, \n         you can end the transaction and then retry it with the expectation that it will succeed. \n       |\n       | To learn more about this method, see the :manual:`startTransaction()\n         </reference/method/Session.startTransaction/>` guide in the {+mdb-server+} manual.\n\n   * - ``commit_transaction()``\n     - | Commits the active transaction on the current client session.\n       |\n       | Raises an exception if options are misconfigured, if there are network or other transient failures,\n         or if there are other errors such as a session with no transaction in progress. If an error is returned with the ``UnknownTransactionCommitResult`` label,\n         you can end the transaction and then retry it with the expectation that it will succeed when the committed transaction satisfies the set write concern. \n       |\n       | To learn more about this method, see the :manual:`commitTransaction()\n         </reference/method/Session.commitTransaction/>` guide in the {+mdb-server+} manual. \n\n   * - ``abort_transaction()``\n     - | Ends the active transaction on the current client session. \n       |\n       | Raises an exception if the options are misconfigured or if there are other errors such as \n         a session with no transaction in progress.\n       |\n       | To learn more about this method, see the :manual:`abortTransaction()\n         </reference/method/Session.abortTransaction/>` guide in the {+mdb-server+} manual.\n\n.. tip:: \n   \n   The ``mongocxx::client_session`` class also provides methods to retrieve and modify session properties.\n   To learn more, see `mongocxx::client_session <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html>`__ in the API documentation. \n\nThe following code uses the core API to perform a transaction that inserts documents into the ``movies`` and ``comments`` collections in the ``sample_mflix`` database. \nThis code performs the following actions: \n\n1. Starts a session from the client using the ``start_session()`` method.\n#. Creates an option object to prepare to set the write concern for the transaction operations.\n   To learn more about read and write semantics, see the :manual:`Read Concern/Write Concern/Read Preference </core/transactions/#read-concern-write-concern-read-preference>`\n   section in the {+mdb-server+} manual. \n#. Calls the ``start_transaction()`` method to start a transaction, passing in the option object as an argument.\n#. Runs operations to insert documents into collections in the ``sample_mflix`` database, passing the active \n   session to each operation.\n   If an operation encounters an error, the whole transaction is aborted. If the error has the label ``TransientTransactionError``,\n   the transaction is retried. \n#. Commits the active transaction using the ``commit_transaction()`` method. If the commit encounters an error with the label ``UnknownTransactionCommitResult``, the commit is retried. \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/transactions.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :start-after: start-core-api\n   :end-before: end-core-api\n\n.. _cpp-transactions-addtl-info:\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts discussed in this guide, see the following pages in the \n{+mdb-server+} manual: \n\n- :manual:`Transactions </core/transactions/>`\n- :manual:`Drivers API </core/transactions-in-applications/>`\n- :manual:`Server Sessions </reference/server-sessions/>`\n- :manual:`Causal Consistency </core/read-isolation-consistency-recency/#causal-consistency>`\n\nTo learn more about ACID complicance, see the :website:`ACID Properties in Database Management Systems </basics/acid-transactions>`\nguide on the MongoDB website. \n\nTo learn more about insert operations, see the :ref:`Insert Documents <cpp-write-insert>` guide.\n\n.. _api-docs-transaction:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the types or methods discussed in this\nguide, see the following API Documentation:\n\n- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__\n- `mongocxx::client_session <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1transaction.html>`__\n- `mongocxx::options::transaction <{+api+}/classmongocxx_1_1options_1_1transaction.html>`__\n- `start_session() <{+api+}/classmongocxx_1_1v__noabi_1_1client.html#a03535128dbe5be973a08764b7741f24e>`__\n- `with_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a3dcdf91bf72e69bf7e63a7c8ad859b93>`__\n- `start_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a9cc1c32d80a6cb1b0b21001d7990111b>`__\n- `commit_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#ad2d1a8f7c77542db6ec7629d162761ff>`__\n- `abort_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#aabb8247a655741af6fe0f78bef8116e1>`__\n- `insert_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a839bedb5505e5ce75cbf384e2e2457bd>`__\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/transactions.txt"
  },
  {
    "code": "    :start-after: start-db-coll\n    :end-before: end-db-coll\n    :language: cpp\n    :dedent:\n\nTo learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the\n:atlas:`Get Started with Atlas </getting-started>` guide.\n\nUpdate Operations\n-----------------\n\nYou can perform update operations in MongoDB by using the following methods:\n\n- ``update_one()``, which updates *the first document* that matches the search criteria\n- ``update_many()``, which updates *all documents* that match the search criteria\n\nEach update method requires the following parameters:\n\n- **Query filter** document: Specifies which documents to update. For\n  more information about query filters, see the \n  :manual:`Query Filter Documents section </core/document/#query-filter-documents>` in\n  the {+mdb-server+} manual.\n\n- **Update** document: Specifies the **update operator**, or the kind of update to\n  perform, and the fields and values to change. For a list of update operators\n  and their usage, see the :manual:`Field Update Operators guide\n  </reference/operator/update-field/>` in the {+mdb-server+} manual.\n\nUpdate One Document\n~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``update_one()`` method to update the ``name``\nvalue of a document in the ``restaurants`` collection from ``\"Bagels N Buns\"``\nto ``\"2 Bagels 2 Buns\"``:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-one\n   :end-before: end-update-one\n   :language: cpp\n   :dedent:\n\nUpdate Many Documents\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``update_many()`` method to update all documents\nthat have a ``cuisine`` value of ``\"Pizza\"``. After the update, the documents have\na ``cuisine`` value of ``\"Pasta\"``.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-many\n   :end-before: end-update-many\n   :language: cpp\n   :dedent:\n\nCustomize the Update Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``update_one()`` and ``update_many()`` methods by\npassing an instance of the ``mongocxx::options::update`` class as an optional\nparameter. The following table describes the fields you can set in a\n``mongocxx::options::update`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field\n     - Description\n\n   * - ``upsert``\n     - | Specifies whether the update operation performs an upsert operation if no \n         documents match the query filter. For more information, see the :manual:`upsert\n         statement </reference/command/update/#std-label-update-command-upsert>`\n         in the {+mdb-server+} manual.\n       | Defaults to ``false``.\n\n   * - ``bypass_document_validation``\n     - | Specifies whether the update operation bypasses document validation. This lets you \n         update documents that don't meet the schema validation requirements, if any \n         exist. For more information about schema validation, see :manual:`Schema\n         Validation </core/schema-validation/#schema-validation>` in the MongoDB\n         Server manual.\n       | Defaults to ``false``.\n\n   * - ``collation``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``array_filters``\n     - | Specifies which array elements an update applies to if the operation modifies\n         array fields.\n\n   * - ``hint``\n     - | Sets the index to scan for documents. \n         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``write_concern``\n     - | Sets the write concern for the operation.\n         For more information, see :manual:`Write Concern </reference/write-concern/>`\n         in the {+mdb-server+} manual.\n\n   * - ``let``\n     - | Specifies a document with a list of values to improve operation readability.\n         Values must be constant or closed expressions that don't reference document\n         fields. For more information, see the :manual:`let statement\n         </reference/command/update/#std-label-update-let-syntax>` in the\n         {+mdb-server+} manual.\n\n   * - ``comment``\n     - | A comment to attach to the operation. For more information, see the :manual:`insert command\n         fields </reference/command/insert/#command-fields>` guide in the\n         {+mdb-server+} manual for more information.\n\nThe following example uses the ``update_many()`` method to find all documents that\nhave ``borough`` value of ``\"Manhattan\"``. It then updates the ``borough`` value\nin these documents to ``\"Manhattan (north)\"``. Because the ``upsert`` option is\nset to ``true``, the {+driver-short+} inserts a new document if the query filter doesn't \nmatch any existing documents.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-options\n   :end-before: end-update-options\n   :language: cpp\n   :dedent:\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``update_one()`` and ``update_many()`` methods return an instance of\nthe ``mongocxx::result::update`` class. This class contains the following\nmember functions:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Function\n     - Description\n\n   * - ``matched_count()``\n     - | Returns the number of documents that matched the query filter, regardless of\n         how many were updated.\n\n   * - ``modified_count()``\n     - | Returns number of documents modified by the update operation. If an updated\n         document is identical to the original, it is not included in this\n         count.\n         \n   * - ``result()``\n     - | Returns the raw result document for the operation.\n\n   * - ``upserted_count()``\n     - | Returns the number of document that were upserted into the database.\n\n   * - ``upserted_id()``\n     - | Returns the ID of the document that was upserted in the database, if the driver\n         performed an upsert.\n        \nThe following example uses the ``update_many()`` method to update the ``name`` field\nof matching documents from ``\"Dunkin' Donuts\"`` to ``\"Dunkin'\"``. It calls the\n``modified_count()`` member function to print the number of modified documents:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write/update.txt"
  },
  {
    "code": "   :language: cpp\n   :dedent:\n   :linenos:\n   :emphasize-lines: 23-25\n\nInsert One\n----------\n\nThe following code shows how to insert a single document into a collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-insert-one\n   :end-before: end-insert-one\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``insert_one()`` method, see the :ref:`Insert Documents\n<cpp-write-insert>` guide.\n\nInsert Multiple\n---------------\n\nThe following code shows how to insert multiple documents into a collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-insert-multiple\n   :end-before: end-insert-multiple\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``insert_many()`` method, see the :ref:`Insert Documents\n<cpp-write-insert>` guide.\n\nUpdate One\n----------\n\nThe following code shows how to update a single document in a collection by creating\nor editing a field:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-update-one\n   :end-before: end-update-one\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``update_one()`` method, see the\n:ref:`Update Documents <cpp-write-update>` guide.\n\nUpdate Multiple\n---------------\n\nThe following code shows how to update multiple documents in a collection by creating\nor editing a field:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-update-multiple\n   :end-before: end-update-multiple\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``update_many()`` method, see the\n:ref:`Update Documents <cpp-write-update>` guide.\n\nReplace One\n-----------\n\nThe following code shows how to replace a single document in a collection: \n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-replace-one\n   :end-before: end-replace-one\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``replace_one()`` method, see the \n:ref:`Replace Documents <cpp-write-replace>` guide. \n\nDelete One\n----------\n\nThe following code shows how to delete a single document in a collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-delete-one\n   :end-before: end-delete-one\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``delete_one()`` method, see the\n:ref:`Delete Documents <cpp-write-delete>` guide.\n\nDelete Multiple\n---------------\n\nThe following code shows how to delete multiple documents in a collection:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-delete-multiple\n   :end-before: end-delete-multiple\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``delete_many()`` method, see the\n:ref:`Delete Documents <cpp-write-delete>` guide.\n\nBulk Write\n----------\n\nThe following code shows how to perform multiple write operations in a single bulk\noperation:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  },
  {
    "code": "   :start-after: start-bulk-write\n   :end-before: end-bulk-write\n   :language: cpp\n   :dedent:\n\nTo learn more about the ``create_bulk_write()`` method, see the\n:ref:`Bulk Write <cpp-bulk-write>` guide.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-cpp/source/write.txt"
  }
]
