[
  {
    "code": "   :copyable: false\n\n   Error: couldn't connect to server 127.0.0.1:27017\n\nThe following sections describe actions you can take to potentially resolve the\nissue.\n\n.. _csharp-troubleshooting-connection-string-port:\n\nCheck Your Connection String\n----------------------------\n\nVerify that the hostname and port number in the connection string are both\naccurate. The default port value for a MongoDB instance is\n``27017``, but you can configure MongoDB to communicate on another port.\n\n.. _csharp-troubleshooting-connection-firewall:\n\nConfigure Your Firewall\n-----------------------\n\nVerify that the ports your MongoDB deployment listens on are not blocked by a\nfirewall on the same network. MongoDB uses port ``27017`` by default. To learn\nmore about the default ports MongoDB uses and how to change them, see\n:manual:`Default MongoDB Port </reference/default-mongodb-port/>`.\n\n.. warning::\n\n   Do not open a port in your firewall unless you are sure it's the port\n   used by your MongoDB deployment.\n\nAuthentication Error\n~~~~~~~~~~~~~~~~~~~~\n\nThe {+driver-short+} can fail to connect to a MongoDB instance if\nthe authentication mechanism is not configured correctly. If you are using ``SCRAM-SHA-256``\nor ``SCRAM-SHA-1`` for authentication and the driver fails to connect, the\ndriver might raise an error message similar to one of the following messages:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   Command failed with error 18 (AuthenticationFailed): 'Authentication\n   failed.' on server <hostname>:<port>.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   Authentication failed\",\"attr\":{\"mechanism\":\"SCRAM-SHA-256\",\"principalName\":\n   \"<db_username>\",\"<auth database>\":\"<db_username>\",\"client\":\"127.0.0.1:2012\",\n   \"result\":\"UserNotFound: Could not find user}}\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   connection() error occurred during connection handshake: auth error:\n   sasl conversation error: unable to authenticate using mechanism\n   \"SCRAM-SHA-256\": (AuthenticationFailed) Authentication failed.\n\nThe following sections describe actions you can take to potentially resolve the\nissue.\n\n.. _csharp-troubleshooting-connection-string-auth:\n\nCheck Your Connection String\n----------------------------\n\nAn invalid connection string is the most common cause of authentication\nissues when attempting to connect to MongoDB using connection strings and\n``SCRAM-SHA-256`` or ``SCRAM-SHA-1``.\n\n.. tip::\n\n   For more information about connection strings,\n   see :ref:`Connection URI <csharp-connection-uri>` in the Connection Guide.\n\nIf your connection string contains a username and password, ensure that they\nare in the correct format. If the username or password includes any of the\nfollowing characters, they must be\n`percent encoded <https://tools.ietf.org/html/rfc3986#section-2.1>`__:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: true\n\n   using MongoDB.Driver;\n\n   // Connection URI\n   const string connectionUri = \"mongodb://<db_username>:<db_password>@<hostname>:<port>/?authSource=users\";\n\n   // Create a new client and connect to the server\n   var client = new MongoClient(connectionUri);\n\nYou can also set configuration settings by creating a ``MongoClientSettings``\nobject and passing that to the ``MongoClient`` constructor. You can use the\n``Credential`` property to set the login credentials including specifying the\nauthentication database. For more information about using ``MongoClientSettings``\nas well as some examples, see\n:ref:`Using MongoClientSettings <csharp-mongo-client-settings>`.\n\nYou can check if this is the issue by attempting to connect to a MongoDB\ninstance hosted on the local machine with the same code. A deployment on\nthe same machine doesn't require any authorization to connect.\n\n.. _csharp-troubleshooting-connection-X509:\n\nX.509 Credential Error\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/troubleshooting/x509.rst\n\nError Sending Message\n~~~~~~~~~~~~~~~~~~~~~\n\nWhen the driver fails to send a command after you make a request,\nit may display the following error message:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   com.mongodb.MongoSocketWriteException: Exception sending message\n\nThe following sections describe actions you can take to potentially resolve the\nissue.\n\nCheck the User Permissions\n--------------------------\n\nVerify that you've accessed the MongoDB deployment with the correct user. The\nterm \"message\" in the error can be a command sent by the driver.\nIf you are using a user that doesn't have permissions to send the command, the\ndriver could generate this error.\n\nAlso ensure that the user has the appropriate permissions for the message you\nare sending. MongoDB uses Role-Based Access Control (RBAC) to control access\nto a MongoDB deployment. For more information about how to configure RBAC in MongoDB,\nsee :manual:`Role-Based Access Control </core/authorization/>`.\n\nConfigure Your Firewall\n-----------------------\n\nThe firewall needs to have an open port for communicating with the MongoDB\ninstance. For more information about configuring the firewall, see\n:ref:`Configure Your Firewall <csharp-troubleshooting-connection-firewall>` in\nthe Connection Error section.\n\n.. _csharp-troubleshooting-connection-number-connections:\n\nCheck the Number of Connections\n-------------------------------\n\nEach ``MongoClient`` instance supports a maximum number of concurrent open\nconnections in its connection pool. You can configure the parameter ``MaxConnectionPoolSize``\nwhich defines this limit. The default value is ``100``. If there are already a\nnumber of open connections equal to ``MaxConnectionPoolSize``, the server waits until\na connection becomes available. If this wait time exceeds the ``MaxConnectionIdleTime``\nvalue, the driver responds with an error.\n\nFor more information about how connection pooling works, see\n:ref:`How Does Connection Pooling Work in the {+driver-short+}? <csharp-faq-connection-pool>`\nin the FAQ.\n\nToo Many Open Connections\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe driver creates the following error message when it attempts to open a\nconnection, but it's reached the maximum number of connections:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   connection refused because too many open connections\n\nThe following section describes a method that may help resolve the issue.\n\nCheck the Number of Connections\n-------------------------------\n\nIf you need to create more open connections, increase ``MaxConnectionPoolSize``. For more\ninformation about checking the number of connections, see\n:ref:`Check the Number of Connections <csharp-troubleshooting-connection-number-connections>`\nin the Error Sending Message section.\n\nTimeout Error\n~~~~~~~~~~~~~\n\nWhen the network is not able to deliver a request from the driver to the server\nquickly enough, it can time out. When this happens, you might receive an error message\nsimilar to the following message:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   timed out while checking out a connection from connection pool: context canceled\n\nIf you receive this error, try the following action to resolve the\nissue.\n\nSet connectTimeoutMS\n--------------------\n\nThe driver may hang when it's unable to establish a connection because the driver\ntakes too long attempting to reach unreachable replica set nodes. You can limit the\ntime the driver spends attempting to establish the connection by using the\n``connectTimeMS`` setting. To learn more about this setting, see the\n:manual:`Timeout Options </reference/connection-string/#timeout-options>` in\nthe Server manual.\n\nYou should ensure the ``connectTimeoutMS`` setting is not lower than\nthe highest network latency you have to a member of the set. If one of the\nsecondary members has a latency of 10000 milliseconds, setting the\n``connectTimeoutMS`` to 9000 prevents the driver from ever connecting to that\nmember.\n\nYou can set this option on the connection string. The following example sets\n``connectTimeoutMS`` to 10000 milliseconds.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: true\n\n   using MongoDB.Driver;\n\n   // Connection URI\n   const string connectionUri = \"mongodb://<db_username>:<db_password>@<hostname>:<port>/?connectTimeoutMS=10000\";\n\n   // Create a new client and connect to the server\n   var client = new MongoClient(connectionUri);\n\nYou can also set configuration settings by creating a ``MongoClientSettings``\nobject and passing that to the ``MongoClient`` constructor. For more information\nabout using ``MongoClientSettings`` as well as some examples, see\n:ref:`Using MongoClientSettings <csharp-mongo-client-settings>`.\n\nCheck the Number of Connections\n-------------------------------\n\nThe number of connections to the server may exceed ``MaxConnectionPoolSize``. For more\ninformation about checking the number of connections, see\n:ref:`Check the Number of Connections <csharp-troubleshooting-connection-number-connections>`\nin the Error Sending Message section.\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :start-after: // start-autocomplete-search\n   :end-before: // end-autocomplete-search\n   :language: csharp\n   :dedent:\n\n.. note::\n   \n   If the field you are searching on is indexed by a search index, you must pass the index name to the ``Autocomplete`` call. If a search index does not exist, the default index is used.\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-compound-search\n   :end-before: // end-compound-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-embedded-search\n   :end-before: // end-embedded-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-equals-search\n   :end-before: // end-equals-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-exists-search\n   :end-before: // end-exists-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-geoshape-search\n   :end-before: // end-geoshape-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-geowithin-search\n   :end-before: // end-geowithin-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: start-in-search\n   :end-before: end-in-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-morelikethis-search\n   :end-before: // end-morelikethis-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-near-search\n   :end-before: // end-near-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-phrase-search\n   :end-before: // end-phrase-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-multiphrase-search\n   :end-before: // end-multiphrase-search\n   :language: csharp\n   :dedent:\n\nThis search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-querystring-search\n   :end-before: // end-querystring-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-range-search\n   :end-before: // end-range-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-regex-search\n   :end-before: // end-regex-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-span-search\n   :end-before: // end-span-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-text-search\n   :end-before: // end-text-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "   :start-after: // start-wildcard-search\n   :end-before: // end-wildcard-search\n   :language: csharp\n   :dedent:\n\nThe search returns the following document:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/atlas-search.txt"
  },
  {
    "code": "      :copyable: true\n\n      MongoClientSettings.Extensions.AddAWSAuthentication();\n\nAfter you register the AWS authentication provider, you can either specify your AWS IAM \ncredentials explicitly or instruct the driver to retrieve them automatically from an\nexternal source. The following sections describe both of these methods.\n\nSpecify AWS IAM Credentials Manually\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can supply your AWS IAM credentials in a ``MongoClientSettings`` object either by \nusing a ``MongoCredential`` object or as part of the connection string. Select the \n:guilabel:`Connection String` or :guilabel:`MongoCredential` tab to\nsee the corresponding syntax for specifying your credentials: \n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: mongodb-aws-mongoclientsettings-connection-string\n      \n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/aws-iam.txt"
  },
  {
    "code": "         :emphasize-lines: 1\n\n         var credential = MongoCredential.CreateGssapiCredential(\"<username>\", \"<password>\");\n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\n.. tip:: Omitting the Password\n\n   You can omit the password parameter if either of the following is true:\n\n   - On Windows, the process owner running the application is the same as the\n     user needing authentication.\n\n   - On Linux, the user has initialized their keytab via ``kinit username@REALM.COM``.\n  \nAdditional Properties\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can include the following GSSAPI configuration options in either your connection string\nor your ``MongoCredential`` object.\n\nFully Qualified Domain Name\n```````````````````````````\n\nThe following example shows how to use the DNS server to retrieve the fully\nqualified domain name of the host:\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: connection-string\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/kerberos.txt"
  },
  {
    "code": "         :emphasize-lines: 1, 2\n\n         var credential = MongoCredential.CreateGssapiCredential(\"<username>\", \"<password>\");\n         credential = credential.WithMechanismProperty(\"CANONICALIZE_HOST_NAME\", \"true\");\n         \n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\nRealm\n`````\n\nThe following example shows how to specify the user's realm when it is different\nfrom the service's realm. Replace the ``<user's realm>`` placeholder with the\nrealm of the Kerberos user.\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: connection-string\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/kerberos.txt"
  },
  {
    "code": "         :emphasize-lines: 1, 2\n\n         var credential = MongoCredential.CreateGssapiCredential(\"<username>\", \"<password>\");\n         credential = credential.WithMechanismProperty(\"SERVICE_REALM\", \"<user's realm>\");\n         \n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\nService Name\n````````````\n\nThe following example shows how to specify the service name when it is not the\ndefault ``mongodb``. Replace the ``<service name>`` placeholder with the name of\nthe service.\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: connection-string\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/kerberos.txt"
  },
  {
    "code": "         :emphasize-lines: 1, 2\n\n         var credential = MongoCredential.CreateGssapiCredential(\"<username>\", \"<password>\");\n         credential = credential.WithMechanismProperty(\"SERVICE_NAME\", \"<service name>\");\n         \n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\nMultiple Properties\n```````````````````\n\nThe following example shows how to specify multiple authentication mechanism\nproperties:\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: connection-string\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/kerberos.txt"
  },
  {
    "code": "         :emphasize-lines: 2, 3\n\n         var credential = MongoCredential.CreateGssapiCredential(\"<username>\", \"<password>\");\n         credential = credential\n            .WithMechanismProperty(\"SERVICE_REALM\", \"<user's realm>\")\n            .WithMechanismProperty(\"SERVICE_NAME\", \"<service name>\");\n         \n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the methods or types discussed on this\npage, see the following API documentation:\n\n- `MongoClient <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClient.html>`__\n- `MongoClientSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClientSettings.html>`__\n- `MongoCredential <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.html>`__\n- `CreateGssapiCredential() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.CreateGssapiCredential.html>`__\n- `WithMechanismProperty() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.WithMechanismProperty.html>`__\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/kerberos.txt"
  },
  {
    "code": "         :emphasize-lines: 1\n\n         var credential = MongoCredential\n            .CreatePlainCredential(\"<authenticationDb>\", \"<username>\", \"<password>\");\n         var settings = MongoClientSettings.FromConnectionString(\"<connection string>\");\n         settings.Credential = credential;\n         var mongoClient = new MongoClient(settings);\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the methods or types discussed on this\npage, see the following API documentation:\n\n- `MongoClient <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClient.html>`__\n- `MongoClientSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClientSettings.html>`__\n- `MongoCredential <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.html>`__\n- `CreatePlainCredential() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.CreatePlainCredential.html>`__\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/authentication/ldap.txt"
  },
  {
    "code": "   :start-after: start-create\n   :end-before: newRestaurant.Add(new BsonElement(\"restaurant_id\", \"12345\"));\n   :language: csharp\n   :copyable:\n   :dedent:\n\nChange a BSON Document\n----------------------\n\nThe ``BsonDocument`` class includes methods that let you change the contents of the\nBSON document. The following code sample makes three changes to the previous\n``BsonDocument`` object:\n\n1. Adds a new field, ``\"restaurant_id\"``, with the value ``\"12345\"``\n#. Removes the ``\"cuisine\"`` field\n#. Sets the value of the ``\"name\"`` field to ``\"Mongo's Pizza Palace\"``\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/bson.txt"
  },
  {
    "code": "   :start-after: start-create\n   :end-before: end-change\n   :language: csharp\n   :copyable:\n   :dedent:\n   :emphasize-lines: 15-17\n\n.. note::\n\n   For a full list of methods in the ``BsonDocument`` class, see the \n   :ref:`csharp-bson-api`.\n\nWrite BSON to a File\n--------------------\n\nYou can write BSON to a file using the methods in the ``BsonBinaryWriter`` class. To\nwrite to a file, perform the following steps:\n\n1. Open a file stream for the file containing BSON data.\n#. Create a ``BsonBinaryWriter`` using the file stream.\n#. For each BSON document and subdocument you want to create, call \n   ``WriteStartDocument()``.\n#. Within each BSON document and subdocument, call ``WriteName()`` to set the field\n   name and the appropriate ``Write*`` method to set its value. Each data type has a \n   dedicated ``Write*`` method that you should use.\n#. To start and end arrays, use ``WriteStartArray()`` and ``WriteEndArray()``.\n#. At the end of each document and subdocument, call ``WriteEndDocument()``. \n\nThe following code sample shows how to write the sample BSON document to ``myFile.bson``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/bson.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-model\n   :end-before: end-model\n\nEach builder class takes a generic type parameter\n``TDocument`` which represents the type of document that you are working\nwith. In this guide, the ``Flower`` class is the document type used in\neach builder class example.\n\nConstruct a Filter\n------------------\n\nThe ``FilterDefinitionBuilder`` class provides a type-safe interface for\nbuilding up queries. Suppose you want to query your collection for\ndocuments matching the following criteria:\n\n- ``Price`` field value less than 20\n- ``Category`` field value is \"Perennial\"\n\nUse builders to create the filter definition with the typed variant:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Filter;\n   var filter = builder.Lt(f => f.Price, 20) & builder.Eq(f => f.Category, \"Perennial\");\n   \nUsing the typed variant form provides compile-time safety. Additionally,\nyour IDE can provide refactoring support.\n\nAlternatively, you can use string-based field names to contruct the filter:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Filter;\n   var filter = builder.Lt(\"Price\", 20) & builder.Eq(\"Category\", \"Perennial\");\n\nIf you are using LINQ, you can also use the ``Inject()`` method to apply the filter\nto a LINQ query:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Filter;\n   var filter = builder.Lt(\"Price\", 20) & builder.Eq(\"Category\", \"Perennial\");\n   var query = collection.AsQueryable().Where(f => filter.Inject());\n\nArray Operators\n~~~~~~~~~~~~~~~\n\nIf your document has properties or fields that serialize to arrays,\nyou can use the methods beginning with ``Any``, such as ``AnyEq()`` or\n``AnyLt()``, to compare the entire array against a single item.\n\nUse builders to check which documents in the collection have a\n``Season`` array that includes \"winter\":\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Filter;\n   var filter = builder.AnyEq(f => f.Season, \"winter\");\n\nYou can also call the ``ElemMatch()`` method to find documents that have an\narray field that contains at least one element that matches a specified search\ncriteria. The following example returns documents that contain the value\n``\"Summer\"`` in their ``Season`` array:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Filter;\n   var filter = builder.ElemMatch(f => f.Season, s => s == \"Summer\");\n\nTo learn more about array operators, see the :manual:`Array Query Operators\n</reference/operator/query-array/>` guide in the {+mdb-server+} manual.\n\n.. _csharp-builders-projection:\n\nCreate a Projection\n-------------------\n\nThe ``ProjectionDefinitionBuilder`` class provides a type-safe interface for\ndefining a projection. Suppose you want to create a projection on the\n``Name`` and ``Price`` fields, but exclude the ``Id`` field.\n\nUse builders to create the projection definition with the typed variant:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Projection;\n   var projection = builder.Include(f => f.Name).Include(f => f.Price).Exclude(f => f.Id);\n\nYou can also use string-based field names to define the projection:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Projection;\n   var projection = builder.Include(\"Name\").Include(\"Price\").Exclude(\"Id\");\n\nFinally, you can use the ``Expression()`` method to define the\nprojection:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Projection;\n   var projection = builder.Expression(f => new { Name = f.Name, Price = f.Price });\n\nThis definition has a return type of ``ProjectionDefinition<TDocument,\nTProjection>`` whereas the others return a\n``ProjectionDefinition<TDocument>``.\n\nLambda Expressions\n~~~~~~~~~~~~~~~~~~\n\nThe driver supports using lambda expressions to render projections. When\nyou define a ``Find()`` projection with the ``Expression()`` method to\ncreate a lambda expression, the driver inspects the expression\nto determine which fields are referenced and automatically constructs a\nserver-side projection to return only those fields.\n\nYou can also use lambda expressions to create new fields by performing\noperations on values in your documents. The following example shows how\nyou can use a lambda expression to project a new ``Profit`` field\nusing the ``Price`` and ``Stock`` fields:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Projection;\n   var projection = builder.Expression(f => new { Profit = f.Price * f.Stock });\n\n.. note:: ``Id`` Field Exclusion\n\n   When you create a projection using a lambda expression, the output\n   automatically excludes the ``Id`` field unless you explicitly include\n   is as a projection field.\n\nDefine a Sort\n-------------\n\nThe ``SortDefinitionBuilder`` class provides a type-safe interface for\nbuilding up sort syntax. Suppose you want to define a sort with the\nfollowing order:\n\n- Ascending on ``Price``\n- Descending on ``Category``\n\nUse builders to create the sort definition with the typed variant:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Sort;\n   var sort = builder.Ascending(f => f.Price).Descending(f => f.Category);\n\nAlternatively, you can use string-based field names to define the sort:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Sort;\n   var sort = builder.Ascending(\"Price\").Descending(\"Category\");\n\nDefine an Update\n----------------\n\nThe ``UpdateDefinitionBuilder`` class provides a type-safe interface for\nbuilding up an update specification. Suppose you want to create an\nupdate specification with the following criteria:\n\n- Create the new field ``SunRequirement``\n- Multiply the ``Price`` field value by 0.9\n\nUse builders to create the update specification with the typed variant:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Update;\n   var update = builder.Set(f => f.SunRequirement, \"Full sun\").Mul(f => f.Price, 0.9);\n\nAlternatively, you can use string-based field names to define the update:\n   \n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.Update;\n   var update = builder.Set(\"SunRequirement\", \"Full sun\").Mul(\"Price\", 0.9);\n\n.. _csharp-builders-indexes:\n\nDefine Index Keys\n-----------------\n\nThe ``IndexKeysDefinitionBuilder`` class provides a type-safe interface for\ndefining index keys. Suppose you want to select ``Category`` as an\nascending index key.\n\nUse builders to select the index key with the typed variant:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<Flower>.IndexKeys;\n   var keys = builder.Ascending(f => f.Category);\n\nAlternatively, you can use string-based field names to select the index key:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :copyable: true\n\n   var builder = Builders<BsonDocument>.IndexKeys;\n   var keys = builder.Ascending(\"Category\");\n\nThe ``IndexKeysDefinitionBuilder`` class also provides methods to build\na wildcard index. You can create a wildcard index using ``All field paths`` or ``A\nsingle field path``, in this case using ``Category``:\n\n.. tabs::\n\n   .. tab:: ``All field paths``\n      :tabid: all-wildcard-index\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "         :copyable: true\n\n         var builder = Builders<Flower>.IndexKeys;\n         var keys = builder.Wildcard();\n\n   .. tab:: ``A single field path``\n      :tabid: single-wildcard-index\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "         :copyable: true\n\n         var builder = Builders<Flower>.IndexKeys;\n\n         // Using the typed variant\n         var keys = builder.Wildcard(f => f.Category);\n\n         // Using string-based field names\n         var keys = builder.Wildcard(\"Category\");\n\nFor more information about how to use wildcard indexes, see \n:manual:`Wildcard Indexes </core/indexes/index-types/index-wildcard>`.\n\n.. _csharp-builders-aggregation:\n\nBuild an Aggregation Pipeline\n-----------------------------\n\nThe ``PipelineDefinitionBuilder`` class provides a type-safe interface for\ndefining an **aggregation pipeline**. An aggregation pipeline is a series of\nstages that are used to transform a document. Suppose you want to create a\npipeline that performs the following operations:\n\n- Matches all documents with \"spring\" in the ``Season`` field\n- Sorts the results by the ``Category`` field\n- Groups the documents by category and shows the average price and total\n  available for all documents in that category\n\nUse ``PipelineDefinitionBuilder`` classes to build the pipeline:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/builders.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: // start local connection\n   :end-before: // end local connection\n\n.. tip:: Reuse Your Client\n\n   Because each ``MongoClient`` represents a pool of connections to the\n   database, most applications require only a single instance of\n   ``MongoClient``, even across multiple requests. To learn more about\n   how connection pools work in the driver, see the :ref:`FAQ page\n   <csharp-faq-connection-pool>`.\n\nSee :manual:`the MongoDB Manual </reference/connection-string>` for more information about creating a connection string.\n\nMongoClientSettings\n-------------------\n\nYou can use a ``MongoClientSettings`` object to configure the connection in code\nrather than in a connection URI. To use a ``MongoClientSettings`` object, create an \ninstance of the class and pass it as an argument to the ``MongoClient`` constructor. \n\nIn the following example, the driver uses a ``MongoClientSettings`` object to connect to a \nMongoDB instance on port ``27017`` of ``localhost``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connect.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: // start mongo client settings\n   :end-before: // end mongo client settings\n\nOther Connection Targets\n------------------------\n\nConnect to Atlas\n~~~~~~~~~~~~~~~~\n\nTo connect to a MongoDB deployment on Atlas, create a client. You can\ncreate a client that uses your connection string and other \nclient options by passing a ``MongoClientSettings`` object to the ``MongoClient``\nconstructor.\n\nTo specify your connection URI, pass it to the ``FromConnectionString()``\nmethod, which returns a new ``MongoClientSettings`` instance. To specify any other\nclient options, set the relevant fields of the ``MongoClientSettings`` object.\n\nYou can set the {+stable-api+} version as a client option to avoid\nbreaking changes when you upgrade to a new server version. To \nlearn more about the {+stable-api+} feature, see the :ref:`{+stable-api+} page\n<csharp-stable-api>`.\n\nThe following code shows how you can specify the connection string and\nthe {+stable-api+} client option when connecting to a MongoDB\ndeployment and verify that the connection is successful:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connect.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: // start atlas connection\n   :end-before: // end atlas connection\n\n.. tip::\n\n   Follow the :atlas:`Atlas driver connection guide </driver-connection?tck=docs_driver_nodejs>`\n   to retrieve your connection string.\n\nConnect to a Replica Set\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo connect to a replica set deployment, specify the hostnames (or IP addresses) and \nport numbers of the members of the replica set.\n\nIf you aren't able to provide a full list of hosts in the replica set, you can \nspecify one or more of the hosts in the replica set and instruct the driver to \nperform automatic discovery in one of the following ways:\n\n- Specify the name of the replica set as the value of the ``replicaSet`` parameter.\n- Specify ``false`` as the value of the ``directConnection`` parameter.\n- Specify more than one host in the replica set.\n\nIn the following example, the driver uses a sample connection URI to connect to the \nMongoDB replica set ``sampleRS``, which is running on port ``27017`` of three different\nhosts, including ``sample.host1``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connect.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: // start replica set connection\n   :end-before: // end replica set connection\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connect.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: // start local connection config\n   :end-before: // end local connection config\n\n.. _csharp-mongo-client-settings:\n\n-----------------------------\nUsing ``MongoClientSettings``\n-----------------------------\n\nYou can use a ``MongoClientSettings`` object to configure connection settings in code\nrather than in a connection URI. Configuring the connection this way makes it easier to\nchange settings at runtime, helps you catch errors during compilation, and provides\nmore configuration options than the connection URI.\n\nTo use a ``MongoClientSettings`` object, create an instance of the class, set\nits properties, and pass it as an argument to the ``MongoClient`` constructor:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connection-options.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: // start mongo client settings config\n   :end-before: // end mongo client settings config\n\nConnection Options\n------------------\n\nThe following table lists each connection option available in the\n``MongoClientSettings`` class and, if possible, how to achieve the same result in\nthe connection string. If a ``MongoClientSettings`` property maps to more than one\noption in the connection string, the **Connection URI Example** shows all\nrelevant options.\n\n.. note::\n\n   If you're using a query parameter for a time duration, the value must be in\n   milliseconds. For example, to specify 60 seconds, use the value ``60000``. If you're\n   using a ``MongoClientSettings`` object for a time duration, use the appropriate\n   ``TimeSpan`` value.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - **MongoClientSettings** Property\n     - Description\n\n   * - **AllowInsecureTls**\n     - | Specifies whether to relax TLS constraints as much as possible. This can include\n       | allowing invalid certificates or hostname mismatches.\n       |\n       | If this property is set to ``true`` and ``SslSettings.CheckCertificateRevocation``\n       | is set to ``false``, the {+driver-short+} will throw an exception.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: ``tlsInsecure=true``\n\n   * - **ApplicationName**\n     - | The app name the driver passes to the server in the client metadata as part of\n       | the connection handshake. The server prints this value to the MongoDB logs once\n       | the connection is established. The value is also recorded in the slow query logs\n       | and profile collections.\n       |\n       | **Data Type**: {+string-data-type+}\n       | **Default**: ``null``\n       | **Connection URI Example**: ``appName=yourApp``\n\n   * - **AutoEncryptionOptions**\n     - | Settings for automatic client-side encryption.\n       |\n       | **Data Type**: `AutoEncryptionOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Encryption.AutoEncryptionOptions.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **ClusterConfigurator**\n     - | Low-level configuration options for sockets, TLS, cluster, and others.\n       |\n       | **Data Type**: Action<`ClusterBuilder <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Configuration.ClusterBuilder.html>`__>\n       | **Default**: ``null``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **Compressors**\n     - | The preferred compression types, in order, for wire-protocol messages sent to\n       | or received from the server. The driver uses the first of these compression types\n       | that the server supports.\n       |\n       | **Data Type**: `CompressorConfiguration <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Configuration.CompressorConfiguration.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: ``compressors=snappy,zstd``\n\n   * - **ConnectTimeout**\n     - | The length of time the driver tries to establish a single TCP socket connection\n       | to the server before timing out.\n       |\n       | **DataType**: ``TimeSpan``\n       | **Default**: 30 seconds\n       | **Connection URI Example**: ``connectTimeoutMS=0``\n\n   * - **Credential**\n     - | Settings for how the driver authenticates to the server. This includes\n       | authentication credentials, mechanism, source, and other settings.\n       |\n       | If you don't specify an authentication mechanism, the driver uses either\n       | ``SCRAM-SHA-1`` or ``SCRAM-SHA-256``, depending on the server version. See\n       | :ref:`authentication mechanisms <csharp-authentication-mechanisms>` for available\n       | authentication mechanisms.\n       |\n       | **Data Type**: `MongoCredential <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCredential.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connection-options.txt"
  },
  {
    "code": "          :copyable: false\n\n          mongodb://user1:password1&authMechanism=GSSAPI\n          &authMechanismProperties=SERVICE_NAME:other,REALM:otherrealm\n          &authSource=$external\n\n   * - **DirectConnection**\n     - | Specifies whether to force dispatch **all** operations to the host.\n       |\n       | If you specify this option, the driver doesn't accept the\n       | :manual:`DNS seed list connection format. </reference/connection-string/#std-label-connections-dns-seedlist>`\n       | You must use the :manual:`standard connection URI format </reference/connection-string/#standard-connection-string-format/>`\n       | instead.\n       |\n       | This property must be set to ``false`` if you specify more than one\n       | host name.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: ``directConnection=true``\n\n   * - **HeartbeatInterval**\n     - | The interval between regular server-monitoring checks. Must be greater than or\n       | equal to 500 milliseconds.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 10 seconds\n       | **Connection URI Example**: ``heartbeatFrequencyMS=5000``\n\n   * - **HeartbeatTimeout**\n     - | The length of time a monitoring socket can be idle before timing out.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: Same value as ``ConnectTimeout``\n       | **Connection URI Example**: ``heartbeatTimeoutMS=5000``\n\n   * - **IPv6**\n     - | Specifies whether the host address is in IPv6 format.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: ``ipv6=true``\n\n   * - **IsFrozen**\n     - | Indicates whether the settings have been frozen. Frozen settings can't be changed.\n       | This option is read-only.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **LoadBalanced**\n     - | Specifies whether the driver is connecting to a load balancer. You can set this\n       | property to ``true`` only if:\n\n       - You specify just one host name.\n       - You're not connecting to a replica set.\n       - You're not using the ``SrvMaxHosts`` property.\n       - You're not using the ``DirectConnection`` property.\n\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: ``loadBalanced=true``\n\n   * - **LocalThreshold**\n     - | The latency window for server eligibility. If a server's round trip takes longer\n       | than the fastest server's round-trip time plus this value, the server isn't\n       | eligible for selection.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 15 milliseconds\n       | **Connection URI Example**: ``localThresholdMS=0``\n\n   * - **LoggingSettings**\n     - | The settings used for :ref:`logging. <csharp-logging>`\n       |\n       | **Data Type**: `LoggingSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Configuration.LoggingSettings.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **MaxConnecting**\n     - | The greatest number of connections a driver's connection pool may be\n       | establishing concurrently.\n       |\n       | **Data Type**: {+int-data-type+}\n       | **Default**: ``2``\n       | **Connection URI Example**: ``maxConnecting=3``\n\n   * - **MaxConnectionIdleTime**\n     - | The length of time a connection can be idle before the driver closes it.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 10 minutes\n       | **Connection URI Example**: ``maxIdleTimeMS=300000``\n\n   * - **MaxConnectionLifeTime**\n     - | The length of time a connection can be pooled before expiring.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 30 minutes\n       | **Connection URI Example**: ``maxLifetimeMS=50000``\n\n   * - **MaxConnectionPoolSize**\n     - | The greatest number of clients or connections the driver can create in its\n       | connection pool. This count includes connections in use.\n       |\n       | **Data Type**: {+int-data-type+}\n       | **Default**: ``100``\n       | **Connection URI Example**: ``maxPoolSize=150``\n\n   * - **MinConnectionPoolSize**\n     - | The number of connections the driver should create and keep in the connection\n       | pool even when no operations are occurring. This count includes connections\n       | in use.\n       |\n       | **Data Type**: {+int-data-type+}\n       | **Default**: ``0``\n       | **Connection URI Example**: ``minPoolSize=1``\n\n   * - **ReadConcern**\n     - | The client's default read concern.\n       | See :ref:`read concern <read-concern>` for more information.\n       |\n       | **Data Type**: `ReadConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadConcern.html>`__\n       | **Default**: ``ReadConcern.Default``\n       | **Connection URI Example**: ``readConcernLevel=local``\n\n   * - **ReadEncoding**\n     - | The UTF-8 encoding to use for string deserialization.\n       | Strict encoding will throw an exception when an invalid UTF-8 byte sequence\n       | is encountered.\n       |\n       | **Data Type**: ``UTF8Encoding``\n       | **Default**: Strict encoding\n       | **Connection URI Example**: {+not-available+}\n\n   * - **ReadPreference**\n     - | The client's default read-preference settings. ``MaxStaleness`` represents the\n       | longest replication lag, in wall-clock time, that a secondary can experience and\n       | still be eligible for server selection. Specifying ``-1`` means no maximum.\n       | See :ref:`read preference <read-preference>` for more information.\n       |\n       | **Data Type**: `ReadPreference <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadPreference.html>`__\n       | **Default**: ``ReadPreference.Primary``\n       | **Connection URI Example**:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connection-options.txt"
  },
  {
    "code": "          :copyable: false\n\n          readPreference=primaryPreferred\n          &maxStalenessSeconds=90\n          &readPreferenceTags=dc:ny,rack:1\n       \n       | You can include the ``readPreferenceTags`` parameter in the connection URI more\n         than once. If you do, the client treats each instance as a separate tag set.\n         The order of the tags in the URI determines the order for read preference. You can\n         use this parameter only if the read-preference mode is not ``primary``.\n\n   * - **ReplicaSetName**\n     - | The name of the replica set to connect to.\n       |\n       | **Data Type**: {+string-data-type+}\n       | **Default**: ``null``\n       | **Connection URI Example**: ``replicaSet=yourReplicaSet``\n\n   * - **RetryReads**\n     - | Enables retryable reads.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``true``\n       | **Connection URI Example**: ``retryReads=false``\n\n   * - **RetryWrites**\n     - | Enables retryable writes.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``true``\n       | **Connection URI Example**: ``retryWrites=false``\n\n   * - **Scheme**\n     - | Specifies whether to use the standard connection string format (``MongoDB``)\n       | or the DNS seed list format (``MongoDBPlusSrv``).\n       | See :manual:`the MongoDB Manual</reference/connection-string/>` for more\n       | information about connection string formats.\n       |\n       | If the ``DirectConnection`` property is set to ``true`` and you\n       | try to use the DNS seed list format, the {+driver-short+} will throw an\n       | exception.\n       |\n       | **Data Type**: `ConnectionStringScheme <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Configuration.ConnectionStringScheme.html>`__\n       | **Default**: ``ConnectionStringScheme.MongoDB``\n       | **Connection URI Example**: ``mongodb+srv://``\n\n   * - **Server**\n     - | The host and port number where MongoDB is running.\n       |\n       | **Data Type**: `MongoServerAddress <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoServerAddress.html>`__\n       | **Default**: ``localhost:27017``\n       | **Connection URI Example**: ``mongodb://sample.host:27017``\n\n   * - **ServerApi**\n     - | Allows opting into Stable API versioning. See\n       | :manual:`the MongoDB Manual</reference/stable-api>` for more information about\n       | Stable API versioning.\n       |\n       | **Data Type**: `ServerApi <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ServerApi.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **ServerMonitoringMode**\n     - | Specifies the server monitoring protocol to use. When\n       | this option is set to ``Auto``, the monitoring mode is determined\n       | by the environment in which the driver is running. The driver\n       | uses polling mode in function-as-a-service (FaaS) environments,\n       | such as AWS Lambda, and the streaming mode in other environments.\n       | \n       | **Data Type**: `ServerMonitoringMode <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Servers.ServerMonitoringMode.html>`__\n       | **Default**: ``Auto``\n       | **Connection URI Example**: ``serverMonitoringMode=poll``\n\n   * - **Servers**\n     - | The cluster members where MongoDB is running.\n       |\n       | **Data Type**: IEnumerable<`MongoServerAddress <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoServerAddress.html>`__>\n       | **Default**: ``localhost:27017``\n       | **Connection URI Example**: ``mongodb://sample.host1:27017,sample.host2:27017``\n\n   * - **ServerSelectionTimeout**\n     - | The length of time the driver tries to select a server before timing out.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 30 seconds\n       | **Connection URI Example**: ``serverSelectionTimeoutMS=15000``\n\n   * - **SocketTimeout**\n     - | The length of time the driver tries to send or receive on a socket before\n       | timing out.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: OS default\n       | **Connection URI Example**: ``socketTimeoutMS=0``\n\n   * - **SrvMaxHosts**\n     - | The greatest number of SRV results to randomly select when initially populating\n       | the seedlist or, during SRV polling, adding new hosts to the topology.\n       |\n       | You can use this property only if the connection-string scheme is set\n       | to ``ConnectionStringScheme.MongoDBPlusSrv``. You cannot use it when connecting\n       | to a replica set.\n       |\n       | **Data Type**: {+int-data-type+}\n       | **Default**: ``0``\n       | **Connection URI Example**: ``srvMaxHosts=3``\n\n   * - **SslSettings**\n     - | TLS/SSL options, including client certificates, revocation handling, and\n       | enabled and disabled TLS/SSL protocols.\n       |\n       | If ``SslSettings.CheckCertificateRevocation`` is set to ``false`` and\n       | ``AllowInsecureTls`` is set to ``true``, the {+driver-short+} will throw\n       | an exception.\n       |\n       | **Data Type**: `SslSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.SslSettings.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: ``tlsDisableCertificateRevocationCheck=false``\n\n   * - **TranslationOptions**\n     - | Specifies options, such as the {+mdb-server+} version, for translating LINQ\n       | queries to the Query API.\n       |\n       | **Data Type**: `ExpressionTranslationOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ExpressionTranslationOptions.html>`__\n       | **Default**: ``null``\n       | **Connection URI Example**: {+not-available+}\n\n   * - **UseTls**\n     - | Specifies whether to require TLS for connections to the server. If you use\n       | a scheme of ``\"mongodb+srv\"`` or specify other TLS options,\n       | this option defaults to ``true``.\n       |\n       | **Data Type**: {+bool-data-type+}\n       | **Default**: ``false``\n       | **Connection URI Example**: ``tls=true``\n\n   * - **WaitQueueTimeout**\n     - | The length of time the driver tries to check out a connection from a\n       | server's connection pool before timing out.\n       |\n       | **Data Type**: ``TimeSpan``\n       | **Default**: 2 minutes\n       | **Connection URI Example**: ``waitQueueTimeoutMS=0``\n\n   * - **WriteConcern**\n     - | The default write-concern settings, including write timeout and\n       | journaling, for the client.\n       | See :ref:`write concern <wc-j>` for more information.\n       |\n       | **Data Type**: `WriteConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.WriteConcern.html>`__\n       | **Default**: ``WriteConcern.Acknowledged``\n       | **Connection URI Example**: ``w=majority&wTimeoutMS=0&journal=true``\n\n   * - **WriteEncoding**\n     - | Specifies whether UTF-8 string serialization is strict or lenient. With strict\n       | encoding, the driver will throw an exception when it encounters an invalid\n       | UTF-8 byte sequence.\n       |\n       | **Data Type**: ``UTF8Encoding``\n       | **Default**: Strict encoding\n       | **Connection URI Example**: {+not-available+}\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/connection-options.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         const string connectionUri =\n           \"mongodb+srv://<db_username>:<db_password>@<cluster-url>/?compressors=snappy,zlib,zstd\";\n\n         var client = new MongoClient(connectionUri);\n\n   .. tab:: MongoClientSettings\n      :tabid: mongoclientsettings\n\n      To enable compression by using\n      `MongoClientSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClientSettings.html>`__,\n      set the ``Compressors`` property of your ``MongoClientSettings`` object to a\n      ``List`` of one or more ``CompressorConfiguration`` objects. Each\n      ``CompressorConfiguration`` object in the ``List`` represents an algorithm you\n      want to use:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/network-compression.txt"
  },
  {
    "code": "         :emphasize-lines: 5-10\n\n         var settings = new MongoClientSettings()\n         {  \n            Scheme = ConnectionStringScheme.MongoDB,\n            Server = new MongoServerAddress(\"<cluster-url>\"),\n            Compressors = new List<CompressorConfiguration>()\n            {  \n               new CompressorConfiguration(CompressorType.Snappy),\n               new CompressorConfiguration(CompressorType.Zlib),\n               new CompressorConfiguration(CompressorType.Zstandard)\n            }\n         };\n\n         var client = new MongoClient(settings);\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/network-compression.txt"
  },
  {
    "code": "         :emphasize-lines: 4\n\n         var settings = new MongoClientSettings \n         { \n            UseTls = true,\n            AllowInsecureTls = true \n         };\n         var client = new MongoClient(settings);\n      \n   .. tab:: Connection String\n      :tabid: connectionstring\n\n      To allow insecure TLS using a connection string, \n      assign the connection string parameter ``tlsInsecure`` a value of ``true``:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/tls.txt"
  },
  {
    "code": "         :emphasize-lines: 5\n\n         var settings = new MongoClientSettings\n         {\n            SslSettings = new SslSettings\n            {\n               CheckCertificateRevocation = true\n            },\n            UseTls = true\n         };\n\n   .. tab:: Connection String\n      :tabid: connectionstring\n\n      To enable revocation checking using a connection string, \n      assign the connection string parameter ``tlsDisableCertificateRevocationCheck`` \n      a value of ``false``:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/connection/tls.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\nOpen a Change Stream\n--------------------\n\nTo open a change stream, call the ``Watch()`` or ``WatchAsync()`` method. The instance on which you\ncall the method determines the scope of events that the change\nstream listens for. You can call the ``Watch()`` or ``WatchAsync()`` method on the following\nclasses:\n\n- ``MongoClient``: To monitor all changes in the MongoDB deployment\n- ``Database``: To monitor changes in all collections in the database\n- ``Collection``: To monitor changes in the collection\n\nThe following example opens a change stream on the ``restaurants`` collection\nand outputs the changes as they occur. Select the\n:guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: change-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-open-change-stream-async\n         :end-before: end-open-change-stream-async\n         :language: csharp\n\n   .. tab:: Synchronous\n      :tabid: change-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-open-change-stream\n         :end-before: end-open-change-stream\n         :language: csharp\n\nTo begin watching for changes, run the application. Then, in a separate\napplication or shell, modify the ``restaurants`` collection. Updating a document\nthat has a ``\"name\"`` value of ``\"Blarney Castle\"`` results in the following\nchange stream output:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"_data\" : \"...\" }, \"operationType\" : \"update\", \"clusterTime\" : Timestamp(...), \n   \"wallTime\" : ISODate(\"...\"), \"ns\" : { \"db\" : \"sample_restaurants\", \"coll\" : \"restaurants\" }, \n   \"documentKey\" : { \"_id\" : ObjectId(\"...\") }, \"updateDescription\" : { \"updatedFields\" : { \"cuisine\" : \"Irish\" }, \n   \"removedFields\" : [], \"truncatedArrays\" : [] } }\n\nModify the Change Stream Output\n-------------------------------\n\nYou can pass the ``pipeline`` parameter to the ``Watch()`` and ``WatchAsync()``\nmethods to modify the change stream output. This parameter allows you to watch\nfor only specified change events. Create the pipeline by using the\n``EmptyPipelineDefinition`` class and appending the relevant aggregation stage methods.\n\nYou can specify the following aggregation stages in the ``pipeline`` parameter:\n\n- ``$addFields``\n- ``$changeStreamSplitLargeEvent``\n- ``$match``\n- ``$project``\n- ``$replaceRoot``\n- ``$replaceWith``\n- ``$redact``\n- ``$set``\n- ``$unset``\n\n.. tip::\n\n   To learn how to build an aggregation pipeline by using the\n   ``PipelineDefinitionBuilder`` class, see :ref:`csharp-builders-aggregation` in\n   the Operations with Builders guide.\n\n   To learn more about modifying your change stream output, see the\n   :manual:`Modify Change Stream Output\n   </changeStreams/#modify-change-stream-output>` section in the {+mdb-server+}\n   manual.\n\nMonitor Update Events Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``pipeline`` parameter to open a change stream\nthat records only update operations. Select the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the\ncorresponding code.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: change-stream-async\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-change-stream-pipeline-async\n         :end-before: end-change-stream-pipeline-async\n         :language: csharp\n\n   .. tab:: Synchronous\n      :tabid: change-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-change-stream-pipeline\n         :end-before: end-change-stream-pipeline\n         :language: csharp\n\nSplit Large Change Events Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application generates change events that exceed 16 MB in size, the\nserver returns a ``BSONObjectTooLarge`` error. To avoid this error, you can use\nthe ``$changeStreamSplitLargeEvent`` pipeline stage to split the events\ninto smaller fragments. The {+driver-short+} aggregation API includes the\n``ChangeStreamSplitLargeEvent()`` method, which you can use to add the \n``$changeStreamSplitLargeEvent`` stage to the change stream pipeline.\n\nThis example instructs the driver to watch for changes and split\nchange events that exceed the 16 MB limit. The code prints the\nchange document for each event and calls helper methods to\nreassemble any event fragments:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: change-stream-split-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-split-change-event-async\n         :end-before: end-split-change-event-async\n         :language: csharp\n\n   .. tab:: Synchronous\n      :tabid: change-stream-split-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-split-change-event-sync\n         :end-before: end-split-change-event-sync\n         :language: csharp\n\n.. note::\n\n   We recommend reassembling change event fragments, as shown in the \n   preceding example, but this step is optional. You can use the same \n   logic to watch both split and complete change events.\n\nThe preceding example uses the ``GetNextChangeStreamEvent()``,\n``GetNextChangeStreamEventAsync()``, and ``MergeFragment()``\nmethods to reassemble change event fragments into a single change stream document.\nThe following code defines these methods:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: split-event-helpers-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-split-event-helpers-async\n         :end-before: end-split-event-helpers-async\n         :language: csharp\n\n   .. tab:: Synchronous\n      :tabid: split-event-helpers-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-split-event-helpers-sync\n         :end-before: end-split-event-helpers-sync\n         :language: csharp\n         \n.. tip::\n\n   To learn more about splitting large change events, see\n   :manual:`$changeStreamSplitLargeEvent </reference/operator/aggregation/changeStreamSplitLargeEvent/>`\n   in the {+mdb-server+} manual.\n\nModify ``Watch()`` Behavior\n---------------------------\n\nThe ``Watch()`` and ``WatchAsync()`` methods accept optional parameters, which represent\noptions you can use to configure the operation. If you don't specify any\noptions, the driver does not customize the operation.\n\nThe following table describes the options you can set to customize the behavior\nof ``Watch()`` and ``WatchAsync()``:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Option\n     - Description\n\n   * - ``FullDocument``\n     - | Specifies whether to show the full document after the change, rather\n         than showing only the changes made to the document. To learn more about\n         this option, see :ref:`csharp-change-stream-pre-post-image`.\n\n   * - ``FullDocumentBeforeChange``\n     - | Specifies whether to show the full document as it was before the change, rather\n         than showing only the changes made to the document. To learn more about\n         this option, see :ref:`csharp-change-stream-pre-post-image`.\n    \n   * - ``ResumeAfter``\n     - | Directs ``Watch()`` or ``WatchAsync()`` to resume returning changes after the\n         operation specified in the resume token.\n       | Each change stream event document includes a resume token as the ``_id``\n         field. Pass the entire ``_id`` field of the change event document that\n         represents the operation you want to resume after.\n       | ``ResumeAfter`` is mutually exclusive with ``StartAfter`` and ``StartAtOperationTime``.\n\n   * - ``StartAfter``\n     - | Directs ``Watch()`` or ``WatchAsync()`` to start a new change stream after the\n         operation specified in the resume token. Allows notifications to\n         resume after an invalidate event.\n       | Each change stream event document includes a resume token as the ``_id``\n         field. Pass the entire ``_id`` field of the change event document that\n         represents the operation you want to resume after.\n       | ``StartAfter`` is mutually exclusive with ``ResumeAfter`` and ``StartAtOperationTime``.\n       \n   * - ``StartAtOperationTime``\n     - | Directs ``Watch()`` or ``WatchAsync()`` to return only events that occur after the\n         specified timestamp.\n       | ``StartAtOperationTime`` is mutually exclusive with ``ResumeAfter`` and ``StartAfter``.\n\n   * - ``MaxAwaitTime``\n     - | Specifies the maximum amount of time, in milliseconds, the server waits for new\n         data changes to report to the change stream cursor before returning an\n         empty batch. Defaults to 1000 milliseconds.\n\n   * - ``ShowExpandedEvents``\n     - | Starting in {+mdb-server+} v6.0, change streams support change notifications\n         for Data Definition Language (DDL) events, such as the ``createIndexes`` and ``dropIndexes`` events. To\n         include expanded events in a change stream, create the change stream\n         cursor and set this parameter to ``True``.\n\n   * - ``BatchSize``\n     - | Specifies the maximum number of change events to return in each batch of the\n         response from the MongoDB cluster.\n\n   * - ``Collation``\n     - | Specifies the collation to use for the change stream cursor.\n\n   * - ``Comment``\n     - | Attaches a comment to the operation.\n\n.. _csharp-change-stream-pre-post-image:\n\nInclude Pre-Images and Post-Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. important::\n\n   You can enable pre-images and post-images on collections only if your\n   deployment uses MongoDB v6.0 or later.\n\nBy default, when you perform an operation on a collection, the\ncorresponding change event includes only the delta of the fields\nmodified by that operation. To see the full document before or after a\nchange, create a ``ChangeStreamOptions`` object and specify the\n``FullDocumentBeforeChange`` or the ``FullDocument`` options. Then, pass the\n``ChangeStreamOptions`` object to the ``Watch()`` or ``WatchAsync()`` method.\n\nThe **pre-image** is the full version of a document *before* a change. To include the\npre-image in the change stream event, set the ``FullDocumentBeforeChange``\noption to one of the following values:\n\n- ``ChangeStreamFullDocumentBeforeChangeOption.WhenAvailable``: The change event\n  includes a pre-image of the modified document for change events only if the\n  pre-image is available.\n- ``ChangeStreamFullDocumentBeforeChangeOption.Required``:\n  The change event includes a pre-image of the modified document for change\n  events. If the pre-image is not available, the driver raises an error.\n\nThe **post-image** is the full version of a document *after* a change. To include the\npost-image in the change stream event, set the ``FullDocument`` option to\none of the following values:\n\n- ``ChangeStreamFullDocumentOption.UpdateLookup``: The change event includes a\n  copy of the entire changed document from some time after the change.\n- ``ChangeStreamFullDocumentOption.WhenAvailable``: The change event includes a\n  post-image of the modified document for change events only if the post-image\n  is available.\n- ``ChangeStreamFullDocumentOption.Required``: The change event includes a\n  post-image of the modified document for change events. If the post-image is\n  not available, the driver raises an error.\n\nThe following example opens a change stream on a collection and includes the post-image\nof updated documents by specifying the ``FullDocument`` option. Select the\n:guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: change-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-change-stream-post-image-async\n         :end-before: end-change-stream-post-image-async\n         :language: csharp\n\n   .. tab:: Synchronous\n      :tabid: change-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "         :start-after: start-change-stream-post-image\n         :end-before: end-change-stream-post-image\n         :language: csharp\n\nRunning the preceding code example and updating a document that has a ``\"name\"``\nvalue of ``\"Blarney Castle\"`` results in the following change stream output:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : ObjectId(\"...\"), \"name\" : \"Blarney Castle\", \"restaurant_id\" : \"40366356\", \n   \"cuisine\" : \"Traditional Irish\", \"address\" : { \"building\" : \"202-24\", \"coord\" : [-73.925044200000002, 40.5595462], \n   \"street\" : \"Rockaway Point Boulevard\", \"zipcode\" : \"11697\" }, \"borough\" : \"Queens\", \"grades\" : [...] }\n\nTo learn more about pre-images and post-images, see \n:manual:`Change Streams with Document Pre- and Post-Images </changeStreams#change-streams-with-document-pre--and-post-images>` \nin the {+mdb-server+} manual.\n\nAdditional Information\n----------------------\n\nTo learn more about change streams, see :manual:`Change Streams\n</changeStreams>` in the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `Watch() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.Watch.html>`__\n- `WatchAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.WatchAsync.html>`__\n- `ChangeStreamOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ChangeStreamOptions.html>`__\n- `UpdateOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.UpdateOne.html>`__\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/change-streams.txt"
  },
  {
    "code": "   :start-after: start-student-struct\n   :end-before: end-student-struct\n   :language: csharp\n   :dedent:\n\n.. note::\n\n   The documents in the ``students`` collection use the camel-case naming\n   convention. The examples in this guide use a ``ConventionPack``\n   to deserialize the fields in the collection into Pascal case and map them to\n   the properties in the ``Student`` class. \n\n   To learn more about custom serialization, see\n   :ref:`csharp-custom-serialization`. \n   \n.. _csharp-accurate-count:\n\nAccurate Count\n--------------\n\nTo count the number of documents that match your :ref:`query filter <csharp-specify-query>`, use the\n``CountDocuments()`` method. If you pass an empty query filter, this method\nreturns the total number of documents in the collection.\n\nExample \n~~~~~~~\n\nThe following example counts the number of documents where the\nvalue of ``finalGrade`` is less than ``80``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: csharp\n\n      var filter = Builders<Student>.Filter.Lt(s => s.FinalGrade, 80.0);\n      var count = _myColl.CountDocuments(filter);\n      Console.WriteLine(\"Number of documents with a final grade less than 80: \" + count);\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents with a final grade less than 80: 2\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``CountDocuments()`` by passing a ``CountOptions`` type as \na parameter. If you don't specify any options, the driver uses default values.\n\nYou can set the following properties in a ``CountOptions`` object:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``Collation``\n     - | The type of language collation to use when sorting results.  \n       | Default: ``null``\n\n   * - ``Hint`` \n     - | The index to use to scan for documents to count. \n       | Default: ``null``\n\n   * - ``Limit``\n     - | The maximum number of documents to count. \n       | Default: ``0``\n\n   * - ``MaxTime``\n     - | The maximum amount of time that the query can run on the server.\n       | Default: ``null``\n\n   * - ``Skip`` \n     - | The number of documents to skip before counting.\n       | Default: ``0``\n\n.. tip::\n\n   When you use ``CountDocuments()`` to return the total number of documents in a\n   collection, MongoDB performs a collection scan. You can avoid a collection scan and\n   improve the performance of this method by using a hint to take advantage of the built-in index on\n   the ``_id`` field. Use this technique only when calling ``CountDocuments()``\n   with an empty query parameter.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "      :emphasize-lines: 1, 2\n\n      var filter = Builders<Student>.Filter.Empty;\n      CountOptions opts = new CountOptions(){Hint = \"_id_\"};\n      var count = collection.CountDocuments(filter, opts);\n\n.. _csharp-estimated-count:\n\nEstimated Count\n---------------\n\nTo estimate the total number of documents in your collection, use the\n``EstimatedDocumentCount()`` method. \n\n.. note:: \n\n    The ``EstimatedDocumentCount()`` method is more efficient than the\n    ``CountDocuments()`` method because it uses the collection's\n    metadata rather than scanning the entire collection. \n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``EstimatedDocumentCount()`` by passing a\n``EstimatedDocumentCountOptions`` type as a parameter. If you don't\nspecify any options, the driver uses default values.\n\nYou can set the following properties in a ``EstimatedDocumentCountOptions`` object:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``MaxTime``\n     - | The maximum amount of time that the query can run on the server.\n       | Default: ``null``\n\nExample\n```````\n\nThe following example estimates the number of documents in the\n``students`` collection:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: csharp\n\n      var count = _myColl.EstimatedDocumentCount();\n      Console.WriteLine(\"Estimated number of documents in the students collection: \" + count);\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Estimated number of documents in the students collection: 6\n\n.. _csharp-count-aggregation:\n\nAggregation\n-----------\n\nYou can use the ``Count()`` builder method to count the number\nof documents in an aggregation pipeline.\n\nExample\n~~~~~~~\n\nThe following example performs the following actions:\n\n- Specifies a match stage to find documents with a ``FinalGrade`` value\n  greater than ``80``\n- Counts the number of documents that match the criteria\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: csharp\n\n      var filter = Builders<Student>\n        .Filter.Gt(s => s.FinalGrade, 80);\n      var result = _myColl.Aggregate().Match(filter).Count();\n      Console.WriteLine(\"Number of documents with a final grade more than 80: \" + result.First().Count);\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents with a final grade more than 80: 4\n      \n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`csharp-specify-query`\n- :ref:`csharp-bson`\n- :ref:`csharp-guids`\n- :ref:`csharp-builders` \n- :ref:`csharp-poco`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `CountDocuments() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.CountDocuments.html>`__\n- `CountOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CountOptions.html>`__\n- `EstimatedDocumentCount() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCollectionBase-1.EstimatedDocumentCount.html>`__\n- `EstimatedDocumentCountOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.EstimatedDocumentCountOptions.html>`__\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :start-after: start-model\n   :end-before: end-model\n   :language: csharp\n\n\nRetrieve Distinct Values\n------------------------\n\nTo retrieve the distinct values for a specified field, call the ``Distinct()`` or\n``DistinctAsync()`` method of an ``IMongoCollection<TDocument>`` instance and pass the name\nof the field you want to find distinct values for.\n\nRetrieve Values Across a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the distinct values of the ``borough`` field in\nthe ``restaurants`` collection. Select the :guilabel:`Asynchronous` or :guilabel:`Synchronous`\ntab to see the corresponding code.\n\n.. tabs::\n    \n   .. tab:: Asynchronous\n      :tabid: distinct-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct-async\n            :end-before: end-distinct-async\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            Bronx\n            Brooklyn\n            Manhattan\n            Missing\n            Queens\n            Staten Island\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct\n            :end-before: end-distinct\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            Bronx\n            Brooklyn\n            Manhattan\n            Missing\n            Queens\n            Staten Island\n\nThe operation returns a cursor that you can iterate through to access each distinct ``borough``\nfield value. Although several documents have the same value in the ``borough`` field, each value appears\nin the results only once.\n\nRetrieve Values Across Specified Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can provide a **query filter** to the ``Distinct()`` and ``DistinctAsync()`` methods\nto find distinct field values within a subset of documents in a collection. A query filter\nis an expression that specifies search criteria used to match documents in an operation.\nFor more information about creating a query filter, see the :ref:`csharp-specify-query` guide.\n\nThe following example retrieves the distinct values of the ``borough`` field for\nall documents that have a ``cuisine`` field value of ``\"Italian\"``. Select the\n:guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the corresponding code.\n\n.. tabs::\n    \n   .. tab:: Asynchronous\n      :tabid: distinct-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct-with-query-async\n            :end-before: end-distinct-with-query-async\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            Bronx\n            Brooklyn\n            Manhattan\n            Queens\n            Staten Island\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct-with-query\n            :end-before: end-distinct-with-query\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            Bronx\n            Brooklyn\n            Manhattan\n            Queens\n            Staten Island\n\nModify Distinct Behavior\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``Distinct()`` and ``DistinctAsync()`` methods by\nproviding a ``DistinctOptions`` instance as an optional parameter. The following table\ndescribes the properties you can set on a ``DistinctOptions`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``Collation`` \n     - | Sets the collation to use for the operation.\n       | **Data type**: `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DistinctOptions.Collation.html>`__\n\n   * - ``MaxTime``\n     - | Sets the maximum amount of time that the operation can run.\n       | **Data type**: ``TimeSpan``\n\n   * - ``Comment`` \n     - | Attaches a comment to the operation.\n       | **Data type**: `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__ or ``string``\n\nThe following example retrieves the distinct values of the ``name`` field for\nall documents that have a ``borough`` field value of ``\"Bronx\"`` and a\n``cuisine`` field value of ``\"Pizza\"``. Then, it adds a comment to the operation by\nproviding a ``DistinctOptions`` instance to the ``Distinct()`` method.\n\nSelect the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the \ncorresponding code.\n\n.. tabs::\n    \n   .. tab:: Asynchronous\n      :tabid: distinct-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct-with-comment-async\n            :end-before: end-distinct-with-comment-async\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            $1.25 Pizza\n            18 East Gunhill Pizza\n            2 Bros\n            Aenos Pizza\n            Alitalia Pizza Restaurant\n            Amici Pizza And Pasta\n            Angie'S Cafe Pizza\n            ...\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/fundamentals/code-examples/Distinct.cs\n            :start-after: start-distinct-with-comment\n            :end-before: end-distinct-with-comment\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            $1.25 Pizza\n            18 East Gunhill Pizza\n            2 Bros\n            Aenos Pizza\n            Alitalia Pizza Restaurant\n            Amici Pizza And Pasta\n            Angie'S Cafe Pizza\n            ...\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `Distinct() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.Distinct.html>`__\n- `DistinctAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DistinctAsync.html>`__\n- `DistinctOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DistinctOptions.html>`__\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/Project.cs\n      :start-after: start-project-include\n      :end-before: end-project-include\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      { \"_id\" : ObjectId(\"...\"), \"cuisine\" : \"American\", \"name\" : \"Emerald Pub\" }\n      { \"_id\" : ObjectId(\"...\"), \"cuisine\" : \"American\", \"name\" : \"Emerald Pub\" }\n\n.. _csharp-project-exclude-id:\n\nExclude the ``_id`` Field\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen specifying fields to include, you can also exclude the ``_id`` field from\nthe returned document.\n\nThe following example runs the same query as the preceding example, but\nexcludes the ``_id`` field from the projection:\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/Project.cs\n      :start-after: start-project-include-without-id\n      :end-before: end-project-include-without-id\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      { \"cuisine\" : \"American\", \"name\" : \"Emerald Pub\" }\n      { \"cuisine\" : \"American\", \"name\" : \"Emerald Pub\" }\n\nSpecify Fields to Exclude\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo specify the fields to exclude from the result, chain the ``Project()`` method\nto the ``Find()`` method. You can exclude fields in your projection by using\nthe ``Builders<T>.Projection.Exclude()`` method and passing in the field name to exclude\nas a parameter. This method can be chained to exclude multiple fields in the projection.\n\nThe following example uses the ``Find()`` method to find all restaurants in which the ``name``\nfield value is ``\"Emerald Pub\"``. It then uses a projection to exclude the ``cuisine``\nfield from the returned documents:\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/Project.cs\n      :start-after: start-project-exclude\n      :end-before: end-project-exclude\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      { \"_id\" : ObjectId(\"...\"), \"address\" : { \"building\" : \"308\", \"coord\" : [-74.008493599999994, 40.725807199999998], \"street\" : \"Spring Street\", \"zipcode\" : \"10013\" }, \"borough\" : \"Manhattan\", \"grades\" : [{ \"date\" : ISODate(\"2014-02-24T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 5 }, { \"date\" : ISODate(\"2013-08-26T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 13 }, { \"date\" : ISODate(\"2013-03-04T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 12 }, { \"date\" : ISODate(\"2012-06-25T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 10 }, { \"date\" : ISODate(\"2011-12-23T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 10 }, { \"date\" : ISODate(\"2011-07-26T00:00:00Z\"), \"grade\" : \"C\", \"score\" : 32 }], \"name\" : \"Emerald Pub\", \"restaurant_id\" : \"40367329\" }\n      { \"_id\" : ObjectId(\"...\"), \"address\" : { \"building\" : \"18301\", \"coord\" : [-73.791184999999999, 40.740119999999997], \"street\" : \"Horace Harding Expressway\", \"zipcode\" : \"11365\" }, \"borough\" : \"Queens\", \"grades\" : [{ \"date\" : ISODate(\"2014-05-07T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 12 }, { \"date\" : ISODate(\"2013-04-30T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 9 }, { \"date\" : ISODate(\"2012-03-01T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 13 }], \"name\" : \"Emerald Pub\", \"restaurant_id\" : \"40668598\" }\n\nAdditional Information\n----------------------\n\nTo learn more about projections, see the :manual:`Project Fields guide\n</tutorial/project-fields-from-query-results/>` in the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the functions or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.Find.html>`_\n- `Projection <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Builders-1.Projection.html>`_\n- `Include() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Include.html>`_\n- `Exclude() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Exclude.html>`_\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\n.. _csharp-retrieve-find:\n\nFind Documents\n--------------\n\nUse the ``Find()`` method to retrieve documents from a collection. \nThe ``Find()`` method takes a **query filter** and returns all matching documents.\nA query filter is an object that specifies the documents you want to retrieve in\nyour query. \n\nTo learn more about query filters, see :ref:`csharp-specify-query`.\n\n.. _csharp-retrieve-find-one:\n\nFind One Document\n~~~~~~~~~~~~~~~~~\n\nTo find a single document in a collection, pass a query filter that specifies the\ncriteria of the document you want to find, then chain the ``FirstOrDefault()`` or \n``FirstOrDefaultAsync()`` method. If more than one document matches the query\nfilter, these methods return the *first* matching document from the retrieved\nresults. If no documents match the query filter the methods return ``null``.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: find-one-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "         :copyable: true\n\n         var restaurants = await _restaurantsCollection.Find(filter).FirstOrDefaultAsync();\n\n   .. tab:: Synchronous\n      :tabid: find-one-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "         :copyable: true\n\n         var restaurants = _restaurantsCollection.Find(filter).FirstOrDefault();\n\n.. tip:: First Document\n\n   The ``FirstOrDefault()`` method returns the first document in \n   :manual:`natural order </reference/glossary/#std-term-natural-order>`\n   on disk if no sort criteria is specified.\n\n.. To learn more about sorting, see the TODO: sorting page.\n\nTo see a full example of using the ``Find()`` method to find a single document, see\n:ref:`csharp-retrieve-additional-information`.\n\n.. _csharp-retrieve-find-multiple:\n\nFind Multiple Documents\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo find multiple documents in a collection, pass a query filter to the ``Find()``\nmethod that specifies the criteria of the documents you want to retrieve.\n\nYou can use a **cursor** to iterate over the documents returned by the ``Find()``\nmethod. A cursor is a mechanism that allows an application to iterate over database \nresults while holding only a subset of them in memory at a given time. Cursors\nare useful when your ``Find()`` method returns a large amount of documents.\n\nTo use a cursor to iterate over the documents, pass a \nquery filter to the ``Find()`` method that specifies the criteria of the documents \nyou want to find, then chain the ``ToCursor()`` or ``ToCursorAsync()`` method.\nTo view a synchronous or asynchronous example, select the corresponding tab. \n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: find-cursor-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "         :copyable: true\n\n         var restaurants = await _restaurantsCollection.Find(filter).ToCursorAsync();\n\n   .. tab:: Synchronous\n      :tabid: find-cursor-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "         :copyable: true\n\n         var restaurants = _restaurantsCollection.Find(filter).ToCursor();\n\nIf you are returning a small number of documents, or need your results returned\nas a ``List`` object, use the ``ToList()`` or ``ToListAsync()`` methods.\n\nTo find multiple documents in a collection and hold them in memory as a list, pass a query filter \nto the ``Find()`` method that specifies the criteria of the documents you want \nto find, then chain the ``ToList()`` or ``ToListAsync()`` method. To view a\nsynchronous or asynchronous example, select the corresponding tab.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: find-list-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: csharp\n\n      var filter = Builders<Restaurant>.Filter.Eq(\"cuisine\", \"Pizza\");\n      var findOptions = new FindOptions { BatchSize = 3 };\n\n      using (var cursor = _restaurantsCollection.Find(filter, findOptions).ToCursor())\n      {\n         foreach (var r in cursor.ToEnumerable())\n         {\n            WriteLine(r.Name);\n         }\n      }\n\n   .. output::\n      \n      Pizza Town\n      Victoria Pizza\n      ...\n\n.. tip:: Clean Up\n\n   Create a cursor with a `using statement <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement>`__ to\n   automatically invoke the \n   `Dispose() <https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-7.0>`__\n   method once the cursor is no longer in use.\n\n.. _csharp-retrieve-additional-information:\n\nAdditional Information\n----------------------\n\nTo learn more about query filters, see :ref:`csharp-specify-query`.\n\nTo learn how to specify queries using LINQ, see :ref:`csharp-linq`.\n\nTo view runnable examples of the ``Find()`` method, see the \n:ref:`csharp-find-one` page.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.Find.html>`__\n- `FirstOrDefault() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluentExtensions.FirstOrDefault.html>`__\n- `FirstOrDefaultAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursorSourceExtensions.FirstOrDefaultAsync.html>`__\n- `FindOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FindOptions.html>`__\n- `ToList() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursorSourceExtensions.ToList.html>`__\n- `ToListAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursorSourceExtensions.FirstOrDefaultAsync.html>`__\n- `ToCursor() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursorSource-1.ToCursor.html>`__\n- `ToCursorAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursorSource-1.ToCursorAsync.html>`__\n\n.. _csharp-retrieve-instruqt-lab:\n\n.. instruqt:: /mongodb-docs/tracks/find-csharp?token=em_R1T7ZloiDGciGxye\n   :title: Find() Lesson\n   :drawer:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :start-after: start-restaurant-class\n   :end-before: end-restaurant-class\n   :language: csharp\n\n.. _csharp-return-documents-limit:\n\nLimit\n-----\n\nTo specify the maximum number of documents returned from a read operation, use\nthe ``Limit()`` method provided by the ``IFindFluent`` interface. After calling\nthe ``Find()`` method, chain the ``Limit()`` method to modify the behavior of the\noperation.\n\nThe following example finds all restaurants that have a ``cuisine`` field value\nof ``\"Italian\"`` and limits the results to ``5`` documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/LimitSortSkip.cs\n      :start-after: start-limit\n      :end-before: end-limit\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      V & T Restaurant\n      Mimis Restaurant & Bar\n      Venice Restaurant\n      Areo Restaurant\n      Tre Giovani Pizza & Pasta\n\n.. tip::\n\n   The preceding example returns the first five documents matched by the query\n   according to their :manual:`natural order </reference/glossary/#std-term-natural-order>`\n   in the database. The following section describes how to return the documents\n   in a specified order.\n\n.. _csharp-return-documents-sort:\n\nSort\n----\n\nTo return documents in a specified order, use the ``Sort()`` method provided by\nthe ``IFindFluent`` interface. After calling the ``Find()`` method, chain the ``Sort()``\nmethod to modify the behavior of the operation.\n\nWhen calling ``Sort()``, you must pass in the sort definition as a parameter. You can construct a sort\ndefinition by using the  ``Builders<T>.Sort.Ascending()`` method to sort values from\nlowest to highest, or the ``Builders<T>.Sort.Ascending()`` method to sort them from highest\nto lowest. Both of these methods take the field name to sort by as a parameter. These methods\ncan be chained to sort returned documents by multiple fields.\n\nThe following example returns all documents that have a ``cuisine`` field value\nof ``\"Italian\"``, sorted in ascending order of ``name`` field values:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/LimitSortSkip.cs\n      :start-after: start-sort\n      :end-before: end-sort\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      (Lewis Drug Store) Locanda Vini E Olii\n      101 Restaurant And Bar\n      44 Sw Ristorante & Bar\n      900 Park\n      A Voce\n      ...\n\n.. _csharp-return-documents-skip:\n\nSkip\n----\n\nTo skip a specified number of documents before returning your query results, use\nthe ``Skip()`` method provided by the ``IFindFluent`` interface. After calling\nthe ``Find()`` method, chain the ``Skip()`` method to modify the behavior of the\noperation.\n\nThe following example returns all documents that have a ``cuisine`` field value\nof ``\"Italian\"`` and skips the first ``10`` documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/LimitSortSkip.cs\n      :start-after: start-skip\n      :end-before: end-skip\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Trattoria Alba\n      Da Umberto Restaurant\n      La Strada Restaurant\n      Pasta Lovers Trattoria\n      Nanni Restaurant\n      Villa Mosconi Restaurant\n      Villa Berulia\n      Marco Polo Ristorante\n      Cafe Luna\n      Baraonda\n\n.. _csharp-return-documents-combine:\n\nCombine Limit, Sort, and Skip\n-----------------------------\n\nYou can chain the ``Limit()``, ``Sort()``, and ``Skip()`` methods to a single\n``Find()`` method call. This allows you to set a maximum number of sorted documents\nto return from the read operation, skipping a specified number of documents before\nreturning.\n\nThe following example returns ``5`` documents that have a ``cuisine`` value of\n``\"Italian\"``. The results are sorted in ascending order by the ``name`` field value,\nskipping the first ``10`` documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/LimitSortSkip.cs\n      :start-after: start-limit-sort-skip\n      :end-before: end-limit-sort-skip\n      :language: csharp\n      :dedent:\n\n   .. output::\n      :visible: false\n            \n      Acqua\n      Acqua Restaurant\n      Acqua Santa\n      Acquista Trattoria\n      Acquolina Catering\n      Adriatic Restaurant Pizzeria Bar\n      Adrienne'S Pizza Bar\n      Ai Fiori\n      Aita Restaurant\n      Al Di La\n\n.. note::\n\n   The order in which you call these methods doesn't change the documents\n   that are returned. The {+driver-short+} automatically reorders the calls to\n   perform the sort operation first, the skip operation next, and then the limit\n   operation.\n\nAdditional Information\n----------------------\n\nFor more information about retrieving documents, see the :ref:`csharp-retrieve` guide.\n\nFor more information about specifying a query, see the :ref:`csharp-specify-query` guide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `Find() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.Find.html>`_\n- `IFindFluent <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluent-2.html>`_\n- `Limit() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluent-2.Limit.html>`_\n- `Sort() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluent-2.Sort.html>`_\n- `Skip() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluent-2.Skip.html>`_\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/read-operations/specify-documents-to-return.txt"
  },
  {
    "code": "   :start-after: start-bulk-insert-one\n   :end-before: end-bulk-insert-one\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\n.. tip:: Insert Multiple Documents\n    \n   To insert multiple documents, create an instance of the\n   ``BulkWriteInsertOneModel<TDocument>`` class for each document you want to insert.\n\nUpdate Operations\n~~~~~~~~~~~~~~~~~\n\nTo update a single document, create an instance of the ``BulkWriteUpdateOneModel<TDocument>``\nclass. The ``BulkWriteUpdateOneModel<TDocument>`` constructor accepts the following\nparameters:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Parameter\n     - Description\n   \n   * - ``collectionNamespace``\n     - | The database and collection to insert the BSON document into.\n       |\n       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__\n\n   * - ``filter``\n     - | The **query filter** that specifies the criteria used to match documents in your collection.\n         The ``UpdateOne`` operation updates *only the first document* that matches the\n         query filter.\n       |\n       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__\n\n   * - ``update``\n     - | The update operation you want to perform. For more information about update\n         operations, see :manual:`Field Update Operators </reference/operator/update-field/>`\n         in the {+mdb-server+} manual.\n       |\n       | **Data Type:** `UpdateDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinition-1.html>`__\n\n   * - ``collation``\n     - | *Optional.* The language collation to use when sorting results. See the\n         :manual:`{+mdb+server+} manual</reference/command/delete/#std-label-deletes-array-collation>`\n         for more information.\n       |\n       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__\n       | **Default:** ``null``\n   \n   * - ``hint``\n     - | *Optional.* The index to use to scan for documents. \n         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`\n         for more information.\n       |\n       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n       | **Default:** ``null``\n\n   * - ``isUpsert``\n     - | *Optional.* Specifies whether the update operation performs an upsert operation if no \n         documents match the query filter. See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-upsert>`\n         for more information.\n       |\n       | **Data Type:** {+bool-data-type+}\n       | **Default:** ``false``\n\n   * - ``arrayFilters``\n     - | Specifies which array elements to modify for an update operation on an array field.\n         See the :manual:`{+mdb-server+} manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`\n         for more information.\n       |\n       | **Data Type:** `IEnumerable<ArrayFilterDefinition> <https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-8.0>`__ \n       | **Default:** ``null``\n\nIn the following code example, the ``BulkWriteUpdateOneModel<BsonDocument>`` object\nrepresents an update operation on the ``sample_restaurants.restaurants`` collection.\nThe operation matches the first document in the collection where the value of the ``name``\nfield is ``\"Mongo's Deli\"``. It then updates the value of the ``cuisine`` field in the\nmatched document to ``\"Sandwiches and Salads\"``.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-one\n   :end-before: end-bulk-update-one\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\nTo update multiple documents, create an instance of the\n``BulkWriteUpdateManyModel<TDocument>`` class. The constructor for this class\naccepts the same parameters as the ``BulkWriteUpdateOneModel<TDocument>`` constructor.\nThe ``BulkWriteUpdateManyModel<TDocument>``\noperation updates *all documents* that match your query filter.\n\nIn the following code example, the ``BulkWriteUpdateManyModel<BsonDocument>`` object\nrepresents an update operation on the ``sample_restaurants.restaurants`` collection.\nThe operation matches all documents in the collection where\nthe value of the ``name`` field is ``\"Mongo's Deli\"``. It then updates\nthe value of the ``cuisine`` field to ``\"Sandwiches and Salads\"``.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-many\n   :end-before: end-bulk-update-many\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\nReplace Operations\n~~~~~~~~~~~~~~~~~~\n\nTo replace the fields in a document, create an instance of the\n``BulkWriteReplaceOneModel<TDocument>`` class. The ``BulkWriteReplaceOneModel<TDocument>``\nconstructor accepts the following parameters:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Parameter\n     - Description\n   \n   * - ``collectionNamespace``\n     - | The database and collection to insert the BSON document into.\n       |\n       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__\n\n   * - ``filter``\n     - | The **query filter** that specifies the criteria used to match documents in your collection.\n         The ``UpdateOne`` operation updates *only the first document* that matches the\n         query filter.\n       |\n       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__\n\n   * - ``replacement``\n     - | The replacement document, which specifies the fields and values to insert in the\n         target document.\n       |\n       | **Data Type:** ``TDocument``\n\n   * - ``collation``\n     - | *Optional.* The language collation to use when sorting results. See\n         the :manual:`{+mdb-server+} manual</reference/command/delete/#std-label-deletes-array-collation>`\n         for more information.\n       |\n       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__\n       | **Default:** ``null``\n   \n   * - ``hint``\n     - | *Optional.* The index to use to scan for documents. \n         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`\n         for more information.\n       |\n       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n       | **Default:** ``null``\n\n   * - ``isUpsert``\n     - | *Optional.* Specifies whether the update operation performs an upsert operation if no \n         documents match the query filter. \n         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-upsert>`\n         for more information.\n       |\n       | **Data Type:** {+bool-data-type+}\n       | **Default:** ``false``\n\nIn the following example, the ``BulkWriteReplaceOneModel<BsonDocument>`` object\nrepresents a replace operation on the ``sample_restaurants.restaurants`` collection.\nThe operation matches the document in the collection\nwhere the value of the ``restaurant_id`` field is ``\"1234\"``. It then\nremoves all fields other than ``_id`` from this document, and sets new values in the\n``name``, ``cuisine``, ``borough``, and ``restaurant_id`` fields.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-replace-one\n   :end-before: end-bulk-replace-one\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\n.. tip:: Replace Multiple Documents\n    \n   To replace multiple documents, create an instance of the\n   ``BulkWriteReplaceOneModel<TDocument>`` class for each document you want to replace.\n\nDelete Operations\n~~~~~~~~~~~~~~~~~\n\nTo delete a document, create an instance of the ``BulkWriteDeleteOneModel<TDocument>``\nclass. The ``BulkWriteDeleteOneModel<TDocument>`` constructor accepts the following\nparameters:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Parameter\n     - Description\n   \n   * - ``collectionNamespace``\n     - | The database and collection to insert the BSON document into.\n       |\n       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__\n\n   * - ``filter``\n     - | The **query filter** that specifies the criteria used to match documents in your collection.\n         The ``DeleteOne`` operation deletes *only the first document* that matches the\n         query filter.\n       |\n       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__\n\n   * - ``collation``\n     - | *Optional.* The language collation to use when sorting results. See\n         the :manual:`{+mdb-server+} manual</reference/command/delete/#std-label-deletes-array-collation>`\n         for more information.\n       |\n       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__\n       | **Default:** ``null``\n   \n   * - ``hint``\n     - | *Optional.* The index to use to scan for documents. \n         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`\n         for more information.\n       |\n       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n       | **Default:** ``null``\n\nIn the following code example, the ``BulkWriteDeleteOneModel<BsonDocument>`` object\nrepresents a delete operation on the ``sample_restaurants.restaurants`` collection.\nThe operation matches and deletes the first document\nwhere the value of the ``restaurant_id`` field is ``\"5678\"``.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-one\n   :end-before: end-bulk-delete-one\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\nTo delete multiple documents, create an instance of the ``BulkWriteDeleteManyModel<TDocument>``\nclass and pass a query filter that specifies the document that you want to delete.\nThe ``DeleteMany`` operation removes *all documents* that match your\nquery filter.\n\nIn the following code example, the ``BulkWriteDeleteManyModel<BsonDocument>`` object\nrepresents a delete operation on the ``sample_restaurants.restaurants`` collection.\nThe operation matches and deletes all documents\nwhere the value of the ``name`` field is ``\"Mongo's Deli\"``.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-many\n   :end-before: end-bulk-delete-many\n   :language: csharp\n   :copyable:\n   :dedent: 8\n\nRun the Write Operations\n------------------------\n\nAfter you define a ``BulkWriteModel`` instance for each operation that you want to perform,\ncreate an instance of a class that implements the ``IReadOnlyList`` interface. Add your\n``BulkWriteModel`` objects to this ``IReadOnlyList``, then pass the ``IReadOnlyList``\nto the ``BulkWrite()`` or ``BulkWriteAsync()`` method. By default, these methods run\nthe operations in the order they're defined in the collection.\n\n.. tip:: IReadOnlyList\n\n   ``Array`` and ``List`` are two common classes that implement the ``IReadOnlyList``\n   interface.\n\nSelect from the following tabs to view how to use the asynchronous\n``BulkWriteAsync()`` method and the synchronous ``BulkWrite()`` method to\nperform a bulk write operation.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: bulk-write-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "         :start-after: start-bulk-write-async\n         :end-before: end-bulk-write-async\n         :language: csharp\n         :copyable:\n         :dedent: 8\n\n   .. tab:: Synchronous\n      :tabid: bulk-write-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "         :start-after: start-bulk-write-sync\n         :end-before: end-bulk-write-sync\n         :language: csharp\n         :copyable:\n         :dedent: 8\n\nThe preceding code examples produce the following output:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "         :start-after: start-bulk-write-options-async\n         :end-before: end-bulk-write-options-async\n         :language: csharp\n         :copyable:\n         :dedent: 8\n\n   .. tab:: Synchronous\n      :tabid: bulk-write-options-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "        :start-after: start-bulk-write-options-sync\n        :end-before: end-bulk-write-options-sync\n        :language: csharp\n        :copyable:\n        :dedent: 8\n\nReturn Value\n------------\n\nThe ``BulkWrite()`` and ``BulkWriteAsync()`` methods return a ``ClientBulkWriteResult``\nobject that contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``Acknowledged``\n     - | Indicates whether the server acknowledged the bulk write operation. If the\n         value of this property is ``false`` and you try to access any other property\n         of the ``ClientBulkWriteResult`` object, the driver throws an exception.\n\n   * - ``DeleteResults``\n     - | An ``IReadOnlyDictionary<int, BulkWriteDeleteResult>`` object containing the\n         results of each successful delete operation, if any.\n   \n   * - ``DeletedCount``\n     - | The number of documents deleted, if any.\n\n   * - ``InsertResults``\n     - | An ``IReadOnlyDictionary<int, BulkWriteInsertOneResult>`` object containing the\n         results of each successful insert operation, if any.\n   \n   * - ``InsertedCount``\n     - | The number of documents inserted, if any.\n\n   * - ``MatchedCount``\n     - | The number of documents matched for an update, if applicable.\n\n   * - ``ModifiedCount``\n     - | The number of documents modified, if any.\n\n   * - ``UpsertResults``\n     - | An ``IReadOnlyDictionary<int, BulkWriteUpdateResult>`` object containing the\n         results of each successful update operation, if any.\n   \n   * - ``UpsertedCount``\n     - | The number of documents upserted, if any.\n\nHandling Exceptions\n-------------------\n\nIf any of the operations in a bulk write operation fail, the {+driver-short+} throws a\n``ClientBulkWriteException`` and does not perform any further operations.\n\nA ``ClientBulkWriteException`` object contains the following properties:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Property\n     - Description\n   * - ``connectionId``\n     - | The connection identifier.\n       |\n       | **Data Type:** `ConnectionId <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Connections.ConnectionId.html>`__\n   * - ``message``\n     - | The error message.\n       |\n       | **Data Type:** string\n   * - ``writeErrors``\n     - | A dictionary of errors that occurred during the bulk write operation.\n       |\n       | **Data Type:** IReadOnlyDictionary<int, `WriteError <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.WriteError.html>`__>\n   * - ``partialResult``\n     - | The results of any successful operations performed before the exception was thrown.\n       |\n       | **Data Type:** `ClientBulkWriteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteResult.html>`__\n   * - ``writeConcernErrors``\n     - | Write concern errors that occurred during execution of the bulk write operation.\n       |\n       | **Data Type:** IReadOnlyList<`MongoWriteConcernException <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoWriteConcernException.html>`__>\n   * - ``innerException``\n     - | The inner exception.\n       |\n       | **Data Type:** `Exception <https://learn.microsoft.com/dotnet/api/system.exception>`__\n\nAdditional Information\n----------------------\n\nTo learn how to perform individual write operations, see the following guides:\n\n- :ref:`csharp-update-one`\n- :ref:`csharp-update-many`\n- :ref:`csharp-insert-guide`\n- :ref:`csharp-delete-guide`\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `BulkWrite() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.BulkWrite.html>`__\n- `BulkWriteAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.BulkWriteAsync.html>`__\n- `ClientBulkWriteOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteOptions.html>`__\n- `ClientBulkWriteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteResult.html>`__\n- `BulkWriteInsertOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteInsertOneModel-1.html>`__\n- `BulkWriteUpdateOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateOneModel-1.html>`__\n- `BulkWriteUpdateManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateManyModel-1.html>`__\n- `BulkWriteReplaceOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteReplaceOneModel-1.html>`__\n- `BulkWriteDeleteOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteOneModel-1.html>`__\n- `BulkWriteDeleteManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteManyModel-1.html>`__\n- `BulkWriteInsertOneResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteInsertOneResult.html>`__\n- `BulkWriteUpdateResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateResult.html>`__\n- `BulkWriteDeleteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteResult.html>`__\n- `ClientBulkWriteException <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteException.html>`__\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/bulk-write.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\nThis collection is from the :atlas:`sample datasets </sample-data>` provided\nby Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster\nand load this sample data.\n\nDelete Operations\n-----------------\n\nUse delete operations to remove documents that match a **query filter**.\nThe query filter determines which records are selected for deletion\nbased on the criteria in :manual:`the query filter\ndocument</core/document/#query-filter-documents>`. You can perform\ndelete operations in MongoDB with the following methods:\n\n- ``DeleteOne()``, which deletes *the first document* that matches the query filter\n- ``DeleteMany()``, which deletes *all documents* that match the query filter\n\nDelete One Document\n~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to use the asynchronous\n``DeleteOneAsync()`` method or the synchronous ``DeleteOne()`` method to\ndelete one document.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: delete-one-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "         :copyable: true\n\n         var result = await _restaurantsCollection.DeleteOneAsync(filter);\n\n   .. tab:: Synchronous\n      :tabid: delete-one-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "         :copyable: true\n\n         var result = _restaurantsCollection.DeleteOne(filter);\n\nDelete Multiple Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows how to use the asynchronous\n``DeleteManyAsync()`` method or the synchronous ``DeleteMany()`` method to\ndelete all matched documents.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: delete-many-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "         :copyable: true\n\n         var result = await _restaurantsCollection.DeleteManyAsync(filter);\n\n   .. tab:: Synchronous\n      :tabid: delete-many-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "         :copyable: true\n\n         var result = _restaurantsCollection.DeleteMany(filter);\n\n.. tip::\n\n   Find runnable examples using these methods under :ref:`additional\n   information <additional-info>`.\n\nParameters\n~~~~~~~~~~\n\nThe ``DeleteOne()`` and ``DeleteMany()`` methods require you to pass a\nquery filter specifying which documents to match. More information\non how to construct a query filter is available in :manual:`the Query Documents\ntutorial</tutorial/query-documents/>`.\n\nBoth methods optionally take a ``DeleteOptions`` type as an additional parameter,\nwhich represents options you can use to configure the delete operation.\nIf you don't specify any ``DeleteOptions`` properties, the driver does\nnot customize the delete operation.\n\nThe ``DeleteOptions`` type allows you to configure options with the\nfollowing properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``Collation``\n     - | Gets or sets the type of language collation to use when sorting\n         results. See :manual:`the delete\n         statements</reference/command/delete/#std-label-deletes-array-collation>`\n         for more information.\n\n   * - ``Comment``\n     - | Gets or sets the comment for the operation. See :manual:`the delete command\n         fields</reference/command/delete/#command-fields>`\n         for more information.\n\n   * - ``Hint``\n     - | Gets or sets the index to use to scan for documents. See :manual:`the delete\n         statements</reference/command/delete/#std-label-deletes-array-hint>`\n         for more information.\n\n   * - ``Let``\n     - | Gets or sets the let document. See :manual:`the delete command\n         fields</reference/command/delete/#command-fields>`\n         for more information.\n\nExample\n~~~~~~~\n\nThe following code uses the ``DeleteMany()`` method to search on the\n\"borough_1\" index and delete all documents where the ``address.street``\nfield value includes the phrase \"Pearl Street\":\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: csharp\n\n      var filter = Builders<Restaurant>.Filter\n          .Regex(\"address.street\", \"Pearl Street\");\n\n      DeleteOptions opts = new DeleteOptions { Hint = \"borough_1\" };\n\n      Console.WriteLine(\"Deleting documents...\");\n      var result = _restaurantsCollection.DeleteMany(filter, opts);\n      \n      Console.WriteLine($\"Deleted documents: {result.DeletedCount}\");\n      Console.WriteLine($\"Result acknowledged? {result.IsAcknowledged}\");\n\n   .. output::\n      :language: none\n      :visible: false\n      \n      Deleting documents...\n      Deleted documents: 26\n      Result acknowledged? True\n\n.. tip::\n\n   If the preceding example used the ``DeleteOne()`` method instead of\n   ``DeleteMany()``, the driver would delete the first of the 26\n   matched documents.\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``DeleteOne()`` and ``DeleteMany()`` methods return a\n``DeleteResult`` type. This type contains the ``DeletedCount`` property,\nwhich indicates the number of documents deleted, and the\n``IsAcknowledged`` property, which indicates if the result is\nacknowledged. If the query filter does not match any documents, no documents\nare deleted and ``DeletedCount`` is 0.\n\n.. _additional-info:\n\nAdditional Information\n----------------------\n\nFor runnable examples of the delete operations, see the following usage\nexamples:\n\n- :ref:`csharp-delete-one`\n- :ref:`csharp-delete-many`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `DeleteOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteOne.html>`__\n- `DeleteOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteOneAsync.html>`__\n- `DeleteMany() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteMany.html>`__\n- `DeleteManyAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteManyAsync.html>`__\n- `DeleteOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DeleteOptions.html>`__\n- `DeleteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DeleteResult.html>`__\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\nThis collection is from the :atlas:`sample datasets </sample-data>` provided\nby Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster\nand load this sample data.\n\nThe ``_id`` Field\n-----------------\n\nIn a MongoDB collection, each document *must* contain an ``_id`` field\nwith a unique field value.\n\nMongoDB allows you to manage this field in two ways:\n\n- You can set this field for each document yourself, ensuring each\n  ``_id`` field value is unique.\n- You can let the driver automatically generate unique ``ObjectId``\n  values for each document ``_id``. If you do not manually set an\n  ``_id`` field value for a document, the driver will populate the field\n  with an ``ObjectId``.\n\nUnless you can guarantee uniqueness, MongoDB recommends\nyou let the driver automatically generate ``_id`` values.\n\n.. note::\n\n   Duplicate ``_id`` values violate unique index constraints, which\n   causes the driver to return a ``MongoWriteException`` from\n   ``InsertOne()`` or a ``MongoBulkWriteException`` from\n   ``InsertMany()``.\n\nTo learn more about the ``_id`` field, see the Server Manual Entry on\n:manual:`Unique Indexes </core/index-unique/>`.\n\nTo learn more about document structure and rules, see the\nServer Manual Entry on :manual:`Documents </core/document>`.\n\nInsert One Document\n-------------------\n\nThe following code shows how to use the asynchronous\n``InsertOneAsync()`` method or the synchronous ``InsertOne()`` method to\ninsert one document.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: insert-one-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "         :copyable: true\n\n         await _restaurantsCollection.InsertOneAsync(document);\n\n   .. tab:: Synchronous\n      :tabid: insert-one-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "         :copyable: true\n\n         _restaurantsCollection.InsertOne(document);\n\nInsert Multiple Documents\n-------------------------\n\nThe following code shows how to use the asynchronous\n``InsertManyAsync()`` method or the synchronous ``InsertMany()`` method to\ninsert multiple documents.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: insert-many-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "         :copyable: true\n\n         await _restaurantsCollection.InsertManyAsync(docs);\n\n   .. tab:: Synchronous\n      :tabid: insert-many-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "         :copyable: true\n\n         _restaurantsCollection.InsertMany(docs);\n\n.. tip::\n\n   Find runnable examples using these methods under :ref:`additional\n   information <additional-info>`.\n\nModify Insert Behavior\n----------------------\n\nThe ``InsertOne()`` method takes the document you seek to insert as a\nparameter. The ``InsertMany()`` method takes an ``IEnumerable``\ncollection of documents, such as a list or array, as a parameter.\n\nThe ``InsertOne()`` method optionally takes a ``InsertOneOptions`` type as an additional parameter,\nwhich represents options you can use to configure the insert operation.\nIf you don't specify any ``InsertOneOptions`` properties, the driver does\nnot customize the insert.\n\nThe ``InsertOneOptions`` type allows you to configure options with the\nfollowing properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``BypassDocumentValidation``\n     - | Gets or sets a value indicating whether to bypass document\n         validation. If ``true``, allows the write to opt-out of\n         :manual:`document level validation </core/schema-validation>`.\n\n   * - ``Comment``\n     - | Gets or sets the comment for the operation. See :manual:`the insert command\n         fields</reference/command/insert/#command-fields>`\n         for more information.\n\nThe ``InsertMany()`` method optionally takes a ``InsertManyOptions``\ntype as an additional parameter, which has the preceding\n``BypassDocumentValidation`` and ``Comment`` properties and the\nadditional ``IsOrdered`` property:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``IsOrdered``\n     - | Gets or sets a value indicating whether the requests are\n         fulfilled in order. If ``true``, the driver sends documents to the\n         server in the order provided. If an error occurs, the driver\n         and server abort all remaining insert operations.\n         To learn more, see :ref:`Ordered Behavior<csharp-ordered-behavior>`.\n         \n       | Default: ``true``\n\nExample\n~~~~~~~\n\nThe following code uses the ``InsertMany()`` method to insert five new\n``Restaurant`` documents into a collection with\n``BypassDocumentValidation`` set to ``true``:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-insert-many-with-options\n   :end-before: end-insert-many-with-options\n\nThe ``InsertMany()`` method has no return value. You can verify that\nyour documents were successfully inserted by executing a ``Find()``\noperation on the collection. For an example on how to find a document,\nsee :ref:`csharp-find-one`.\n\n.. _csharp-ordered-behavior:\n\nSpecify Ordered Behavior\n------------------------\n\nAssume you want to insert the following documents:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"Restaurant A\" }\n   { \"_id\" : 2, \"name\" : \"Restaurant B\" }\n   { \"_id\" : 1, \"name\" : \"Restaurant C\" }\n   { \"_id\" : 3, \"name\" : \"Restaurant D\" }\n\nIf you attempt to insert these documents with default\n``InsertManyOptions``, the driver throws a ``MongoBulkWriteException`` at the third\ndocument because of the repeated ``_id`` value, but the documents before\nthe error-producing document are still inserted into your collection.\n\nIf you look inside your collection, you should be able to see the following documents:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"Restaurant A\" }\n   { \"_id\" : 2, \"name\" : \"Restaurant B\" }\n\nIf you set ``IsOrdered`` to ``false`` in your insert operation, the driver will\ncontinue to insert your documents even if some documents produce errors.\nWith this modified insert behavior, the driver throws an exception but inserts all documents\nthat do not produce errors.\n\nIf you look inside your collection, you should be able to see the following documents:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"Restaurant A\" }\n   { \"_id\" : 2, \"name\" : \"Restaurant B\" }\n   { \"_id\" : 3, \"name\" : \"Restaurant D\" }\n\n.. _additional-info:\n\nAdditional Information\n----------------------\n\nFor runnable examples of the insert operations, see the following usage\nexamples:\n\n- :ref:`csharp-insert-one`\n- :ref:`csharp-insert-many`\n\n.. To learn more about performing the operations mentioned, see the\n.. following guides:\n\n.. - :ref:`csharp-query-document`\n\n.. - :doc:`Bulk Operations </fundamentals/crud/write-operations/bulk>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `InsertOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertOne.html>`__\n- `InsertOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertOneAsync.html>`__\n- `InsertMany() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertMany.html>`__\n- `InsertManyAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertManyAsync.html>`__\n- `InsertOneOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.InsertOneOptions.html>`__\n- `InsertManyOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.InsertManyOptions.html>`__\n\n.. _csharp-insert-instruqt-lab:\n\n.. instruqt:: /mongodb-docs/tracks/insert-a-document---c-net-driver?token=em__BF-Ccd2b1dS3YLi\n   :title: InsertOneAsync() Lesson\n   :drawer:\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable: true\n         :dedent:\n         :start-after: // start-replace-one\n         :end-before: // end-replace-one\n\n   .. tab:: Asynchronous\n      :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/replace.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable: true\n         :dedent:\n         :start-after: // start-replace-one-async\n         :end-before: // end-replace-one-async\n\n.. important::\n\n   The values of ``_id`` fields are immutable. If your replacement document specifies \n   a value for the ``_id`` field, it must match the ``_id`` value of the existing document.\n\nCustomize the Replace Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``ReplaceOne()`` and ``ReplaceOneAsync()`` methods optionally accept a\n``ReplaceOptions`` object as a parameter, which represents options you can use to\nconfigure the replace operation.\n\nThe ``ReplaceOptions`` class contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``BypassDocumentValidation``\n     - Specifies whether the replace operation bypasses document validation. This lets you \n       replace documents that don't meet the schema validation requirements, if any \n       exist. See :manual:`the {+mdb-server+} manual </core/schema-validation/#schema-validation>`\n       for more information on schema validation.\n\n       **Data Type:** ``bool?``\n\n   * - ``Collation``\n     - Specifies the kind of language collation to use when sorting\n       results. See :manual:`the {+mdb-server+} manual </reference/collation/#std-label-collation>`\n       for more information on collation.\n\n       **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__\n\n   * - ``Comment``\n     - Gets or sets the user-provided comment for the operation. \n       See :manual:`the {+mdb-server+} manual</reference/command/update/#command-fields>`\n       for more information.\n\n       **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n\n   * - ``Hint``\n     - Gets or sets the index to use to scan for documents. \n       See :manual:`the {+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`\n       for more information.\n\n       **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n\n   * - ``IsUpsert``\n     - Specifies whether the replace operation performs an upsert operation if no \n       documents match the query filter. \n       See :manual:`the {+mdb-server+} manual </reference/command/update/#std-label-update-command-upsert>`\n       for more information.\n\n       **Data Type:** ``bool``\n\n   * - ``Let``\n     - Gets or sets the let document. \n       See :manual:`the {+mdb-server+} manual </reference/command/update/#std-label-update-let-syntax>`\n       for more information.\n\n       **Data Type:** `BsonDocument <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonDocument.html>`__\n\nThe following example performs the same steps as the preceding example, but also uses\nthe ``BypassDocumentValidation`` option to bypass any schema validation requirements.\nSelect  the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/replace.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable: true\n         :dedent:\n         :start-after: // start-replace-one-sync-with-options\n         :end-before: // end-replace-one-sync-with-options\n\n   .. tab:: Asynchronous\n      :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/replace.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable: true\n         :dedent:\n         :start-after: // start-replace-one-async-with-options\n         :end-before: // end-replace-one-async-with-options\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``ReplaceOne()`` method returns a ``ReplaceOneResult`` \nobject, and the ``ReplaceOneAsync()`` method returns a ``Task<ReplaceOneResult>`` object.\nThe ``ReplaceOneResult`` class contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``IsAcknowledged``\n     - Indicates whether the replace operation was acknowledged by MongoDB.\n\n       **Data Type:** ``bool``\n   \n   * - ``IsModifiedCountAvailable``\n     - Indicates whether you can read the count of replaced records on the\n       ``ReplaceOneResult``.\n\n       **Data Type:** ``bool``\n\n   * - ``MatchedCount``\n     - The number of documents that matched the query filter, regardless of\n       whether one was replaced. \n\n       **Data Type:** ``long``\n\n   * - ``ModifiedCount``\n     - The number of documents replaced by the replace operation. \n\n       **Data Type:** ``long``\n\n   * - ``UpsertedId``\n     - The ID of the document that was upserted in the database, if the driver\n       performed an upsert.\n\n       **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods and classes used on this page,\nsee the following API documentation:\n\n* `ReplaceOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOne.html>`__\n* `ReplaceOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOneAsync.html>`__\n* `ReplaceOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReplaceOptions.html>`__\n* `ReplaceOneResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReplaceOneResult.html>`__\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/replace.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-push\n               :end-before: // end-update-many-push\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-push-async\n               :end-before: // end-update-many-push-async\n\n   .. replacement:: addtoset-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-addtoset\n               :end-before: // end-update-many-addtoset\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-addtoset-async\n               :end-before: // end-update-many-addtoset-async\n\n   .. replacement:: pusheach-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pusheach\n               :end-before: // end-update-many-pusheach\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pusheach-async\n               :end-before: // end-update-many-pusheach-async\n\n   .. replacement:: addtoseteach-code-example-tabs\n\n      .. tabs::\n\n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-addtoseteach\n               :end-before: // end-update-many-addtoseteach\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-addtoseteach-async\n               :end-before: // end-update-many-addtoseteach-async\n   \n   .. replacement:: popfirst-code-example-tabs\n\n      .. tabs::\n\n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-popfirst\n               :end-before: // end-update-many-popfirst\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-popfirst-async\n               :end-before: // end-update-many-popfirst-async\n   \n   .. replacement:: poplast-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-poplast\n               :end-before: // end-update-many-poplast\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-poplast-async\n               :end-before: // end-update-many-poplast-async\n\n   .. replacement:: pull-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pull\n               :end-before: // end-update-many-pull\n               :emphasize-lines: 13-17\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pull-async\n               :end-before: // end-update-many-pull-async\n               :emphasize-lines: 13-17\n\n   .. replacement:: pullall-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pullall\n               :end-before: // end-update-many-pullall\n               :emphasize-lines: 15-20\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pullall-async\n               :end-before: // end-update-many-pullall-async\n               :emphasize-lines: 15-20\n\n   .. replacement:: pullfilter-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pullfilter\n               :end-before: // end-update-many-pullfilter\n               :emphasize-lines: 15-19\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-pullfilter-async\n               :end-before: // end-update-many-pullfilter-async\n               :emphasize-lines: 15-20\n\n   .. replacement:: positional-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-many/positional-operator-code-intro.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-positional\n               :end-before: // end-update-many-positional\n\n            .. include:: /includes/update-arrays-positional-operator-note.rst\n         \n         .. tab:: Positional Operator (Async)\n            :tabid: async\n\n            .. include:: /includes/update-many/positional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-positional-async\n               :end-before: // end-update-many-positional-async\n\n            .. include:: /includes/update-arrays-positional-operator-note.rst\n         \n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-many/positional-linq-code-intro.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-positional-linq\n               :end-before: // end-update-many-positional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-many/positional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-positional-linq-async\n               :end-before: // end-update-many-positional-linq-async\n\n   .. replacement:: filteredpositional-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-many/filteredpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-filteredpositional\n               :end-before: // end-update-many-filteredpositional\n\n         .. tab:: Positional Operator (Async)\n            :tabid: async\n\n            .. include:: /includes/update-many/filteredpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-filteredpositional-async\n               :end-before: // end-update-many-filteredpositional-async\n\n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-many/filteredpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-filteredpositional-linq\n               :end-before: // end-update-many-filteredpositional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-many/filteredpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-filteredpositional-linq-async\n               :end-before: // end-update-many-filteredpositional-linq-async\n\n   .. replacement:: allpositional-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-many/allpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-allpositional\n               :end-before: // end-update-many-allpositional\n\n         .. tab:: Positional Operator (Async)\n            :tabid: async\n\n            .. include:: /includes/update-many/allpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-allpositional-async\n               :end-before: // end-update-many-allpositional-async\n         \n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-many/allpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-allpositional-linq\n               :end-before: // end-update-many-allpositional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-many/allpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-many-allpositional-linq-async\n               :end-before: // end-update-many-allpositional-linq-async\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-combine-sync\n               :end-before: // end-combine-sync\n\n         .. tab:: UpdateMany (Async)\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-combine-async\n               :end-before: // end-combine-async\n\n   .. replacement:: pipeline-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: UpdateMany (Sync)\n            :tabid: sync\n      \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-pipeline-sync\n               :end-before: // end-pipeline-sync\n      \n         .. tab:: UpdateMany (Async)\n            :tabid: async\n      \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-pipeline-async\n               :end-before: // end-pipeline-async\n\n   \n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-many.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-push\n               :end-before: // end-update-one-push\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-push-async\n               :end-before: // end-update-one-push-async\n\n   .. replacement:: addtoset-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-addtoset\n               :end-before: // end-update-one-addtoset\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-addtoset-async\n               :end-before: // end-update-one-addtoset-async\n\n   .. replacement:: pusheach-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pusheach\n               :end-before: // end-update-one-pusheach\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pusheach-async\n               :end-before: // end-update-one-pusheach-async\n\n   .. replacement:: addtoseteach-code-example-tabs\n\n      .. tabs::\n\n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-addtoseteach\n               :end-before: // end-update-one-addtoseteach\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-addtoseteach-async\n               :end-before: // end-update-one-addtoseteach-async\n   \n   .. replacement:: popfirst-code-example-tabs\n\n      .. tabs::\n\n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-popfirst\n               :end-before: // end-update-one-popfirst\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-popfirst-async\n               :end-before: // end-update-one-popfirst-async\n   \n   .. replacement:: poplast-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-poplast\n               :end-before: // end-update-one-poplast\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-poplast-async\n               :end-before: // end-update-one-poplast-async\n\n   .. replacement:: pull-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pull\n               :end-before: // end-update-one-pull\n               :emphasize-lines: 13-17\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pull-async\n               :end-before: // end-update-one-pull-async\n               :emphasize-lines: 13-17\n\n   .. replacement:: pullall-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pullall\n               :end-before: // end-update-one-pullall\n               :emphasize-lines: 15-20\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pullall-async\n               :end-before: // end-update-one-pullall-async\n               :emphasize-lines: 15-20\n\n   .. replacement:: pullfilter-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pullfilter\n               :end-before: // end-update-one-pullfilter\n               :emphasize-lines: 15-19\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-pullfilter-async\n               :end-before: // end-update-one-pullfilter-async\n               :emphasize-lines: 15-19\n\n   .. replacement:: positional-code-example-tabs\n      \n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-one/positional-operator-code-intro.rst \n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-positional\n               :end-before: // end-update-one-positional\n\n            .. include:: /includes/update-arrays-positional-operator-note.rst\n\n         .. tab:: Positional Operator (Async)\n            :tabid: async\n            \n            .. include:: /includes/update-one/positional-operator-code-intro.rst \n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-positional-async\n               :end-before: // end-update-one-positional-async\n\n            .. include:: /includes/update-arrays-positional-operator-note.rst\n         \n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-one/positional-linq-code-intro.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-positional-linq\n               :end-before: // end-update-one-positional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-one/positional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-positional-linq-async\n               :end-before: // end-update-one-positional-linq-async\n\n   .. replacement:: filteredpositional-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-many/filteredpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-filteredpositional\n               :end-before: // end-update-one-filteredpositional\n\n         .. tab:: Positional Operator (Async)\n            :tabid: async\n\n            .. include:: /includes/update-many/filteredpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-filteredpositional-async\n               :end-before: // end-update-one-filteredpositional-async\n\n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-many/filteredpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-filteredpositional-linq\n               :end-before: // end-update-one-filteredpositional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-many/filteredpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-filteredpositional-linq-async\n               :end-before: // end-update-one-filteredpositional-linq-async\n\n   .. replacement:: allpositional-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Positional Operator (Sync)\n            :tabid: sync\n\n            .. include:: /includes/update-one/allpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-allpositional\n               :end-before: // end-update-one-allpositional\n\n         .. tab:: Positional Operator (Async)\n            :tabid: async\n\n            .. include:: /includes/update-one/allpositional-operator-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-allpositional-async\n               :end-before: // end-update-one-allpositional-async\n         \n         .. tab:: LINQ (Sync)\n            :tabid: linq-sync\n\n            .. include:: /includes/update-one/allpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-allpositional-linq\n               :end-before: // end-update-one-allpositional-linq\n\n         .. tab:: LINQ (Async)\n            :tabid: linq-async\n\n            .. include:: /includes/update-one/allpositional-linq-code-intro.rst\n            \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-update-one-allpositional-linq-async\n               :end-before: // end-update-one-allpositional-linq-async\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one/arrays.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-combine-sync\n               :end-before: // end-combine-sync\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-combine-async\n               :end-before: // end-combine-async\n\n   .. replacement:: pipeline-code-example-tabs\n\n      .. tabs::\n      \n         .. tab:: Synchronous\n            :tabid: sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-pipeline-sync\n               :end-before: // end-pipeline-sync\n\n         .. tab:: Asynchronous\n            :tabid: async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one.txt"
  },
  {
    "code": "               :language: csharp\n               :copyable: true\n               :dedent:\n               :start-after: // start-pipeline-async\n               :end-before: // end-pipeline-async\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/crud/write-operations/update-one.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   var client = new MongoClient(\"<connection string>\");\n   var myDB = mongoClient.GetDatabase(\"test_db\");\n\nList Databases\n--------------\n\nTo see a list of your deployment's databases, call the\nasynchronous `ListDatabaseNamesAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.ListDatabaseNamesAsync.html>`__\nmethod or synchronous `ListDatabaseNames()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.ListDatabaseNames.html>`__ method on\nyour ``IMongoClient`` instance.\n\nTo see detailed information about each database, call the\nasynchronous `ListDatabasesAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.ListDatabasesAsync.html>`__\nmethod or synchronous `ListDatabases()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.ListDatabases.html>`__ method on\nyour ``IMongoClient`` instance. These methods return fields describing\nthe databases in the cluster, such as their sizes and whether they contain data.\n\nThe following code shows how to use the asynchronous\n``ListDatabaseNamesAsync()`` method or the synchronous ``ListDatabaseNames()`` method to\nlist the names of the databases in a cluster:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: list-db-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         await mongoClient.ListDatabaseNamesAsync();\n\n   .. tab:: Synchronous\n      :tabid: list-db-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         mongoClient.ListDatabaseNames();\n\nDrop a Database\n---------------\n\nDropping a database permanently deletes all the data in that database's\ncollections. To drop a database, call the\nasynchronous `DropDatabaseAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.DropDatabaseAsync.html>`__\nmethod or synchronous `DropDatabase()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.DropDatabase.html>`__\nmethod on your ``IMongoClient`` instance, passing the database name as\nthe parameter.\n\nThe following code shows how to use the asynchronous\n``DropDatabaseAsync()`` method or the synchronous ``DropDatabase()`` method to\ndrop a database called ``test_db``:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: drop-db-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         await mongoClient.DropDatabaseAsync(\"test_db\");\n\n   .. tab:: Synchronous\n      :tabid: drop-db-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n         \n         mongoClient.DropDatabase(\"test_db\");\n\n.. warning:: Dropping a Database Deletes Data\n\n   Dropping a database permanently deletes all\n   documents in the database's collections and all indexes on those collections.\n   After you drop a database, you cannot access or restore any of its data.\n\nAccess a Collection\n-------------------\n\nYou can access a collection by retrieving an `IMongoCollection\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.html>`__\ninstance from your database. You can use an ``IMongoCollection``\ninstance to perform data operations,\ncreate aggregations, and manage indexes. To retrieve an\n``IMongoCollection``, call the `GetCollection()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.GetCollection.html>`__\nmethod on an ``IMongoDatabase`` instance.  You can also pass an optional `MongoCollectionSettings\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCollectionSettings.html>`__\nas a parameter to customize how you access a collection.\n\nIf you pass the name of a nonexistent collection to this method, the\ndriver still returns an ``IMongoCollection`` instance. When you insert\nany data into this collection, the server creates it. To learn how to\nexplicitly create a collection, see the :ref:`Create a Collection\n<csharp-create-collection>` section of this guide.\n\nThis example uses the ``GetCollection()`` method to\naccess a collection called ``coll_xyz`` from a database referenced by\nthe ``myDB`` variable:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         await myDB.CreateCollectionAsync(\"coll_abc\");\n\n   .. tab:: Synchronous\n      :tabid: create-coll-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n         \n         myDB.CreateCollection(\"coll_abc\");\n\nList Collections\n----------------\n\nTo see a list of collections in a database, call the\nasynchronous `ListCollectionNamesAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.ListCollectionNamesAsync.html>`__\nmethod or synchronous `ListCollectionNames()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.ListCollectionNames.html>`__ method on\nyour ``IMongoDatabase`` instance.\n\nTo see detailed information about each database, call the\nasynchronous `ListCollectionsAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.ListCollectionsAsync.html>`__\nmethod or synchronous `ListCollections()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.ListCollections.html>`__ method on\nyour ``IMongoDatabase`` instance. These methods return fields describing\nthe collections in the database, such as their types and settings.\n\nThe following code shows how to use the asynchronous\n``ListCollectionNamesAsync()`` method or the synchronous ``ListCollectionNames()`` method to\nlist the names of the collections in a database:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: list-coll-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         await myDB.ListCollectionNamesAsync();\n\n   .. tab:: Synchronous\n      :tabid: list-coll-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         myDB.ListCollectionNames();\n\n.. _csharp-drop-collection:\n\nDrop a Collection\n-----------------\n\nDropping a collection permanently deletes all the data in that\ncollection. To drop a collection, call the asynchronous `DropCollectionAsync()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.DropCollectionAsync.html>`__ method or the\nsynchronous `DropCollection()\n<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.DropCollection.html>`__\nmethod on your ``IMongoCollection`` instance.\n\nThe following code shows how to use the asynchronous\n``DropCollectionAsync()`` method or the synchronous ``DropCollection()`` method to\ndrop a database called ``coll_abc``:\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: drop-coll-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n\n         await myDB.DropCollectionAsync(\"coll_abc\");\n\n   .. tab:: Synchronous\n      :tabid: drop-coll-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :copyable: true\n         \n         myDB.DropCollection(\"coll_abc\");\n\n.. warning:: Dropping a Collection Deletes Data\n\n   Dropping a collection from your database permanently deletes all\n   documents within that collection and all indexes on that collection.\n   After you drop a collection, you cannot access or restore any of its data.\n\nAdditional Information\n----------------------\n\nFor more information about the concepts in this guide, see the following documentation:\n\n- :ref:`Insert Documents <csharp-insert-guide>` guide\n- :manual:`Databases and Collections </core/databases-and-collections/>`\n  in the Server manual\n- :manual:`Documents </core/document/>` in the Server manual\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/database-collection.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-hello-async\n         :end-before: end-hello-async\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-hello\n         :end-before: end-hello\n\n.. tip::\n\n   To view a full list of database commands and their corresponding\n   parameters, see :manual:`Database Commands </reference/command/>` in \n   the {+mdb-server+} manual.\n\n.. _csharp-command-read-pref:\n\nSet a Read Preference\n----------------------\n\nThe ``RunCommand()`` method does not inherit the read preference you might\nhave set on your ``MongoDatabase`` instance. By default, ``RunCommand()``\nuses the ``primary`` read preference.\n\nYou can set a read preference for the command execution by passing a\n``ReadPreference`` instance as a parameter to ``RunCommand()``, as\nshown in the following example. Select the :guilabel:`Asynchronous` or :guilabel:`Synchronous`\ntab to see the corresponding code.\n   \n.. tabs::\n    \n   .. tab:: Asynchronous\n      :tabid: run-command-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-read-pref-async\n         :end-before: end-read-pref-async\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-read-pref\n         :end-before: end-read-pref\n\n.. tip::\n\n   To learn more about read preference options, see :manual:`Read\n   Preference </core/read-preference/>` in the {+mdb-server+} manual.\n\n.. _csharp-command-response:\n\nResponse\n--------\n\nThe raw command response document returned by the ``RunCommand()`` method contains the\nfollowing fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Field\n     - Description\n\n   * - ``<command result>``\n     - Fields specific to the database command. For example,\n       the ``hello`` command returns the ``topologyVersion`` field.\n\n   * - ``ok``\n     - Indicates whether the command has succeeded (``1.0``) or failed (``0.0``). The\n       driver raises a ``MongoCommandException`` if the ``ok``\n       value is ``0.0``.\n\n   * - ``$clusterTime``\n     - A document that contains the signed cluster time. Cluster time is a\n       logical time used for the ordering of operations. This field only\n       applies to commands run on replica sets or sharded clusters.\n\n   * - ``operationTime``\n     - The logical time of the operation execution. This field only\n       applies to commands run on replica sets or sharded clusters.\n\n.. tip::\n\n   To learn more about logical time, see the Wikipedia entry on\n   the :wikipedia:`logical clock <w/index.php?title=Logical_clock&oldid=1072010149>`.\n\nExample\n~~~~~~~\n\nThe following example runs the ``dbStats`` command to retrieve\nstorage statistics for the ``sample_restaurants`` database, then prints the\ncommand results by using the ``ToJson()`` method on the returned ``BsonDocument`` object.\nSelect the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n    \n   .. tab:: Asynchronous\n      :tabid: run-command-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-print-command-async\n         :end-before: end-print-command-async\n\n   .. tab:: Synchronous\n      :tabid: distinct-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: start-print-command\n         :end-before: end-print-command\n\nThe output of this command includes information about the data stored in\nthe database, as shown in the result returned by the previous example:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"db\" : \"sample_restaurants\", \"collections\" : 2, \"views\" : 0, \"objects\" : \n   NumberLong(25438), \"avgObjSize\" : 548.95172576460413, \"dataSize\" : NumberLong(13964234),\n   \"storageSize\" : NumberLong(8056832), \"totalFreeStorageSize\" : NumberLong(0),\n   \"numExtents\" : NumberLong(0), \"indexes\" : 2, \"indexSize\" : NumberLong(1044480),\n   \"indexFreeStorageSize\" : NumberLong(0), \"fileSize\" : NumberLong(0), \"nsSizeMB\" : 0, \"ok\" : 1 }\n\n\nAdditional Information\n----------------------\n\nFor more information about the concepts in this guide, see the following\ndocumentation in the {+mdb-server+} manual:\n\n- :manual:`db.runCommand() </reference/method/db.runCommand/>`\n- :manual:`Database Commands </reference/command/>`\n- :manual:`hello Command </reference/command/hello/>`\n- :manual:`dbStats Command </reference/command/dbStats/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `RunCommand() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.RunCommand.html>`_\n- `RunCommandAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoDatabase.RunCommandAsync.html>`_\n- `ReadPreference <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadPreference.html>`_\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/databases-collections/run-command.txt"
  },
  {
    "code": "   :copyable: False\n\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51e8e2\"), \"theaterId\" : 1908 }\n   { \"_id\" : ObjectId(\"59a47286cfa9a3a73e51e838\"), \"theaterId\" : 1448 }\n\nQuery by Polygon\n~~~~~~~~~~~~~~~~\n\nThe following example queries for documents with a ``location.geo`` field value that exists\nwithin the boundaries of Manhattan.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/geo.txt"
  },
  {
    "code": "   :copyable: False\n\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51e8e2\"), \"theaterId\" : 1908 }\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51eccb\"), \"theaterId\" : 835 }\n   { \"_id\" : ObjectId(\"59a47286cfa9a3a73e51e838\"), \"theaterId\" : 1448 }\n   { \"_id\" : ObjectId(\"59a47286cfa9a3a73e51e744\"), \"theaterId\" : 1028 }\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51ebe1\"), \"theaterId\" : 609 }\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51e8ed\"), \"theaterId\" : 1906 }\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51e87d\"), \"theaterId\" : 1531 }\n   { \"_id\" : ObjectId(\"59a47287cfa9a3a73e51eb63\"), \"theaterId\" : 482 }\n\nAdditional Resources\n--------------------\n\n- For more information about working with geospatial data, see the\n  :ref:`manual entry for geospatial data <geo-overview-location-data>`.\n\n- For more information about supported GeoJSON types, see the the\n  :manual:`GeoJSON manual entry </reference/geojson/>`.\n\n- For more information about geospatial query operators, see the\n  :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/geo.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: // start-create-bucket\n   :end-before: // end-create-bucket\n  \n.. _csharp-gridfs-create-custom-bucket:\n\nCustomize the Bucket\n~~~~~~~~~~~~~~~~~~~~\n\nYou can customize the GridFS bucket configuration by passing an instance\nof the ``GridFSBucketOptions`` class to \nthe ``GridFSBucket()`` constructor. The following table describes the properties in the\n``GridFSBucketOptions`` class:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Field \n     - Description\n\n   * - ``BucketName`` \n     - The bucket name to use as a prefix for the files and chunks collections.\n       The default value is ``\"fs\"``.\n       \n       **Data type**: {+string-data-type+} \n\n   * - ``ChunkSizeBytes`` \n     - The chunk size that GridFS splits files into. The default value is 255 KB.\n       \n       **Data type**: {+int-data-type+}\n\n   * - ``ReadConcern`` \n     - The read concern to use for bucket operations. The default value is the \n       database's read concern.\n       \n       **Data type**: `ReadConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadConcern.html>`__\n\n   * - ``ReadPreference`` \n     - The read preference to use for bucket operations. The default value is the \n       database's read preference.\n       \n       **Data type**: `ReadPreference <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadPreference.html>`__\n\n   * - ``WriteConcern`` \n     - The write concern to use for bucket operations. The default value is the \n       database's write concern.\n       \n       **Data type**: `WriteConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.WriteConcern.html>`__\n\nThe following example creates a bucket named ``\"myCustomBucket\"`` by passing an instance\nof the ``GridFSBucketOptions`` class to the ``GridFSBucket()`` constructor:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: // start-create-custom-bucket\n   :end-before: // end-create-custom-bucket\n\n.. _csharp-gridfs-upload-files:\n\nUpload Files\n------------\n\nYou can upload files to a GridFS bucket by using the following methods:\n\n- ``OpenUploadStream()`` or ``OpenUploadStreamAsync()``: Opens a new upload stream to which\n  you can write file contents\n- ``UploadFromStream()`` or ``UploadFromStreamAsync()``: Uploads the contents of an existing\n  stream to a GridFS file\n\nThe following sections describe how to use these methods.\n\n.. _csharp-gridfs-open-upload-stream:\n\nWrite to an Upload Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``OpenUploadStream()`` or ``OpenUploadStreamAsync()`` method to create an upload\nstream for a given file name. These methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   * - ``filename``\n     - The name of the file to upload.\n        \n       **Data type**: {+string-data-type+}\n   * - ``options``\n     - *Optional.* An instance of the ``GridFSUploadOptions`` class that specifies the\n       configuration for the upload stream. The default value is ``null``.\n        \n       **Data type**: `GridFSUploadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSUploadOptions.html>`__\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThis code example demonstrates how to open an upload stream by performing the\nfollowing steps:\n\n- Calls the ``OpenUploadStream()`` method to open a writable GridFS stream for a file\n  named ``\"my_file\"``\n- Calls the ``Write()`` method to write data to ``my_file``\n- Calls the ``Close()`` method to close the stream that points to ``my_file`` \n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode:\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: open-upload-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-upload-stream\n         :end-before: // end-open-upload-stream\n\n   .. tab:: Asynchronous\n      :tabid: open-upload-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-upload-stream-async\n         :end-before: // end-open-upload-stream-async\n\nTo customize the upload stream configuration, pass an instance of the\n``GridFSUploadOptions`` class to the ``OpenUploadStream()`` or ``OpenUploadStreamAsync()``\nmethod. The ``GridFSUploadOptions`` class contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n   * - ``BatchSize``\n     - The number of chunks to upload in each batch. The default value is 16 MB\n       divided by the value of the ``ChunkSizeBytes`` property. \n        \n       **Data type**: ``int?`` \n       \n   * - ``ChunkSizeBytes``\n     - The size of each chunk except the last, which is smaller. The default value is 255 KB.\n        \n       **Data type**: ``int?``\n\n   * - ``Metadata``\n     - Metadata to store with the file, including the following elements:\n\n       - The ``_id`` of the file\n       - The name of the file\n       - The length and size of the file\n       - The upload date and time\n       - A ``metadata`` document in which you can store other information\n\n       The default value is ``null``.\n        \n       **Data type**: `BsonDocument <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonDocument.html>`__\n\nThe following example performs the same steps as the preceding example, but also uses\nthe ``ChunkSizeBytes`` option to specify the size of each chunk. Select the\n:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: open-upload-stream-with-options-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-upload-stream-with-options\n         :end-before: // end-open-upload-stream-with-options\n\n   .. tab:: Asynchronous\n      :tabid: open-upload-stream-with-options-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-upload-stream-with-options-async\n         :end-before: // end-open-upload-stream-with-options-async\n\n.. _csharp-gridfs-upload-from-stream:\n\nUpload an Existing Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``UploadFromStream()`` or ``UploadFromStreamAsync()`` method to upload the\ncontents of a stream to a new GridFS file. These methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   \n   * - ``filename``\n     - The name of the file to upload.\n        \n       **Data type**: {+string-data-type+}\n\n   * - ``source``\n     - The stream from which to read the file contents.\n        \n       **Data type**: `Stream <https://learn.microsoft.com/dotnet/api/system.io.stream>`__\n\n   * - ``options``\n     - *Optional.* An instance of the ``GridFSUploadOptions`` class that specifies the\n       configuration for the upload stream. The default value is ``null``.\n        \n       **Data type**: `GridFSUploadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSUploadOptions.html>`__\n\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThis code example demonstrates how to open an upload stream by performing the\nfollowing steps:\n\n- Opens a file located at ``/path/to/input_file`` as a stream in binary read mode\n- Calls the ``UploadFromStream()`` method to write the contents of the stream to a GridFS\n  file named ``\"new_file\"``\n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: upload-from-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-upload-from-stream\n         :end-before: // end-upload-from-stream\n\n   .. tab:: Asynchronous\n      :tabid: upload-from-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-upload-from-stream-async\n         :end-before: // end-upload-from-stream-async\n\n.. _csharp-gridfs-download-files:\n\nDownload Files\n--------------\n\nYou can download files from a GridFS bucket by using the following methods:\n\n- ``OpenDownloadStream()`` or ``OpenDownloadStreamAsync()``: Opens a new download stream\n  from which you can read file contents\n- ``DownloadToStream()`` or ``DownloadToStreamAsync()``: Writes the contents of a GridFS\n  file to an existing stream\n\nThe following sections describe these methods in more detail.\n\n.. _csharp-gridfs-open-download-stream:\n\nRead From a Download Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``OpenDownloadStream()`` or ``OpenDownloadStreamAsync()`` method to create a\ndownload stream. These methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   * - ``id``\n     - The ``_id`` value of the file to download. \n        \n       **Data type**: `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n   * - ``options``\n     - *Optional.* An instance of the ``GridFSDownloadOptions`` class that specifies the\n       configuration for the download stream. The default value is ``null``.\n        \n       **Data type**: `GridFSDownloadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSDownloadOptions.html>`__\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThe following code example demonstrates how to open a download stream by performing the\nfollowing steps:\n\n- Retrieves the ``_id`` value of the GridFS file named ``\"new_file\"``\n- Calls the ``OpenDownloadStream()`` method and passes the ``_id`` value to open the\n  file as a readable GridFS stream\n- Creates a ``buffer`` vector to store the file contents\n- Calls the ``Read()`` method to read the file contents from the ``downloader``\n  stream into the vector\n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: open-download-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-download-stream\n         :end-before: // end-open-download-stream\n\n   .. tab:: Asynchronous\n      :tabid: open-download-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-download-stream-async\n         :end-before: // end-open-download-stream-async\n\nTo customize the download stream configuration, pass an instance of the\n``GridFSDownloadOptions`` class to the ``OpenDownloadStream()`` method. The\n``GridFSDownloadOptions`` class contains the following property:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n   * - ``Seekable``\n     - Indicates whether the stream supports *seeking*, the ability to query and\n       change the current position in a stream. The default value is ``false``. \n        \n       **Data type**: ``bool?`` \n \nThe following example performs the same steps as the preceding example, but also sets\nthe ``Seekable`` option to ``true`` to specify that the stream is seekable.\n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: open-download-stream-with-options-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-download-stream-with-options\n         :end-before: // end-open-download-stream-with-options\n \n   .. tab:: Asynchronous\n      :tabid: open-download-stream-with-options-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-open-download-stream-with-options-async\n         :end-before: // end-open-download-stream-with-options-async\n  \n.. _csharp-gridfs-download_to_stream:\n\nDownload to an Existing Stream\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``DownloadToStream()`` or ``DownloadToStreamAsync()`` method to download the\ncontents of a GridFS file to an existing stream. These methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   * - ``id``\n     - The ``_id`` value of the file to download. \n        \n       **Data type**: `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n   * - ``destination``\n     - The stream that the {+driver-short+} downloads the GridFS file to. This property's\n       value must be an object that implements the ``Stream`` class.\n        \n       **Data type**: `Stream <https://learn.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-8.0>`__\n   * - ``options``\n     - *Optional.* An instance of the ``GridFSDownloadOptions`` class that specifies the\n       configuration for the download stream. The default value is ``null``.\n        \n       **Data type**: `GridFSDownloadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSDownloadOptions.html>`__\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThe following code example demonstrates how to download to an existing stream by\nperforming the following actions:\n\n- Opens a file located at ``/path/to/output_file`` as a stream in binary write\n  mode\n- Retrieves the ``_id`` value of the GridFS file named ``\"new_file\"``\n- Calls the ``DownloadToStream()`` method and passes the ``_id`` value to download\n  the contents of ``\"new_file\"`` to a stream\n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: download-to-stream-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-download-to-stream\n         :end-before: // end-download-to-stream\n\n   .. tab:: Asynchronous\n      :tabid: download-to-stream-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-download-to-stream-async\n         :end-before: // end-download-to-stream-async\n\n.. _csharp-gridfs-retrieve-file-info:\n\nFind Files \n----------\n\nTo find files in a GridFS bucket, call the ``Find()`` or ``FindAsync()`` method\non your ``GridFSBucket`` instance. These methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   \n   * - ``filter``\n     - A query filter that specifies the entries to match in the ``files`` collection.\n        \n       **Data type**: ``FilterDefinition<GridFSFileInfo>``. For more information, see\n       the API documentation for the\n       `Find() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.Find.html>`__\n       method.\n\n   * - ``source``\n     - The stream from which to read the file contents.\n        \n       **Data type**: `Stream <https://learn.microsoft.com/dotnet/api/system.io.stream>`__\n\n   * - ``options``\n     - *Optional.* An instance of the ``GridFSFindOptions`` class that specifies the\n       configuration for the find operation. The default value is ``null``.\n        \n       **Data type**: `GridFSFindOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSFindOptions.html>`__\n\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThe following code example shows how to retrieve and print file metadata\nfrom files in a GridFS bucket. The ``Find()`` method returns an\n``IAsyncCursor<GridFSFileInfo>`` instance from\nwhich you can access the results. It uses a ``foreach`` loop to iterate through\nthe returned cursor and display the contents of the files uploaded in the\n:ref:`csharp-gridfs-upload-files` examples. \n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: find-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/code-examples/GridFS.cs\n            :start-after: // start-find\n            :end-before: // end-find\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 13, \"chunkSize\" : 261120, \"uploadDate\" :\n            { \"$date\" : ... }, \"filename\" : \"new_file\" }\n            { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 50, \"chunkSize\" : 1048576, \"uploadDate\" :\n            { \"$date\" : ... }, \"filename\" : \"my_file\" }\n\n   .. tab:: Asynchronous\n      :tabid: find-async\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :copyable:\n\n         .. input:: /includes/code-examples/GridFS.cs\n            :start-after: // start-find-async\n            :end-before: // end-find-async\n            :language: csharp\n            :dedent:\n\n         .. output::\n            :visible: false\n\n            { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 13, \"chunkSize\" : 261120, \"uploadDate\" :\n            { \"$date\" : ... }, \"filename\" : \"new_file\" }\n            { \"_id\" : { \"$oid\" : \"...\" }, \"length\" : 50, \"chunkSize\" : 1048576, \"uploadDate\" :\n            { \"$date\" : ... }, \"filename\" : \"my_file\" }\n\nTo customize the find operation, pass an instance of the\n``GridFSFindOptions`` class to the ``Find()`` or ``FindAsync()`` method. The\n``GridFSFindOptions`` class contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n   \n   * - ``Sort``\n     - The sort order of the results. If you don't specify a sort order, the\n       method returns the results in the order in which they were inserted.\n        \n       **Data type**: ``SortDefinition<GridFSFileInfo>``. For more information, see\n       the API documentation for the\n       `Sort <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSFindOptions.Sort.html>`__\n       property.\n\n.. _csharp-gridfs-delete-files:\n\nDelete Files\n------------\n\nTo delete files from a GridFS bucket, call the ``Delete()`` or ``DeleteAsync()`` method\non your ``GridFSBucket`` instance. This method removes a file's metadata collection and\nits associated chunks from your bucket.\n\nThe ``Delete`` and ``DeleteAsync()`` methods accept the following parameters:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Parameter\n     - Description\n   * - ``id``\n     - The ``_id`` of the file to delete. \n        \n       **Data type**: `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__\n   * - ``cancellationToken``\n     - *Optional.* A token that you can use to cancel the operation.\n        \n       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__\n\nThe following code example shows how to delete a file named ``\"my_file\"``\npassing its ``_id`` value to ``delete_file()``:\n\n- Uses the ``Builders`` class to create a filter that matches the file named ``\"my_file\"``\n- Uses the ``Find()`` method to find the file named ``\"my_file\"``\n- Passes the ``_id`` value of the file to the ``Delete()`` method to delete the file\n\nSelect the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding\ncode.\n\n.. tabs::\n\n   .. tab:: Synchronous\n      :tabid: download-to-stream-sync\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-delete-file\n         :end-before: // end-delete-file\n\n   .. tab:: Asynchronous\n      :tabid: delete-file-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent:\n         :start-after: // start-delete-file-async\n         :end-before: // end-delete-file-async\n\n.. note:: File Revisions\n\n   The ``Delete()`` and ``DeleteAsync()`` methods support deleting only one file at a time.\n   If you want to delete each file revision, or files with different upload\n   times that share the same file name, collect the ``_id`` values of each revision.\n   Then, pass each ``_id`` value in separate calls to the ``Delete()`` or ``DeleteAsync()``\n   method.\n\nAPI Documentation\n-----------------\n\nTo learn more about the classes used on this page, see the following API documentation:\n\n- `GridFSBucket <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.html>`__\n- `GridFSBucketOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucketOptions.html>`__\n- `GridFSDownloadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSDownloadOptions.html>`__\n- `GridFSFindOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSFindOptions.html>`__\n- `GridFSUploadOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSUploadOptions.html>`__\n- `GridFSFileInfo <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSFileInfo.html>`__\n\nTo learn more about the methods in the ``GridFSBucket`` class used on this page, see the\nfollowing API documentation:\n\n- `OpenUploadStream() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.OpenUploadStream.html>`__\n- `OpenUploadStreamAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.OpenUploadStreamAsync.html>`__\n- `UploadFromStream() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.UploadFromStream.html>`__\n- `UploadFromStreamAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.UploadFromStreamAsync.html>`__\n- `OpenDownloadStream() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.OpenDownloadStream.html>`__\n- `OpenDownloadStreamAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.OpenDownloadStreamAsync.html>`__\n- `DownloadToStream() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.DownloadToStream.html>`__\n- `DownloadToStreamAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.DownloadToStreamAsync.html>`__\n- `Find() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.Find.html>`__\n- `FindAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.FindAsync.html>`__\n- `Delete() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.Delete.html>`__\n- `DeleteAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.GridFS.GridFSBucket.DeleteAsync.html>`__\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/gridfs.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-single-index\n   :end-before: end-single-index\n   :dedent:\n\nThe following is an example of a query that is covered by the index\ncreated in the preceding code snippet:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-single-index-query\n   :end-before: end-single-index-query\n   :dedent:\n\nFor more information, see :manual:`Single Field Indexes </core/index-single>` in the Server manual.\n\nCompound Indexes\n~~~~~~~~~~~~~~~~\n\n**Compound indexes**  hold references to multiple fields within a collection's documents,\nimproving query and sort performance.\n\nThe following example creates a compound index on the ``type`` and ``rated`` fields within\nthe ``sample_mflix.movies`` collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-compound-index\n   :end-before: end-compound-index\n   :dedent:\n\nThe following is an example of a query that is covered by the index\ncreated in the preceding code snippet:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-compound-index-query\n   :end-before: end-compound-index-query\n   :dedent:\n\nFor more information, see :manual:`Compound Indexes </core/index-compound>` in the Server manual.\n\nMultikey Indexes\n~~~~~~~~~~~~~~~~\n\n**Multikey indexes** collect and sort data from fields containing array values. You can\ndefine a multikey index using the same syntax as a single field or compound index.\n\nThe following example creates a compound, multikey index on the ``rated``, ``genres``\n(an array of Strings), and ``title`` fields within the ``sample_mflix.movies`` collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-multi-key-index\n   :end-before: end-multi-key-index\n   :dedent:\n\nThe following is an example of a query that is covered by the index created in the\npreceding code snippet:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-multi-key-query\n   :end-before: end-multi-key-query\n   :dedent:\n\nMultikey indexes behave differently from other indexes in terms of\nquery coverage, index bound computation, and sort behavior. To learn more about multikey\nindexes, including a discussion of their behavior and limitations, see the\n:manual:`Multikey Indexes page </core/index-multikey>` in the Server manual.\n\nClustered Indexes\n~~~~~~~~~~~~~~~~~\n\n**Clustered indexes** instruct a collection to store documents ordered by a key value.\nTo create a clustered index, specify the clustered index\noption with the ``_id`` field as the key and the ``Unique`` property as\n``true`` when you create your collection. A collection can only contain a single clustered\nindex. If you want to create a clustered index, then it must be specified when you create\na collection.\n\nThe following example creates a clustered index on the ``_id`` field while creating a new\n``sample_mflix.reviews`` collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-text-index\n   :end-before: end-text-index\n   :dedent:\n\nThe following query uses the text index created in the preceding code snippet:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: js\n   :start-after: begin-text-query\n   :end-before: end-text-query\n   :dedent:\n\nMultiple Fields\n+++++++++++++++\n\nA collection can only contain one text index. If you want to create a\ntext index for multiple text fields, you must create a compound\nindex. A text search runs on all the text fields within the compound\nindex.\n\nThe following snippet creates a compound text index for the ``title`` and ``genre``\nfields within the ``sample_mflix.movies`` collection:\n\n",
    "language": "js",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-geospatial-index\n   :end-before: end-geospatial-index\n   :dedent:\n\nThe following is an example of a geospatial query using the \"location.geo\" index:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-geospatial-query\n   :end-before: end-geospatial-query\n   :dedent:\n\nMongoDB also supports ``2d`` indexes for calculating distances on a Euclidean plane and\nfor working with the \"legacy coordinate pairs\" syntax used in MongoDB 2.2 and earlier.\nTo learn more, see :manual:`Geospatial Queries </geospatial-queries>` in the Server manual.\n\nUnique Indexes\n~~~~~~~~~~~~~~\n\n**Unique indexes**  ensure that the indexed fields do not store duplicate values. By\ndefault, MongoDB creates a unique index on the ``_id`` field during the creation of a\ncollection. To create a unique index, specify the fields that you want to prevent\nduplication on and set the ``Unique`` option to ``true``.\n\nThe following example creates a unique, descending index on the ``theaterId`` field within\nthe ``sample_mflix.theaters`` collection.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-unique-index\n   :end-before: end-unique-index\n   :dedent:\n\nIf you attempt to perform a write operation that stores a duplicate value\nthat violates the unique index, MongoDB will throw an error that resembles\nthe following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   E11000 duplicate key error index\n\nTo learn more, see :manual:`Unique Indexes </core/index-unique>` in the Server manual.\n\nWildcard Indexes\n~~~~~~~~~~~~~~~~\n\n**Wildcard indexes** enable queries against unknown or arbitrary fields.\nThese indexes can be beneficial if you are using a dynamic schema.\n\nThe following example creates an ascending wildcard index on all\nvalues of the ``location`` field within the ``sample_mflix.theaters`` collection,\nincluding values nested in subdocuments and arrays:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-wildcard-index\n   :end-before: end-wildcard-index\n   :dedent:\n\nFor more information, see the :manual:`Wildcard Indexes</core/index-wildcard>` page in the\nServer manual.\n\nList Indexes\n------------\n\nYou can use the `List() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoIndexManager-1.List.html>`__\nmethod to retrieve a list of indexes in your collection.\n\nThe following example uses the ``List()`` method to list\nall indexes in a collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :start-after: begin-list-indexes\n   :end-before: end-list-indexes\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-restaurant-model\n   :end-before: end-restaurant-model\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-address-model\n   :end-before: end-address-model\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-grade-model\n   :end-before: end-grade-model\n\n.. include:: /includes/convention-pack-note.rst\n\n.. _csharp-linq-queryable:\n\nMake A Collection Queryable\n---------------------------\n\nTo use LINQ to query your collection, you must first create an\nan `IQueryable\n<https://learn.microsoft.com/en-us/dotnet/api/system.linq.iqueryable?view=net-7.0>`__\nobject that links to the collection. To create the object, use the ``AsQueryable()`` method\nas follows:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   var restaurantsDatabase = client.GetDatabase(\"sample_restaurants\");\n   var restaurantsCollection = restaurantsDatabase.GetCollection<Restaurant>(\"restaurants\");\n   var queryableCollection = restaurantsCollection.AsQueryable();\n\nOnce you have the queryable object, you can compose a query using \n**method syntax**. Some pipeline stages also support **query comprehension syntax**,\nwhich resembles SQL query syntax.\n\nSelect the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see \nhow to compose a query using LINQ:\n\n.. tabs::\n\n   .. tab:: Method Syntax\n      :tabid: method-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = queryableCollection\n             .Select(r => new { r.Name, r.Address });\n\n   .. tab:: Query Syntax\n      :tabid: query-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = from r in queryableCollection\n             select new { r.Name, r.Address };\n\nThe result of the preceding example contains the following document:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = queryableCollection\n             .Where(r => r.Name == \"The Movable Feast\");\n\n   .. tab:: Query Syntax\n      :tabid: query-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = from r in queryableCollection\n             where r.Name == \"The Movable Feast\"\n             select r;\n\nThe result of the preceding example contains the following document:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   var query = queryableCollection\n       .Where(r => r.Cuisine == \"Italian\")\n       .Select(r => new {r.Name, r.Cuisine})\n       .Take(5);\n\nThe result of the preceding example contains the following documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   var query = queryableCollection\n       .Aggregate()\n       .Sample(4)\n       .ToList();\n\nThe result of the preceding example contains the following documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   var query = queryableCollection\n       .Where(r => r.Cuisine == \"Italian\")\n       .Select(r => new {r.Name, r.Cuisine})\n       .Skip(2);\n\nThe preceding example skips the first two restaurants that match the criteria, and\nreturns the rest. The result contains the following documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 3\n\n         var query = queryableCollection\n             .Where(r => r.Name == \"The Movable Feast\")\n             .SelectMany(r => r.Grades);\n\n   .. tab:: Query Syntax\n      :tabid: query-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 3\n\n         var query = from r in queryableCollection\n             where r.Name == \"The Movable Feast\"\n             from grade in r.Grades\n             select grade;\n\nThe query in the preceding example finds the document where the ``Name`` field \nhas the value \"The Movable Feast.\" Then, for each element in this document's \n``Grades`` array, the query returns a new document. The result contains the\nfollowing documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/linq.cs\n      :language: csharp\n      :start-after: start-nested-SelectMany\n      :end-before: end-nested-SelectMany\n\n   .. output::\n      :visible: false\n      :language: json\n\n      // output for first document in collection\n      [\n         { \"date\" : ISODate(\"2014-11-24T00:00:00Z\"), \n            \"grade\" : \"Z\", \n            \"score\" : 20.0 \n         }, \n         { \"date\" : ISODate(\"2013-01-17T00:00:00Z\"), \n            \"grade\" : \"A\", \n            \"score\" : 13.0 \n         }, \n         { \n            \"date\" : ISODate(\"2014-04-19T00:00:00Z\"), \n            \"grade\" : \"B\", \n            \"score\" : 12.0 \n         },\n         ...\n      ], \n      // output for second document in collection\n      [\n         ...\n      ]\n\n$group\n~~~~~~\n\nThe ``$group`` aggregation stage separates documents into groups according to\nthe criteria you specify.\n\nSelect the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see how \nto generate an ``$group`` stage using LINQ:\n\n.. tabs::\n\n   .. tab:: Method Syntax\n      :tabid: method-syntax\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = queryableCollection\n             .GroupBy(r => r.Cuisine)\n             .Select(g => new { Cuisine = g.Key, Count = g.Count() });\n\n   .. tab:: Query Syntax\n      :tabid: query-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = from r in queryableCollection\n             group r by r.Cuisine into g\n             select new {Cuisine = g.Key, Count = g.Count()};\n\nThe preceding example groups each document by the value in its ``Cuisine`` field,\nthen counts how many documents have each ``Cuisine`` value. The result contains \nthe following documents:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = queryableCollection\n             .OrderBy(r => r.Name)\n             .ThenByDescending(r => r.RestaurantId);\n\n   .. tab:: Query Syntax\n      :tabid: query-syntax\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         var query = from r in queryableCollection\n             orderby r.Name, r.RestaurantId descending\n             select r;\n\nThe preceding example returns the query results sorted alphabetically by the\n``Name`` field, with a secondary descending sort on the ``RestaurantId`` field.\nThe following is a subset of the documents contained in the returned results:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-review-model\n   :end-before: end-review-model\n\nSelect the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see how \nto generate a ``$lookup`` stage by using LINQ:\n\n.. tabs::\n\n   .. tab:: Method Syntax\n      :tabid: method-syntax\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-ingredient-model\n   :end-before: end-ingredient-model\n\n.. note:: Missing or Undefined Operands\n\n   If the operands you pass to any bitwise operator are of type `nullable <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types>`__\n   ``int`` or ``long`` and contain a missing or undefined value, the entire expression \n   evaluates to ``null``. If the operands are of type non-nullable ``int`` or \n   ``long`` and contain a missing or undefined value, the {+driver-short+} will\n   throw an error.\n\n$bitAnd\n+++++++\n\nThe ``$bitAnd`` aggregation operator performs a bitwise AND operation on the given\narguments. You can use the ``$bitAnd`` operator by connecting two or more \nclauses with a ``&`` character. \n\nThe following example shows how to create a ``$bitAnd`` stage by using LINQ. The\ncode retrieves the document in which the ``Name`` field has the \nvalue ``\"watermelon\"``. It then performs a bitwise AND operation on the values of the \n``IsAvailable`` and ``IsCheap`` fields in this document.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-bitAnd-example\n   :end-before: end-bitAnd-example\n\nThe preceding code returns ``1``, the result of the AND operation on the values\nof the ``IsAvailable`` field (``1``) and the ``IsCheap`` field (``1``).\n\nThe following example performs the same bitwise AND operation on all \ndocuments in the collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/linq.cs\n      :language: csharp\n      :dedent:\n      :start-after: start-bitAnd-collection-example\n      :end-before: end-bitAnd-collection-example\n\n   .. output::\n      :language: json\n      :visible: false\n      \n      1\n      0\n      0\n      1\n      0\n      null\n\nThe ``null`` result comes from the document where the ``Name`` field\nhas the value of ``\"cheese\"``. This document is missing an ``IsCheap`` field, so\nthe expression evaluates to ``null``.\n\n$bitOr\n++++++\n\nThe ``$bitOr`` aggregation operator performs a bitwise OR operation on the given\narguments. You can use the ``$bitOr`` operator by connecting two or more \nclauses with a ``|`` character. \n\nThe following example shows how to create a ``$bitOr`` stage by using LINQ. The\ncode retrieves the document in which the ``Name`` field has the \nvalue ``\"onions\"``. It then performs a bitwise OR operation on the values of the \n``IsAvailable`` and ``IsCheap`` fields in this document.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-bitOr-example\n   :end-before: end-bitOr-example\n\nThe preceding code returns ``1``, the result of the OR operation on the values\nof the ``IsAvailable`` field (``1``) and the ``IsCheap`` field (``0``).\n\n$bitNot\n+++++++\n\nThe ``$bitNot`` aggregation operator performs a bitwise NOT operation on the given\nargument. You can use the ``$bitNot`` operator by preceding an \noperand with a ``~`` character. ``$bitNot`` only takes one argument. The \nfollowing example shows how to create a ``$bitNot`` stage by using LINQ:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-examples/linq.cs\n      :language: csharp\n      :dedent:\n      :start-after: start-bitNot-example\n      :end-before: end-bitNot-example\n\n   .. output:: \n      :language: json\n      :visible: false\n\n      -2\n      -1\n      -1\n      -2\n      -2\n      null\n\n$bitXor\n+++++++\n\nThe ``$bitXor`` aggregation operator performs a bitwise XOR operation on the given\narguments. You can use the ``$bitXor`` operator by connecting two or more \nclauses with a ``^`` character. \n\nThe following example shows how to create a ``$bitXor`` stage by using LINQ. The\ncode retrieves the documents in which the ``Name`` field has \nthe value ``\"watermelon\"`` or ``\"onions\"``. It then performs a bitwise XOR \noperation on the values of the ``IsAvailable`` and ``IsCheap`` fields in these \ndocuments.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n   :start-after: start-bitXor-example\n   :end-before: end-bitXor-example\n\nThe result contains the following values:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/linq.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable:\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/odata.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable:\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/odata.txt"
  },
  {
    "code": "         :language: csharp\n         :copyable:\n         :dedent:\n\n      .. include:: /includes/convention-pack-note.rst\n\n   .. step:: Create an OData Controller\n\n      Create a new folder in your solution called ``Controllers`` and add a new\n      controller file called ``RestaurantsController.cs``. Copy the following code\n      into the file:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/odata.txt"
  },
  {
    "code": "         :language: csharp\n         :start-after: // start-controller\n         :end-before: // end-controller\n\n      This code performs the following actions:\n\n      - Creates a constructor that connects to MongoDB, and gets the\n        ``restaurants`` collection.\n      - Creates a ``Get`` endpoint that returns all restaurants in the collection.\n      - Specifies the ``MongoEnableQuery`` attribute to enable querying on the\n        ``Get`` endpoint.\n      - Specifies the ``PageSize`` attribute on ``MongoEnableQuery`` to limit the\n        number of documents returned to ``5``.\n\n   .. step:: Configure the OData Service\n\n      Paste the following code into your ``Program.cs`` file to configure the OData\n      service and map your controller endpoints.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/odata.txt"
  },
  {
    "code": "         :language: csharp\n         :start-after: // start-configure\n         :end-before: // end-configure\n\n      .. note::\n\n         Replace the ``<\"Your connection URI\">`` placeholder with your MongoDB connection string.\n      \n      This code performs the following actions:\n\n      - Instantiates a new ``MongoClient`` and registers it as a singleton in\n        the dependency injection container.\n      - Defines the Entity Data Model (EDM) and registers ``Restaurants`` as an\n        entity set with the key ``Id``.\n      - Adds the OData service and enables the ``Select()`` query operation.\n      - Registers the route by using the ``AddRouteComponents()`` method.\n      - Calls the ``UseRouting()`` and ``MapControllers()`` methods to match\n        incoming HTTP requests and route them to the appropriate endpoint.\n      \n      .. note::\n\n         The {+driver-short+} does not support OData-Aggregation with the\n         ``$apply`` query operation.\n\n   .. step:: Run the Application\n\n      Run the application by using your IDE, or by running the following command\n      in your shell at the root directory of your project:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/odata.txt"
  },
  {
    "code": "   :start-after: start-write-concern-client\n   :end-before: end-write-concern-client\n   :language: csharp\n   :dedent:\n\nThe following example sets the write concern to ``WriteConcern.WMajority`` for a collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :start-after: start-write-concern-collection\n   :end-before: end-write-concern-collection\n   :language: csharp\n   :dedent:\n\n.. note:: Clients, Collections, and Databases are Immutable\n\n   ``IMongoClient``, ``IMongoDatabase``, and ``IMongoCollection`` instances are immutable.\n   When you set the write concern on a client, database, or collection, the method returns a new\n   instance with the specified settings and does not affect the original instance.\n\nFor more information about write concern, see :manual:`Write Concern\n</reference/write-concern/>` in the {+mdb-server+} manual.\n\nRead Concern\n------------\n\nRead concern specifies the following behaviors:\n\n- Level of :manual:`causal consistency\n  </core/causal-consistency-read-write-concerns>` across replica sets\n- :manual:`Isolation guarantees </core/read-isolation-consistency-recency/>` maintained\n  during a query\n\nYou can specify the read concern by setting the ``ReadConcern`` option on a\n``MongoClientSettings``, ``MongoDatabaseSettings``, or ``MongoCollectionSettings`` object,\nor by using the ``WithReadConcern()`` method on a client, database, or collection.\n\nThe ``ReadConcern`` option and ``WithReadConcern()`` method both accept a single parameter\nthat specifies the read concern level.\n\nYou can set the following read concern levels:\n\n- ``ReadConcern.Local``: The query returns the instance's most recent data. Provides no guarantee\n  that the data has been written to a majority of the replica set members.\n- ``ReadConern.Available``: The query returns the instance's most recent data.\n  Provides no guarantee that the data has been written to a majority of the\n  replica set members. ``ReadConcern.Available`` is not available for use with\n  causally consistent sessions and transactions.\n- ``ReadConcern.Majority``: The query returns data that has been acknowledged by\n  a majority of the replica set members.\n- ``ReadConcern.Linearizable``: The query returns data that reflects all\n  successful writes that completed before the start of the read operation.\n  ``ReadConcern.Linearizable`` is not available for use with causally consistent\n  sessions and transactions.\n- ``ReadConcern.Snapshot``: The query returns majority-committed data as it appears across shards, from a\n  specific single point in the recent past.\n\nFor more information about the read concern levels, see :manual:`Read Concern\nLevels </reference/read-concern/#read-concern-levels>` in the {+mdb-server+}\nmanual.\n\nThe following example sets the read concern to ``ReadConcern.Majority`` for an instance of\n``MongoClient``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :start-after: start-read-concern-client\n   :end-before: end-read-concern-client\n   :language: csharp\n   :dedent:\n\nThe following example sets the read concern to ``ReadConcern.Majority`` for a\ncollection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :start-after: start-read-concern-collection\n   :end-before: end-read-concern-collection\n   :language: csharp\n   :dedent:\n\nTo learn more about read concern, see :manual:`Read Concern\n</reference/read-concern>` in the {+mdb-server+} manual.\n\nRead Preference\n---------------\n\nRead preference determines which member of a replica set MongoDB reads when\nrunning a query. You can set the read preference by setting the ``ReadPreference`` option on a\n``MongoClientSettings``, ``MongoDatabaseSettings``, or ``MongoCollectionSettings`` object,\nor by using the ``WithReadPreference()`` method on a client, database, or collection.\n\nThe ``ReadPreference`` option and ``WithReadPreference()`` method accept a read\npreference mode as a parameter. You can set the read preference mode to one of\nthe following values:\n\n- ``ReadPreference.Primary``: The query returns data from the primary node.\n- ``ReadPreference.PrimaryPreferred``: The query returns data from the primary node if\n  available. Otherwise, the query returns data from a secondary node.\n- ``ReadPreference.Secondary``: The query returns data from a secondary node.\n- ``ReadPreference.SecondaryPreferred``: The query returns data from a secondary node if\n  available, Otherwise, the query returns data from the primary node.\n- ``ReadPreference.Nearest``: The query returns data from the node with the lowest\n  network latency.\n\nThe following example sets the read preference to ``ReadPreference.Secondary``\nfor an instance of ``MongoClient``:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :start-after: start-read-preference-client\n   :end-before: end-read-preference-client\n   :language: csharp\n   :dedent:\n\nThe following example sets the read preference to ``ReadPreference.Secondary`` for a collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :start-after: start-read-preference-collection\n   :end-before: end-read-preference-collection\n   :language: csharp\n   :dedent:\n\nFor more information about read preference, see :manual:`Read Preference\n</core/read-preference/>` in the {+mdb-server+} manual.\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the types discussed in this\nguide, see the following API documentation:\n\n- `MongoClientSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClientSettings.html>`__\n- `MongoDatabaseSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoDatabaseSettings.html>`__\n- `MongoCollectionSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoCollectionSettings.html>`__\n- `WriteConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.WriteConcern.html>`__\n- `ReadConcern <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadConcern.html>`__\n- `ReadPreference <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReadPreference.html>`__\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/read-write-configuration.txt"
  },
  {
    "code": "   :emphasize-lines: 7\n\n   public class Person \n   {\n       public string Name { get; set; }\n       public int Age { get; set; }\n       public List<string> Hobbies {get; set;}\n\n       [BsonConstructor]\n       public Person(string name, string age)\n       {\n           Name = name;\n           Age = age;\n       }\n   }\n\n.. tip:: Multiple ``BsonConstructor`` attributes\n\n   If there is more than one constructor with the ``BsonConstructor``\n   attribute, the driver uses the constructor that has the most\n   parameters with matching fields in the document.\n\nYou can also specify the constructor to use when registering your class map:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/class-mapping.txt"
  },
  {
    "code": "   :emphasize-lines: 17\n\n   public class Person \n   {\n       public string Name { get; set; }\n       public int Age { get; set; }\n       public List<string> Hobbies {get; set;}\n\n       public Person(string name, string age)\n       {\n           Name = name;\n           Age = age;\n       }\n   }\n\n   BsonClassMap.RegisterClassMap<Person>(classMap =>\n   {\n       classMap.AutoMap();\n       classMap.MapCreator(p => new Person(p.Name, p.Age));\n   });\n\nCustomize Property Serialization\n--------------------------------\n\nYou can customize how the driver serializes a class property by\nadding attributes to the property. For more information about custom\nproperty serialization, see :ref:`csharp-custom-serialization`.\n\nSupport Extra Elements\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can design your {+language+} class to store any extra elements in your\ndocument that don't have matching class properties. To do this your class must\nhave a ``BsonDocument`` type property to hold the extra elements.\n\nThe following code uses the ``BsonExtraElements`` attribute with the\n``ExtraElements`` property to direct the driver to store extra elements:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/class-mapping.txt"
  },
  {
    "code": "   :copyable: false\n\n  00112233-4455-6677-8899-aabbccddeeff\n\nOriginally, MongoDB represented GUIDs as ``BsonBinaryData``\nvalues of :manual:`subtype 3. </reference/bson-types/#binary-data>`\nBecause subtype 3 didn't standardize the byte order of GUIDs\nduring encoding, different MongoDB drivers encoded GUIDs with different byte orders.\n\nThe following tabs show different driver encodings of the preceding GUID to\n``BsonBinaryData`` subtype 3:\n\n.. tabs::\n\n   .. tab:: {+driver-short+}\n      :tabid: csharp\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/guid-serialization.txt"
  },
  {
    "code": "         :copyable: false\n\n         33221100-5544-7766-8899-aabbccddeeff\n\n   .. tab:: PyMongo\n      :tabid: pymongo\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/guid-serialization.txt"
  },
  {
    "code": "         :copyable: false\n\n         00112233-4455-6677-8899-aabbccddeeff\n\n   .. tab:: Java Driver\n      :tabid: java\n\n",
    "language": "python",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/guid-serialization.txt"
  },
  {
    "code": "         :copyable: false\n\n         77665544-3322-1100-ffee-ddccbbaa9988\n\nTo standardize GUID byte order across applications, we added ``BsonBinaryData`` subtype 4,\nwhich all MongoDB drivers encode in the same way. If your application uses GUIDs, we\nrecommend using ``BsonBinaryData`` subtype 4 to store them.\n\nFor a list of all ``BsonBinaryData`` subtypes, see the\nAPI documentation for the `BsonBinarySubType <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonBinarySubType.html>`__\nenum.\n\nSerializing GUIDs\n-----------------\n\nAlthough we recommend using subtype 4 for all new ``BsonBinaryData`` GUIDs, some older\nMongoDB collections might contain some GUID fields that use subtype 3 and others that use\nsubtype 4. To account for these differences, the {+driver-short+} handles GUID\nserialization at the level of individual properties.\n\nThe {+driver-short+} uses the ``GuidRepresentation`` enum to represent the different\n``BsonBinaryData`` subtypes. The following table shows the ``GuidRepresentation`` enum\nmembers and the corresponding ``BsonBinaryData`` subtypes:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 10 10 \n\n   * - GuidRepresentation Member\n     - BsonBinaryData Subtype\n   \n   * - ``Standard``\n     - 4\n   \n   * - ``CSharpLegacy``\n     - 3\n   \n   * - ``JavaLegacy``\n     - 3\n   \n   * - ``PythonLegacy``\n     - 3\n   \n   * - ``Unspecified``\n     - N/A\n\n.. note::\n   \n   The ``CSharpLegacy``, ``JavaLegacy``, and ``PythonLegacy`` GUID representations are\n   all equivalent to ``BsonBinaryData`` subtype 3, but use different byte orders.\n\nThe following sections describe the ways in which you can configure GUID representation\nin your application.\n\nConfigure with Attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you're using the {+driver-short+} to\n:ref:`automap your {+language+} classes to document schemas <csharp-class-mapping>`,\nyou can add the ``BsonGuidRepresentation`` attribute to a GUID property \nto specify its representation. This attribute accepts a value from the\n`GuidRepresentation <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.GuidRepresentation.html>`__\nenum.\n\nThe following code example specifies the ``Standard`` GUID representation for the\n``G`` property: \n\n",
    "language": "java",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/guid-serialization.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   var objectDiscriminatorConvention = BsonSerializer.LookupDiscriminatorConvention(typeof(object));\n   var objectSerializer = new ObjectSerializer(objectDiscriminatorConvention, GuidRepresentation.Standard);\n   BsonSerializer.RegisterSerializer(objectSerializer);\n\nAdditional Information\n----------------------\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `BsonBinaryData <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonBinaryData.html>`__\n- `BsonGuidRepresentation <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonGuidRepresentationAttribute.html>`__\n- `GuidSerializer <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Serializers.GuidSerializer.html>`__\n- `ObjectSerializer <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Serializers.ObjectSerializer.html>`__\n- `GuidRepresentation <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.GuidRepresentation.html>`__\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/guid-serialization.txt"
  },
  {
    "code": "         :copyable: false\n\n         public class Clothing\n         {\n             public ObjectId Id { get; set; }\n             public string Name { get; set; }\n             public bool InStock { get; set; }\n             public double Price { get; set; }\n             public List<string> ColorSelection { get; set; }\n         }\n\n   .. tab:: BSON\n      :tabid: bson-representation\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           \"_id\": ObjectId(\"...\"),\n           \"Name\": \"Long Sleeve Shirt\",\n           \"InStock\": true,\n           \"Price\": 17.99,\n           \"ColorSelection\": [ \"black\", \"navy\", \"red\" ]\n         }\n\nYou can define a POCO with any object structure that suits your\nneeds, including nested objects, arrays, lists, and any data types.\n\n.. _csharp-custom-serialization:\n\nCustom Serialization\n--------------------\n\nIf the default field mapping behavior does not meet your needs, you can\nspecify custom behavior using serialization-related attributes. These\nattributes change the way that the driver serializes each property of\nyour POCO. This section describes some of the common\nserialization-related attributes.\n\nSerialize Read-Only Properties\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf a property is read-only, the automapper doesn't include it in the class map for\nserialization. To force the automapper to include a property in the class map, apply the\n``[BsonElement]`` attribute to the property.\n\nThe following code example applies the ``[BsonElement]`` attribute to the ``Upc`` property\nof the ``Clothing`` class. ``Upc`` is a read-only property because it has a ``get`` method\nbut no ``set`` method.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 9\n\n   public class Clothing\n   {\n       public ObjectId Id { get; set; }\n       public string Name { get; set; }\n       public bool InStock { get; set; }\n       public double Price { get; set; }\n       public List<string> ColorSelection { get; set; }\n       \n       [BsonElement]\n       public int Upc { get; }\n   }\n         \nYou can also add a read-only property when you register the class map, as shown in the\nfollowing example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonElement(\"year_built\")]\n       public int YearBuilt { get; set; }\n   }\n\nThough it is common to use the Pascal case naming convention when\ndefining {+language+} classes, using the ``[BsonElement()]`` attribute\nallows you to select a different or custom naming convention in your\nMongoDB collection.\n\n.. tip:: Set Custom Field Name Convention\n   \n   If you want to serialize every property with a custom field name, you\n   can define a ``ConventionPack`` instead of using the\n   ``[BsonElement()]`` attribute. For example, if you define your class\n   using the Pascal case naming convention, you can use the following\n   code to use camel case field names in the serialized document:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonRepresentation(BsonType.Int32)]\n       public char YearBuilt { get; set; }\n   }\n\nFor more information on valid type conversions, see the `{+language+}\nConversions Specification\n<https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions>`__.\n\n.. important:: Serializing NaN and Infinity\n\n   If you try to serialize or deserialize a floating-point\n   ``Infinity`` or ``NaN`` value to an integral representation, the driver throws an\n   ``OverflowException``.\n\nSet Field Order\n~~~~~~~~~~~~~~~\n\nThe driver serializes properties to BSON fields in the order they\nare specified in the POCO. To store properties in a custom order to\nmatch an existing schema, you can specify the ``Order`` named\nparameter in the ``[BsonElement()]`` attribute. In the following code\nsample, the driver stores the ``YearBuilt`` property after the\n``Style`` property:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5, 8\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonElement(Order = 2)]\n       public int YearBuilt { get; set; }\n\n       [BsonElement(Order = 1)]\n       public string Style { get; set; }\n   }\n\nIf any properties don't have an explicit ``Order``, the driver will\nserialize them in the default order after those that do.\n\nIdentify ``Id`` Property\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the driver maps any public property named ``Id``, ``id``, or\n``_id`` to the BSON ``_id`` field. To explicitly select the\nproperty to map to the ``_id`` field, use the ``[BsonId()]`` attribute.\nThe following code sample maps the ``Identifier`` property to the\n``_id`` field:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 3\n\n   public class House\n   {\n       [BsonId]\n       public string Identifier { get; set; }\n   }\n\n.. warning:: Multiple ID Fields\n\n   If you identify more than one property as the ``_id`` field using the\n   ``[BsonId()]`` attribute, the driver throws a\n   ``DuplicateBsonMemberMapAttributeException``. If you specify the same \n   database field more than once\n   (for example, if your POCO includes properties named ``Id`` and ``_id``), \n   the driver throws a ``BsonSerializationException``.\n\n.. note:: Nested Document Ids\n\n   The ``_id`` field mapping logic described in this section only applies to the\n   root document and does not apply to nested documents.\n\nSpecify an ID Generator\n```````````````````````\n\nEvery document in a MongoDB collection must have a unique ID. When you serialize an object\nto a collection, if its ID property contains the default\nvalue for its data type (usually ``null``), the {+driver-short+} doesn't serialize the\ndefault value. Instead, the driver tries to generate a unique ID value and assign it to the\nproperty.\n\nTo enable ID generation for a property, you must specify the ID generator the driver\nuses for the property. You can do so by applying the ``[BsonId]`` attribute to the property\nand passing the ``IdGenerator`` argument to specify the generator type.\nThe following table describes the ID generators available in the\n{+driver-short+}:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 25 75\n\n   * - Id Field Data Type\n     - How to Use\n\n   * - ``Guid``\n     - To use the COMB algorithm to generate a unique ``Guid`` value, apply the\n       ``[BsonId(IdGenerator = typeof(CombGuidGenerator))]`` attribute to the ID\n       property, as shown in the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n\n          public class House\n          {\n             [BsonId(IdGenerator = typeof(CombGuidGenerator))]\n             public Guid Id { get; set; }\n          }\n\n       To generate a unique ``Guid`` value without the COMB algorithm, don't apply\n       the preceding attribute to the ID property. The driver automatically uses\n       the ``GuidGenerator`` type to generate a unique value for the ID property.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n\n          public class House\n          {\n             public Guid Id { get; set; }\n          } \n\n   * - ``ObjectId``\n     - The driver automatically uses the ``ObjectIdGenerator`` type for ID properties with\n       the ``ObjectId`` data type, such as the one in the following code example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n\n          public class House\n          {\n             public ObjectId Id { get; set; }\n          } \n\n   * - ``string``\n     - If you specify that an ID property with the ``string`` data type is serialized\n       as an ``ObjectId``, the driver automatically uses the\n       ``StringObjectIdGenerator`` to generate a unique ``string`` value for the property.\n       In the following code example, the driver uses the ``StringObjectIdGenerator``\n       for the ``Id`` property:\n       \n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n   \n          public class House\n          {\n             [BsonRepresentation(BsonType.ObjectId)]\n             public string Id { get; set; }\n          } \n       \n       To generate a unique ``string`` value for an ID property that is not serialized\n       as an ``ObjectId``, apply the\n       ``[BsonID(IdGenerator = typeof(StringObjectIdGenerator))]`` attribute to the\n       property, as shown in the following code example. The driver\n       uses the ``StringObjectIdGenerator`` type to generate a unique ``ObjectId`` value,\n       convert it to a ``string``, and assign it to the property.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n   \n          public class House\n          {\n             [BsonId(IdGenerator = typeof(StringObjectIdGenerator))]\n             public string Id { get; set; }\n          }\n         \n   * - ``BsonObjectId``\n     - Apply the ``[BsonId(IdGenerator = typeof(BsonObjectIdGenerator))]`` attribute to the\n       ID property, as shown in the following code example. The driver uses the\n       ``BsonObjectIdGenerator`` type to generate a unique ``BsonObjectId`` value for\n       the property.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "          :copyable: true\n\n          public class House\n          {\n             [BsonId(IdGenerator = typeof(BsonObjectIdGenerator))]\n             public BsonObjectId Id { get; set; }\n          } \n\nAlternatively, you can specify an ``IIdGenerator`` type when you register the class map,\nas shown in the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n\n   BsonClassMap.RegisterClassMap<House>(classMap => \n   {\n      classMap.AutoMap();\n      classMap.MapIdMember(h => h.Id).SetIdGenerator(CombGuidGenerator.Instance);\n   });\n\n.. tip:: Specify an ``IIdGenerator`` for Multiple Classes\n\n   You can use the ``RegisterIdGenerator()`` method to specify a single ``IIdGenerator``\n   for all ``Id`` properties of a certain data type. The following code example instructs\n   the driver to use the ``CombGuidGenerator`` type for all ``Guid`` IDs:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "      :copyable: true\n   \n      BsonSerializer.RegisterIdGenerator(\n        typeof(Guid),\n        CombGuidGenerator.Instance\n      );\n\nThe {+driver-short+} also includes ``IIdGenerator`` types that validate the ``Id``\nproperty and throw an exception if the ID is invalid. The following table lists these\ntypes:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 10 10 \n\n   * - ID Validation \n     - IIdGenerator Type \n   * - Not null \n     - ``NullIdChecker``\n   * - Not all zeroes \n     - ``ZeroIdChecker<T>``\n\nIn the following code example, if the ``Id`` property of the ``House`` class contains\nthe default value (``null``), the driver throws an exception:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n   \n   public class House\n   {\n       [BsonId(IdGenerator = typeof(NullIdChecker))]\n       public Guid Id { get; set; }\n   }\n\nOmit Empty Fields\n~~~~~~~~~~~~~~~~~\n\nBy default, the driver serializes undefined properties to fields with ``null``\nvalues. To ignore undefined properties during serialization, use the ``[BsonIgnore]``\nattribute. The following code shows how you can prevent the driver from\nserializing the ``YearBuilt`` property if it is undefined:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonIgnore]\n       public int YearBuilt { get; set; }\n       public string Style { get; set; }\n   }\n\nCustomize Default Values\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn {+language+}, a property has a default value until you assign a value to it. The\ndefault value depends on the property's data type. For example, the default value for\na reference-type property is ``null``.\n\nTo specify a different default value for a property, apply the\n``[BsonDefaultValue()]`` attribute to the property and pass the desired default value as\nan argument.\n\nThe following code examples applies the ``[BsonDefaultValue()]`` attribute to the\n``YearBuilt`` property. Until this property is assigned a value, its value is ``1900``. \n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonDefaultValue(1900)]\n       public int YearBuilt { get; set; }\n   }\n\nYou can also specify a different default value for a property when\nyou register the class map, as shown in the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n\n   BsonClassMap.RegisterClassMap<House>(classMap => \n   {\n      classMap.AutoMap();\n      classMap.MapMember(h => h.YearBuilt).SetDefaultValue(1900);\n   });\n\nBy default, the {+driver-short+} serializes all properties, including those that\ncontain default values. To instruct the driver to ignore a property that has the\ndefault value, use the ``[BsonIgnoreIfDefault]`` attribute.\n\nThe following code example applies the ``[BsonIgnoreIfDefault]`` attribute to the\n``YearBuilt`` property. If the value of this property is the default for its data type\n(``0`` for ``int`` properties), the driver won't serialize it.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonIgnoreIfDefault]\n       public int YearBuilt { get; set; }\n   }\n\nYou can also instruct the driver to ignore a property that contains the default value when\nyou register the class map, as shown in the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n\n   BsonClassMap.RegisterClassMap<House>(classMap => \n   {\n      classMap.AutoMap();\n      classMap.MapMember(h => h.YearBuilt).SetIgnoreIfDefault(true);\n   });\n\nYou can both specify a different default value for a property and instruct the driver to\nignore the property if it contains this default value. To do so, apply both the\n``[BsonDefaultValue()]`` and ``[BsonIgnoreIfDefault]`` attributes to the property,\nas shown in the following code example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5-6\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonDefaultValue(1900)]\n       [BsonIgnoreIfDefault] \n       public int YearBuilt { get; set; }\n   }\n\nThe previous code example sets the following serialization behavior:\n\n- If a value hasn't been assigned to the ``YearBuilt`` property, it has the specified\n  default value of ``1900``.\n- Because ``1900`` is the default value for this property, the driver will ignore the\n  property if it has this value.\n\n\n\nCustomize DateTime Serialization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo customize how the {+driver-short+} serializes ``DateTime`` properties, use the\n``[BsonDateTimeOptions()]`` attribute and specify the desired setting as an argument.\n\nIf a ``DateTime`` property represents only a date, you can apply the\n``[BsonDateTimeOptions(DateOnly = true)]`` attribute to it.\nIf you do, the driver won't perform any time-zone conversion on the value.\n\nIn the following code example, the ``PatientRecord`` class uses a ``DateTime`` for the\n``DateOfBirth`` property. The ``[BsonDateTimeOptions(DateOnly = true)]``\nattribute indicates that the property contains only a date.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class PatientRecord\n   {\n       public Guid Id { get; set; }\n\n       [BsonDateTimeOptions(DateOnly = true)]\n       public DateTime DateOfBirth { get; set; }\n   }\n\nYou can also use the ``[BsonDateTimeOptions()]`` attribute to specify the ``DateTimeKind``\nof a ``DateTime`` property. In the following code example, the ``PatientRecord`` class\nhas an ``AppointmentTime`` property of type ``DateTime``.\nThe ``[BsonDateTimeOptions(Kind = DateTimeKind.Local)]`` attribute indicates\nthat the time component of the property's value is in local time. When the\ndriver serializes this property, it converts the time to UTC, the standard\nformat for times stored in MongoDB.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class PatientRecord\n   {\n       public Guid Id { get; set; }\n\n       [BsonDateTimeOptions(Kind = DateTimeKind.Local)]\n       public DateTime AppointmentTime { get; set; }\n   }\n\nYou can also specify one or both of the previous ``DateTime`` options when\nregistering the class map:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n\n   BsonClassMap.RegisterClassMap<House>(classMap => \n   {\n      classMap.AutoMap();\n      classMap.MapMember(p => p.DateOfBirth)\n         .SetSerializer(new DateTimeSerializer(dateOnly: true));\n      classMap.MapMember(p => p.AppointmentTime)\n         .SetSerializer(new DateTimeSerializer(DateTimeKind.Local));\n   });\n\n.. tip:: DateTimeKind Values\n\n   The ``DateTimeKind`` enum is part of the {+framework+}. For more information on\n   its members, see the `Microsoft documentation for the DateTimeKind enum. <https://learn.microsoft.com/en-us/dotnet/api/system.datetimekind?view=net-8.0>`__\n\nCustomize Dictionary Serialization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``DictionaryRepresentation`` enum defines the formats the {+driver-short+}\ncan serialize a ``Dictionary`` instance to. This enum includes the following members:\n\n- **Document**: (Default) The driver serializes the ``Dictionary`` to a ``BsonDocument``.\n  Each entry in the dictionary is a ``BsonElement`` with a name equal to\n  the entry's key and a value equal to the entry's value. You can\n  use this representation only when all the keys in the dictionary are strings that\n  are also valid ``BsonElement`` names.\n- **ArrayOfArrays**: The driver serializes the dictionary to a ``BsonArray``. Each\n  entry in the dictionary is a nested, two-element ``BsonArray`` that contains\n  the entry's key and the entry's value.\n- **ArrayOfDocuments**: The driver serializes the dictionary to a ``BsonArray``. Each\n  entry in the dictionary is a nested ``BsonDocument`` of the form\n  ``{ k : key, v : value }``. Because the keys and values are\n  tagged with element names, you can query this format more intuitively than\n  an ``ArrayOfArrays``.\n\nIn the following code example, the ``RoomSizes`` property is a dictionary that contains\neach room in a house and its corresponding size. The ``[BsonDictionaryOptions()]``\nattribute instructs the {+driver-short+} to serialize\nthis property to a ``BsonArray`` object, and each entry in the dictionary to a\n``BsonDocument`` of the form ``{ k : \"<room>\", v : <size> }``. \n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 5\n\n   public class House\n   {\n       public Guid Id { get; set; }\n\n       [BsonDictionaryOptions(DictionaryRepresentation.ArrayOfDocuments)]\n       public Dictionary<string, float> RoomSizes { get; set; }\n   }\n\nYou can also specify the serialization format of a dictionary when\nyou register the class map, as shown in the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: true\n\n   BsonClassMap.RegisterClassMap<House>(classMap => \n   {\n       classMap.AutoMap();\n       classMAp.MapMember(h => h.RoomSizes)\n         .SetSerializer(new DictionaryInterfaceImplementerSerializer<Dictionary<string, float>>\n         (DictionaryRepresentation.ArrayOfDocuments));\n   });\n\nExample\n-------\n\nThe following example shows how to insert a ``Clothing`` document with custom field\nmapping specifications into MongoDB.\n\nThe following code defines the ``Clothing`` class with these\nserialization-related attributes:\n\n- ``[BsonElement()]``, which specifies custom field names in the camel case naming convention\n- ``[BsonRepresentation()]``, which specifies serialization of the ``Price`` field as a BSON ``Double`` type\n- ``[BsonDefaultValue()]``, which sets the ``Name`` property to\n  ``\"Generic item\"`` if no value has been assigned to it\n- ``[BsonDateTimeOptions(DateOnly = true)]``, which specifies that the ``DateTime`` property\n  represents only a date value, with no associated time\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :start-after: start-model\n   :end-before: end-model\n   :language:  csharp\n   :copyable:\n   :dedent:\n\nThe following code instantiates a ``Clothing`` object and inserts the document into a collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ObjectId(\"...\"),\n     \"name\": \"Denim Jacket\",\n     \"inStock\": false,\n     \"price\": 32.99,\n     \"colorSelection\": [ \"dark wash\", \"light wash\" ],\n     \"listedDate\" : ISODate(\"2007-01-01T00:00:00Z\"),\n     \"sizeGuide\" : { \n       \"Small\" : \"Chest: 38\\\", Waist: 38\\\", Shoulders: 15\\\"\", \n       \"Medium\" : \"Chest: 40\\\", Waist: 40\\\", Shoulders: 15.5\\\"\", \n       \"Large\" : \"Chest: 42\\\", Waist: 40\\\", Shoulders: 16\\\"\" \n     }\n   }\n\nAdditional Information\n----------------------\n\nFor a full list of serialization-related attributes, see the\n`Serialization.Attributes API documentation <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.html>`__.\n\nFor additional read and write operation examples using POCOs, see the :ref:`Usage Examples\n<csharp-usage-examples>` or the :ref:`CRUD Fundamentals Pages <csharp-crud>`.\n\nTo learn more about how the driver maps BSON documents to POCOs, see\n:ref:`csharp-class-mapping`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `[BsonElement()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonElementAttribute.html>`__\n- `[BsonRepresentation()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute.html>`__\n- `[BsonId()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonIdAttribute.html>`__\n- `[BsonIgnore()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute.html>`__\n- `[BsonDefaultValue()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonDefaultValueAttribute.html>`__\n- `[BsonIgnoreIfDefault] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfDefaultAttribute.html>`__\n- `[BsonDateTimeOptions()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonDateTimeOptionsAttribute.html>`__\n- `[BsonDictionaryOptions()] <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Attributes.BsonDictionaryOptionsAttribute.html>`__\n- `ConventionPack <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Conventions.ConventionPack.html>`__\n- `InsertOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertMany.html>`__\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/poco.txt"
  },
  {
    "code": "   :emphasize-lines: 1,6\n   \n   [BsonKnownTypes(typeof(Cat), typeof(Dog))]\n   public class Animal \n   {\n   }\n\n   [BsonKnownTypes(typeof(Lion), typeof(Tiger))]\n   public class Cat : Animal \n   {\n   }\n\n   public class Dog : Animal \n   {\n   }\n\n   public class Lion : Cat \n   {\n   }\n\n   public class Tiger : Cat \n   {\n   }\n\n.. note:: Using BsonKnownTypes\n\n   Apply the ``[BsonKnownTypes]`` attribute only to parent classes. Pass as arguments\n   only the types that *directly* inherit from the class, not all child classes in\n   the hierarchy.\n\nIf you're creating a class map manually, call the\n``BsonClassMap.RegisterClassMap<T>()`` method for every class in the hierarchy, as shown\nin the following example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :copyable: false\n   \n   { _id: ..., _t: \"Animal\", ... }\n   { _id: ..., _t: \"Cat\", ... }\n   { _id: ..., _t: \"Dog\", ... }\n   { _id: ..., _t: \"Lion\", ... }\n   { _id: ..., _t: \"Tiger\", ... }\n\nThe ``ScalarDiscriminatorConvention`` uses concise discriminator values, but can be\ndifficult to run a query on. For example, to find all documents of type or subtype ``Cat``,\nyou must explicitly list each class you're looking for:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :copyable: true\n   \n   var query = coll.AsQueryable().Where(\n       item => item.GetType() == typeof(Cat) ||\n       item.GetType() == typeof(Lion) ||\n       item.GetType() == typeof(Tiger));\n\n.. note:: OfType<T>() and the is Operator\n\n   When checking the type of a scalar discriminator, use the ``Where`` syntax shown in\n   the preceding code example. If you try to use the ``Aggregate().OfType<T>()`` method,\n   or if you pass an expression containing the ``is`` operator to the\n   ``Aggregate().Match()`` method, the driver throws an exception.\n\n.. _csharp-discriminator-hierarchical:\n\nHierarchicalDiscriminatorConvention\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo simplify queries against your collection of polymorphic types, you can use the\n``HierarchicalDiscriminatorConvention``. According to this convention, the value of ``_t``\nis an array of all classes in the inheritance hierarchy of the document's type.\n\nTo use the ``HierarchicalDiscriminatorConvention``, label the base class of your\ninheritance hierarchy as the root class. If you're using the automapper,\nlabel the root class by applying the\n``[BsonDiscriminatorAttribute]`` attribute to the class and passing ``RootClass = true``\nas an argument. The following code example labels the ``Animal`` class as the\nroot of the example inheritance hierarchy:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :emphasize-lines: 1\n   \n   [BsonDiscriminator(RootClass = true)]\n   [BsonKnownTypes(typeof(Cat), typeof(Dog)]\n   public class Animal \n   {\n   }\n\nIf you're creating a class map manually, call the ``SetIsRootClass()`` method and pass\n``true`` as an argument when you register the class map for the root class. The following\ncode example registers class maps for all five example classes but labels only the\n``Animal`` class as the root of the inheritance hierarchy:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 3 \n   \n   BsonClassMap.RegisterClassMap<Animal>(classMap => {\n       classMap.AutoMap();\n       classMap.SetIsRootClass(true);\n   });\n   BsonClassMap.RegisterClassMap<Cat>();\n   BsonClassMap.RegisterClassMap<Dog>();\n   BsonClassMap.RegisterClassMap<Lion>();\n   BsonClassMap.RegisterClassMap<Tiger>();\n\nSuppose you label the example ``Animal`` class as the root of the inheritance hierarchy,\nand then create an instance of the ``Animal`` class and each of its\nsubclasses. If you serialize these objects to a single collection, the {+driver-short+}\napplies the ``HierarchicalDiscriminatorConvention`` and the corresponding\nBSON documents appear as follows:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :copyable: true\n   \n   var query = coll.Aggregate().Match(a => a is Cat);\n\nCustom Discriminator Conventions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you're working with data that doesn't follow the conventions used by the\n{+driver-short+}--for example, data inserted into MongoDB by another driver or object\nmapper--you might need to use a different value for your discriminator field to\nensure your classes align with those conventions.\n\nIf you're using the automapper, you can specify a custom value for a class's discriminator\nfield by applying the ``[BsonDiscriminator]`` attribute to the class and passing\nthe custom discriminator value as a string argument. The following code example\nsets the value of the discriminator field for the ``Animal`` class to \"myAnimalClass\":\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :emphasize-lines: 1\n\n   [BsonDiscriminator(\"myAnimalClass\")]\n   public class Animal \n   {\n   }\n\nIf you're creating a class map manually, call the ``SetDiscriminator()`` method and pass\nthe custom discriminator value as an argument when\nyou register the class map. The following code example sets the value of the\ndiscriminator field for the ``Animal`` class to \"myAnimalClass\":\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   BsonClassMap.RegisterClassMap<Animal>(classMap => \n   {\n       classMap.AutoMap();\n       classMap.SetDiscriminator(\"myAnimalClass\");\n   });\n\nAn instance of the previous ``Animal`` class appears as follows after serialization: \n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\": \"...\", \"_t\": \"myAnimalClass\"}\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/serialization/polymorphic-objects.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. note::\n\n   The documents in the ``guitars`` collection use the camel-case naming\n   convention. The examples in this guide use a ``ConventionPack``\n   to deserialize the fields in the collection into Pascal case and map them to\n   the properties in the ``Guitar`` class.\n\n   To learn more about custom serialization, see :ref:`csharp-custom-serialization`.\n\nTo learn more about class mapping, see :ref:`csharp-class-mapping`.\n\nThe following code instantiates the ``_guitarsCollection`` object using the \n``Guitar`` class as a type parameter. This type parameter causes the driver to \nautomatically serialize and deserialize the documents it sends to and receives\nfrom MongoDB to instances of the ``Guitar`` class:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindEqPOCO.cs\n      :language:  csharp\n\n   .. output:: \n      :language: json\n      :visible:\n\n      { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 }\n\nThe following example uses builders to create a query filter that matches the\nsame documents as the preceding example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindEqBuilder.cs\n      :language:  csharp\n\n   .. output:: \n      :language: json\n      :visible:\n\n      { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 }\n\n.. tip:: Find All Documents\n\n   Use an empty query filter to match all documents in the collection. Create\n   an empty query filter with builders as follows:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindGtPOCO.cs\n      :language:  csharp\n\n   .. output::\n      :language: json\n      :visible:\n\n      { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null }\n\nThe following example uses builders to create a query filter that matches the\nsame documents as the preceding example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindGtBuilder.cs\n      :language:  csharp\n\n   .. output:: \n      :language: json\n      :visible:\n\n      { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null }\n\n\nTo learn more about using builders, see :ref:`csharp-builders`.\n\nLogical Operators\n-----------------\n\nLogical operators match documents using logic applied to the results of two or more\nsets of expressions. The following is a list of some logical operators:\n\n.. list-table::\n   :widths: 30 30 40\n   :header-rows: 1\n\n   * - Operator\n     - Builder\n     - Description\n\n   * - ``&&``\n     - ``And()``\n     - All expressions must evaluate to true.\n\n   * - ``||``\n     - ``Or()``\n     - At least one expression must evaluate to true.\n\nFor a full list of logical operators, see the :manual:`Logical\nQuery Operators </reference/operator/query-logical/>` page. \n\nThe following example specifies a query filter as a parameter to the ``Find()`` \nmethod. The query matches all documents where the\n``establishedYear`` field is greater than or equal to ``1985``, and the ``make``\nfield is not equal to \"Kiesel\".\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindAndPOCO.cs\n      :language:  csharp\n\n   .. output::\n      :language: json\n      :visible:\n\n      { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 }\n\n\nThe following example uses builders to create a query filter that matches the\nsame documents as the preceding example:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindAndBuilder.cs\n      :language:  csharp\n\n   .. output:: \n      :language: json\n      :visible:\n\n      { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 }\n\nTo learn more about using builders, see :ref:`csharp-builders`.\n\nArray Operators\n---------------\n\nArray operators match documents based on the value or quantity of elements in an array\nfield. The following is a list of builder methods that use array operators:\n\n.. list-table::\n   :widths: 40 60\n   :header-rows: 1\n\n   * - Operator\n     - Description\n\n   * - ``All()``\n     - Matches documents if the array field contains all elements specified in\n       the query.\n\n   * - ``Any()``\n     - Matches documents if any element in the array field matches the specified\n       query filter.\n\n   * - ``Size()``\n     - Matches documents if the array field is a specified size.\n\n.. note:: \n\n   The ``Any()`` builder uses the ``$elemMatch`` query operator.\n\n   To learn more about the ``$elemMatch`` query selector, see\n   :manual:`$elemMatch </reference/operator/query/elemMatch/#mongodb-query-op.-elemMatch>`.\n\nFor more information on the array operators, see the :manual:`Array\nQuery Operators </reference/operator/query-array/>` page.\n\nThe following example uses builders to create a query filter that matches all\ndocuments that have 3 elements in the ``models`` field:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindSizeBuilder.cs\n      :language:  csharp\n\n   .. output::\n      :language: json\n      :visible:\n\n      { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 }\n      { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 }\n      { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null }\n\nTo learn more about using builders, see :ref:`csharp-builders`.\n\nElement Operators\n-----------------\n\nElement operators query data based on the presence or type of a field.\n\nFor a full list of element operators, see the :manual:`Element\nQuery Operators </reference/operator/query-element/>` page.\n\nThe following example uses builders to create a query filter that matches all\ndocuments that have a ``rating`` field:\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/fundamentals/code-examples/specify-query/FindExistsBuilder.cs\n      :language:  csharp\n\n   .. output::\n      :language: json\n      :visible:\n\n      { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 }\n      { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 }\n      { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 }\n      { \"_id\" : 5, \"make\" : \"Ibanez\", \"models\" : [\"RG\", \"AZ\"], \"establishedYear\" : 1957, \"rating\" : 7 }\n\nTo learn more about using builders, see :ref:`csharp-builders`.\n\nEvaluation Operators\n--------------------\n\nEvaluation operators analyze data on individual fields, or on the entire collection's\ndocuments. Some builder methods that use evaluation operators include ``Regex()``\nand ``Text()``.\n\nFor a full list of evaluation operators, see the :manual:`Evaluation\nQuery Operators </reference/operator/query-evaluation/>` page.\n\nThe following example uses builders to create a query filter that matches all\ndocuments that have a value in the ``make`` field that starts with the letter \n\"G\":\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: ../../../includes/fundamentals/code-examples/specify-query/FindRegexBuilder.cs\n      :language:  csharp\n\n   .. output::\n      :language: json\n      :visible:\n\n      { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 }\n\nTo learn more about using builders, see :ref:`csharp-builders`.\n\nAdditional Information\n----------------------\n\nFor more information about the operators mentioned in this guide, see the \nfollowing Server Manual Entries:\n\n- :manual:`Comparison Query Operators </reference/operator/query-comparison/>`\n- :manual:`Logical Query Operators </reference/operator/query-logical/>`\n- :manual:`Array Query Operators </reference/operator/query-array/>`\n- :manual:`Element Query Operators </reference/operator/query-element/>`\n- :manual:`Evaluation Query Operators </reference/operator/query-evaluation/>`\n\nTo learn more about using Builders, see :ref:`csharp-builders`.\n\nTo learn how to specify queries using LINQ, see :ref:`csharp-linq`.\n\n",
    "language": "csharp",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/specify-query.txt"
  },
  {
    "code": "   :start-after: start-stable-api\n   :end-before: end-stable-api\n   :language: csharp\n   :dedent:\n\n.. warning::\n\n   If you specify an API version and connect to a MongoDB server that does\n   not support the {+stable-api+}, your code might raise an exception when\n   executing a command on your MongoDB server. If you use a ``MongoClient``\n   that specifies the API version to query a server that doesn't support that version,\n   your query could fail with an exception message that includes the\n   following text:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/stable-api.txt"
  },
  {
    "code": "      :copyable: false\n\n      Unrecognized field 'apiVersion' on server...\n\n.. _stable-api-options:\n\n{+stable-api+} Options\n--------------------------\n\nYou can use the options in the following table to customize the behavior of the \n{+stable-api+}.\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 25,75\n\n   * - Option Name\n     - Description\n\n   * - Strict\n     - | **Optional**. When ``true``, if you call a command that is not part of \n         the declared API version, the driver raises an exception.\n       |\n       | Default: **false**\n\n   * -  DeprecationErrors\n     - | **Optional**. When ``true``, if you call a command that is deprecated in the \n         declared API version, the driver raises an exception.\n       |\n       | Default: **false**\n\nThe following example shows how you can set these options when constructing a \n``ServerApi`` object:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/stable-api.txt"
  },
  {
    "code": "   :start-after: start-stable-api-options\n   :end-before: end-stable-api-options\n   :language: csharp\n   :dedent:\n\nAPI Documentation\n-----------------\n\nFor more information on using the {+stable-api+} with the {+driver-long+}, see the \nfollowing API documentation: \n\n- `MongoClient <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClient.html>`__\n- `MongoClientSettings <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoClientSettings.html>`__\n- `ServerApiVersion <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ServerApiVersion.html>`__\n- `ServerApi <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ServerApi.html>`__\n\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/stable-api.txt"
  },
  {
    "code": "   :start-after: begin-time-series\n   :end-before: end-time-series\n   :language: csharp\n   :dedent:\n\nTo check if you successfully created the collection, use the ``ListCollections()`` or\n``ListCollectionsAsync()`` method as shown in the following example:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/time-series.txt"
  },
  {
    "code": "   :start-after: begin-list-collections\n   :end-before: end-list-collections\n   :language: csharp\n   :dedent:\n\nYour output will look similar to the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/fundamentals/time-series.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/includes/atlas-sample-data.rst"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/includes/atlas-sample-data.rst"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\nThis collection is from the :atlas:`sample datasets </sample-data>` provided\nby Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster\nand load this sample data.\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/includes/atlas-sample-data.rst"
  },
  {
    "code": "   :copyable: false\n\n   No credentials are available in the security package\n\nTo resolve this issue, add the following code to your application. This code generates\nany ``X.509`` certificates required by your application and stores them to disk:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/includes/troubleshooting/x509.rst"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Name, \"Bagels N Buns\");\n\n             var restaurant = _restaurantsCollection.Find(filter).FirstOrDefault();\n\n             Console.WriteLine(restaurant);\n\n          .. output::\n             :language: json\n\n             { name : \"Bagels N Buns\", restaurant_id : \"40363427\", ... }\n\n   * - | **Find a Document (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.FindAsync.html>`__\n       | :ref:`Usage Example <csharp-find-one>`\n       | :ref:`Fundamentals <csharp-retrieve-find-one>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Name, \"Bagels N Buns\");\n\n             var restaurant = await _restaurantsCollection.Find(filter).FirstOrDefaultAsync();\n\n             Console.WriteLine(restaurant);\n\n          .. output::\n             :language: json\n\n             { name : \"Bagels N Buns\", restaurant_id : \"40363427\", ... }\n\n\n   * - | **Find Multiple Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.Find.html>`__\n       | :ref:`Usage Example <csharp-find-multiple>`\n       | :ref:`Fundamentals <csharp-retrieve-find-multiple>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(r => restaurant.Cuisine, \"Pizza\");\n\n             var restaurants = _restaurantsCollection.Find(filter).ToList();\n\n             Console.WriteLine(restaurants);\n\n          .. output::\n             :language: json\n\n             [\n               { name: \"Como Pizza\", cuisine: \"Pizza\", ... },\n               { name: \"New York Pizza Suprema\", cuisine: \"Pizza\", ... },\n               ...\n             ]\n\n   * - | **Find Multiple Documents (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollectionExtensions.Find.html>`__\n       | :ref:`Usage Example <csharp-find-multiple>`\n       | :ref:`Fundamentals <csharp-retrieve-find-multiple>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(r => restaurant.Cuisine, \"Pizza\");\n\n             var restaurants = await _restaurantsCollection.Find(filter).ToListAsync();\n\n             Console.WriteLine(restaurants); \n\n          .. output::\n             :language: json\n\n             [\n               { name: \"Como Pizza\", cuisine: \"Pizza\", ... },\n               { name: \"New York Pizza Suprema\", cuisine: \"Pizza\", ... },\n               ...\n             ]\n\n   * - | **Insert a Document**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertOne.html>`__ \n       | :ref:`Usage Example <csharp-insert-one>`\n       | :ref:`Fundamentals <csharp-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var insertResult = _restaurantsCollection.InsertOne(new Restaurant { Name = \"Mongo's Pizza\" });\n\n   * - | **Insert a Document (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertOneAsync.html>`__\n       | :ref:`Usage Example <csharp-insert-one>`\n       | :ref:`Fundamentals <csharp-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var insertResult = await _restaurantsCollection.InsertOneAsync(new Restaurant { Name = \"Mongo's Pizza\" });\n\n   * - | **Insert Multiple Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertMany.html>`__ \n       | :ref:`Usage Example <csharp-insert-many>`\n       | :ref:`Fundamentals <csharp-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          _restaurantsCollection.InsertMany(new List<Restaurant>\n          {\n              new Restaurant { Name = \"Mongo's Pizza\" },\n              new Restaurant { Name = \"Mongo Grill\" }\n          });\n\n   * - | **Insert Multiple Documents (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.InsertManyAsync.html>`__\n       | :ref:`Usage Example <csharp-insert-many>`\n       | :ref:`Fundamentals <csharp-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          await _restaurantsCollection.InsertManyAsync(new List<Restaurant>\n          {\n              new Restaurant { Name = \"Mongo's Pizza\" },\n              new Restaurant { Name = \"Mongo Grill\" }\n          });\n\n   * - | **Update a Document**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__\n       | :ref:`Usage Example <csharp-examples-update-one>`\n       | :ref:`Fundamentals <csharp-update-one>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Name, \"Bagels N Buns\");\n\n          var update = Builders<Restaurant>.Update\n            .Set(restaurant => restaurant.Name, \"2 Bagels 2 Buns\");\n\n          var result = _restaurantsCollection.UpdateOne(filter, update);\n\n   * - | **Update a Document (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOneAsync.html>`__\n       | :ref:`Usage Example <csharp-examples-update-one>`\n       | :ref:`Fundamentals <csharp-update-one>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Name, \"Bagels N Buns\");\n\n          var update = Builders<Restaurant>.Update\n            .Set(restaurant => restaurant.Name, \"2 Bagels 2 Buns\");\n\n          var updateResult = await _restaurantsCollection.UpdateOneAsync(filter, update);\n\n   * - | **Update Multiple Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateMany.html>`__\n       | :ref:`Usage Example <csharp-examples-update-many>`\n       | :ref:`Fundamentals <csharp-update-many>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Cuisine, \"Pizza\");\n\n          var update = Builders<Restaurant>.Update\n            .Set(restaurant => restaurant.Cuisine, \"Pasta and breadsticks\");\n\n          var result = _restaurantsCollection.UpdateMany(filter, update);\n\n   * - | **Update Multiple Documents (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateManyAsync.html>`__ \n       | :ref:`Usage Example <csharp-examples-update-many>`\n       | :ref:`Fundamentals <csharp-update-many>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Cuisine, \"Pizza\");\n\n          var update = Builders<Restaurant>.Update\n            .Set(restaurant => restaurant.Cuisine, \"Pasta and breadsticks\");\n\n          var updateResult = await _restaurantsCollection.UpdateManyAsync(filter, update);\n\n   * - | **Update an Array in a Document**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__\n       | :ref:`Fundamentals (Update One) <csharp-update-one-arrays>`\n       | :ref:`Fundamentals (Update Many) <csharp-update-many-arrays>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Name, \"Bagels N Buns\");\n\n          var update = Builders<Restaurant>.Update\n            .Push(restaurant => restaurant.Grades, new GradeEntry\n            {\n              Date = DateTime.Now.ToUniversalTime(),\n              Grade = \"A\", \n              Score = 10\n            });\n\n          var result = _restaurantsCollection.UpdateOne(filter, update);\n             \n   * - | **Replace a Document**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOne.html>`__\n       | :ref:`Usage Example <csharp-replace-one>`\n       | :ref:`Fundamentals <csharp-replace-operation>`  \n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Cuisine, \"Pizza\");\n\n          // Find ID of first pizza restaurant\n          var oldPizzaRestaurant = _restaurantsCollection.Find(filter).First();\n          var oldId = oldPizzaRestaurant.Id;\n\n          Restaurant newPizzaRestaurant = new()\n          {\n              Id = oldId,\n              Name = \"Mongo's Pizza\",\n              Cuisine = \"Pizza\",\n              Address = new Address\n              {\n                  Building = \"123\",\n                  Coordinates = [123, 456],\n                  Street = \"Pizza St\",\n                  ZipCode = \"10003\"\n              },\n              Borough = \"Manhattan\",\n          };\n\n          var replaceResult = _restaurantsCollection.ReplaceOne(filter, newPizzaRestaurant);\n\n   * - | **Replace a Document (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOneAsync.html>`__\n       | :ref:`Usage Example <csharp-replace-one>`\n       | :ref:`Fundamentals <csharp-replace-operation>` \n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Cuisine, \"Pizza\");\n\n          // Find ID of first pizza restaurant\n          var oldPizzaRestaurant = _restaurantsCollection.Find(filter).First();\n          var oldId = oldPizzaRestaurant.Id;\n\n          Restaurant newPizzaRestaurant = new()\n          {\n              Id = oldId,\n              Name = \"Mongo's Pizza\",\n              Cuisine = \"Pizza\",\n              Address = new Address\n              {\n                  Building = \"123\",\n                  Coordinates = [12.3, 45.6],\n                  Street = \"Pizza St\",\n                  ZipCode = \"10003\"\n              },\n              Borough = \"Manhattan\",\n          };\n\n          var replaceResult = await _restaurantsCollection.ReplaceOneAsync(filter, newPizzaRestaurant);\n\n   * - | **Delete a Document**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteOne.html>`__\n       | :ref:`Usage Example <csharp-delete-one>`\n       | :ref:`Fundamentals <csharp-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Name, \"Ready Penny Inn\");\n\n          var deleteResult = _restaurantsCollection.DeleteOne(filter);\n          \n   * - | **Delete a Document (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteOneAsync.html>`__\n       | :ref:`Usage Example <csharp-delete-one>`\n       | :ref:`Fundamentals <csharp-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var filter = Builders<Restaurant>.Filter\n            .Eq(restaurant => restaurant.Name, \"Ready Penny Inn\");\n\n          var deleteResult = await _restaurantsCollection.DeleteOneAsync(filter);\n          \n   * - | **Delete Multiple Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteMany.html>`__ \n       | :ref:`Usage Example <csharp-delete-many>`\n       | :ref:`Fundamentals <csharp-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n \n          var filter = Builders<Restaurant>.Filter\n            .Regex(restaurant => restaurant.Name, \"Green\");\n\n          var deleteResult = _restaurantsCollection.DeleteMany(filter);\n\n   * - | **Delete Multiple Documents (Async)**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.DeleteManyAsync.html>`__ \n       | :ref:`Usage Example <csharp-delete-many>`\n       | :ref:`Fundamentals <csharp-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n \n          var filter = Builders<Restaurant>.Filter\n            .Regex(restaurant => restaurant.Name, \"Green\");\n\n          var deleteResult = await _restaurantsCollection.DeleteManyAsync(filter);\n\n   * - | **Access Data from a Cursor Iteratively**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IAsyncCursor-1.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Afghan)\";\n\n             var cursor = _restaurantsCollection.Find(filter).ToCursor(); \n             while (cursor.MoveNext())\n             {\n                 foreach (var r in cursor.Current)\n                 {\n                     Console.WriteLine(r.Name);\n                 }\n             }\n\n          .. output::\n             :language: json\n\n             [\n               Afghan Kebab House\n               Khyber Pass\n               ...\n             ]\n\n   * - | **Count Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.CountDocuments.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n             \n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Pizza\");\n\n             var count = _restaurantsCollection.Find(filter).CountDocuments();\n\n             Console.WriteLine(count);\n\n          .. output::\n             :language: none\n\n             1163\n\n   * - | **List the Distinct Documents or Field Values**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.Distinct.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n            \n             var filter = Builders<Restaurant>.Filter.Empty;\n             var restaurants = _restaurantsCollection\n               .Distinct(r => r.Cuisine, filter);\n             \n             Console.WriteLine(restaurants); \n\n          .. output::\n             :language: json\n\n             [ Afghan, African, American, Armenian, Asian, ... ]\n\n   * - | **Limit the Number of Documents Retrieved**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Operations.FindOperation-1.Limit.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Asian\");\n             var restaurants = _restaurantsCollection.Find(filter).Limit(3).ToList();\n\n             Console.WriteLine(restaurants);\n\n          .. output::\n             :language: json\n\n             [\n               { name: \"China Grill\", ... },\n               { name: \"Indo Chine\", ... },\n               { name: \"Le Colonial\", ... }\n             ]\n\n   * - | **Skip Retrieved Documents**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Operations.FindOperation-1.Skip.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Asian\");\n\n             var restaurants = _restaurantsCollection.Find(filter).Skip(2).ToList();\n\n             Console.WriteLine(restaurants);\n\n          .. output::\n             :language: json\n\n             [\n               { name: \"Le Colonial\", ... },\n               { name: \"Citrus Bar & Grill\", ... },\n               { name: \"Mangez Avec Moi\", ... },\n               ...\n             ]\n\n   * - | **Sort the Documents When Retrieving Them**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IFindFluentExtensions.SortBy.html>`__\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Brazilian\");\n\n             var restaurants =  _restaurantsCollection.Find(filter)\n               .SortBy(r => r.Name).ToList();\n\n             Console.WriteLine(restaurants);\n\n          .. output::\n             :language: json\n\n             [\n               { name: \"Barzinho\", ... },\n               { name: \"Beco\", ... },\n               { name: \"Beija-Flor\", ... },\n               ...\n             ]\n\n   * - | **Project Document Fields When Retrieving Them**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.html>`__\n       | :ref:`Fundamentals <csharp-builders-projection>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: csharp\n\n             var filter = Builders<Restaurant>.Filter\n               .Eq(restaurant => restaurant.Cuisine, \"Italian\");\n\n             var projection = Builders<Restaurant>.Projection\n               .Include(restaurant => restaurant.Name)\n               .Include(restaurant => restaurant.Borough)\n               .Exclude(restaurant => restaurant.Id);\n\n             var restaurants = _restaurantsCollection.Find(filter).Project(projection).ToList(); \n\n             Console.WriteLine(restaurants);\n\n          .. output::\n             :language: json\n\n             [\n               { borough : \"Brooklyn\", name : \"Philadelphia Grille Express\" }\n               { borough : \"Manhattan\", name : \"Isle Of Capri Restaurant\" }\n               { borough : \"Manhattan\", name : \"Marchis Restaurant\" }\n               ...\n             ]\n\n   * - | **Create an Index**\n       |\n       | `API Documentation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoIndexManager-1.CreateOne.html>`__\n       | :ref:`Fundamentals <csharp-builders-indexes>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          var index = Builders<Restaurant>.IndexKeys\n            .Ascending(restaurant => restaurant.Cuisine);\n\n          _restaurantsCollection.Indexes\n            .CreateOne(new CreateIndexModel<Restaurant>(index));\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-reference.txt"
  },
  {
    "code": "   :language: csharp\n   :dedent:\n\nThis sample code runs a query against your sample dataset in MongoDB Atlas. Run it\nfrom your command line by using the following command:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/quick-start.txt"
  },
  {
    "code": "         :start-after: start-delete-many-async\n         :end-before: end-delete-many-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``DeleteManyAsync()`` operation, see the\n      `DeleteManyAsync code sample <{+example+}/delete-many/DeleteManyAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: delete-many-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/deleteMany.txt"
  },
  {
    "code": "         :start-after: start-delete-many-builders\n         :end-before: end-delete-many-builders\n         :language:  csharp\n         :copyable:\n         :dedent:\n      \n      For a fully runnable example of the ``DeleteMany()`` operation, see the\n      `DeleteMany code sample <{+example+}/delete-many/DeleteMany.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning either of the preceding full examples prints the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/deleteMany.txt"
  },
  {
    "code": "         :start-after: start-delete-one-builders-async\n         :end-before: end-delete-one-builders-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``DeleteOne()`` method, see the\n      `Asynchronous Delete One Example <{+example+}/delete-one/DeleteOneAsync.cs>`__. \n\n   .. tab:: Synchronous\n      :tabid: builders-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/deleteOne.txt"
  },
  {
    "code": "         :start-after: start-delete-one-builders\n         :end-before: end-delete-one-builders\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``DeleteOne()`` method, see the\n      `Synchronous Delete One Example <{+example+}/delete-one/DeleteOne.cs>`__ \n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning either of the preceding full examples prints the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/deleteOne.txt"
  },
  {
    "code": "         :start-after: start-find-builders-async\n         :end-before: end-find-builders-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to asynchronously \n      find multiple documents, see\n      `Asynchronous Find Multiple Example <{+example+}/find-many/FindManyAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: builders-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-builders-sync\n         :end-before: end-find-builders-sync\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to synchronously \n      find multiple documents, see\n      `Synchronous Find Multiple Example <{+example+}/find-many/FindMany.cs>`__.\n\nFind Documents by Using LINQ\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses LINQ to find documents in the\n``restaurants`` collection with the ``cuisine`` \"Pizza\".\n\nSelect the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the \ncorresponding code.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: linq-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-linq-async\n         :end-before: end-find-linq-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to asynchronously \n      find multiple documents, see\n      `Asynchronous Find Multiple Example <{+example+}/find-many/FindManyAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: linq-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-linq-sync\n         :end-before: end-find-linq-sync\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to synchronously \n      find multiple documents, see\n      `Synchronous Find Multiple Example <{+example+}/find-many/FindMany.cs>`__.\n\n.. _csharp_find_all:\n\nFind All Documents\n~~~~~~~~~~~~~~~~~~\n\nThe following example finds all documents in the ``restaurants`` collection.\n\nSelect the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the \ncorresponding code.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: find-all-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-all-async\n         :end-before: end-find-all-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to asynchronously \n      find multiple documents, see\n      `Asynchronous Find Multiple Example <{+example+}/find-many/FindManyAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: find-all-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-all-sync\n         :end-before: end-find-all-sync\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method to synchronously \n      find multiple documents, see\n      `Synchronous Find Multiple Example <{+example+}/find-many/FindMany.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning the preceding full examples prints the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findMany.txt"
  },
  {
    "code": "         :start-after: start-find-builders\n         :end-before: end-find-builders\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method\n      to asynchronously find one document, see the `Asynchronous Find One Example <{+example+}/find-one/FindOneAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: builders-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findOne.txt"
  },
  {
    "code": "         :start-after: start-find-builders\n         :end-before: end-find-builders\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method\n      to synchronously find one document, see the `Synchronous Find One Example <{+example+}/find-one/FindOne.cs>`__.\n\nFind a Document by Using LINQ\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses LINQ to find a document in the ``restaurants``\ncollection that has a ``name`` field with a value of \"Bagels N Buns\".\n\nSelect the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to see the \ncorresponding code.\n\n.. tabs::\n\n   .. tab:: Asynchronous\n      :tabid: linq-async\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findOne.txt"
  },
  {
    "code": "         :start-after: start-find-linq\n         :end-before: end-find-linq\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method\n      to asynchronously find one document, see the `Asynchronous Find One Example <{+example+}/find-one/FindOneAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: linq-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findOne.txt"
  },
  {
    "code": "         :start-after: start-find-linq\n         :end-before: end-find-linq\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of using the ``Find()`` method\n      to synchronously find one document, see the `Synchronous Find One Example <{+example+}/find-one/FindOne.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning any of the preceding full examples prints results similar to the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/findOne.txt"
  },
  {
    "code": "         :start-after: start-insert-many\n         :end-before: end-insert-many\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``InsertManyAsync()`` operation, see the\n      `InsertManyAsync code sample <{+example+}/insert-many/InsertMany.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: insert-many-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/insertMany.txt"
  },
  {
    "code": "         :start-after: start-insert-many\n         :end-before: end-insert-many\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``InsertMany()`` operation, see the\n      `InsertMany code sample <{+example+}/insert-many/InsertManyAsync.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nAfter running either of the preceding full examples, the output is as follows:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/insertMany.txt"
  },
  {
    "code": "         :start-after: start-insert-one-async\n         :end-before: end-insert-one-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``InsertOneAsync()`` operation, see the\n      `Asynchronous Insert One Example <{+example+}/insert-one/InsertOneAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: insert-one-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/insertOne.txt"
  },
  {
    "code": "         :start-after: start-insert-one\n         :end-before: end-insert-one\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``InsertOne()`` operation, see the\n      `Synchronous Insert One Example <{+example+}/insert-one/InsertOne.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nAfter running either of the preceding full examples, the ``InsertOne()``\nmethod inserts the document, and the :ref:`Find() <csharp-find-one>` method returns\nthe newly inserted document. The output is similar to the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/insertOne.txt"
  },
  {
    "code": "         :start-after: start-replace-one-async\n         :end-before: end-replace-one-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``ReplaceOneAsync()`` operation, see the\n      `ReplaceOneAsync code sample <{+example+}/replace-one/ReplaceOneAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: replace-one-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/replaceOne.txt"
  },
  {
    "code": "         :start-after: start-replace-one\n         :end-before: end-replace-one\n         :language:  csharp\n         :copyable:\n         :dedent:\n      \n      For a fully runnable example of the ``ReplaceOne()`` operation, see the\n      `ReplaceOne code sample <{+example+}/replace-one/ReplaceOne.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning either of the preceding full examples prints the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/replaceOne.txt"
  },
  {
    "code": "         :start-after: start-update-many-async\n         :end-before: end-update-many-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``UpdateManyAsync()`` operation, see the\n      `UpdateManyAsync code sample <{+example+}/update-many/UpdateManyAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: update-many-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/updateMany.txt"
  },
  {
    "code": "         :start-after: start-update-many\n         :end-before: end-update-many\n         :language:  csharp\n         :copyable:\n         :dedent:\n      \n      For a fully runnable example of the ``UpdateMany()`` operation, see the\n      `UpdateMany code sample <{+example+}/update-many/UpdateMany.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nRunning either of the preceding full examples prints the following results:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/updateMany.txt"
  },
  {
    "code": "         :start-after: start-update-one-async\n         :end-before: end-update-one-async\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``UpdateOneAsync()`` operation, see the\n      `UpdateOneAsync Example <{+example+}/update-one/UpdateOneAsync.cs>`__.\n\n   .. tab:: Synchronous\n      :tabid: update-many-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/updateOne.txt"
  },
  {
    "code": "         :start-after: start-update-one\n         :end-before: end-update-one\n         :language:  csharp\n         :copyable:\n         :dedent:\n\n      For a fully runnable example of the ``UpdateOneAsync()`` operation, see the\n      `UpdateOne Example <{+example+}/update-one/UpdateOne.cs>`__.\n\nExpected Result\n~~~~~~~~~~~~~~~\n\nAfter running either of the preceding full examples, each call to ``UpdateOne()``\nwrites the following to the console:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples/updateOne.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples.txt"
  },
  {
    "code": "   :language: csharp\n   :copyable:\n   :dedent:\n\n.. include:: /includes/convention-pack-note.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-csharp/source/usage-examples.txt"
  }
]
