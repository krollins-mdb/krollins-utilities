[
  {
    "code": "   :copyable: false\n\n   error parsing uri: lookup <HOSTNAME> on 127.0.0.53:53: cannot unmarshal DNS message\n\nTo resolve the problem, edit ``/etc/resolv.conf`` to point to a\ndifferent DNS resolver.\n\n",
    "language": "shell",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/includes/ubuntu-connection.rst"
  },
  {
    "code": "   :copyable: false\n\n   2021-09-21T14:05:07.197-0400\tconnected to: mongodb://localhost/\n   2021-09-21T14:05:07.203-0400\texported 6 records\n\nFailed ``mongoexport`` Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the following :program:`mongoexport` operation that fails\nbecause it cannot connect to the target deployment:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/logs.txt"
  },
  {
    "code": "   :copyable: false\n\n   2021-09-21T14:35:30.125-0400\tcould not connect to server: server selection error: server selection timeout, current topology: { Type: Single, Servers: [{ Addr: notrealhost.example.net:27017, Type: Unknown, Last error: connection() error occured during connection handshake: dial tcp: lookup notrealhost.example.net: no such host }, ] }\n   \nPipe Database Tools Logs to a File\n----------------------------------\n\nYou may want to output the contents of the stderr logs to a file\nfor easier viewing, or to save the results of {+dbtools-short+}\noperations.\n\nTo pipe the stderr output to a file, append ``2> {fileName}``\nto your command.\n\nExample\n~~~~~~~\n\nThe following command writes the output of a :program:`mongoexport`\noperation to a file called ``mongoexport.log``. In this example, the\n``mongoexport.log`` file is created in the same directory where the\ncommand is run.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/logs.txt"
  },
  {
    "code": "   :copyable: false\n   \n   2019-06-28T19:23:42.858-0400   preparing collections to restore from\n   2019-06-28T19:23:42.858-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json\n   2019-06-28T19:23:42.893-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson\n   2019-06-28T19:23:42.896-0400   restoring indexes for collection test.purchaseorders from metadata\n   2019-06-28T19:23:42.991-0400   finished restoring test.purchaseorders (6 documents, 0 failures)\n   2019-06-28T19:23:42.991-0400   6 document(s) restored successfully. 0 document(s) failed to restore.\n\nIf the ``dump/`` directory does not contain the corresponding data\nfiles for the specified namespace, no data will be restored:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore/mongorestore-examples.txt"
  },
  {
    "code": "   :copyable: false\n\n   2019-07-08T14:39:57.121-0400. preparing collections to restore from\n   2019-07-08T14:39:57.121-0400  0 document(s) restored successfully. 0 document(s) failed to restore.\n\nAlternatively, you can restore a specific collection using the\n:option:`--db <mongorestore --db>`, :option:`--collection <mongorestore\n--collection>`, and a ``.bson`` file:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore/mongorestore-examples.txt"
  },
  {
    "code": "   :copyable: false\n\n   2019-06-30T12:21:44.777-0400   checking for collection data in dump/test/purchaseorders.bson\n   2019-06-30T12:21:44.779-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json\n   2019-06-30T12:21:44.813-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson\n   2019-06-30T12:21:44.881-0400   restoring indexes for collection test.purchaseorders from metadata\n   2019-06-30T12:21:44.987-0400   finished restoring test.purchaseorders (6 documents, 0 failures)\n   2019-06-30T12:21:44.987-0400   6 document(s) restored successfully. 0 document(s) failed to restore.\n\n.. _example-basic-wildcard-usage:\n\nRestore Collections Using Wild Cards\n------------------------------------\n\n:option:`--nsInclude <mongorestore --nsInclude>` and\n:option:`--nsExclude <mongorestore --nsExclude>` support specifying the\n:term:`namespaces <namespace>` you wish to include or exclude from a\nrestore operation using asterisks as *wild cards*.\n\nThe following example restores the documents in the ``dump/``\nsub-directory of the current directory that match the specified\nnamespace pattern. The :option:`--nsInclude <mongorestore --nsInclude>`\nstatement specifies to only restore documents in the ``transactions``\ndatabase while :option:`--nsExclude <mongorestore --nsExclude>`\ninstructs ``mongorestore`` to exclude collections whose\nnames end with ``_dev``. ``mongorestore`` restores data to\nthe :binary:`~bin.mongod` instance running on the localhost interface\non port ``27017``.\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore/mongorestore-examples.txt"
  },
  {
    "code": "   :copyable: false\n\n   2019-07-08T14:37:38.942-0400\tpreparing collections to restore from\n   2019-07-08T14:37:38.944-0400\treading metadata for test.bakesales from dump/test/bakesales.metadata.json\n   2019-07-08T14:37:38.944-0400\treading metadata for test.salaries from dump/test/salaries.metadata.json\n   2019-07-08T14:37:38.976-0400\trestoring test.salaries from dump/test/salaries.bson\n   2019-07-08T14:37:38.985-0400\tno indexes to restore\n   2019-07-08T14:37:38.985-0400\tfinished restoring test.salaries (10 documents, 0 failures)\n   2019-07-08T14:37:39.009-0400\trestoring test.bakesales from dump/test/bakesales.bson\n   2019-07-08T14:37:39.011-0400\trestoring indexes for collection test.bakesales from metadata\n   2019-07-08T14:37:39.118-0400\tfinished restoring test.bakesales (21 documents, 0 failures)\n   2019-07-08T14:37:39.118-0400\trestoring users from dump/admin/system.users.bson\n   2019-07-08T14:37:39.163-0400\trestoring roles from dump/admin/system.roles.bson\n   2019-07-08T14:37:39.249-0400\t31 document(s) restored successfully. 0 document(s) failed to restore.\n\nYou can also restore a specific collection or collections from the\n``dump/`` directory. For example, the following operation restores a\nsingle collection from corresponding data files in the ``dump/``\ndirectory:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore.txt"
  },
  {
    "code": "   :copyable: false\n\n   2019-07-08T14:38:15.142-0400\tpreparing collections to restore from\n   2019-07-08T14:38:15.142-0400\t0 document(s) restored successfully. 0 document(s) failed to restore.\n\nFor more examples, see :ref:`mongorestore-examples`.\n\n   \n.. _mongorestore-options:\n\nOptions\n-------\n\n.. option:: --help\n\n   Returns information on the options and use of ``mongorestore``.\n\n\n.. option:: --verbose, -v\n\n   Increases the amount of internal reporting returned on standard output\n   or in log files. Increase the verbosity with the ``-v`` form by\n   including the option multiple times, (e.g. ``-vvvvv``.)\n   \n\n\n.. option:: --quiet\n\n   Runs ``mongorestore`` in a quiet mode that attempts to limit the amount\n   of output.\n\n   This option suppresses:\n   \n   - output from :term:`database commands <database command>`\n   \n   - replication activity\n   \n   - connection accepted events\n   \n   - connection closed events\n\n\n.. option:: --version\n\n   Returns the ``mongorestore`` release number.\n\n\n.. option:: --config=<filename>\n\n   .. versionadded:: 100.3.0\n\n   .. include:: /includes/fact-config-file-option.rst\n\n\n.. option:: --uri=<connectionString>\n   \n   Specifies the resolvable :manual:`URI connection string\n   </reference/connection-string/>` of the MongoDB deployment, enclosed\n   in quotes:\n   \n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore.txt"
  },
  {
    "code": "      :copyable: false\n   \n      mongorestore --db=reporting dump/test/salaries.bson \n   \n   If you do not specify :option:`--db`, ``mongorestore`` reads the database name\n   from the data files.\n   \n   The use of :option:`--db` and :option:`--collection` options are\n   deprecated when restoring from a directory or an archive file.\n   Instead, to restore from an archive or a directory, see\n   :option:`--nsInclude` instead.\n   \n   .. include:: /includes/extracts/uri-used-with-db.rst\n\n\n.. option:: --collection=<collection>, -c=<collection>\n\n   \n   Specifies the name of the destination collection for ``mongorestore`` to\n   restore data *into* when restoring from a BSON file. If\n   you do not specify :option:`--collection`, ``mongorestore`` takes\n   the collection name from the input filename. If the input file has an\n   extension, MongoDB omits the extension of the file from the collection\n   name.\n   \n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore.txt"
  },
  {
    "code": "      :copyable: false\n   \n      mongorestore --db=reporting --collection=employeesalaries dump/test/salaries.bson \n   \n   The use of :option:`--db` and :option:`--collection` options are\n   deprecated when restoring from a directory or an archive file.\n   Instead, to restore from an archive or a directory, see\n   :option:`--nsInclude` instead.\n\n\n.. option:: --nsExclude=<namespace pattern>\n   \n   Specifies a :term:`namespace` pattern (e.g. ``\"test.myCollection\"``,\n   ``\"reporting.*\"``, ``\"dept*.bar\"``) to *exclude* the matching\n   namespaces from the restore. In the pattern, you can use asterisks\n   ``*`` as *wild cards*. For an example of the wildcard pattern, see\n   :ref:`example-basic-wildcard-usage`.\n   \n   You can specify :option:`--nsExclude` multiple times to exclude multiple namespace\n   patterns.\n\n   .. include:: /includes/fact-nsExclude-precedence.rst\n\n.. option:: --nsInclude=<namespace pattern>\n\n   Specifies a :term:`namespace` pattern (e.g. ``\"test.myCollection\"``,\n   ``\"reporting.*\"``, ``\"dept*.bar\"``) to restore only the namespaces\n   that match the pattern. In the pattern, you can use asterisks ``*``\n   as *wild cards*. For an example of the wildcard pattern, see\n   :ref:`example-basic-wildcard-usage`.\n   \n   You can specify :option:`--nsInclude` multiple times to include multiple namespace\n   patterns.\n   \n   If source directory or file (i.e. the directory/file from which you\n   are restoring the data) does not contain data files that match the\n   namespace pattern, no data will be restored.\n   \n   For collection names that contain non-ascii characters,\n   :binary:`~bin.mongodump` outputs the corresponding filenames with\n   percent-encoded names. However, to restore these collections, do not\n   use the encoded names. Instead, use the namespace with the non-ascii\n   characters.\n  \n   For example, if the dump directory contains\n   ``dump/test/caf%C3%A9s.bson``, specify ``--nsInclude \"test.cafés\"``.\n\n   .. include:: /includes/fact-nsExclude-precedence.rst\n\n.. option:: --nsFrom=<namespace pattern>\n\n   Use with :option:`--nsTo` to rename a :term:`namespace` during the\n   restore operation. :option:`--nsFrom` specifies the collection in the\n   dump file, while :option:`--nsTo` specifies the name that should be\n   used in the restored database.\n\n   .. include:: /includes/extracts/ns-pattern-complex-from.rst\n   \n\n\n.. option:: --nsTo=<namespace pattern>\n\n   Use with :option:`--nsFrom` to rename a :term:`namespace` during the\n   restore operation. :option:`--nsTo` specifies the new collection\n   name to use in the restored database, while\n   :option:`--nsFrom` specifies the name in the dump file.\n\n   .. include:: /includes/extracts/ns-pattern-complex-to.rst\n   \n\n\n.. option:: --objcheck\n\n   Forces ``mongorestore`` to validate all requests from clients\n   upon receipt to ensure that clients never insert invalid documents into\n   the database. For objects with a high degree of sub-document nesting,\n   :option:`--objcheck <mongorestore --objcheck>` can have a small impact on performance.\n\n\n.. option:: --drop\n\n   Before restoring the collections from the dumped backup, drops the\n   collections from the target database. :option:`--drop <mongorestore --drop>` does not drop\n   collections that are not in the backup.\n   \n   When the restore includes the ``admin`` database, ``mongorestore`` with\n   :option:`--drop <mongorestore --drop>` removes all user credentials and replaces them with the\n   users defined in the dump file. Therefore, in systems with\n   :setting:`~security.authorization` enabled, ``mongorestore`` must be able\n   to authenticate to an existing user *and* to a user defined in the\n   dump file. If ``mongorestore`` can't authenticate to a user defined in the\n   dump file, the restoration process will fail, leaving an empty\n   database.\n\n   If a collection is dropped and recreated as part of the restore, the\n   newly created collection has a different UUID unless \n   :option:`--drop <mongorestore --drop>` is used with \n   :option:`--preserveUUID <mongorestore --preserveUUID>`.\n   \n.. option:: --preserveUUID\n\n   Restored collections use the UUID from the restore data instead of\n   creating a new UUID for collections that are dropped and recreated\n   as part of the restore.\n\n   To use :option:`--preserveUUID <mongorestore --preserveUUID>`, you\n   must also include the :option:`--drop <mongorestore --drop>` option.\n\n.. option:: --dryRun\n\n   Runs ``mongorestore`` without actually importing any data, returning the\n   ``mongorestore`` summary information. Use with ``--verbose`` to produce\n   more detailed summary information.\n\n\n.. option:: --oplogReplay\n\n   After restoring the database dump, replays the :term:`oplog` entries\n   from an ``oplog.bson`` file.\n   \n   To apply oplog entries from the ``oplog.bson`` file in the restore,\n   use ``mongorestore --oplogReplay``. You can use :option:`mongodump\n   --oplog` together with ``mongorestore --oplogReplay`` to ensure the\n   data is current and has all the writes that occurred during the dump\n   operation.\n\n   ``mongorestore`` searches for any valid source  for the bson file\n   in the following locations:\n   \n   - The top level of the dump directory, as in the case of a dump created\n     with :option:`mongodump --oplog`.\n   \n   - The path specified by :option:`--oplogFile`.\n   \n   - ``<dump-directory>/local/oplog.rs.bson``, as in the case of a dump\n     of the ``oplog.rs`` collection in the ``local`` database\n     on a :binary:`~bin.mongod` that is a member of a replica set.\n   \n   If there is an ``oplog.bson`` file at the top level of the dump\n   directory **and** a path specified by :option:`--oplogFile`,\n   ``mongorestore`` returns an error.\n      \n   If there is an ``oplog.bson`` file at the top level of the dump directory,\n   ``mongorestore`` restores that file as the oplog. If there are also bson\n   files in the ``dump/local`` directory, ``mongorestore`` restores them like\n   normal collections.\n   \n   If you specify an oplog file using :option:`--oplogFile`,\n   ``mongorestore`` restores that file as the oplog. If there are also bson\n   files in the ``dump/local`` directory, ``mongorestore`` restores them like\n   normal collections.\n   \n   The following message in the oplog replay output shows the number of\n   inserts before the oplog replay. It does not include inserts\n   performed during the replay.\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore.txt"
  },
  {
    "code": "      :copyable: false\n\n      0 document(s) restored successfully. 0 document(s) failed to\n      restore.\n   \n   For an example of :option:`--oplogReplay`, see :ref:`backup-restore-oplogreplay`.\n   \n   .. note::\n   \n      When using ``mongorestore`` with :option:`--oplogReplay` to restore\n      a replica set, you must \n      restore a full dump of a :term:`replica set` member created \n      using :option:`mongodump --oplog <mongodump --oplog>`. \n      ``mongorestore`` with :option:`--oplogReplay` fails if you use any of \n      the following options to limit the data to be restored:\n   \n      - :option:`--db`\n      - :option:`--collection`\n      - :option:`--nsInclude`\n      - :option:`--nsExclude`\n   \n   .. seealso:: \n   \n      - :ref:`mongorestore Required Access <mongorestore-required-access>`\n      - :option:`mongodump --oplog`\n\n\n.. option:: --oplogLimit=<timestamp>\n\n   Prevents ``mongorestore`` from applying :term:`oplog` entries\n   with timestamp newer than or equal to ``<timestamp>``. Specify\n   ``<timestamp>`` values in the form of ``<time_t>:<ordinal>``, where\n   ``<time_t>`` is the seconds since the UNIX epoch, and ``<ordinal>``\n   represents a counter of operations in the oplog that occurred in the\n   specified second.\n\n   .. warning::\n\n      Use ``oplogLimit`` with caution: manually specifying the oplog\n      entries to apply might cause corruption and inconsistencies in the\n      restored data.\n\n   You must use :option:`--oplogLimit` in conjunction with the\n   :option:`--oplogReplay` option.\n\n\n.. option:: --oplogFile=<path>\n\n   Specifies the path to the oplog file containing oplog data for the\n   restore. Use with :option:`--oplogReplay`. \n   \n   If you specify :option:`--oplogFile` and there is an :file:`oplog.bson`\n   file at the top level of the dump directory, ``mongorestore`` returns an \n   error.\n\n   .. warning::\n\n      Use ``oplogFile`` with caution: manually specifying the oplog\n      entries to apply might cause corruption and inconsistencies in the\n      restored data.\n   \n.. option:: --convertLegacyIndexes\n\n   .. versionadded:: 100.0.0\n\n   Removes any invalid index options specified in the corresponding\n   :binary:`~bin.mongodump` output, and rewrites any legacy index key\n   values to use valid values.\n\n   - *Invalid index options* are any options specified to an index that\n     are not listed as a :ref:`valid field<createIndexes-method-options>` for\n     the :dbcommand:`createIndexes` command. For example, ``name`` and \n     ``collation`` are valid, but an arbitrary ``custom_field`` is not.\n     With ``--convertLegacyIndexes`` specified, any invalid index\n     options found are dropped.\n\n   - *Legacy index key values* are any values for\n     :ref:`index type <index-types>` that are\n     no longer supported. For example,\n     ``1`` and ``-1`` are valid index key values, but ``0`` or an empty\n     string are legacy values. With ``--convertLegacyIndexes``\n     specified, any legacy index key values found are rewritten as\n     ``1``. Non-empty string values are not replaced.\n\n   Without the ``--convertLegacyIndexes`` option specified, the presence\n   of invalid index options or legacy index key values could cause the\n   index build to fail.\n\n   If the :option:`--noIndexRestore <mongorestore --noIndexRestore>`\n   option is specified to ``mongorestore``, the\n   ``--convertLegacyIndexes`` option is ignored.\n\n\n.. option:: --keepIndexVersion\n\n   Prevents ``mongorestore`` from upgrading the index to the latest\n   version during the restoration process.\n\n\n.. option:: --noIndexRestore\n\n   Prevents ``mongorestore`` from restoring and building indexes as\n   specified in the corresponding :binary:`~bin.mongodump` output.\n\n\n.. option:: --fixDottedHashIndex \n\n   Creates all :manual:`hashed indexes \n   </core/indexes/index-types/index-hashed/>` on dotted fields as \n   single field ascending indexes on the destination database.\n\n.. option:: --noOptionsRestore\n\n   Prevents ``mongorestore`` from setting the collection options,\n   such as those specified by the :dbcommand:`collMod` :term:`database\n   command`, on restored collections.\n\n\n.. option:: --restoreDbUsersAndRoles\n\n   Restore user and role definitions for the given database. See\n   :manual:`system.roles Collection</reference/system-roles-collection>`\n   and\n   :manual:`system.users Collection</reference/system-users-collection>`\n   for more information.\n\n   .. note::\n\n      - You can only use ``--restoreDbUsersAndRoles`` on a database dump that \n        was created with the :option:`--dumpDbUsersAndRoles` option. \n\n      - Restoring the ``admin`` database by specifying \n        :option:`--db admin <mongorestore --db>` automatically restores all \n        users and roles. You cannot use ``--restoreDbUsersAndRoles`` \n        on the ``admin`` database, and attempting to do so results in an error. \n\n.. option:: --writeConcern=<document>\n\n   *Default*: majority\n\n   Specifies the :term:`write concern` for each write operation that ``mongorestore``\n   performs.\n   \n   Specify the write concern as a document with :ref:`w options <wc-w>`:\n      \n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-commandline-tools/source/mongorestore.txt"
  }
]
