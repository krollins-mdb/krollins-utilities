[
  {
    "code": "                  :copyable: false\n\n                  ExecStart=/usr/bin/mongod --config /etc/mongod.conf\n\n               Update that statement to read:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/administration/production-notes.txt"
  },
  {
    "code": "                  :copyable: false\n\n                  ExecStart=/usr/bin/numactl --interleave=all /usr/bin/mongod --config /etc/mongod.conf\n\n         #. Apply the change to ``systemd``:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/administration/production-notes.txt"
  },
  {
    "code": "                  :copyable: false\n\n                  numactl --interleave=all /usr/local/bin/mongod -f /etc/mongod.conf\n\nFor more information, see the `Documentation for /proc/sys/vm/*\n<http://www.kernel.org/doc/Documentation/sysctl/vm.txt>`_.\n\nDisk and Storage Systems\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nSwap\n````\n\nMongoDB performs best where swapping can be avoided or kept to a\nminimum, as retrieving data from swap will always be slower\nthan accessing data in RAM. However, if the system hosting MongoDB runs\nout of RAM, swapping can prevent the Linux OOM Killer from terminating\nthe :binary:`~bin.mongod` process.\n\nGenerally, you should choose one of the following swap strategies:\n\n#. Assign swap space on your system, and configure the kernel to only\n   permit swapping under high memory load, or\n#. Do not assign swap space on your system, and configure the kernel to\n   disable swapping entirely\n\nSee :ref:`Set vm.swappiness <set-swappiness>` for instructions on\nconfiguring swap on your Linux system following these guidelines.\n\n.. note::\n\n   If your MongoDB instance is hosted on a system that also runs other\n   software, such as a webserver, you should choose the first swap\n   strategy. Do *not* disable swap in this case. If possible, it is\n   highly recommended that you run MongoDB on its own dedicated system.\n\nRAID\n````\n\nFor optimal performance in terms of the storage layer, use disks\nbacked by RAID-10. RAID-5 and RAID-6 do not typically provide\nsufficient performance to support a MongoDB deployment.\n\n.. _production-nfs:\n\nRemote Filesystems (NFS)\n````````````````````````\n\nWith the WiredTiger storage engine, WiredTiger objects may be stored on\nremote file systems if the remote file system conforms to ISO/IEC\n9945-1:1996 (POSIX.1). Because remote file systems are often slower\nthan local file systems, using a remote file system for storage may\ndegrade performance.\n\nIf you decide to use NFS, add the following NFS options to your\n``/etc/fstab`` file:\n\n- ``bg``\n- ``hard``\n- ``nolock``\n- ``noatime``\n- ``nointr``\n\nDepending on your kernel version, some of these values may already be\nset as the default. Consult your platform's documentation for more\ninformation.\n\nSeparate Components onto Different Storage Devices\n``````````````````````````````````````````````````\n\nFor improved performance, consider separating your database's data,\njournal, and logs onto different storage devices, based on your application's\naccess and write pattern. Mount the components as separate filesystems\nand use symbolic links to map each component's path to the device\nstoring it.\n\nFor the WiredTiger storage engine, you can also store the indexes on a\ndifferent storage device. See\n:setting:`storage.wiredTiger.engineConfig.directoryForIndexes`.\n\n.. note::\n\n   Using different storage devices will affect your ability to create\n   snapshot-style backups of your data, since the files will be on\n   different devices and volumes.\n\n.. _virtualized-disks-scheduling:\n\nScheduling\n``````````\n\nScheduling for Virtual or Cloud Hosted Devices\n++++++++++++++++++++++++++++++++++++++++++++++\n\nFor local block devices attached to a virtual machine instance via\nthe hypervisor or hosted by a cloud hosting provider, the guest operating system\nshould use the :term:`cfq` scheduler for best performance. The\n``cfq`` scheduler allows the operating system to defer I/O scheduling to\nthe underlying hypervisor.\n\n.. note::\n\n   The :term:`noop` scheduler can be used for scheduling if all the \n   following conditions are met:\n\n   - The hypervisor is VMware.\n   - A replica set topology or sharded cluster is used.\n   - The virtual machines are located on the same virtual host.\n   - The underlying storage containing the DBpaths is a common \n     :abbr:`LUN (logical unit number)` blockstore.\n\nScheduling for Physical Servers\n+++++++++++++++++++++++++++++++\n\nFor physical servers, the operating system should use a *deadline*\nscheduler. The *deadline* scheduler caps maximum latency per request\nand maintains a good disk throughput that is best for disk-intensive\ndatabase applications.\n\nArchitecture\n------------\n\nReplica Sets\n~~~~~~~~~~~~\n\nSee the :ref:`Replica Set Architectures <replica-set-architecture>`\ndocument for an overview of architectural considerations for replica\nset deployments.\n\nSharded Clusters\n~~~~~~~~~~~~~~~~\n\nSee :ref:`Sharded Cluster Production Architecture\n<sharding-shards>` for an\noverview of recommended sharded cluster architectures for production\ndeployments.\n\n.. seealso::\n\n   :doc:`/administration/production-checklist-development`\n\nCompression\n-----------\n\nWiredTiger can compress collection data using one of the following\ncompression library:\n\n- :term:`snappy`\n      Provides a lower compression rate than ``zlib`` or\n      ``zstd`` but has a lower CPU cost than either.\n\n- :term:`zlib`\n      Provides better compression rate than ``snappy`` but has a\n      higher CPU cost than both ``snappy`` and ``zstd``.\n\n- :term:`zstd` \n      Provides better compression rate than both ``snappy`` and\n      ``zlib`` and has a lower CPU cost than ``zlib``.\n\nBy default, WiredTiger uses :term:`snappy` compression library. To\nchange the compression setting, see\n:setting:`storage.wiredTiger.collectionConfig.blockCompressor`.\n\nWiredTiger uses :term:`prefix compression` on all indexes by default.\n\n.. _production-notes-clock-synchronization:\n\nClock Synchronization\n---------------------\n\nMongoDB :ref:`components <mongodb-package-components>` keep logical clocks for\nsupporting time-dependent operations. Using `NTP <http://www.ntp.org/>`_\nto synchronize host machine clocks mitigates the risk of clock drift\nbetween components. Clock drift between components increases the\nlikelihood of incorrect or abnormal behavior of time-dependent\noperations like the following:\n\n- If the underlying system clock of any given MongoDB\n  component drifts a year or more from other components in the same\n  deployment, communication between those members may become unreliable\n  or halt altogether.\n\n  The :parameter:`maxAcceptableLogicalClockDriftSecs` parameter controls\n  the amount of acceptable clock drift between components. Clusters with\n  a lower value of ``maxAcceptableLogicalClockDriftSecs`` have a\n  correspondingly lower tolerance for clock drift.\n\n- Two cluster members with different system clocks may return \n  different values for operations that return the current \n  cluster or system time, such as :method:`Date()`, \n  :variable:`NOW`, and :variable:`CLUSTER_TIME`.\n\n- Features which rely on timekeeping may have inconsistent or\n  unpredictable behavior in clusters with clock drift between MongoDB\n  components. \n\n.. _prod-notes-platform-considerations:\n\nPlatform Specific Considerations\n--------------------------------\n\nMongoDB on Linux\n~~~~~~~~~~~~~~~~\n\n.. _prod-notes-linux-file-system:\n\nKernel and File Systems\n```````````````````````\n\nWhen running MongoDB in production on Linux, you should use Linux\nkernel version 2.6.36 or later, with either the XFS or EXT4 filesystem.\nIf possible, use XFS as it generally performs better with MongoDB.\n\nWith the :ref:`WiredTiger storage engine <storage-wiredtiger>`, using\nXFS is **strongly recommended** for data bearing nodes to avoid\nperformance issues that may occur when using EXT4 with WiredTiger.\n\n- In general, if you use the XFS file system, use at least version\n  ``2.6.25`` of the Linux Kernel.\n\n  .. Required for fallocate()\n\n- If you use the EXT4 file system, use at least version\n  ``2.6.28`` of the Linux Kernel.\n\n- On Red Hat Enterprise Linux and CentOS, use at least version\n  ``2.6.18-194`` of the Linux kernel.\n\nSystem C Library\n````````````````\n\nMongoDB uses the `GNU C Library <http://www.gnu.org/software/libc/>`_\n(glibc) on Linux. Generally, each Linux distro provides its own\nvetted version of this library. For best results, use the latest update\navailable for this system-provided version. You can check whether you have\nthe latest version installed by using your system's package manager. For\nexample:\n\n- On :abbr:`RHEL (Red Hat Enterprise Linux)` / CentOS, the following\n  command updates the system-provided GNU C Library:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/administration/production-notes.txt"
  },
  {
    "code": "      :emphasize-lines: 29,34,38,42,46\n\n      # NOT FOR PRODUCTION USE. OpenSSL configuration file for testing. \n      \n      # For the CA policy\n      [ policy_match ]\n      countryName = match\n      stateOrProvinceName = match\n      organizationName = match\n      organizationalUnitName = optional\n      commonName = supplied\n      emailAddress = optional\n\n      [ req ]\n      default_bits = 4096\n      default_keyfile = myTestCertificateKey.pem    ## The default private key file name. \n      default_md = sha256                           ## Use SHA-256 for Signatures\n      distinguished_name = req_dn\n      req_extensions = v3_req\n      x509_extensions = v3_ca # The extensions to add to the self signed cert\n\n      [ v3_req ]\n      subjectKeyIdentifier  = hash\n      basicConstraints = CA:FALSE\n      keyUsage = critical, digitalSignature, keyEncipherment\n      nsComment = \"OpenSSL Generated Certificate for TESTING only.  NOT FOR PRODUCTION USE.\"\n      extendedKeyUsage  = serverAuth, clientAuth\n\n      [ req_dn ]\n      countryName = Country Name (2 letter code)\n      countryName_default = \n      countryName_min = 2\n      countryName_max = 2\n\n      stateOrProvinceName = State or Province Name (full name)\n      stateOrProvinceName_default = TestCertificateStateName \n      stateOrProvinceName_max = 64\n\n      localityName = Locality Name (eg, city)\n      localityName_default = TestCertificateLocalityName\n      localityName_max = 64\n\n      organizationName = Organization Name (eg, company)\n      organizationName_default = TestCertificateOrgName\n      organizationName_max = 64\n\n      organizationalUnitName = Organizational Unit Name (eg, section)\n      organizationalUnitName_default = TestCertificateOrgUnitName \n      organizationalUnitName_max = 64\n\n      commonName = Common Name (eg, YOUR name)\n      commonName_max = 64\n\n      [ v3_ca ]\n      # Extensions for a typical CA\n\n      subjectKeyIdentifier=hash\n      basicConstraints = critical,CA:true\n      authorityKeyIdentifier=keyid:always,issuer:always\n\n#. *Optional*. You can update the default Distinguished Name (DN)\n   values.\n\nB. Generate the Test CA PEM File\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#. Create the :red:`test` CA key file :file:`mongodb-test-ca.key`. \n\n",
    "language": "cfg",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/appendix/security/appendixA-openssl-ca.txt"
  },
  {
    "code": "      :emphasize-lines: 20-23,27,32,36,40,44\n\n      # NOT FOR PRODUCTION USE. OpenSSL configuration file for testing.\n\n\n      [ req ]\n      default_bits = 4096\n      default_keyfile = myTestServerCertificateKey.pem    ## The default private key file name.\n      default_md = sha256\n      distinguished_name = req_dn\n      req_extensions = v3_req\n\n      [ v3_req ]\n      subjectKeyIdentifier  = hash\n      basicConstraints = CA:FALSE\n      keyUsage = critical, digitalSignature, keyEncipherment\n      nsComment = \"OpenSSL Generated Certificate for TESTING only.  NOT FOR PRODUCTION USE.\"\n      extendedKeyUsage  = serverAuth, clientAuth\n      subjectAltName = @alt_names\n\n      [ alt_names ]\n      DNS.1 =         ##TODO: Enter the DNS names. The DNS names should match the server names.\n      DNS.2 =         ##TODO: Enter the DNS names. The DNS names should match the server names.\n      IP.1 =          ##TODO: Enter the IP address.\n      IP.2 =          ##TODO: Enter the IP address. \n\n      [ req_dn ]\n      countryName = Country Name (2 letter code)\n      countryName_default = TestServerCertificateCountry\n      countryName_min = 2\n      countryName_max = 2\n\n      stateOrProvinceName = State or Province Name (full name)\n      stateOrProvinceName_default = TestServerCertificateState\n      stateOrProvinceName_max = 64\n\n      localityName = Locality Name (eg, city)\n      localityName_default = TestServerCertificateLocality\n      localityName_max = 64\n\n      organizationName = Organization Name (eg, company)\n      organizationName_default = TestServerCertificateOrg\n      organizationName_max = 64\n\n      organizationalUnitName = Organizational Unit Name (eg, section)\n      organizationalUnitName_default = TestServerCertificateOrgUnit\n      organizationalUnitName_max = 64\n\n      commonName = Common Name (eg, YOUR name)\n      commonName_max = 64\n\n#. In the ``[alt_names]`` section, enter the appropriate\n   DNS names and/or IP addresses for the MongoDB server. You can\n   specify multiple DNS names for a MongoDB server.\n   \n   For OpenSSL SAN identifiers, MongoDB supports:\n\n   - DNS names and/or\n   - IP address fields \n\n#. *Optional*. You can update the default Distinguished Name (DN)\n   values. \n\n.. tip::\n\n   - Specify a non-empty value for at least one of the following\n     attributes: Organization (``O``), the Organizational Unit\n     (``OU``), or the Domain Component (``DC``).\n\n   - When creating :red:`test` server certificates for internal membership\n     authentication, the following attributes, if specified, must match\n     exactly across the member certificates: Organization (``O``),\n     Organizational Unit (``OU``), the Domain Component (``DC``).\n     \n     For more information on requirements for internal membership\n     authentication, see :ref:`membership authentication\n     <internal-auth-x509>`.\n\nB. Generate the Test PEM File for Server\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. important::\n\n   Before proceeding, ensure that you have entered the\n   appropriate DNS names in the ``[alt_names]`` section of the\n   configuration file ``openssl-test-server.cnf``.\n\n#. Create the :red:`test` key file :file:`mongodb-test-server1.key`.\n\n",
    "language": "cfg",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/appendix/security/appendixB-openssl-server.txt"
  },
  {
    "code": "      :emphasize-lines: 21,26,30,34,38\n\n      # NOT FOR PRODUCTION USE. OpenSSL configuration file for testing. \n\n      [ req ]\n      default_bits = 4096\n      default_keyfile = myTestClientCertificateKey.pem    ## The default private key file name. \n      default_md = sha256\n      distinguished_name = req_dn\n      req_extensions = v3_req\n\n\n      [ v3_req ]\n      subjectKeyIdentifier  = hash\n      basicConstraints = CA:FALSE\n      keyUsage = critical, digitalSignature, keyEncipherment\n      nsComment = \"OpenSSL Generated Certificate for TESTING only.  NOT FOR PRODUCTION USE.\"\n      extendedKeyUsage  = serverAuth, clientAuth\n\n\n      [ req_dn ]\n      countryName = Country Name (2 letter code)\n      countryName_default = \n      countryName_min = 2\n      countryName_max = 2\n\n      stateOrProvinceName = State or Province Name (full name)\n      stateOrProvinceName_default = TestClientCertificateState\n      stateOrProvinceName_max = 64\n\n      localityName = Locality Name (eg, city)\n      localityName_default = TestClientCertificateLocality\n      localityName_max = 64\n\n      organizationName = Organization Name (eg, company)\n      organizationName_default = TestClientCertificateOrg\n      organizationName_max = 64\n\n      organizationalUnitName = Organizational Unit Name (eg, section)\n      organizationalUnitName_default = TestClientCertificateOrgUnit\n      organizationalUnitName_max = 64\n      commonName = Common Name (eg, YOUR name)\n      commonName_max = 64\n\n#. *Optional*. You can update the default Distinguished Name (DN)\n   values. Ensure that client certificates differ from server certificates\n   with regards to at least one of the following attributes:\n   Organization (``O``), the Organizational Unit (``OU``) or the Domain\n   Component (``DC``).\n\nB. Generate the Test PEM File for Client\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#. Create the :red:`test` key file :file:`mongodb-test-client.key`.\n\n",
    "language": "cfg",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/appendix/security/appendixC-openssl-client.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: motor\n      \n      The examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <https://motor.readthedocs.io/en/stable/tutorial-asyncio.html#creating-a-client>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: java-sync\n           \n      The Java examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <http://mongodb.github.io/mongo-java-driver/3.6/driver/tutorials/databases-collections/>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: java\n         :dedent: 8\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: kotlin-coroutine\n           \n      The Kotlin examples below assume that you are connected to a MongoDB replica set and can access a database\n      that contains the ``inventory`` collection. To learn more about completing these tasks, see the\n      :driver:`Kotlin Coroutine Driver Databases and Collections </kotlin/coroutine/current/fundamentals/databases-collections/>` guide.\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab:: \n      :tabid: csharp\n      \n      The C# examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <http://mongodb.github.io/mongo-csharp-driver/2.4/getting_started/quick_tour/#make-a-connection/>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: c\n      \n      The C examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <https://www.mongodb.com/docs/languages/c/c-driver/current/databases-collections/#access-a-database>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: nodejs\n\n      The Node.js examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <https://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html#connect>`__\n      that contains an ``inventory`` collection.\n\n      The following example uses stream to process the change events.\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n      Alternatively, you can also use iterator to process the change events:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 1 Alternative\n         :end-before: End Changestream Example 1 Alternative\n\n      ChangeStream extends `EventEmitter \n      <https://mongodb.github.io/node-mongodb-native/5.7/classes/TypedEventEmitter.html>`__.\n\n   .. tab::\n      :tabid: php\n\n      The examples below assume that you have `connected to a MongoDB replica  set and have accessed a database\n      <https://www.mongodb.com/docs/php-library/current/reference/method/MongoDBClient__construct/>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: ruby\n\n      The examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <https://www.mongodb.com/docs/ruby-driver/current/reference/create-client/>`__\n      that contains an ``inventory`` collection.\n\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 8\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: go\n\n      The Go examples below assume that you have `connected to a MongoDB replica set and have accessed a database\n      <https://godoc.org/go.mongodb.org/mongo-driver/mongo#NewClient/>`__\n      that contains an ``inventory`` collection.\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 2\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: swift-sync\n   \n      The Swift (Sync) examples below assume that you have\n      `connected to a MongoDB replica set and have accessed a\n      database \n      <https://mongodb.github.io/mongo-swift-driver/docs/current/MongoSwiftSync/Classes/MongoClient.html>`__ \n      that contains an ``inventory`` collection.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\n   .. tab::\n      :tabid: swift-async\n    \n      The Swift (Async) examples below assume that you have\n      `connected to a MongoDB replica set and have accessed a\n      database \n      <https://mongodb.github.io/mongo-swift-driver/docs/current/MongoSwift/Classes/MongoClient.html>`__ \n      that contains an ``inventory`` collection.\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 1\n         :end-before: End Changestream Example 1\n\nTo retrieve the :ref:`data change event <change-stream-output>` from\nthe cursor, iterate the change stream cursor. For information on the\nchange stream event, see :ref:`change-stream-output`.\n\n.. include:: /includes/extracts/changestream-cursor-open.rst\n\n.. note::\n\n   The lifecycle of an unclosed cursor is language-dependent.\n\n.. [#start-time]\n\n   You can specify a ``startAtOperationTime`` to open the cursor at a particular \n   point in time. If the specified starting point is in the past, it must be in \n   the time range of the oplog.\n\n.. _change-stream-modify-output:\n\nModify Change Stream Output\n---------------------------\n\n----------\n\n|arrow| Use the **Select your language** drop-down menu in the\nupper-right to set the language of the examples on this page.\n\n----------\n\n.. tabs-drivers::\n\n   .. tab:: \n      :tabid: python\n\n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n\n   .. tab::\n      :tabid: motor\n\n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n   .. tab::\n      :tabid: java-sync\n\n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n      The ``pipeline`` list includes a single :pipeline:`$match` stage that\n      filters for any operations that meet one or both of the following criteria:\n      \n      - ``username`` value is ``alice``\n      - ``operationType`` value is ``delete``\n\n      Passing the ``pipeline`` to the :method:`~db.collection.watch()` method directs the\n      change stream to return notifications after passing them through the\n      specified ``pipeline``.\n\n   .. tab::\n      :tabid: csharp      \n      \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 16\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n      \n   .. tab::\n      :tabid: c      \n      \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n   .. tab::\n      :tabid: nodejs\n\n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n      The following example uses stream to process the change events.\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n      Alternatively, you can also use iterator to process the change events:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 4 Alternative\n         :end-before: End Changestream Example 4 Alternative\n\n\n   .. tab::\n      :tabid: php      \n      \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n   .. tab::\n      :tabid: ruby      \n      \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n   .. tab::\n      :tabid: go\n         \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 2\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n   .. tab::\n      :tabid: swift-sync\n\n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n   .. tab::\n      :tabid: swift-async\n         \n      .. include:: /includes/fact-change-streams-modify-output.rst\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 4\n         :end-before: End Changestream Example 4\n\n\n.. tip::\n\n   The :ref:`_id <change-stream-event-id>` field of the change stream\n   event document act as the :ref:`resume token\n   <change-stream-resume>`. Do not use the pipeline to modify or remove\n   the change stream event's ``_id`` field. \n\n   .. include:: /includes/extracts/4.2-changes-change-stream-modification-error.rst\n   \n\n   See :ref:`change-stream-output` for more information on the change stream\n   response document format.\n\n.. _change-streams-updateLookup:\n\nLookup Full Document for Update Operations\n------------------------------------------\n\nBy default, change streams only return the delta of fields during\nthe update operation. However, you can configure the change stream\nto return the most current majority-committed version of the updated\ndocument.\n\n----------\n\n|arrow| Use the **Select your language** drop-down menu in the\nupper-right to set the language of the examples on this page.\n\n----------\n\n.. tabs-drivers::\n\n   .. tab::\n      :tabid: python\n\n      To return the most current majority-committed version of the updated\n      document, pass ``full_document='updateLookup'`` to the\n      :method:`db.collection.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ``full_document`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: motor\n\n      To return the most current majority-committed version of the updated\n      document, pass ``full_document='updateLookup'`` to the\n      :method:`db.collection.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ```full_document`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: java-sync\n\n      To return the most current majority-committed version of the updated\n      document, pass ``FullDocument.UPDATE_LOOKUP``  to the\n      ``db.collection.watch.fullDocument()`` method.\n\n      In the example below, all update operations notifications\n      include a ``FullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: java\n         :dedent: 8\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: kotlin-coroutine\n\n      To return the most current majority-committed version of the updated\n      document, pass ``FullDocument.UPDATE_LOOKUP``  to the\n      `ChangeStreamFlow.fullDocument() <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-change-stream-flow/full-document.html>`__ method.\n\n      In the example below, all update operations notifications\n      include a ``FullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: c\n\n      To return the most current majority-committed version of the updated\n      document, pass the ``\"fullDocument\"`` option with the ``\"updateLookup\"`` value to the\n      ``mongoc_collection_watch`` method.\n\n      In the example below, all update operations notifications\n      include a ``fullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: csharp\n\n      To return the most current majority-committed version of the updated\n      document, pass ``\"FullDocument = ChangeStreamFullDocumentOption.UpdateLookup\"`` to the\n      :method:`db.collection.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ``FullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n\n   .. tab::\n      :tabid: nodejs\n\n      To return the most current majority-committed version of the updated\n      document, pass ``{ fullDocument: 'updateLookup' }`` to the\n      :method:`db.collection.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ``fullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n      The following example uses stream to process the change events.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n      Alternatively, you can also use iterator to process the change events:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 2 Alternative\n         :end-before: End Changestream Example 2 Alternative\n\n   .. tab::\n      :tabid: php\n\n      To return the most current\n      majority-committed version of the updated document, pass\n      ``\"fullDocument' => \\MongoDB\\Operation\\ChangeStreamCommand::FULL_DOCUMENT_UPDATE_LOOKUP\"``\n      to the :method:`db.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ``fullDocument`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: ruby\n      \n      To return the most current majority-committed version of the updated\n      document, pass ``full_document: 'updateLookup'`` to the\n      :method:`db.watch()` method.\n\n      In the example below, all update operations notifications\n      include a ``full_document`` field that represents the *current*\n      version of the document affected by the update operation.\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 8\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: go\n\n      To return the most current majority-committed version of the\n      updated document, ``SetFullDocument(options.UpdateLookup)``\n      change stream option.\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 2\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: swift-sync\n\n      To return the most current majority-committed version of\n      the updated document, pass ``options:\n      ChangeStreamOptions(fullDocument: .updateLookup)`` to the\n      ``watch()`` method.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n   .. tab::\n      :tabid: swift-async\n\n      To return the most current majority-committed version of\n      the updated document, pass ``options:\n      ChangeStreamOptions(fullDocument: .updateLookup)`` to the\n      ``watch()`` method.\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 2\n         :end-before: End Changestream Example 2\n\n.. note::\n\n   If there are one or more majority-committed operations that modified\n   the updated document *after* the update operation but *before* the\n   lookup, the full document returned may differ significantly from the\n   document at the time of the update operation.\n\n   However, the deltas included in the change stream document always\n   correctly describe the watched collection changes that applied to\n   that change stream event.\n\n   The ``fullDocument`` field for an update event may be missing if one \n   of the following is true:\n\n   - If the document is deleted or if the collection is dropped in \n     between the update and the lookup.\n   - If the update changes the values for at least one of the fields in\n     that collection's shard key.\n\n   See :ref:`change-stream-output` for more information on the change\n   stream response document format.\n\n.. _change-stream-resume:\n\nResume a Change Stream\n----------------------\n\nChange streams are resumable by specifying a resume token to either\n:ref:`resumeAfter <change-stream-resume-after>` or\n:ref:`startAfter <change-stream-start-after>` when opening the cursor.\n\n.. _change-stream-resume-after:\n\n``resumeAfter`` for Change Streams\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can resume a change stream after a specific event by passing a resume token\nto ``resumeAfter`` when opening the cursor. \n\nSee :ref:`change-stream-resume-token` for more information on the resume token.\n\n.. important::\n\n   - The oplog must have enough history to locate the operation\n     associated with the token or the timestamp, if the timestamp is in\n     the past.\n\n   - .. include:: /includes/extracts/changestream-invalid-events.rst\n\n.. tabs-drivers::\n\n   .. tab::\n      :tabid: python\n\n      You can use the ``resume_after`` modifier to resume\n      notifications after the operation specified in the resume\n      token. The ``resume_after`` modifier takes a value that must\n      resolve to a resume token, e.g. ``resume_token`` in the\n      example below.\n\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: motor\n\n      You can use the ``resume_after`` modifier to resume\n      notifications after the operation specified in the resume\n      token. The ``resume_after`` modifier takes a value that must\n      resolve to a resume token, e.g. ``resume_token`` in the\n      example below.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 12\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: java-sync\n   \n      You can use the ``resumeAfter()`` method to resume\n      notifications after the operation specified in the resume\n      token. The ``resumeAfter()`` method takes a value that must\n      resolve to a resume token, e.g. ``resumeToken`` in the\n      example below.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: java\n         :dedent: 8\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: kotlin-coroutine\n   \n      You can use the `ChangeStreamFlow.resumeAfter()\n      <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-change-stream-flow/resume-after.html>`__\n      method to resume notifications after the operation specified in the resume\n      token. The ``resumeAfter()`` method takes a value that must\n      resolve to a resume token, such as the ``resumeToken`` variable in the\n      example below.\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: csharp\n   \n      In the example below, the ``resumeToken`` is retrieved from the last change stream document\n      and passed to the ``Watch()`` method as an option. Passing the ``resumeToken``\n      to the ``Watch()`` method directs\n      the change stream to attempt to resume notifications starting after the\n      operation specified in the resume token.\n\n\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 14\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: c\n\n      In the example below, the ``resumeAfter`` option is appended to the stream options\n      to recreate the stream after it has been destroyed. Passing the ``_id`` to\n      the change stream attempts to resume notifications starting after the\n      operation specified.\n   \n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: C\n         :dedent: 3\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n\n   .. tab::\n      :tabid: nodejs\n\n      You can use the ``resumeAfter`` option to resume\n      notifications after the operation specified in the resume\n      token. The ``resumeAfter`` option takes a value that must\n      resolve to a resume token, e.g. ``resumeToken`` in the\n      example below.\n\n",
    "language": "C",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 6\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: php\n\n      You can use the ``resumeAfter`` option to resume\n      notifications after the operation specified in the resume\n      token. The ``resumeAfter`` option takes a value that must\n      resolve to a resume token, e.g. ``$resumeToken`` in the\n      example below.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: ruby\n\n      You can use the ``resume_after`` modifier to resume\n      notifications after the operation specified in the resume\n      token. The ``resume_after`` modifier takes a value that must\n      resolve to a resume token, e.g. ``resume_token`` in the\n      example below.\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 6\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: go\n\n      You can use `ChangeStreamOptions.SetResumeAfter\n      <https://godoc.org/go.mongodb.org/mongo-driver/mongo/options#ChangeStreamOptions.SetResumeAfter>`_\n      to specify the resume\n      token for the change stream. If the resumeAfter option is set,\n      the change stream resumes notifications after the operation\n      specified in the resume token. The ``SetResumeAfter`` takes a\n      value that must resolve to a resume token, e.g.\n      ``resumeToken`` in the example below.\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 2\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: swift-sync\n\n      You can use the ``resumeAfter`` option to resume\n      notifications after the operation specified in the resume\n      token. The ``resumeAfter`` option takes a value that must\n      resolve to a resume token, e.g. ``resumeToken`` in the\n      example below.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n   .. tab::\n      :tabid: swift-async\n\n      You can use the ``resumeAfter`` option to resume\n      notifications after the operation specified in the resume\n      token. The ``resumeAfter`` option takes a value that must\n      resolve to a resume token, e.g. ``resumeToken`` in the\n      example below.\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 8\n         :start-after: Start Changestream Example 3\n         :end-before: End Changestream Example 3\n\n.. _change-stream-start-after:\n\n``startAfter`` for Change Streams\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can start a new change stream after a specific event by passing a resume\ntoken to ``startAfter`` when opening the cursor. Unlike\n:ref:`resumeAfter <change-stream-resume-after>`, ``startAfter`` can\nresume notifications after an :ref:`invalidate event <change-event-invalidate>`\nby creating a new change stream. \n\nSee :ref:`change-stream-resume-token` for more information on the resume token.\n\n.. important::\n\n   - The oplog must have enough history to locate the operation\n     associated with the token or the timestamp, if the timestamp is in\n     the past.\n\n.. _change-stream-resume-token:\n\nResume Tokens\n~~~~~~~~~~~~~\n\nThe resume token is available from multiple sources:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 20 80\n\n   * - Source\n     - Description\n\n   * - :ref:`Change Events <change-event-resume-token>`\n     - Each change event notification includes a resume token\n       on the ``_id`` field.\n\n   * - :ref:`Aggregation <aggregate-resume-token>`\n     - The :pipeline:`$changeStream` aggregation stage includes \n       a resume token on the ``cursor.postBatchResumeToken`` field.\n\n       This field only appears when using the :dbcommand:`aggregate`\n       command.\n\n   * - :ref:`Get More <getMore-resume-token>`\n     - The :dbcommand:`getMore` command includes a resume token on the\n       ``cursor.postBatchResumeToken`` field.\n\n.. include:: /includes/extracts/4.2-changes-change-stream-modification-error.rst\n\n.. tip::\n\n   .. include:: /includes/note-decode-resume-tokens.rst\n\n.. _change-event-resume-token:\n\nResume Tokens from Change Events\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nChange event notifications include a resume token on the ``_id`` field:\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 2-4\n\n\n   {\n      \"_id\": {\n         \"_data\": \"82635019A0000000012B042C0100296E5A1004AB1154ACACD849A48C61756D70D3B21F463C6F7065726174696F6E54797065003C696E736572740046646F63756D656E744B65790046645F69640064635019A078BE67426D7CF4D2000004\"\n       },\n       \"operationType\": \"insert\",\n       \"clusterTime\": Timestamp({ \"t\": 1666193824, \"i\": 1 }),\n       \"collectionUUID\": new UUID(\"ab1154ac-acd8-49a4-8c61-756d70d3b21f\"),\n       \"wallTime\": ISODate(\"2022-10-19T15:37:04.604Z\"),\n       \"fullDocument\": {\n          \"_id\": ObjectId(\"635019a078be67426d7cf4d2\"'),\n          \"name\": \"Giovanni Verga\"\n       },\n       \"ns\": { \n          \"db\": \"test\", \n          \"coll\": \"names\" \n       },\n       \"documentKey\": { \n          \"_id\": ObjectId(\"635019a078be67426d7cf4d2\") \n       }\n   }\n\n\n.. _aggregate-resume-token:\n\nResume Tokens from ``aggregate``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen using the :dbcommand:`aggregate` command, the :pipeline:`$changeStream`\naggregation stage includes a resume token on the  \n``cursor.postBatchResumeToken`` field:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 4-6\n\n   {\n      \"cursor\": {\n         \"firstBatch\": [],\n         \"postBatchResumeToken\": { \n            \"_data\": \"8263515EAC000000022B0429296E1404\" \n         },\n         \"id\": Long(\"4309380460777152828\"),\n         \"ns\": \"test.names\"\n      },\n      \"ok\": 1,\n      \"$clusterTime\": {\n         \"clusterTime\": Timestamp({ \"t\": 1666277036, \"i\": 1 }),\n         \"signature\": {\n            \"hash\": Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n            \"keyId\": Long(\"0\")\n         }\n      },\n      \"operationTime\": Timestamp({ \"t\": 1666277036, \"i\": 1 })\n   }\n\n.. _getMore-resume-token:\n\nResume Tokens from ``getMore``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe :dbcommand:`getMore` command also includes a resume token on the \n``cursor.postBatchResumeToken`` field:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 4-6\n\n   {\n      \"cursor\": {\n         \"nextBatch\": [],\n         \"postBatchResumeToken\": { \n            \"_data\": \"8263515979000000022B0429296E1404\"\n         },\n         \"id\": Long(\"7049907285270685005\"),\n         \"ns\": \"test.names\"\n      }, \n      \"ok\": 1,\n      \"$clusterTime\": {\n         \"clusterTime\": Timestamp( { \"t\": 1666275705, \"i\": 1 } ),\n         \"signature\": {\n            \"hash\": Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n            \"keyId\": Long(\"0\")\n         }\n      },\n      \"operationTime\": Timestamp({ \"t\": 1666275705, \"i\": 1 })\n   }\n\n\nUse Cases\n---------\n\nChange streams can benefit architectures with reliant business systems,\ninforming downstream systems once data changes are durable. For example,\nchange streams can save time for developers when implementing Extract,\nTransform, and Load (ETL) services, cross-platform synchronization,\ncollaboration functionality, and notification services.\n\n.. _change-streams-access:\n\nAccess Control\n--------------\n\nFor deployments enforcing :ref:`authentication` and :ref:`authorization\n<authorization>`:\n\n- To open a change stream against specific collection, applications\n  must have privileges that grant :authaction:`changeStream` and\n  :authaction:`find` actions on the corresponding collection.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/changeStreams.txt"
  },
  {
    "code": "   :emphasize-lines: 18-23\n\n   {\n      $addFields: {\n         maxTime: { $max: \"$times\" },\n         minTime: { $min: \"$times\" }\n      }\n   },\n   {\n      $project: {\n         _id: 1,\n         name: 1,\n         times: 1,\n         maxTime: 1,\n         minTime: 1,\n         avgTime: { $avg: [\"$maxTime\", \"$minTime\"] }\n      }\n   },\n   {\n      $match: {\n         name: \"Joe Schmoe\",\n         maxTime: { $lt: 20 },\n         minTime: { $gt: 5 },\n         avgTime: { $gt: 7 }\n      }\n   }\n\nThe optimizer breaks up the ``$match`` stage into four individual\nfilters, one for each key in the ``$match`` query document. The\noptimizer then moves each filter before as many projection stages as\npossible, creating new ``$match`` stages as needed.\n\nGiven this example, the optimizer automatically produces the following\n*optimized* pipeline:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline-optimization.txt"
  },
  {
    "code": "   :emphasize-lines: 1, 6, 11\n   :copyable: false\n\n   { $match: { name: \"Joe Schmoe\" } },\n   { $addFields: {\n       maxTime: { $max: \"$times\" },\n       minTime: { $min: \"$times\" }\n   } },\n   { $match: { maxTime: { $lt: 20 }, minTime: { $gt: 5 } } },\n   { $project: {\n       _id: 1, name: 1, times: 1, maxTime: 1, minTime: 1,\n       avgTime: { $avg: [\"$maxTime\", \"$minTime\"] }\n   } },\n   { $match: { avgTime: { $gt: 7 } } }\n\n.. note::\n\n   The optimized pipeline is not intended to be run manually. The\n   original and optimized pipelines return the same results.\n\n   You can see the optimized pipeline in the :ref:`explain plan\n   <example-aggregate-method-explain-option>`.\n\nThe :pipeline:`$match` filter ``{ avgTime: { $gt: 7 } }`` depends on the\n:pipeline:`$project` stage to compute the ``avgTime`` field. The\n:pipeline:`$project` stage is the last projection stage in this\npipeline, so the :pipeline:`$match` filter on ``avgTime`` could not be\nmoved.\n\nThe ``maxTime`` and ``minTime`` fields are computed in the\n:pipeline:`$addFields` stage but have no dependency on the\n:pipeline:`$project` stage. The optimizer created a new\n:pipeline:`$match` stage for the filters on these fields and placed it\nbefore the :pipeline:`$project` stage.\n\nThe :pipeline:`$match` filter ``{ name: \"Joe Schmoe\" }`` does not\nuse any values computed in either the :pipeline:`$project` or\n:pipeline:`$addFields` stages so it was moved to a new\n:pipeline:`$match` stage before both of the projection stages.\n\nAfter optimization, the filter ``{ name: \"Joe Schmoe\" }`` is in a\n:pipeline:`$match` stage at the beginning of the pipeline. This has the\nadded benefit of allowing the aggregation to use an index on the\n``name`` field when initially querying the collection.\n\n.. _agg-sort-match-optimization:\n\n``$sort`` + ``$match`` Sequence Optimization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you have a sequence with :pipeline:`$sort` followed by a\n:pipeline:`$match`, the :pipeline:`$match` moves before the\n:pipeline:`$sort` to minimize the number of objects to sort. For\nexample, if the pipeline consists of the following stages:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline-optimization.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $lookup: {\n        from: \"otherCollection\",\n        as: \"resultingArray\",\n        localField: \"x\",\n        foreignField: \"y\"\n      }\n   },\n   { $unwind: \"$resultingArray\"  },\n   { $match: {\n       \"resultingArray.foo\": \"bar\"\n     }\n   }\n\nThe optimizer coalesces the :pipeline:`$unwind` and :pipeline:`$match` stages \ninto the :pipeline:`$lookup` stage. If you run the aggregation with ``explain``\noption, the ``explain`` output shows the coalesced stages:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline-optimization.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $lookup: {\n        from: \"otherCollection\",\n        as: \"resultingArray\",\n        localField: \"x\",\n        foreignField: \"y\",\n        let: {},\n        pipeline: [\n          {\n            $match: {\n              \"foo\": {\n                \"$eq\": \"bar\"\n              }\n            }\n          }\n        ],\n        unwinding: {\n          \"preserveNullAndEmptyArrays\": false\n        }\n      }\n   }\n\nYou can see this optimized pipeline in the :ref:`explain plan\n<example-aggregate-method-explain-option>`.\n\n.. _sbe-pipeline-optimizations:\n\n|sbe-title| Pipeline Optimizations\n----------------------------------\n\nMongoDB can use the :ref:`slot-based query execution engine \n<sbe-landing>` to execute certain pipeline stages when specific \nconditions are met. In most cases, the |sbe-short| provides improved \nperformance and lower CPU and memory costs compared to the classic query\nengine.\n\nTo verify that the |sbe-short| is used, run the aggregation with the\n``explain`` option. This option outputs information on the\naggregation's query plan. For more information on using ``explain``\nwith aggregations, see :ref:`example-aggregate-method-explain-option`.\n\nThe following sections describe:\n\n- The conditions when the |sbe-short| is used for aggregation.\n\n- How to verify if the |sbe-short| was used.\n\n.. _agg-group-optimization-sbe:\n\n``$group`` Optimization \n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.2\n\n.. include:: /includes/fact-sbe-group-overview.rst\n\nWhen the |sbe| is used for :pipeline:`$group`, the :ref:`explain results\n<explain-results>` include ``queryPlanner.winningPlan.queryPlan.stage:\n\"GROUP\"``.\n\nThe location of the ``queryPlanner`` object depends on whether the\npipeline contains stages after the ``$group`` stage that cannot be\nexecuted using the |sbe-short|.\n\n- If ``$group`` is the last stage or all stages after ``$group`` can\n  be executed using the |sbe-short|, the ``queryPlanner`` object is in\n  the top-level ``explain`` output object (``explain.queryPlanner``).\n\n- If the pipeline contains stages after ``$group`` that cannot be\n  executed using the |sbe-short|, the ``queryPlanner`` object is in\n  ``explain.stages[0].$cursor.queryPlanner``.\n\n.. _agg-lookup-optimization-sbe:\n\n``$lookup`` Optimization \n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 6.0\n\n.. include:: /includes/fact-sbe-lookup-overview.rst\n\nWhen the |sbe| is used for :pipeline:`$lookup`, the :ref:`explain\nresults <explain-results>` include\n``queryPlanner.winningPlan.queryPlan.stage: \"EQ_LOOKUP\"``. ``EQ_LOOKUP``\nmeans \"equality lookup\".\n\nThe location of the ``queryPlanner`` object depends on whether the\npipeline contains stages after the ``$lookup`` stage that cannot be\nexecuted using the |sbe-short|.\n\n- If ``$lookup`` is the last stage or all stages after ``$lookup`` can\n  be executed using the |sbe-short|, the ``queryPlanner`` object is in\n  the top-level ``explain`` output object (``explain.queryPlanner``).\n\n- If the pipeline contains stages after ``$lookup`` that cannot be\n  executed using the |sbe-short|, the ``queryPlanner`` object is in\n  ``explain.stages[0].$cursor.queryPlanner``.\n\n.. _aggregation-pipeline-optimization-indexes-and-filters:\n\nImprove Performance with Indexes and Document Filters\n-----------------------------------------------------\n\nThe following sections show how you can improve aggregation performance\nusing indexes and document filters.\n\nIndexes\n~~~~~~~\n\nAn aggregation pipeline can use :ref:`indexes <indexes>` from the input \ncollection to improve performance. Using an index limits the amount of \ndocuments a stage processes. Ideally, an index can :ref:`cover \n<read-operations-covered-query>` the stage query. A covered query has \nespecially high performance, since the index returns all matching \ndocuments.\n\nFor example, a pipeline that consists of :pipeline:`$match`, \n:pipeline:`$sort`, :pipeline:`$group` can benefit from indexes at \nevery stage:\n\n- An index on the ``$match`` query field efficiently \n  identifies the relevant data\n\n- An index on the sorting field returns data in sorted order for the \n  ``$sort`` stage\n\n- An index on the grouping field that matches the ``$sort`` \n  order returns all of the field values needed for the\n  ``$group`` stage, making it a covered query.\n\nTo determine whether a pipeline uses indexes, review the query plan and \nlook for ``IXSCAN`` or ``DISTINCT_SCAN`` plans.\n\n.. note::\n   In some cases, the query planner uses a ``DISTINCT_SCAN`` index plan \n   that returns one document per index key value. ``DISTINCT_SCAN`` \n   executes faster than ``IXSCAN`` if there are multiple documents per \n   key value. However, index scan parameters might affect the time \n   comparison of ``DISTINCT_SCAN`` and ``IXSCAN``.\n\nFor early stages in your aggregation pipeline, consider indexing the \nquery fields. Stages that can benefit from indexes are:\n\n:pipeline:`$match` stage\n  During the ``$match`` stage, the server can use an index if ``$match`` is the first stage in the pipeline, after any optimizations from the :ref:`query planner <query-plans-query-optimization>`.\n\n:pipeline:`$sort` stage\n   During the ``$sort`` stage, the server can use an index if the stage is not preceded by a :pipeline:`$project`, :pipeline:`$unwind`, or \n   :pipeline:`$group` stage.\n\n:pipeline:`$group` stage\n  During the ``$group`` stage, the server can use an index to quickly\n  find the :group:`$first <$first>` or :group:`$last <$last>` document\n  in each group if the stage meets both of these conditions:\n\n  - The pipeline :pipeline:`sorts <$sort>` and :pipeline:`groups\n    <$group>` by the same field.\n\n  - The ``$group`` stage only uses the :group:`$first` or \n    :group:`$last` accumulator operator.\n\n  See :ref:`$group Performance Optimizations <group-pipeline-optimization>` for an example.\n\n:pipeline:`$geoNear` stage \n  The server always uses an index for the ``$geoNear`` stage, since it \n  requires a :ref:`geospatial index <index-feature-geospatial>`.\n\nAdditionally, stages later in the pipeline that retrieve data from \nother, unmodified collections can use indexes on those collections \nfor optimization. These stages include:\n\n- :pipeline:`$lookup`\n- :pipeline:`$graphLookup`\n- :pipeline:`$unionWith`\n\nDocument Filters\n~~~~~~~~~~~~~~~~\n\nIf your aggregation operation requires only a subset of the documents in\na collection, filter the documents first:\n\n- Use the :pipeline:`$match`, :pipeline:`$limit`, and :pipeline:`$skip`\n  stages to restrict the documents that enter the pipeline.\n  \n- When possible, put :pipeline:`$match` at the beginning of the pipeline\n  to use indexes that scan the matching documents in a collection.\n\n- :pipeline:`$match` followed by :pipeline:`$sort` at the start of the\n  pipeline is equivalent to a single query with a sort, and can use an\n  index.\n\nExample\n-------\n.. _agg-sort-skip-limit-sequence:\n\n``$sort`` + ``$skip`` + ``$limit`` Sequence\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA pipeline contains a sequence of :pipeline:`$sort` followed by a\n:pipeline:`$skip` followed by a :pipeline:`$limit`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline-optimization.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 'Cheese', totalQuantity: 50 },\n      { _id: 'Vegan', totalQuantity: 10 },\n      { _id: 'Pepperoni', totalQuantity: 20 }\n   ]\n\nCalculate Total Order Value and Average Order Quantity\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example calculates the total pizza order value and\naverage order quantity between two dates:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: '2022-01-12', totalOrderValue: 790, averageOrderQuantity: 30 },\n      { _id: '2021-03-13', totalOrderValue: 770, averageOrderQuantity: 15 },\n      { _id: '2021-03-17', totalOrderValue: 630, averageOrderQuantity: 30 },\n      { _id: '2021-01-13', totalOrderValue: 350, averageOrderQuantity: 10 }\n   ]\n\n.. seealso::\n\n   - :doc:`/tutorial/aggregation-with-user-preference-data`\n   - :doc:`/tutorial/aggregation-zip-code-data-set`\n   - :doc:`/tutorial/update-documents-with-aggregation-pipeline`\n\n.. _aggregation-pipeline-stages-details:\n\nAdditional Aggregation Pipeline Stage Details\n---------------------------------------------\n\nAn aggregation pipeline consists of one or more :ref:`stages\n<aggregation-pipeline-operator-reference>` that process documents:\n \n- A stage does not have to output one document for every input\n  document. For example, some stages may produce new documents or\n  filter out documents.\n\n- The same stage can appear multiple times in the pipeline with these\n  stage exceptions: :pipeline:`$out`, :pipeline:`$merge`, and\n  :pipeline:`$geoNear`.\n\n- To calculate averages and perform other calculations in a stage, use\n  :ref:`aggregation expressions <aggregation-expressions>` that specify\n  :ref:`aggregation operators <aggregation-expression-operators>`. You\n  will learn more about aggregation expressions in the next section.\n\nFor all aggregation stages, see\n:ref:`aggregation-pipeline-operator-reference`.\n\n.. _aggregation-pipeline-expressions:\n\nAggregation Expressions and Operators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSome aggregation pipeline stages accept :term:`expressions\n<expression>`. Operators calculate values based on input expressions.\n\n.. include:: /includes/expression-components.rst\n\n.. _agg-quick-ref-field-paths:\n\nField Paths\n~~~~~~~~~~~\n\n:term:`Field path <field path>` expressions are used to access fields in\ninput documents. To specify a field path, prefix the field name or the\n:ref:`dotted field path <document-dot-notation>` (if the field is in an\nembedded document) with a dollar sign ``$``. For example, ``\"$user\"`` to\nspecify the field path for the ``user`` field or ``\"$user.name\"`` to\nspecify the field path to the embedded ``\"user.name\"`` field.\n\n``\"$<field>\"`` is equivalent to ``\"$$CURRENT.<field>\"`` where the\n:variable:`CURRENT` is a system variable that defaults to the root of\nthe current object, unless stated otherwise in specific stages.\n\nFor more information and examples, see :ref:`agg-field-paths`. \n\nRun an Aggregation Pipeline\n---------------------------\n\nTo run an aggregation pipeline, use:\n\n- :method:`db.collection.aggregate()` or\n\n- :dbcommand:`aggregate`\n\n.. _aggregation-update-documents:\n\nUpdate Documents Using an Aggregation Pipeline\n----------------------------------------------\n\nTo update documents with an aggregation pipeline, use:\n\n.. include:: /includes/table-update-with-aggregation-availability.rst\n\nOther Considerations\n--------------------\n\nAggregation Pipeline Limitations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn aggregation pipeline has limitations on the value types and the\nresult size. See :doc:`/core/aggregation-pipeline-limits`.\n\nAggregation Pipelines and Sharded Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn aggregation pipeline supports operations on sharded collections.\nSee :ref:`aggregation-pipeline-sharded-collection`.\n\nAggregation Pipelines as an Alternative to Map-Reduce\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/fact-use-aggregation-not-map-reduce.rst\n\nLearn More\n----------\n\nTo learn more about aggregation pipelines, see:\n\n- :ref:`aggregation-expression-operators`\n\n- :ref:`aggregation-pipeline-operator-reference`\n\n- `Practical MongoDB Aggregations\n  <https://www.practical-mongodb-aggregations.com>`_\n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Field Paths </core/field-paths>\n   Optimization </core/aggregation-pipeline-optimization>\n   Limits </core/aggregation-pipeline-limits>\n   Sharded Collections </core/aggregation-pipeline-sharded-collections>\n   Zip Code Example </tutorial/aggregation-zip-code-data-set>\n   User Preference Example </tutorial/aggregation-with-user-preference-data>\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/aggregation-pipeline.txt"
  },
  {
    "code": "    :copyable: true\n\n    .. input::\n        :language: javascript\n\n        db.nonCappedCollection1.isCapped()\n\n        db.cappedCollection1.isCapped()\n\n    .. output::\n        :language: javascript\n\n        false\n        true\n\nLearn More\n----------\n\n- :ref:`capped-collections-create`\n\n- :ref:`capped-collections-convert`\n\n- :pipeline:`$collStats`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/capped-collections/check-if-collection-is-capped.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.log2.isCapped()\n\n         .. output::\n            :language: javascript\n\n               true\n\nLearn More\n----------\n\n- :ref:`faq-concurrency-database-lock`\n\n- :ref:`capped-collections-change-size`\n\n- :ref:`capped-collections-query`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/capped-collections/convert-collection-to-capped.txt"
  },
  {
    "code": "    :copyable: true\n\n    .. input::\n       :language: javascript\n\n       db.log.find( { type: \"info\" } )\n\n    .. output::\n       :language: javascript\n\n       [\n         {\n           _id: ObjectId(\"660204b74cabd75abebadbc2\"),\n           message: 'user login attempt',\n           type: 'info',\n           time: 1711403907\n         },\n         {\n           _id: ObjectId(\"660204b74cabd75abebadbc4\"),\n           message: 'user login success',\n           type: 'info',\n           time: 1711404367\n         },\n         {\n           _id: ObjectId(\"660204b74cabd75abebadbc5\"),\n           message: 'user logout',\n           type: 'info',\n           time: 1711404555\n         }\n       ]\n\nDocuments are returned in the order that they were inserted.\n\n.. _query-capped-collection-recent:\n\nReturn Most Recent Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo return documents in reverse insertion order (meaning the most recent\ndocuments are first), specify the :method:`~cursor.sort()` method with\nthe :operator:`$natural` parameter set to ``-1``.\n\nThe following query returns the three most recent documents from the\n``log`` collection, starting with the most recent document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/capped-collections/query-capped-collection.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.log.find().sort( { $natural: -1 } ).limit(3)\n\n   .. output::\n      :language: javascript\n\n       [\n          {\n             _id: ObjectId(\"6601f2484cabd75abebadbbb\"),\n             message: 'user logout',\n             type: 'info',\n             time: 1711404555\n          },\n          {\n             _id: ObjectId(\"6601f2484cabd75abebadbba\"),\n             message: 'user login success',\n             type: 'info',\n             time: 1711404367\n          },\n          {\n             _id: ObjectId(\"6601f2484cabd75abebadbb9\"),\n             message: 'user login fail',\n             type: 'warning',\n             time: 1711404209\n          }\n       ]\n\nLearn More\n----------\n\n- :ref:`index-feature-ttl`\n- :ref:`read-operations-indexing`\n- :ref:`create-indexes-to-support-queries`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/capped-collections/query-capped-collection.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ISODate( \"2022-03-18T12:50:00.000Z\" ),\n         quantity: 1,\n         totalOrderPrice: 10\n      }\n   ]\n\nDetermine if a Collection is Clustered\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo determine if a collection is clustered, use the\n:dbcommand:`listCollections` command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/clustered-collections.txt"
  },
  {
    "code": "   :copyable: false\n\n   ...\n   name: 'orders',\n   type: 'collection',\n   options: {\n      clusteredIndex: {\n         v: 2,\n         key: { _id: 1 },\n         name: 'orders clustered key',\n         unique: true\n      }\n   },\n   ...\n\n``v`` is the index version.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/clustered-collections.txt"
  },
  {
    "code": "   :language: json\n\nencryptMetadata Keyword\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``encryptMetadata`` keyword defines encryption rules which child\nelements of the sibling ``properties`` tag inherit. Encryption rules\ncontaining ``encryptMetadata`` have the following structure:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\n.. _csfle-fundamentals-pattern-properties: \n\npatternProperties Keyword\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``patternProperties`` keyword in your encryption schema to \ndefine encryption rules for all fields with names that match a regular expression.\nThis allows you to specify multiple fields for encryption based on a single regular\nexpression, or to specify them by only using a part of the field name. The\n``patternProperties`` keyword replaces ``properties`` in your encryption schema.\n\nSpecify encryption rules with ``patternProperties`` using the following\nstructure:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nTo see an example of how to use ``patternProperties`` see\n:ref:`field-level-encryption-auto-encrypt-with-pattern-properties`\n\n.. _fle-define-a-json-schema:\n\nExample\n-------\n\nThis example explains how to generate the encryption schema used in \nthe :ref:`Create an Encryption Schema For Your Documents <csfle-quickstart-encryption-schema>`\nstep of the {+csfle-abbrev+} Quick Start. \n\nIn the Quick Start, you insert documents with the following structure\ninto the ``patients`` collection of the ``medicalRecords`` database:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nSpecify the Namespace\n~~~~~~~~~~~~~~~~~~~~~\n\nAt the root of your encryption schema, specify the namespace to which your\nencryption schema applies. Specify the following to encrypt and decrypt\ndocuments in the ``patients`` collection of the ``medicalRecords``\ndatabase:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nSpecify the {+dek-long+}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn the Quick Start, you encrypt all fields of your document with a single\n{+dek-long+} (DEK). To configure all fields in your documents to use a\nsingle DEK for encryption and decryption, specify the ``_id`` of your DEK\nwith the ``encryptMetadata`` keyword at the root of your encryption schema\nas follows:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nChoose Encryption Rules\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou decide to encrypt the following fields with the following encryption\nalgorithms:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 33 34 33\n\n   * - Field Name\n     - Encryption Algorithm\n     - BSON Type\n\n   * - ``ssn``\n     - Deterministic\n     - Int\n\n   * - ``bloodType``\n     - Random\n     - String\n\n   * - ``medicalRecords``\n     - Random\n     - Array\n\n   * - ``insurance.policyNumber``\n     - Deterministic\n     - Int\n\nYou choose to encrypt the ``ssn`` and ``insurance.policyNumber`` fields\nwith deterministic encryption for the following reasons:\n\n.. TODO: Kenn to review frequency analysis wording\n\n- You want to be able to query on these fields.\n- The values in these fields have a high cardinality, so\n  this data is not susceptible to a frequency analysis\n  attack.\n\nYou choose to encrypt the ``bloodType`` field with random encryption\nfor the following reasons:\n\n- You do not plan to query on this field.\n- The values in this field have low cardinality, making\n  them susceptible to a frequency analysis attack if you encrypted them\n  deterministically.\n\n.. TODO: Technical reviewer, Kenn. The previous wording of this suggested\n   that only automatic encryption did not support deterministic enryption\n   of BSON arrays, however after testing it seems both manual and automatic\n   encryption DO NOT support deterministic encryption of BSON arrays. Updated\n   phrasing from \"automatic encryption does not support deterministic...\" to \"CSFLE does not\n   support deterministic...\", let us know if this is incorrect!\n\nYou must encrypt the ``medicalRecords`` field with random encryption\nas {+csfle-abbrev+} does not support deterministic\nencryption of fields of type ``array``.\n\n.. tip::\n\n   To learn more about supported and unsupported automatic encryption\n   operations, see :ref:`csfle-reference-automatic-encryption-supported-operations`.\n\nSpecify Encryption Rules\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo encrypt the ``ssn`` field with deterministic encryption, specify the\nfollowing in your encryption schema:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nTo encrypt the ``bloodType`` field with random encryption, specify the\nfollowing in your encryption schema:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nTo encrypt the ``medicalRecords`` field with random encryption, specify the\nfollowing in your encryption schema:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nTo encrypt the ``insurance.policyNumber`` field with deterministic\nencryption, specify the following in your encryption schema:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nView the Complete Schema\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe complete encryption schema for the Quick Start is as follows:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :language: json\n\nLearn More\n----------\n\nTo learn more about encryption schemas, see\n:ref:`csfle-reference-encryption-schemas`\n\nTo learn more about automatic encryption, see\n:ref:`csfle-fundamentals-automatic-encryption`.\n\nTo view the Quick Start, see :ref:`csfle-quick-start`.\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/create-schema.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   {\n      \"_id\": \"5d6ecdce70401f03b27448fc\",\n      \"name\": \"Jon Doe\",\n      \"ssn\": 241014209,\n      \"bloodType\": \"AB+\",\n      \"medicalRecords\": [\n          {\n              \"weight\": 180,\n              \"bloodPressure\": \"120/80\"\n          }\n      ],\n      \"insurance\": {\n          \"provider\": \"MaestCare\",\n          \"policyNumber\": 123142\n      }\n   }\n\nInstead of querying the ``ssn`` field, you can add another plain-text\nfield called ``last4ssn`` that contains the last 4 digits of the ``ssn``\nfield. You can then query on the ``last4ssn`` field as a proxy for\n``ssn``:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/encryption-algorithms.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   {\n      \"_id\": \"5d6ecdce70401f03b27448fc\",\n      \"name\": \"Jon Doe\",\n      \"ssn\": 241014209,\n      \"last4ssn\": 4209,\n      \"bloodType\": \"AB+\",\n      \"medicalRecords\": [\n         {\n               \"weight\": 180,\n               \"bloodPressure\": \"120/80\"\n         }\n      ],\n      \"insurance\": {\n         \"provider\": \"MaestCare\",\n         \"policyNumber\": 123142\n      }\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/encryption-algorithms.txt"
  },
  {
    "code": "         :dedent:\n         :language: python\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "         :dedent:\n         :language: java\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "         :dedent:\n         :language: javascript\n      \n   .. tab::\n      :tabid: csharp\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "         :dedent:\n         :language: csharp\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "         :dedent:\n         :language: go\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "         :dedent:\n         :language: javascript\n\nTo learn more about ``dataKeyOpts`` and ``kmsProviders`` objects, see\n:ref:`qe-fundamentals-kms-providers`.\n\nUse Key Alternate Names in an Automatic Encryption Schema\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEncryption schemas contain user-specified rules that identify which\nfields must be encrypted and how to encrypt those fields. In your\nencryption rules, you can specify alternate key names name for the\n{+dek-long+} which encrypts your field.\n\nYou must refer to a key alternate name with a **JSON pointer**. A JSON\npointer is a string prefixed with a ``\"/\"`` character that can be used\nto access a particular field value in the same or another document. Use\nJSON pointers to reference a field in your query or update document\nwhich contains the value of your key alternate name.\n\n.. important:: Cannot Use Alternate Name for Deterministically Encrypted Field\n\n   You cannot reference a {+dek-abbr+} by it's alternate name when\n   encrypting a field with the :ref:`deterministic encryption algorithm\n   <csfle-deterministic-encryption>`. To encrypt your field\n   deterministically, you must specify the ``_id`` of the key you would\n   like to use to encrypt your field.\n   \n.. _csfle-reference-key-alt-name-in-schema:\n\nReference Key Alternate Name in an Encryption Schema\n````````````````````````````````````````````````````\n\nConsider the following encryption schema which encrypts the ``salary``\nfield:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n\n   {\n     \"<database>.<collection>\": {\n       \"bsonType\": \"object\",\n       \"properties\": {\n         \"salary\": {\n           \"encrypt\": {\n             \"bsonType\": \"int\",\n             \"keyId\": \"/fieldWithAltName\",\n             \"algorithm\": \"AEAD_AES_256_CBC_HMAC_SHA_512-Random\"\n           }\n         }\n       }\n     }\n   }\n\nThe schema's ``keyId`` field contains a JSON pointer to reference the\n``fieldWithAltName`` field within the documents being encrypted.\n\nThe following document's ``fieldWithAltName`` value is ``my-alt-name``:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "   :emphasize-lines: 4,9\n\n   {\n       \"name\": \"Jon Doe\",\n       \"salary\": 45000,\n       \"fieldWithAltName\": \"my-alt-name\"\n   },\n   {\n       \"name\": \"Jane Smith\",\n       \"salary\": 70000,\n       \"fieldWithAltName\": \"my-other-alt-name\"\n   }\n\nYou insert the preceding documents using a {+csfle-abbrev+}-enabled\nclient configured with the encryption schema from the :ref:`previous\nexample <csfle-reference-key-alt-name-in-schema>`.\n\nIn the encryption schema, the ``salary.encrypt.keyId`` field contains a\nJSON pointer to the ``fieldWithAltName`` field of the inserted document.\nAs a result, the ``salary`` fields in the two example documents are\neach encrypted using a {+dek-abbr+} specific to the individual\ndocument. The keys are assigned dynamically at runtime.\n\n.. _csfle_fundamentals_rotate_keys:\n.. _csfle-rotate-keys-mongo-shell:\n\nProcedure: Rotate Encryption Keys Using Mongo Shell\n---------------------------------------------------\n\nWith version 1.5 and later of the Mongo Shell, you can rotate encryption keys \nusing the ``rewrapManyDataKey`` method. The ``rewrapManyDataKey`` method \nautomatically decrypts multiple data keys and re-encrypts them using a specified \n{+cmk-long+}. It then updates the rotated keys in the key vault collection.\nThis method allows you to rotate encryption keys based on two optional arguments:\n\n- A filter used to specify which keys to rotate. If no data key matches\n  the given filter, no keys are rotated. Omit the filter to rotate all keys \n  in your key vault collection.\n\n- An object that represents a new {+cmk-abbr+}. Omit this object to rotate\n  the data keys using their current CMKs.\n\nThe ``rewrapManyDataKey`` uses the following syntax:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manage-keys.txt"
  },
  {
    "code": "        :dedent:\n        :language: java\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "        :dedent:\n        :language: javascript\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "        :dedent:\n        :language: python\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "        :language: csharp\n        :dedent:\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "        :language: go\n        :dedent:\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "         :dedent:\n         :language: javascript\n\n.. _csfle-fundamentals-manual-encryption-example:\n\nExample\n-------\n\nAssume you want to insert documents with the following structure into\nyour MongoDB instance:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "   :language: json\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create a MongoClient Instance\n\n      .. include:: /includes/fundamentals/manual-encryption/example/client.rst\n\n   .. step:: Create a ClientEncryption Instance\n\n      .. include:: /includes/fundamentals/manual-encryption/example/clientEnc.rst\n\n   .. step:: Encrypt Fields and Insert\n\n      .. include:: /includes/fundamentals/manual-encryption/example/encFields.rst\n\n   .. step:: Retrieve Document and Decrypt Fields\n\n      .. include:: /includes/fundamentals/manual-encryption/example/decFields.rst\n\n.. _csfle-fundamentals-manual-encryption-server-side-schema:\n\nServer-Side Field Level Encryption Enforcement\n----------------------------------------------\n\nMongoDB supports using :ref:`schema validation\n<schema-validation-overview>` to enforce encryption of specific fields\nin a collection.\n\nA client performing {+csfle+} with the {+manual-enc+}\nmechanism on a MongoDB instance configured to enforce encryption\nof certain fields must encrypt those fields as specified on\nthe MongoDB instance.\n\nTo learn how to set up server-side {+csfle-abbrev+}\nenforcement, see :ref:`csfle-reference-server-side-schema`.\n\nLearn More\n----------\n\nTo learn more about {+key-vault-long+}s, {+dek-long+}s, and {+cmk-long+}s,\nsee :ref:`qe-reference-keys-key-vaults`.\n\nTo learn more about {+kms-abbr+} providers and ``kmsProviders`` objects,\nsee :ref:`qe-fundamentals-kms-providers`.\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/fundamentals/manual-encryption.txt"
  },
  {
    "code": "      :copyable: false\n      :emphasize-lines: 4-8\n      \n      \"bsonType\" : \"object\",\n      \"properties\" : {\n        \"<fieldName>\" : {\n          \"encrypt\" : {\n            \"algorithm\" : \"<string>\",\n            \"bsonType\" : \"<string>\" | [ \"<string>\" ],\n            \"keyId\" : [ <UUID> ]\n          }\n        }\n      }\n\n   Indicates that ``<fieldName>`` must be encrypted. The ``encrypt``\n   object has the following requirements:\n\n   - ``encrypt`` cannot have any sibling fields in the \n     ``<fieldName>`` object. ``encrypt`` must be the only child of the\n     ``<fieldName>`` object.\n\n   - ``encrypt`` cannot be specified within any subschema of the\n     ``items`` or ``additionalItems`` keywords. Specifically,\n     automatic {+csfle+} does not support encrypting individual \n     elements of an array.\n      \n   The ``encrypt`` object can contain **only** the\n   following fields:\n\n   - :autoencryptkeyword:`~encrypt.algorithm`\n   - :autoencryptkeyword:`~encrypt.bsonType`\n   - :autoencryptkeyword:`~encrypt.keyId`\n\n   Including any other field to the ``encrypt`` object\n   results in errors when issuing automatically encrypted read or write\n   operations\n\n   If :autoencryptkeyword:`~encrypt.keyId` or\n   :autoencryptkeyword:`~encrypt.algorithm` are omitted, the\n   :ref:`{+shared-library+} <csfle-reference-shared-library>` checks all parent\n   fields and attempts to construct those options from the nearest\n   :autoencryptkeyword:`encryptMetadata` object that specifies the\n   option. :autoencryptkeyword:`~encrypt.bsonType` cannot be inherited\n   and *may* be required depending on the value of\n   :autoencryptkeyword:`~encrypt.algorithm`.\n\n   If the {+shared-library+} cannot construct the full ``encrypt`` object using\n   the fields specified to the object and any required\n   ``encryptMetadata``-inherited keys, automatic encryption fails and\n   returns an error.\n\n.. autoencryptkeyword:: encrypt.algorithm\n\n   *String*\n\n   Indicates which encryption algorithm to use when encrypting\n   values of ``<fieldName>``. Supports the following algorithms\n   *only*:\n\n   - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``\n   - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``\n\n   For complete documentation on the encryption algorithms, see\n   :ref:`csfle-reference-encryption-algorithms`.\n\n   If omitted, the :ref:`{+shared-library+} <csfle-reference-shared-library>` checks\n   all parent fields for the closest ancestor containing an\n   :autoencryptkeyword:`encryptMetadata.algorithm` key and inherits that value.\n   If no parent :autoencryptkeyword:`~encryptMetadata.algorithm` exists, automatic\n   field level encryption fails and returns an error.\n\n   - If ``encrypt.algorithm`` or its inherited value is\n     ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``,\n     the ``encrypt`` object *requires* the \n     :autoencryptkeyword:`encrypt.bsonType` field.\n\n   - If ``encrypt.algorithm`` or its inherited value is\n     ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``,\n     the ``encrypt`` object *may* include the \n     :autoencryptkeyword:`encrypt.bsonType` field. \n\n.. autoencryptkeyword:: encrypt.bsonType\n\n  *String | Array of Strings*\n\n  The :ref:`BSON type <bson-types>` of the field being encrypted.\n  Required if :autoencryptkeyword:`encrypt.algorithm` is\n  ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``.\n\n  If :autoencryptkeyword:`encrypt.algorithm` or its inherited value is\n  ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``, ``bsonType``\n  *must* specify a *single* type.  ``bsonType`` does **not**\n  support any of the following BSON types with the deterministic\n  encryption algorithm:\n\n  - ``double``\n  - ``decimal128``\n  - ``bool``\n  - ``object``\n  - ``array``\n\n  If :autoencryptkeyword:`encrypt.algorithm` or its inherited value is\n  ``AED_AES_256_CBC_HMAC_SHA_512-Random``, ``bsonType`` is\n  optional and may specify an array of supported bson types. For\n  fields with ``bsonType`` of ``array`` or ``object``, the client\n  encrypts the *entire* array or object and not their individual\n  elements. \n\n  ``encrypt.bsonType`` does **not** support the following types\n  regardless of :autoencryptkeyword:`encrypt.algorithm` or its inherited\n  value:\n\n  - ``minKey``\n  - ``maxKey``\n  - ``null``\n  - ``undefined`` \n\n.. autoencryptkeyword:: encrypt.keyId\n\n  *Array of single UUID*\n\n  The UUID of the {+dek-long+} to use for encrypting field\n  values. The UUID is a BSON `binary data\n  <http://bsonspec.org/spec.html>`_ element of subtype ``4``.\n\n  Specify *one* string inside the array.\n\n  If omitted, the :ref:`{+shared-library+} <csfle-reference-shared-library>` checks\n  all parent fields for the closest ancestor containing an \n  :autoencryptkeyword:`encryptMetadata.keyId` key and inherits\n  that value. If no parent \n  :autoencryptkeyword:`~encryptMetadata.keyId` exists,\n  automatic field level encryption fails and returns an error.\n\n  The :autoencryptkeyword:`~encrypt.keyId` or its inherited value *must*\n  exist in the {+key-vault-long+} specified as  part of the automatic encryption\n  :ref:`configuration options <{+auto-encrypt-options+}>`.\n  If the specified {+dek-long+} does not exist, automatic\n  encryption fails.\n\n  Official MongoDB drivers have language-specific requirements for specifying \n  the UUID. Defer to the :ref:`driver documentation <csfle-driver-tutorials>`\n  for complete documentation on implementing client-side field\n  level encryption.\n\n.. _field-level-encryption-encryptMetadata-keyword:\n\n.. autoencryptkeyword:: encryptMetadata\n\n  *Object*\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/encryption-schemas.txt"
  },
  {
    "code": "    :copyable: false\n    :emphasize-lines: 3-6\n\n    {\n      \"bsonType\" : \"object\",\n      \"encryptMetadata\" : {\n        \"algorithm\" : \"<string>\",\n        \"keyId\" : [ <UUID> ]\n      },\n      \"properties\" : {\n        \"encrypt\" : {}\n      }\n    }\n\n  Defines encryption options which an :autoencryptkeyword:`encrypt`\n  object nested in the sibling ``properties`` may inherit. If an\n  :autoencryptkeyword:`encrypt` is missing an option required to support\n  encryption, the {+shared-library+} searches all parent objects\n  to locate an :autoencryptkeyword:`encryptMetadata` object that\n  specifies the missing option.\n\n  ``encryptMetadata`` must be specified in subschemas with ``bsonType:\n  \"object\"``. ``encryptMetadata`` cannot be specified to any subschema\n  of the ``items`` or ``additionalItems`` keywords. Specifically,\n  automatic {+csfle+} does not support\n  encrypting individual elements of an array.\n\n  The ``encryptMetadata`` object can contain *only* the\n  following fields. Including any other field to the ``encrypt`` object\n  results in errors when issuing automatically encrypted read or write\n  operations:\n\n  - :autoencryptkeyword:`~encryptMetadata.algorithm`\n  - :autoencryptkeyword:`~encryptMetadata.keyId`\n\n.. autoencryptkeyword:: encryptMetadata.algorithm\n\n  *String*\n  \n  The encryption algorithm to use to encrypt a given field. If an\n  :autoencryptkeyword:`encrypt` object is missing the\n  :autoencryptkeyword:`~encrypt.algorithm` field, the {+shared-library+}\n  searches all parent objects to locate an\n  :autoencryptkeyword:`encryptMetadata` object that specifies\n  :autoencryptkeyword:`encryptMetadata.algorithm`.\n\n  Supports the following algorithms *only*:\n\n  - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``\n  - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``\n\n  For complete documentation on the encryption algorithms, see\n  :ref:`field-level-encryption-algorithms`.\n\n  If specifying ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``, \n  any ``encrypt`` object inheriting that value *must* specify\n  :autoencryptkeyword:`encrypt.bsonType`.\n\n.. autoencryptkeyword:: encryptMetadata.keyId\n\n  *Array of single UUID*\n\n  The UUID of a {+dek-long+}. The UUID is a BSON `binary data\n  <http://bsonspec.org/spec.html>`_ element of subtype ``4``.\n  \n  Specify *one* string inside the array.\n\n  If an :autoencryptkeyword:`encrypt` object is missing the \n  :autoencryptkeyword:`~encrypt.keyId` field, the {+shared-library+}\n  searches all parent objects to locate \n  an :autoencryptkeyword:`encryptMetadata` object that\n  specifies :autoencryptkeyword:`encryptMetadata.keyId`.\n  \n  The {+dek-long+} *must* exist in the {+key-vault-long+} specified as\n  part of the automatic encryption :ref:`configuration options\n  <csfle-reference-mongo-client>`. The specified configuration\n  options must *also* include appropriate access to the\n  :ref:`Key Management Service (KMS) <qe-fundamentals-kms-providers>` and\n  {+cmk-long+} (CMK) used to create the data key. Automatic\n  encryption fails if the {+dek-long+} does not exist *or* if the\n  client cannot decrypt the key with the specified KMS and CMK.\n\n  Official MongoDB drivers have language-specific requirements for specifying \n  the UUID. Defer to the :ref:`driver documentation <csfle-driver-tutorials>`\n  for complete documentation on implementing client-side field\n  level encryption.\n\nExamples\n--------\n\n.. _field-level-encryption-auto-encrypt-multiple-fields:\n\nEncryption Schema -  Multiple Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a collection ``MedCo.patients`` where each document has\nthe following structure:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/encryption-schemas.txt"
  },
  {
    "code": "   :language: json\n\nYou want to enforce the following behavior for client applications\nusing your collection:\n\n.. TODO: Kenn Technical review. Question: In testing, I was able to insert a document\n   with the incorrect encryption algorithm into this collection. Does schema\n   validation not check the encryption algorithm used?\n\n- When encrypting the ``age`` field, clients must follow these\n  encryption rules:\n  \n  * Use the {+dek-long+} with an ``_id`` of\n    ``UUID(\"e114f7ad-ad7a-4a68-81a7-ebcb9ea0953a\")``.\n  * Use the\n    :ref:`randomized <field-level-encryption-random>`\n    encryption algorithm.\n  * The ``age`` field must be an integer.\n\n- When encrypting the ``name`` field, clients must follow these\n  encryption rules:\n  \n  * Use the {+dek-long+} with an ``_id`` of\n    ``UUID(\"33408ee9-e499-43f9-89fe-5f8533870617\")``.  \n  * Use the\n    :ref:`deterministic <field-level-encryption-deterministic>`\n    encryption algorithm.\n  * The ``name`` field must be a string.\n\nThe following :binary:`~bin.mongosh` code uses the\n:dbcommand:`collMod` command to update the ``hr.employees``\ncollection to include a ``validator`` to enforce the\npreceding behavior:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/server-side-schema.txt"
  },
  {
    "code": "   :language: javascript\n\nLearn More\n----------\n\nTo learn more about the encryption algorithms {+csfle-abbrev+} supports,\nsee :ref:`csfle-reference-encryption-algorithms`.\n\nTo learn more about encryption schemas and encryption rules, see\n:ref:`csfle-reference-encryption-schemas`.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/server-side-schema.txt"
  },
  {
    "code": "          :copyable: false\n\n          $addFields : {\n            \"valueWithUnknownEncryption\" : {\n              $cond : {\n                if : { \"$encryptedField\" : \"value\" },\n                then : \"$encryptedField\",\n                else: \"unencryptedValue\"\n              }\n            }\n          },\n          {\n            $match : {\n              \"valueWithUnknownEncryption\" : \"someNewValue\"\n            }\n          }\n\n   * - :expression:`$eq`\n\n       :expression:`$ne`\n     - The expression creates a new field that references an\n       encrypted field *and* operates on that new field in the same\n       expression.\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $eq : [\n              {\"newField\" : \"$encryptedField\"},\n              {\"newField\" : \"value\"\n            ]\n          }\n\n   * - :expression:`$eq`\n       \n       :expression:`$ne`\n     - The expression references the prefix of an encrypted field\n       within the comparison expression.\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $eq : [ \"$prefixOfEncryptedField\" , \"value\"] }\n\n   * - :expression:`$eq`\n       \n       :expression:`$ne`\n     - The result of the expression is compared to an encrypted field.\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \n            $eq : [ \n                \"$encryptedField\" , \n                { $ne : [ \"field\", \"value\" ] } \n            ] \n          }\n\n   * - :expression:`$let`\n     - The expression binds a variable to an encrypted \n       field or attempts to rebind :variable:`$$CURRENT <CURRENT>`.\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \n            $let: {\n              \"vars\" : {\n                \"newVariable\" : \"$encryptedField\"\n              }\n            }\n          }\n\n   * - :expression:`$in`\n     - The first argument to the expression *is* an encrypted field, \n       *and*\n       \n       - The second argument to the expression is *not* an array literal\n      \n         *-OR-* \n\n       - The second argument to the expression is an encrypted field.\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \n            $in : [ \n              \"$encryptedField\" , \n              \"$otherEncryptedField\" \n            ] \n          }\n\nUnsupported Field Types\n-----------------------\n\nDrivers configured for automatic {+csfle+} ({+csfle-abbrev+}) do *not* support any\nread or write operation that requires encrypting the following value\ntypes:\n\n- :bsontype:`MaxKey`\n- :bsontype:`MinKey`\n- ``null``\n- ``undefined``\n\nEncryption does not adequately hide the type information for these\nvalues.\n\n{+csfle-abbrev+} does not support automatic encryption on fields within an \narray of documents.\n\nAutomatic {+csfle-abbrev+} *also* does not support read or write operations on a\ndeterministically encrypted field where the operation compares the\nencrypted field to the following value types:\n\n- ``array``\n- ``bool``\n- ``decimal128``\n- ``double``\n- ``object``\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/csfle/reference/supported-operations.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            \"balancerCompliant\": false,\n            \"firstComplianceViolation\": \"defragmentingChunks\",\n            \"details\": {\n               \"currentPhase\": \"moveAndMergeChunks\",\n               \"progress\": { \"remainingChunksToProcess\": 1 }\n            }\n         }\n\n      The following table describes the document fields.\n\n      .. list-table::\n         :header-rows: 1\n         :widths: 20 20 60\n\n         * - Field\n           - Type\n           - Description\n\n         * - ``balancerCompliant``\n           - Boolean\n           - ``false`` if collection chunks must be moved. Otherwise,\n             ``true``.\n\n         * - ``firstComplianceViolation``\n           - String\n           - Indicates the reason that chunks for the namespace must be\n             moved or merged. Only returned if ``balancerCompliant`` is\n             ``false``.\n\n         * - ``details``\n           - Object\n           - Addtional information about the current defragmentation\n             state. Only returned if ``firstComplianceViolation`` is\n             ``defragmentingChunks``.\n\n         * - ``currentPhase``\n           - String\n           - Current defragmentation phase:\n\n             - For phase one, ``currentPhase`` is\n               ``mergeAndMeasureChunks``.\n\n               Phase one merges contiguous chunks located on the same\n               shard and calculates the data size for those chunks.\n\n             - For phase two, ``currentPhase`` is\n               ``moveAndMergeChunks``.\n\n               After phase one is complete, there might be some small\n               chunks remaining. Phase two migrates those small chunks\n               to other shards and merges the chunks on those shards.\n\n         * - ``remainingChunksToProcess``\n           - Integer\n           - Number of remaining chunks to process in the current phase.\n                  \n      For additional information about the returned document fields, see\n      the :ref:`balancer collection status output document\n      <cmd-balancer-CollectionStatus-output>`.\n\n   .. step:: Confirm that defragmentation is complete\n\n      After defragmentation completes, the command returns either:\n\n      - ``balancerCompliant: true`` if your collection is balanced.\n      - ``balancerCompliant: false`` with ``firstComplianceViolation``\n        set to a string other than ``defragmentingChunks`` if\n        your collection is not balanced.\n      \n      Example output for a balanced collection after defragmentation\n      completes:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/defragment-sharded-collections/monitor-defragmentation-sharded-collection.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3\n\n         {\n            chunkSize: 0.2,\n            balancerCompliant: true,\n            ok: 1,\n            '$clusterTime': {\n               clusterTime: Timestamp({ t: 1677543079, i: 1 }),\n               signature: {\n                  hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n                  keyId: Long(\"0\")\n               }\n            },\n            operationTime: Timestamp({ t: 1677543079, i: 1 })\n         }\n\nNext Steps\n----------\n\nIf defragmentation has not yet completed, you can stop it. For details,\nsee :ref:`stop-defragmenting-sharded-collection`.\n\nLearn More\n----------\n\n- :ref:`Start defragmenting a sharded collection\n  <start-defragmenting-sharded-collection>`\n- :ref:`Stop defragmenting a sharded collection\n  <stop-defragmenting-sharded-collection>`\n- To view the balancer collection status output document, see\n  :ref:`Balancer collection status output document\n  <cmd-balancer-CollectionStatus-output>`\n\n.. include:: /includes/defragment-sharded-collections-learn-more.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/defragment-sharded-collections/monitor-defragmentation-sharded-collection.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 2\n\n         {\n            ok: 1,\n            '$clusterTime': {\n               clusterTime: Timestamp({ t: 1677616966, i: 8 }),\n               signature: {\n                  hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n                  keyId: Long(\"0\")\n               }\n            },\n            operationTime: Timestamp({ t: 1677616966, i: 8 })\n         }\n\nNext Steps\n----------\n\nYou can monitor the collection's defragmentation progress. For details,\nsee :ref:`monitor-defragmentation-sharded-collection`.\n\nLearn More\n----------\n\n.. include:: /includes/defragment-sharded-collections-learn-more.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/defragment-sharded-collections/start-defragmenting-sharded-collection.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 2\n\n         {\n            ok: 1,\n            '$clusterTime': {\n               clusterTime: Timestamp({ t: 1678834337, i: 1 }),\n               signature: {\n                  hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n                  keyId: Long(\"0\")\n               }\n            },\n            operationTime: Timestamp({ t: 1678834337, i: 1 })\n         }\n\nNext Steps\n----------\n\nYou can start defragmentation again at any time. For details, see\n:ref:`start-defragmenting-sharded-collection`.\n\nLearn More\n----------\n\n- :ref:`Start defragmenting a sharded collection\n  <start-defragmenting-sharded-collection>`\n- :ref:`Monitor defragmentation of a sharded collection\n  <monitor-defragmentation-sharded-collection>`\n\n.. include:: /includes/defragment-sharded-collections-learn-more.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/defragment-sharded-collections/stop-defragmenting-sharded-collection.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.sales.insertOne( {\n      \"$price\": 50.00,\n      \"quantity\": 30\n   } )\n\nDollar (``$``) prefixed fields are permitted on inserts using otherwise\nreserved words. Operator names like :update:`$inc` can be used as\nfield names as well as words like ``id``, ``db``, and ``ref``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :emphasize-lines: 2, 4-6\n\n   db.books.insertOne( {\n      \"$id\": \"h1961-01\",\n      \"location\": {\n         \"$db\": \"novels\",\n         \"$ref\": \"2007042768\",\n         \"$inc\": true\n   } } )\n\nAn update which creates a new document during an :term:`upsert` is\ntreated as an ``insert`` rather than an ``update`` for field name\nvalidation. :term:`Upserts <upsert>` can accept dollar (``$``) prefixed\nfields. However, :term:`upserts <upsert>` are a special case and\nsimilar update operations may cause an error if the ``match`` portion\nof the update selects an existing document.\n\nThis code sample has ``upsert: true`` so it will insert a new document\nif the collection doesn't already contain a document that matches the\nquery term, ``{ \"date\": \"2021-07-07\" }``. If this sample code matches\nan existing document, the update will fail since ``$hotel`` is dollar\n(``$``) prefixed.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   db.expenses.updateOne(\n      { \"date\": \"2021-07-07\" },\n      { $set: {\n         \"phone\": 25.17,\n         \"$hotel\": 320.10\n      } },\n      { upsert: true }\n   )\n\nDocument Replacing Updates\n--------------------------\n\nUpdate operators either replace existing fields with new documents\nor else modify those fields. In cases where the update performs a\nreplacement, dollar (``$``) prefixed fields are not permitted as top\nlevel field names. \n\nConsider a document like\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: ObjectId(\"610023ad7d58ecda39b8d161\"),\n      \"part\": \"AB305\",\n      \"$bin\": 200,\n      \"quantity\": 100,\n      \"pricing\": { sale: true, \"$discount\": 60 }\n   }\n\nThe ``pricing.$discount`` subfield can be queried directly.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.inventory.findAndModify( {\n      query: { $expr: {\n         $eq: [ { $getField: { $literal: \"$bin\" } }, 200 ]\n      } }, \n      update: { $inc: { \"quantity\": 10 } }\n   } )\n\n.. _dotDollar-aggregate-update:\n\nUpdates Using Aggregation Pipelines\n-----------------------------------\n\nUse :expression:`$setField`, :expression:`$getField`, and\n:expression:`$literal` in the :pipeline:`$replaceWith` stage to modify\ndollar (``$``) prefixed fields in an aggregation :term:`pipeline`.\n\nConsider a collection of school records like:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": 100001,\n      \"$term\": \"fall\",\n      \"registered\": true,\n      \"grade\": 4\n   }\n\nCreate a new collection for the spring semester using a \n:term:`pipeline` to update the dollar (``$``) prefixed ``$term`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :emphasize-lines: 3-5\n\n   db.school.aggregate( [\n      { $match: { \"registered\": true } }, \n      { $replaceWith: {\n         $setField: {\n            field: { $literal: \"$term\" }, \n            input: \"$$ROOT\",\n            value: \"spring\"\n      } } },\n      { $out: \"spring2022\" }\n   ] )\n\nGeneral Restrictions\n--------------------\n\nIn addition to the storage validation rules above, there are some\ngeneral restrictions on using dollar (``$``) prefixed field names.\nThese fields cannot: \n\n- Be indexed\n- Be used as part of a shard key\n- Be validated using :query:`$jsonSchema`\n- Be be modified with an escape sequence\n- Be used with\n  :driver:`Field Level Encryption </security/client-side-field-level-encryption-guide>`\n- Be used as a subfield in an ``_id`` document\n\n.. include:: /includes/warning-possible-data-loss.rst\n\n.. include:: /includes/warning-dot-dollar-import-export.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/dollar-prefix.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.inventory.find(\n         { \n            $expr: \n               { \n                  $gt: [ { $getField: \"price.usd\" }, 40 ]\n               }\n         }\n      )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: ObjectId(\"66145f9bcb1d4abffd2f1b50\"),\n            item: 'sweatshirt',\n            'price.usd': 45.99,\n            quantity: 20\n         }\n      ]\n\nIf you don't use ``$getField``, MongoDB treats the field name with a\nperiod as an embedded object. For example, the following query matches\ndocuments where a ``usd`` field inside of a ``price`` field is greater\nthan ``40``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/periods.txt"
  },
  {
    "code": "   :emphasize-lines: 3-5\n   \n   { \n      \"item\" : \"sweatshirt\", \n      \"price\": {\n         \"usd\": 45.99\n      },\n      \"quantity\": 20\n   }\n\nUpdate a Field that has a Period\n--------------------------------\n\nTo update a field that has a period, use an aggregation pipeline with\nthe :expression:`$setField` operator.\n\nThe following operation sets the ``price.usd`` field to ``29.99``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/periods.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.inventory.updateOne(\n      { \"item\": \"sweatshirt\" },\n      { $set: { \"price.usd\": 29.99 } }\n   )\n\nResulting document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/periods.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 5,7\n\n   [\n      {\n         _id: ObjectId(\"66145f9bcb1d4abffd2f1b50\"),\n         item: 'sweatshirt',\n         'price.usd': 45.99\n         quantity: 20,\n         price: { usd: 29.99 }\n      }\n   ]\n\nFor more examples of updates with aggregation pipelines, see\n:ref:`updates-agg-pipeline`.\n\nLearn More\n----------\n\n- :expression:`$getField`\n\n- :expression:`$setField`\n\n- :expression:`$literal`\n\n- :ref:`dollar-prefix-field-names`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/dot-dollar-considerations/periods.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: new ObjectId(\"6220f6b78a733c51b416c80e\"),\n      name: \"Uranus\",\n      orderFromSun: 7,\n      hasRings: true,\n      mainAtmosphere: [ \"H2\", \"He\", \"CH4\" ],\n      surfaceTemperatureC: { min: null, max: null, mean: -197.2 }\n   }\n\nTo specify the nested field  ``mean`` within the ``surfaceTemperatureC``\nfield, use :term:`dot notation` (``\"field.nestedField\"``) with a dollar\nsign ``$``. The following aggregation pipeline projects only the\n``mean`` nested field value for each document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.planets.aggregate( [\n      {\n         $project: {\n            nested_field: \"$surfaceTemperatureC.mean\"\n         }\n      }\n   ] )\n\nBelow is an example returned document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: true\n\n   { _id: ObjectId('6220f6b78a733c51b416c80e'), nested_field: -197.2 }\n\n\n.. _agg-array-of-nested-fields:\n\nArray of Nested Fields\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use :term:`dot notation` in a field path to access a field that\nis nested within an array. \n\nFor example, consider a ``products`` collection that contains an\n``instock`` field. The ``instock`` field contains an array of nested\n``warehouse`` fields. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.products.aggregate( [\n      {\n         $project: {\n            item: 1,\n            warehouses: \"$instock.warehouse\"\n         }\n      }\n   ] )\n\nIn this example, ``$instock.warehouse`` outputs an array of values that\nare in the nested ``warehouse`` field for each document. The pipeline\nreturns the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId('6740b55e33b29cf6b1d884f7'),\n         item: \"journal\",\n         warehouses: [ \"A\", \"C\" ]\n      },\n      {\n         _id: ObjectId('6740b55e33b29cf6b1d884f8'),\n         item: \"notebook\",\n         warehouses: [ \"C\" ]\n      },\n      {\n         _id: ObjectId('6740b55e33b29cf6b1d884f9'),\n         item: \"paper\",\n         warehouses: [ \"A\", \"B\" ]\n      },\n      {\n         _id: ObjectId('6740b55e33b29cf6b1d884fa'),\n         item: \"planner\",\n         warehouses: [ \"A\", \"B\" ]\n      },\n      {\n         _id: ObjectId('6740b55e33b29cf6b1d884fb'),\n         item: \"postcard\",\n         warehouses: [ \"B\", \"C\" ]\n      }\n   ]\n\n.. _agg-nested-array-of-arrays:\n\nArray of Nested Arrays\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also use :term:`dot notation` with a dollar sign ``$`` in a\nfield path to access an array within a nested array. \n\nThis example uses a ``fruits`` collection that contains the\nfollowing document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.fruits.insertOne(\n      {\n         _id: ObjectId(\"5ba53172ce6fa2fcfc58e0ac\"),\n         inventory: [\n            {\n               apples: [\n                  \"macintosh\",\n                  \"golden delicious\",\n               ]\n            },\n            {\n               oranges: [\n                  \"mandarin\",\n               ]\n            },\n            {\n               apples: [\n                  \"braeburn\",\n                  \"honeycrisp\",\n               ]\n            }\n         ]\n      }\n   )\n\nThe document in the collection contains an ``inventory`` array where\neach element in the array is an object that contains a nested array\nfield. \n\nConsider the following aggregation pipeline:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.fruits.aggregate( [\n      { $project:\n         { all_apples: \"$inventory.apples\" } }\n   ] )\n\nIn this pipeline, ``$inventory.apples`` resolves to an array of nested\narrays. The pipeline returns the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: ObjectId('5ba53172ce6fa2fcfc58e0ac'),\n      all_apples: [\n         [ \"macintosh\", \"golden delicious\" ],\n         [ \"braeburn\", \"honeycrisp\" ]\n      ]\n   }\n\nLearn More\n----------\n\nFor more information on accessing and interacting with nested elements,\nsee :ref:`document-dot-notation` and\n:ref:`array-match-embedded-documents`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/field-paths.txt"
  },
  {
    "code": "   :copyable: false\n\n    \"msg\":\"Index build: wrote resumable state to disk\",\n   \n    \"msg\":\"Found index from unfinished build\",\n\nTerminate In Progress Index Builds\n----------------------------------\n\nUse the :dbcommand:`dropIndexes` command or its shell helpers\n:method:`~db.collection.dropIndex()` or\n:method:`~db.collection.dropIndexes()` to terminate an in-progress index\nbuild. See :ref:`dropIndexes-cmd-index-builds` for more information.\n\nDo *not* use :dbcommand:`killOp` to terminate an in-progress index\nbuilds in replica sets or sharded clusters. \n\n.. _index-build-process:\n\nIndex Build Process\n-------------------\n\nThe following table describes each stage of the index build\nprocess:\n\n.. list-table::\n  :header-rows: 1\n  :widths: 30 70\n\n  * - Stage\n    - Description\n\n  * - Lock\n\n    - The ``mongod`` obtains an exclusive ``X`` lock on the\n      the collection being indexed. This blocks all read and write \n      operations on the collection, including the application\n      of any replicated write operations or metadata commands that\n      target the collection. The ``mongod`` does not yield \n      this lock. \n\n  * - Initialization\n\n    - The ``mongod`` creates three data structures \n      at this initial state:\n\n      - The initial index metadata entry.\n      - A temporary table (\"side writes table\") that stores keys\n        generated from writes to the collection being indexed\n        during the build process.\n      - A temporary table (\"constraint violation table\") for all \n        documents that may cause a key generation error. Key\n        generation errors occur when a document has invalid keys for the\n        indexed fields. For example, a document with duplicate field\n        values when building a :ref:`unique index <index-type-unique>`\n        *or* malformed :ref:`GeoJSON objects <geospatial-geojson>` when\n        building a :ref:`2dsphere index <2dsphere-index>`.\n\n  * - Lock\n\n    - The ``mongod`` downgrades the exclusive ``X`` \n      collection lock to an intent exclusive\n      ``IX`` lock. The ``mongod`` periodically yields\n      this lock to  interleaving read and write operations.\n\n  * - Scan Collection\n\n    - For each document in the collection, the ``mongod`` \n      generates a key for that document and dumps the \n      key into an external sorter.\n\n      If the ``mongod`` encounters a key generation\n      error while generating a key during the collection scan,\n      it stores that key in the constraint violation table for later\n      processing.\n\n      If the ``mongod`` encounters any other error while\n      generating a key, the build fails with an error.\n\n      Once the ``mongod`` completes the collection\n      scan, it dumps the sorted keys into the index.\n\n  * - Process Side Writes Table\n\n    - The ``mongod`` drains the side write table using\n      first-in-first-out priority.\n\n      If the ``mongod`` encounters a key generation error\n      while processing a key in the side write table, it stores that key\n      in the constraint violation table for later processing.\n\n      If the ``mongod`` encounters any other error while\n      processing a key, the build fails with an error.\n\n      For each document written to the collection during the build\n      process, the ``mongod`` generates a key for that\n      document and stores it in the side write table for later\n      processing. The ``mongod`` uses a snapshot system to\n      set a limit to the number of keys to process. \n\n  * - Vote and Wait for Commit Quorum\n\n    - A ``mongod`` that is *not* part of a replica set \n      skips this stage.\n\n      The ``mongod`` submits a \"vote\" to the primary to commit the \n      index. Specifically, it writes the \"vote\" to an internal replicated \n      collection on the :term:`primary`.\n      \n      If the ``mongod`` is the :term:`primary`, it waits\n      until it has a commit quorum of votes (all voting data-bearing\n      members by default) before continuing the index build process.\n      \n      If the ``mongod`` is a :term:`secondary`, it waits\n      until it replicates either a \"commitIndexBuild\" or \n      \"abortIndexBuild\" oplog entry:\n\n      - If the ``mongod`` replicates a \"commitIndexBuild\" \n        oplog entry, it finishes draining the side writes table and \n        moves to the next stage in the index build process. \n\n      - If the ``mongod`` replicates an \"abortIndexBuild\"\n        oplog entry, it aborts the index build and discards the build \n        job.\n\n      While waiting for commit quorum, the ``mongod`` adds\n      any additional keys generated from write operations to the\n      collection being indexed to the side writes table and periodically\n      drains the table.\n\n  * - Lock\n\n    - The ``mongod`` upgrades the intent exclusive ``IX`` \n      lock on the collection to a shared ``S`` lock. This \n      blocks all write operations to the collection, including the\n      application of any replicated write operations or metadata\n      commands that target the collection.\n\n  * - Finish Processing Temporary Side Writes Table\n\n    - The ``mongod`` continues draining remaining \n      records in the side writes table. The ``mongod`` may \n      pause replication  during this stage.\n\n      If the ``mongod`` encounters a key generation error\n      while processing a key in the side write table, it stores that key\n      in the constraint violation table for later processing.\n\n      If the ``mongod`` encounters any other error while\n      processing a key, the build fails with an error.\n\n  * - Lock\n\n    - The ``mongod`` upgrades the shared ``S`` lock on the \n      collection to an exclusive ``X`` lock on the collection. This \n      blocks all read and write operations on the collection, including \n      the application of any replicated write operations or metadata \n      commands that target the collection. The ``mongod`` \n      does not yield this lock. \n\n  * - Drop Side Write Table\n\n    - The ``mongod`` applies any remaining \n      operations in the side writes table before dropping it. \n\n      If the ``mongod`` encounters a key generation error\n      while processing a key in the side write table, it stores that key\n      in the constraint violation table for later processing.\n\n      If the ``mongod`` encounters any other error while\n      processing a key, the build fails with an error.\n\n      At this point, the index includes all data written to\n      the collection.\n\n  * - Process Constraint Violation Table\n\n    - If the ``mongod`` is the :term:`primary`, it drains the\n      constraint violation table using first-in-first-out priority.\n\n      - If no keys in the constraint violation table produce a key\n        generation error *or* if the table is empty, the\n        ``mongod`` drops the table and creates a\n        \"commitIndexBuild\" oplog entry. Secondaries can complete the\n        associated index build after replicating the oplog entry. \n\n      - If any key in the constraint violation table still produces a\n        key generation error, the ``mongod`` aborts the build\n        and throws an error. The ``mongod`` creates an \n        associated \"abortIndexBuild\" oplog entry to indicate that \n        secondaries should abort and discard the index build job.\n\n      If the ``mongod`` is a :term:`secondary`, it drops \n      the constraint violation table. Since the primary *must* \n      successfully drain the constraint violation table prior to \n      creating the \"commitOplogEntry\" oplog entry, the secondary\n      can safely assume that no violations exist.\n\n  * - Mark the Index as Ready\n\n    - .. _index-build-process-ready:\n\n      The ``mongod`` updates the index metadata to \n      mark the index as ready for use.     \n\n  * - Lock\n\n    - The ``mongod`` releases the ``X`` lock on the \n      collection. \n\n.. seealso::\n\n   :doc:`/faq/concurrency`\n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Create on Replica Sets </tutorial/build-indexes-on-replica-sets>\n   Create on Sharded Clusters </tutorial/build-indexes-on-sharded-clusters>\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-creation.txt"
  },
  {
    "code": "   :emphasize-lines: 15\n   :copyable: false\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"borough\" : 1\n         },\n         \"name\" : \"borough_1\",\n         \"hidden\" : true\n      }\n   ]\n   \nThe index option ``hidden`` is only returned if the value is ``true``.\n\n.. _hide-existing-index:\n\nHide an Existing Index\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   - To hide an index, you must have :ref:`featureCompatibilityVersion\n     <view-fcv>` set to ``{+minimum-lts-version+}`` or greater. \n\n   - You cannot hide the ``_id`` index.\n\nTo hide an existing index, you can use the :dbcommand:`collMod` command\nor :binary:`~bin.mongosh` helper\n:method:`db.collection.hideIndex()`.\n\nFor example, create an index without hiding:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-hidden.txt"
  },
  {
    "code": "   :emphasize-lines: 16\n   :copyable: false\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"borough\" : 1,\n            \"ratings\" : 1\n         },\n         \"name\" : \"borough_1_ratings_1\",\n         \"hidden\" : true\n      }\n   ]\n\nThe index option ``hidden`` is only returned if the value is ``true``.\n\nUnhide an Existing Index\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo unhide a hidden index, you can use the :dbcommand:`collMod` command\nor :binary:`~bin.mongosh` helper\n:method:`db.collection.unhideIndex()`. You can specify either:\n\n- the index key specification document to the\n  :method:`db.collection.unhideIndex()` method:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-hidden.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"borough\" : 1,\n            \"ratings\" : 1\n         },\n         \"name\" : \"borough_1_ratings_1\"\n      }\n   ]\n\nThe index option ``hidden`` no longer appears as part of the\n``borough_1_ratings_1`` index since the field is only returned if the\nvalue is ``true``.\n\nBecause indexes are fully maintained while hidden, the index is\nimmediately available for use once unhidden.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-hidden.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: Index already exists with a different name: index0\n\nIn MongoDB versions earlier than 7.3, you can create the indexes but\nonly the first index (``index0``) is used with these queries:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-partial.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.apples.insertOne( { type: \"Delicious\", quantity: 20 } )\n\n         .. output::\n            :language: javascript\n\n            MongoServerError: E11000 duplicate key error collection:\n            test.apples index: type_1 dup key: { type: \"Delicious\" }\n\n   .. step:: Check for unique key violations\n\n      To see if there are any documents that violate the unique constraint on\n      the ``type`` field, run ``collMod`` with ``unique: true`` and ``dryRun:\n      true``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-unique/convert-to-unique.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.runCommand( {\n               collMod: \"apples\",\n               index: {\n                  keyPattern: { type: 1 },\n                  unique: true\n               },\n               dryRun: true\n            } )\n\n         .. output::\n            :language: javascript\n\n            MongoServerError: Cannot convert the index to unique. Please resolve conflicting documents before running collMod again.\n\n            Violations: [\n               {\n                  ids: [\n                     ObjectId(\"660489d24cabd75abebadbd0\"),\n                     ObjectId(\"660489d24cabd75abebadbd2\")\n                  ]\n               }\n            ]\n\n   .. step:: Resolve duplicate key conflicts\n\n      To complete the conversion, modify the duplicate entries to remove any\n      conflicts. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-unique/convert-to-unique.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.runCommand( {\n               collMod: \"apples\",\n               index: {\n                  keyPattern: { type: 1 },\n                  unique: true\n               },\n               dryRun: true\n            } )\n\n         .. output::\n            :language: javascript\n\n            { ok: 1 }\n\n   .. step:: Finalize the index conversion\n\n      To finalize the conversion to a unique index, run the ``collMod``\n      command with ``unique: true`` and remove the ``dryRun`` flag:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-unique/convert-to-unique.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.runCommand( {\n               collMod: \"apples\",\n               index: {\n                  keyPattern: { type: 1 },\n                  unique: true\n               }\n            } )\n\n         .. output::\n            :language: javascript\n\n            { unique_new: true, ok: 1 }\n\nLearn More \n----------\n\n- :ref:`manage-indexes`\n\n- :ref:`index-properties`\n\n- :ref:`indexing-strategies`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/index-unique/convert-to-unique.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 6\n   \n   [\n     { v: 2, key: { _id: 1 }, name: '_id_' },\n     {\n       v: 2,\n       key: { _fts: 'text', _ftsx: 1 },\n       name: 'InteractionsTextIndex',\n       weights: { content: 1, 'users.comments': 1, 'users.profiles': 1 },\n       default_language: 'english',\n       language_override: 'language',\n       textIndexVersion: 3\n     }\n   ]\n\nLearn More\n----------\n\n- To learn how to create an index, see :ref:`manual-create-an-index`.\n- For more information about index properties, see :ref:`index-properties`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/create-index/specify-index-name.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.collection.getIndexes()\n\n   .. output::\n      :language: javascript\n      :visible: false\n\n      [\n         { v: 2, key: { _id: 1 }, name: '_id_' },\n         { v: 2, key: { name: -1 }, name: 'name_-1' }\n      ]    \n\nTo check if your index is being built, use the :pipeline:`$currentOp` aggregation stage to return information about active operations on your database. \nTo run :pipeline:`$currentOp` in :binary:`mongosh`, use the :method:`db.aggregate()` method on the ``admin`` database. \n\nThe following aggregation pipeline uses the :pipeline:`$match` stage to return information\nabout an active operation that builds a descending index on the ``name`` field: \n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/create-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: javascript\n   \n      db.getSiblingDB(\"admin\").aggregate( [\n         { $currentOp : {} },\n         { $match : {\"command.createIndexes\": { $exists: true } } }\n      ] )\n      \n   .. output:: \n      :language: javascript \n      :visible: false\n      :emphasize-lines: 12, 26-39\n\n      [\n         {\n            type: 'op',\n            host: 'mongodb.example.net:27017',\n            desc: 'conn584',\n            connectionId: 584,\n            client: '104.30.134.189:12077',\n            appName: 'mongosh 2.3.4',\n            clientMetadata: { \n               ... \n            },\n            active: true,\n            currentOpTime: '2024-12-05T16:13:35.571+00:00',\n            effectiveUsers: [ { user: jane-doe, db: 'admin' } ],\n            isFromUserConnection: true,\n            threaded: true,\n            opid: ...,\n            lsid: { \n               ... \n            },\n            secs_running: Long('3'),\n            microsecs_running: Long('3920881'),\n            op: 'command',\n            ns: 'example_db.collection',\n            redacted: false,\n            command: {\n               createIndexes: 'collection',\n               indexes: [ { name: 'name_-1', key: { name: -1 } } ],\n               apiVersion: '1',\n               lsid: { id: UUID('570931be-c692-4963-b9e2-1e279efd9702') },\n               '$clusterTime': {\n               clusterTime: Timestamp({ t: 1733415063, i: 32 }),\n               signature: {\n                  hash: Binary.createFromBase64('z0zaUHJ5SfhNQyvQLhocsKRFNbo=', 0),\n                  keyId: Long('7444956895695077380')\n               }\n               },\n               '$db': 'example_db'\n            },\n            numYields: 0,\n            queues: {\n               ...\n            },\n            currentQueue: null,\n            locks: {},\n            waitingForLock: false,\n            lockStats: { ... },\n            waitingForFlowControl: false,\n            flowControlStats: { acquireCount: Long('3') }\n         }, ...\n      ]\n\nTo view information on existing indexes using a driver, refer to your\n:driver:`driver's documentation </>`.\n\nLearn More\n----------\n\n- To learn how to create indexes in |compass|, see :ref:`Manage Indexes\n  <compass-indexes>` in the Compass documentation.\n\n- To see how often your indexes are used, see\n  :ref:`index-measure-index-use`.\n\n- To learn how to specify the name of your index, see :ref:`specify-index-name`.\n\n- To learn how MongoDB builds indexes, see :ref:`index-build-process`.\n\n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Specify a Name </core/indexes/create-index/specify-index-name>\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/create-index.txt"
  },
  {
    "code": "   :copyable: false\n\n   ... \n   { \"nIndexesWas\" : 3, \"ok\" : 1 }\n   ...\n\nThe value of ``nIndexesWas`` reflects the number of indexes before\nremoving an index.\n\nTo confirm that the index was dropped, run the\n:method:`db.collection.getIndexes()` method:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/drop-index.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.contacts.find(\n      {\n         address:\n            {\n               $geoWithin:\n                  {\n                     $centerSphere:\n                        [\n                           [ -72, 44 ] ,\n                           200 / 3963.2\n                        ]\n                  }\n            }\n      }\n   )\n\nOutput:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/calculate-distances.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"647e565c6cdaf4dc323ec92d\"),\n       name: 'Georgine Lestaw',\n       phone: '714-555-0107',\n       address: [ -74, 44.74 ]\n     }\n   ]\n\nIn the preceding query, to convert 200 miles to radians, the specified\nmiles were divided by 3963.2.\n\nConvert Kilometers to Radians\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following query returns documents where the ``address`` field is\nwithin a circle with center point ``[ 55, 42 ]`` and a radius of 500\nkilometers:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/calculate-distances.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.contacts.find(\n      {\n         address:\n            {\n               $geoWithin:\n                  {\n                     $centerSphere:\n                        [\n                           [ 55, 42 ] ,\n                           500 / 6378.1\n                        ]\n                  }\n            }\n      }\n   )\n\nOutput:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/calculate-distances.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"647e565c6cdaf4dc323ec92c\"),\n       name: 'Evander Otylia',\n       phone: '202-555-0193',\n       address: [ 55.5, 42.3 ]\n     }\n   ]\n\nIn the preceding query, to convert 500 kilometers to radians, the\nspecified kilometers were divided by 6378.1.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/calculate-distances.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"647e4e496cdaf4dc323ec92a\"),\n       name: 'Evander Otylia',\n       phone: '202-555-0193',\n       address: [ 55.5, 42.3 ]\n     }\n   ]\n\nThe values of the ``$box`` operator represent the bottom-left and\ntop-right corners of of the rectangle to query within.\n\nThe ``$geoWithin`` query shown earlier returns documents that are within\na rectangle that has these vertices:\n\n- ``[ 49, 40 ]``\n- ``[ 49, 60 ]``\n- ``[ 60, 60 ]``\n- ``[ 60, 40 ]``\n\nLearn More\n----------\n\nTo learn how to use the ``$geoWithin`` operator with other shapes, see\nthese pages:\n\n- To query within a polygon, see :query:`$polygon`.\n- To query within a circle, see :query:`$center`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/query/points-within-a-shape.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n        _id: ObjectId(\"640a3dd9c639b6f094b00e89\"),\n        name: 'Georgine Lestaw',\n        phone: '714-555-0107',\n        address: [ -74, 44.74 ]\n      }\n   ]\n\nResults are sorted by distance from the queried point, from nearest to\nfarthest.\n\nLearn More\n----------\n\n- :query:`$near`\n\n- :pipeline:`$geoNear`\n\n- :ref:`geospatial-restrictions`\n\n- To perform proximity queries on a spherical surface, see\n  :ref:`2dsphere-query-geojson-proximity`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2d/query/proximity-flat-surface.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"63a4a8d67348ebdcd0a061f0\"),\n       loc: { type: 'Point', coordinates: [ -73.97, 40.77 ] },\n       name: 'Central Park',\n       category: 'Park'\n     }\n   ]\n\nLearn More\n----------\n\n- :query:`$geoWithin`\n\n- :ref:`geojson-polygon`\n\n- :ref:`geospatial-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2dsphere/query/geojson-bound-by-polygon.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n        _id: ObjectId(\"63f658d45e5eefbdfef81ca4\"),\n        loc: { type: 'Point', coordinates: [ -106.31, 35.65 ] },\n        state: 'New Mexico',\n        country: 'United States',\n        name: 'Horizons Gas Station'\n      }\n   ]\n\nLearn More\n----------\n\n- :query:`$geoIntersects`\n\n- :ref:`geojson-linestring`\n\n- :ref:`2dsphere-query-geojson-objects-polygon`\n\n- :ref:`geospatial-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2dsphere/query/intersections-of-geojson-objects.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n        _id: ObjectId(\"63fd205e4a08b5e248c03e32\"),\n        loc: { type: 'Point', coordinates: [ -1.83, 51.18 ] },\n        name: 'Stonehenge',\n        category: 'Monument'\n      }\n   ]\n\nLearn More\n----------\n\n- :query:`$geoWithin`\n\n- :query:`$centerSphere`\n\n- :ref:`2dsphere-query-geojson-objects-polygon`\n\n- :ref:`2dsphere-query-intersection`\n\n- :ref:`2dsphere-query-geojson-proximity`\n\n- :ref:`geospatial-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2dsphere/query/points-within-circle-on-sphere.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"63f7c3b15e5eefbdfef81cab\"),\n       loc: { type: 'Point', coordinates: [ -73.88, 40.78 ] },\n       name: 'La Guardia Airport',\n       category: 'Airport'\n     },\n     {\n       _id: ObjectId(\"63f7c3b15e5eefbdfef81caa\"),\n       loc: { type: 'Point', coordinates: [ -73.97, 40.77 ] },\n       name: 'Central Park',\n       category: 'Park'\n     }\n   ]\n\nResults are sorted by distance from the queried point, from nearest to\nfarthest.\n\nLearn More\n----------\n\n- :query:`$near`\n\n- :query:`$nearSphere`\n\n- :pipeline:`$geoNear`\n\n- :ref:`geojson-point`\n\n- :ref:`geospatial-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/geospatial/2dsphere/query/proximity-to-geojson.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"632235700646eaee87a56a74\"),\n         score: 60,\n         username: 'Alex Martin',\n         date: ISODate(\"2022-03-03T00:00:00.000Z\")\n      },\n      {\n         _id: ObjectId(\"632235700646eaee87a56a75\"),\n         score: 60,\n         username: 'Riya Patel',\n         date: ISODate(\"2022-03-04T00:00:00.000Z\")\n      },\n      {\n         _id: ObjectId(\"632235700646eaee87a56a73\"),\n         score: 55,\n         username: 'Laura Garcia',\n         date: ISODate(\"2022-03-02T00:00:00.000Z\")\n      },\n      {\n         _id: ObjectId(\"632235700646eaee87a56a72\"),\n         score: 50,\n         username: 'Alex Martin',\n         date: ISODate(\"2022-03-01T00:00:00.000Z\")\n      },\n      {\n         _id: ObjectId(\"632235700646eaee87a56a76\"),\n         score: 50,\n         username: 'Laura Garcia',\n         date: ISODate(\"2022-03-05T00:00:00.000Z\")\n      }\n   ]\n\nThe results are sorted first by score in descending order, then by\nusername in ascending order (alphabetically).\n\nSupporting Index for the Leaderboard\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following index improves performance for the leaderboard results\nbecause the sort order of the index matches the sort order used in the\nquery:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-compound/sort-order.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"632240a20646eaee87a56a80\"),\n         name: 'Andre Robinson',\n         test_scores: [ 88, 97 ]\n      },\n      {\n         _id: ObjectId(\"632240a20646eaee87a56a82\"),\n         name: 'Jacob Meyer',\n         test_scores: [ 92, 89 ]\n      }\n   ]\n\nLearn More\n----------\n\n- To learn how to create a multikey index on embedded document fields,\n  see :ref:`index-create-multikey-embedded`.\n\n- To learn about multikey index bounds, see\n  :ref:`indexes-multikey-bounds`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/create-multikey-index-basic.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"63449793b1fac2ee2e957ef3\"),\n       item: 'vest',\n       stock: [ { size: 'small', quantity: 6 }, { size: 'large', quantity: 1 } ]\n     },\n     {\n       _id: ObjectId(\"63449793b1fac2ee2e957ef2\"),\n       item: 'sweater',\n       stock: [ { size: 'small', quantity: 4 }, { size: 'large', quantity: 7 } ]\n     }\n   ]\n\n\nSort Results\n~~~~~~~~~~~~\n\nThe index also supports sort operations on the ``stock.quantity`` field,\nsuch as this query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/create-multikey-index-embedded.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"63449793b1fac2ee2e957ef1\"),\n       item: 't-shirt',\n       stock: [ { size: 'small', quantity: 8 }, { size: 'large', quantity: 10 } ]\n     },\n     {\n       _id: ObjectId(\"63449793b1fac2ee2e957ef2\"),\n       item: 'sweater',\n       stock: [ { size: 'small', quantity: 4 }, { size: 'large', quantity: 7 } ]\n     },\n     {\n       _id: ObjectId(\"63449793b1fac2ee2e957ef3\"),\n       item: 'vest',\n       stock: [ { size: 'small', quantity: 6 }, { size: 'large', quantity: 1 } ]\n     }\n   ]\n\nWhen sorting an array of objects, in a descending sort, MongoDB sorts\nbased on the field with the highest-valued element first. \n\n.. note:: Index Sort Order\n\n   .. include:: /includes/indexes/fact-single-field-index-sort.rst\n\nLearn More\n----------\n\n- :ref:`Create a multikey index on an array of scalar values\n  <index-create-multikey-basic>`.\n\n- :ref:`Learn about multikey index bounds <indexes-multikey-bounds>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/create-multikey-index-embedded.txt"
  },
  {
    "code": "         :copyable: false\n\n         ratings: [ [ 90, 99 ] ]\n\nQuery without $elemMatch\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the query does not join the conditions on the array field with\n``$elemMatch``, MongoDB cannot intersect the multikey index bounds.\n\nConsider this query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "   :copyable: false\n\n   { temperature: [ [ 80, Infinity ] ], humidity: [ [ -Infinity, 20 ] ] }\n\nIf MongoDB cannot compound the two bounds, MongoDB constrains the index\nscan by the bound on the leading field. In this example, the leading\nfield is ``temperature``, resulting in a constraint of ``temperature: [\n[ 80, Infinity ] ]``.\n\nExample: Compound Bounds of Non-array Field and Array Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example shows how MongoDB uses compound bounds to define a\nmore efficient query constraint, resulting in improved query\nperformance.\n\n.. procedure::\n\n   .. step:: Populate a sample collection\n\n      Create a ``survey`` collection that contains documents with a field\n      ``item`` and an array field ``ratings``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "         :copyable: false\n\n         { item: [ [ \"XYZ\", \"XYZ\" ] ], ratings: [ [ 3, Infinity ] ] }\n\n.. _index-bounds-example-non-array-multiple-array:\n\nExample: Compound Bounds of Non-array Field and Multiple Array Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example shows how MongoDB uses compound bounds when an\nindex includes a non-array field and multiple array fields.\n\n.. procedure::\n\n   .. step:: Populate a sample collection\n\n      Create a ``survey2`` collection that contains documents with a\n      string field ``item`` and an array field ``ratings``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "           :copyable: false\n           :emphasize-lines: 2-3\n\n           {\n              \"item\" : [ [ \"XYZ\", \"XYZ\" ] ],\n              \"ratings.score\" : [ [ -Infinity, 5 ] ],\n              \"ratings.by\" : [ [ MinKey, MaxKey ] ]\n           }\n\n      - MongoDB compounds the ``item`` bounds with the ``\"ratings.by\"``\n        bounds:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "           :copyable: false\n           :emphasize-lines: 2, 4\n\n           {\n              \"item\" : [ [ \"XYZ\", \"XYZ\" ] ],\n              \"ratings.score\" : [ [ MinKey, MaxKey ] ],\n              \"ratings.by\" : [ [ \"anon\", \"anon\" ] ]\n           }\n\n      To compound the bounds for ``\"ratings.score\"`` with the bounds for\n      ``\"ratings.by\"``, the query must use ``$elemMatch``.\n\n.. _compound-fields-from-array:\n\nCompound Bounds of Multiple Fields from the Same Array\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo compound the bounds for index keys from the same array, both of the\nfollowing must be true:\n\n- The index keys must share the same field path up to but excluding the\n  field names.\n\n- The query must specify predicates on the fields using\n  ``$elemMatch`` on that path.\n\nFor a field in an embedded document, the :ref:`dotted field name\n<document-dot-notation>`, such as ``\"a.b.c.d\"``, is the field path for\n``d``. To compound the bounds for index keys from the same array, the\n``$elemMatch`` must be on the path up to *but excluding* the field\nname itself (meaning ``\"a.b.c\"``).\n\nExample\n```````\n\nThe following example shows how MongoDB combines bounds for index keys\nfrom the same array. This example uses the ``survey2`` collection used\nin the :ref:`previous example\n<index-bounds-example-non-array-multiple-array>`.\n\n.. procedure::\n\n   .. step:: Create a compound multikey index\n\n      Create a compound index on the ``ratings.score`` and the\n      ``ratings.by`` fields:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"ratings.score\" : [ [ -Infinity, 5 ] ], \"ratings.by\" : [ [ \"anon\", \"anon\" ] ] }\n\nExample: $elemMatch on Diverging Field Paths\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your query specifies ``$elemMatch`` on fields that diverge from\na common path, MongoDB **cannot** compound the bounds of index keys from\nthe same array.\n\nThe following example demonstrates ``$elemMatch`` on diverging field\npaths.\n\n.. procedure::\n\n   .. step:: Populate a sample collection\n\n      Create a collection ``survey3`` contains documents with a string\n      field ``item`` and an array field ``ratings``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-multikey/multikey-index-bounds.txt"
  },
  {
    "code": "   :emphasize-lines: 8-12\n\n   db.<collection>.createIndex(\n      {\n        <field1>: \"text\",\n        <field2>: \"text\",\n        ...\n      },\n      {\n        weights: {\n          <field1>: <weight>,\n          <field2>: <weight>,\n          ...\n        },\n        name: <indexName>\n      }\n    )\n\n.. important::\n\n   If you change the weights in your index after it is created, MongoDB\n   needs to reindex the collection. Reindexing can negatively impact\n   performance, especially on large collections. For more information,\n   see :ref:`index-creation-background`.\n\nAbout this Task\n---------------\n\nYou have a ``blog`` collection that contains documents for individual\nblog posts. Each document contains:\n\n- The content of the post.\n- The topic that the post covers.\n- A list of keywords related to the post.\n\nYou want to create a text index so users can perform text searches on\nblog posts. Your application supports searches on content, topics, and\nkeywords.\n\nYou want to prioritize matches on the ``content`` field over other\ndocument fields. Use index weights to assign greater importance to\nmatches on ``content`` and sort query results so ``content`` matches\nappear first.\n\nBefore You Begin\n----------------\n\n.. include:: /includes/indexes/text-search-blog-example-documents.rst\n\nProcedure\n---------\n\nCreate a ``text`` index with different weights for each indexed field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/control-text-search-results.txt"
  },
  {
    "code": "   :copyable: false\n   \n   [\n     {\n       _id: 2,\n       content: 'Who likes chocolate ice cream for dessert?',\n       about: 'food',\n       keywords: [ 'food', 'poll' ],\n       score: 12\n     },\n     {\n       _id: 3,\n       content: 'My favorite flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ],\n       score: 1.5\n     }\n   ]\n\nThe search string ``ice cream`` matches:\n\n- The ``content`` field in the document with ``_id: 2``.\n- The ``about`` field in the document with ``_id: 3``.\n\nA term match in the ``content`` field has ``10`` times the impact\n(``10:1`` weight) as a term match in the ``keywords`` field.\n\nMatches in ``keywords`` and ``about`` Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following query searches documents in the ``blog`` collection for\nthe string ``food``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/control-text-search-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 3,\n       content: 'My favorite flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ],\n       score: 5.5\n     },\n     {\n       _id: 2,\n       content: \"Who likes chocolate ice cream for dessert?\",\n       about: 'food',\n       keywords: [ 'poll' ],\n       score: 1.1\n     }\n   ]\n\nThe search string ``food`` matches:\n\n- The ``keywords`` field in the document with ``_id: 3``.\n- The ``about`` field in the document with ``_id: 2``.\n\nA term match in the ``keywords`` field has ``5`` times  the impact\n(``5:1`` weight) as a term match in the ``about`` field.\n\nMultiple Matches in a Single Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following query searches documents in the ``blog`` collection for\nthe string ``coffee``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/control-text-search-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 1,\n       content: 'This morning I had a cup of coffee.',\n       about: 'beverage',\n       keywords: [ 'coffee' ],\n       score: 11.666666666666666\n     },\n     {\n       _id: 3,\n       content: 'My favorite cake flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ],\n       score: 6\n     }\n   ]\n\nThe search string ``coffee`` matches:\n\n- The ``content`` and ``keywords`` fields in the document with ``_id:\n  1``.\n\n- The ``content`` field in the document with ``_id: 3``.\n\nTo calculate the ``score`` when a search string matches multiple fields,\nMongoDB multiplies the number of matches by the weight for the\ncorresponding field and sums the results.\n\nLearn More\n----------\n\nTo learn more about text search in MongoDB, see:\n\n- :ref:`perform-text-search-onprem`\n\n- :ref:`text-search-operators-onprem`\n\n- :ref:`text-search-languages`\n\n- :expression:`$meta`\n\n.. note:: Atlas Search\n\n   For data hosted on MongoDB Atlas,\n   :atlas:`Atlas Search </atlas-search>` provides more robust custom\n   scoring than ``text`` indexes. To learn more, see the Atlas Search\n   :atlas:`Scoring </reference/atlas-search/scoring/>` documentation.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/control-text-search-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n        _id: 1,\n        content: 'This morning I had a cup of coffee.',\n        about: 'beverage',\n        keywords: [ 'coffee' ]\n      },\n      {\n        _id: 3,\n        content: 'My favorite flavors are strawberry and coffee',\n        about: 'ice cream',\n        keywords: [ 'food', 'dessert' ]\n      }\n   ]\n\nMatches on Non-Indexed Fields\n`````````````````````````````\n\nThe ``{ \"content\": \"text\" }`` index only includes the ``content`` field,\nand does not return matches on non-indexed fields. For example, the\nfollowing query searches the ``blog`` collection for the string\n``food``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/create-text-index.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 3,\n       content: 'My favorite flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ]\n     },\n     {\n       _id: 2,\n       content: 'Who likes chocolate ice cream for dessert?',\n       about: 'food',\n       keywords: [ 'poll' ]\n     }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/create-text-index.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 1,\n       content: 'This morning I had a cup of coffee.',\n       about: 'beverage',\n       keywords: [ 'coffee' ]\n     },\n     {\n       _id: 3,\n       content: 'My favorite flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ]\n     }\n   ]\n\nThe preceding query returns all documents that contain the string\n``coffee`` in any field.\n\nSearch for Multiple Terms\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nQuery the ``blog`` collection for documents that contain the string\n``poll`` **or** ``coffee``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/create-wildcard-text-index.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 1,\n       content: 'This morning I had a cup of coffee.',\n       about: 'beverage',\n       keywords: [ 'coffee' ]\n     },\n     {\n       _id: 3,\n       content: 'My favorite flavors are strawberry and coffee',\n       about: 'ice cream',\n       keywords: [ 'food', 'dessert' ]\n     },\n     {\n       _id: 2,\n       content: 'Who likes chocolate ice cream for dessert?',\n       about: 'food',\n       keywords: [ 'poll' ]\n     }\n   ]\n   \n\nThe preceding query returns documents that contain the string ``poll``\nor ``coffee`` in any field.\n\nSearch for an Exact Phrase\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nQuery the ``blog`` collection for documents that contain the phrase\n``chocolate ice cream``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/create-wildcard-text-index.txt"
  },
  {
    "code": "   :copyable: false \n\n   [\n     {\n       _id: 2,\n       content: 'Who likes chocolate ice cream for dessert?',\n       about: 'food',\n       keywords: [ 'poll' ]\n     }\n   ]\n\nThe preceding query returns documents that contain the exact phrase\n``chocolate ice cream`` in any field.\n\nLearn More\n----------\n\n- To learn how to control the ranking of text query results, see\n  :ref:`specify-weights`.\n\n- You can include a wildcard text index as part of a compound text\n  index. To learn more about compound text indexes, see\n  :ref:`compound-text-index-example`.\n\n- To see examples of text search queries, see :query:`$text`.\n\n  .. include:: /includes/text-search-legacy-atlas-section.rst\n\n- To learn about text index properties such as case sensitivity, see\n  :ref:`text-index-properties`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/create-wildcard-text-index.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 3, department: 'kitchen', description: 'green placemat' } ]\n\nView Number of Documents Examined\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo see how many documents were scanned to return the query, view the\nquery's :ref:`executionStats`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/limit-number-of-items-scanned-for-text-search.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 2,\n         language: 'spanish',\n         original: 'Nada hay más surrealista que la realidad.',\n         translation: [\n            {\n               language: 'english',\n               quote: 'There is nothing more surreal than reality.'\n            },\n            {\n               language: 'french',\n               quote: \"Il n'y a rien de plus surréaliste que la réalité.\"\n            }\n         ]\n      }\n   ]\n\nFor embedded documents that do not contain the ``language`` field, \n\n- If the enclosing document contains the ``language`` field, then the index uses \n  the document's language for the embedded documents. \n\n- Otherwise, the index uses the default language for the embedded documents.\n\nFor documents that do not contain the ``language`` field, the index uses the \ndefault language, which is English. \n\n\nLearn More \n----------\n\n- To specify the text index language in a field other than ``language``,\n  see :ref:`text-index-specify-language-in-field`.\n\n- To learn how to specify the default language for a text index, see \n  :ref:`specify-default-text-index-language`.\n\n- To learn about other text index properties, see :ref:`text-index-properties`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/specify-language-text-index/create-text-index-multiple-languages.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, idioma: 'portuguese', quote: 'A sorte protege os audazes' }\n   ]\n\nThe preceding query uses Portuguese as the language to fulfill the\nquery.\n\nSearch for a Stop Word\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following query searches for the string ``hay``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-text/specify-language-text-index/use-any-field-to-specify-language.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n        {\n           _id: ObjectId(\"6352c401b1fac2ee2e957f09\"),\n           name: 'The Scream',\n           artist: 'Edvard Munch',\n           style: 'modern',\n           themes: [ 'humanity', 'horror' ]\n        }\n     ]\n\n- Query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-all-fields.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n        {\n           _id: ObjectId(\"6352c525b1fac2ee2e957f0d\"),\n           name: 'Acrobats',\n           artist: { name: 'Raoul Dufy', nationality: 'French', yearBorn: 1877 },\n           originalTitle: 'Les acrobates',\n           dimensions: [ 65, 49 ]\n        }\n     ]\n\n- Query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-all-fields.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n        {\n           _id: ObjectId(\"6352c387b1fac2ee2e957f08\"),\n           name: 'The Thinker',\n           type: 'sculpture',\n           materials: [ 'bronze' ],\n           year: 1904\n        }\n     ]\n\nLearn More\n----------\n\nTo learn how to create a wildcard index that projects specific fields to\ncover, see the following pages:\n\n- :ref:`wc-compound-index-wcProject`\n\n- :ref:`create-wildcard-index-multiple-fields`\n\nTo learn more about behaviors for wildcard indexes, see:\n\n- :ref:`wildcard-index-embedded-object-behavior`\n\n- :ref:`wildcard-index-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-all-fields.txt"
  },
  {
    "code": "       :copyable: false\n\n       {\n         \"wildcardProjection\" : {\n            \"attributes\" : 0, \n            \"users\" : 1\n         }\n      }\n\n  - The following ``wildcardProjection`` document is **valid** because\n    even though it specifies both inclusion and exclusion, it includes\n    the ``_id`` field:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-multiple-fields.txt"
  },
  {
    "code": "       :copyable: false\n\n       {\n         \"wildcardProjection\" : {\n            \"attributes\" : 0, \n            \"_id\" : 1\n         }\n      }\n\nBefore You Begin\n----------------\n\nCreate a ``products`` collection that contains the following documents:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-multiple-fields.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n       {\n         _id: ObjectId(\"63472196b1fac2ee2e957ef6\"),\n         product_name: 'Spy Coat',\n         attributes: {\n           material: [ 'Tweed', 'Wool', 'Leather' ],\n           size: { length: 72, units: 'inches' }\n         }\n       }\n     ]\n\n- Query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-single-field.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n       {\n         _id: ObjectId(\"63472196b1fac2ee2e957ef6\"),\n         product_name: 'Spy Coat',\n         attributes: {\n           material: [ 'Tweed', 'Wool', 'Leather' ],\n           size: { length: 72, units: 'inches' }\n         }\n       }\n     ]\n\n- Query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-single-field.txt"
  },
  {
    "code": "     :copyable: false\n\n     [\n       {\n         product_name: 'Spy Pen',\n         attributes: { colors: [ 'Blue', 'Black' ] }\n       }\n     ]\n   \nWildcard indexes have specific behavior when the indexed field contains\nan embedded object (for example, ``attributes.secret_feature``). For\nmore information, see :ref:`wildcard-index-embedded-object-behavior`.\n\nLearn More\n----------\n\nTo learn more about behaviors and use cases for wildcard indexes, see:\n\n- :ref:`create-wildcard-index-all-fields`\n\n- :ref:`create-wildcard-index-multiple-fields`\n\n- :ref:`wildcard-index-compound`\n\n- :ref:`wildcard-index-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/create-wildcard-index-single-field.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \ttenantId: <Number>,     \t\n      \ttenantRegion: <Number>,\n      \tcustomFields: {\n         \t\taddr: <String>,\n         \t\tname: <String>,\n         \t\tblockId: <Number>,\n         \t\t...\t\n      \t}\n       dateOpened: <Date>\n    }\n\nYou might want to query aspects of the ``customFields`` field for\ntenants that have a particular ``tenantId``. You could create a series\nof individual indexes: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/index-wildcard-compound.txt"
  },
  {
    "code": "   :copyable: false\n\n   { tenantId: 1, \"customFields.addr\": 1 }\n   { tenantId: 1, \"customFields.name\": 1 }\n   { tenantId: 1, \"customFields.blockId\": 1 }\n   ...\n\nThis approach is difficult to maintain and you are likely to reach the \nmaximum number of indexes per collection (64). \n\nUse a compound wildcard index instead. The compound wildcard index is\neasier to write, easier to maintain, and is unlikely to reach the 64\nindex collection limit.\n\nThis example creates a compound wildcard index on the ``salesData``\ncollection: \n\n.. _wc-ex-first:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/index-wildcard-compound.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"6350537db1fac2ee2e957efc\"),\n       ship: {\n         coordinates: [ [ -5, 10 ], [ -7, 8 ] ],\n         type: 'Cargo Ship',\n         captains: [\n           { name: 'Francis Drake', crew: [ 'first mate', 'carpenter' ] }\n         ]\n       }\n     }\n   ]\n\nMongoDB **cannot** use the wildcard index to fulfill this query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/reference/embedded-object-behavior.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { v: 2, key: { _id: 1 }, name: '_id_' },\n      {\n         v: 2,\n         key: { '$**': 1 },\n         name: 'authorWildcard',\n         wildcardProjection: { author: { website: true, name: true }, _id: false }\n      },\n      {\n         v: 2,\n         key: { '$**': 1 },\n         name: 'publisherWildcard',\n         wildcardProjection: { publisher: { name: true }, _id: false }\n      }\n   ]\n\nLearn More\n----------\n\n- :ref:`createIndex-method-wildcard-option`\n\n- :ref:`wildcard-index-restrictions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/indexes/index-types/index-wildcard/reference/wildcard-projection-signature.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"<YYYY-mm>\", \"sales_quantity\" : <num>, \"sales_amount\" : <NumberDecimal> }\n\n- The :pipeline:`$merge` stage writes the output to the\n  ``monthlybakesales`` collection.\n  \n  Based :ref:`on <merge-on>` the ``_id`` field (the default for\n  unsharded output collections), the stage checks if the document in\n  the aggregation results :ref:`matches <merge-whenMatched>` an\n  existing document in the collection:\n\n  - :ref:`When there is a match <merge-whenMatched>` (i.e. a document\n    with the same year-month already exists in the collection), the\n    stage :ref:`replaces the existing document\n    <merge-whenMatched-replace>` with the document from the\n    aggregation results.\n  \n  - :ref:`When there is not a match <merge-whenNotMatched>`, the stage\n    inserts the document from the aggregation results into the\n    collection (the default behavior when not matched).\n\n\n2. Perform Initial Run\n~~~~~~~~~~~~~~~~~~~~~~\n\nFor the initial run, you can pass in a date of ``new\nISODate(\"1970-01-01\")``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/materialized-views.txt"
  },
  {
    "code": "   :emphasize-lines: 2,3\n\n   { \"_id\" : \"2018-12\", \"sales_quantity\" : 41, \"sales_amount\" : NumberDecimal(\"506\") }\n   { \"_id\" : \"2019-01\", \"sales_quantity\" : 102, \"sales_amount\" : NumberDecimal(\"1142\") }\n   { \"_id\" : \"2019-02\", \"sales_quantity\" : 15, \"sales_amount\" : NumberDecimal(\"284\") }\n\nAdditional Information\n----------------------\n\nThe :pipeline:`$merge` stage:\n\n- Can output to a collection in the same or different database.\n\n- Creates a new collection if the output collection does not already\n  exist.\n\n- Can incorporate results (insert new documents, merge documents,\n  replace documents, keep existing documents, fail the operation,\n  process documents with a custom update pipeline) into an existing\n  collection.\n\n- Can output to a sharded collection. Input collection can\n  also be sharded.\n\nSee :pipeline:`$merge` for:\n\n- More information on :pipeline:`$merge` and available options\n\n- Example: :ref:`merge-mat-view-init-creation`\n\n- Example: :ref:`merge-mat-view-refresh`\n\n- Example: :ref:`merge-mat-view-insert-only`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/materialized-views.txt"
  },
  {
    "code": "   :copyable: false\n\n   find: \"pizzaOrders\",\n   filter: {\n      orderDate: { $gt: ISODate( \"2023-01-20T00:00:00Z\" ) }\n   },\n   sort: {\n      totalNumber: 1\n   },\n   $db: \"test\"\n\nThe example filter limits the documents to those with an order date\ngreater than the specified date. The example has an ascending sort on\nthe total number of pizzas ordered.\n\nTo view the MongoDB 8.0 ``queryShapeHash`` and ``planCacheShapeHash``\nhexadecimal strings, you can use the :dbcommand:`explain` command.\n\nThe following ``explain`` examples contain queries with the same query\nshape:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/query-shapes.txt"
  },
  {
    "code": "   :copyable: false\n\n   queryShapeHash: 'AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1'\n   planCacheShapeHash: '48E51110'\n\nDifferent Query Shape\n~~~~~~~~~~~~~~~~~~~~~\n\nA query has a different shape if the query has different specifications.\nFor example, if a query has a different filter, sort, projection,\nnamespace, or aggregation pipeline stages.\n\nIn the example in the previous section, the example sorts\nby the ``totalNumber`` field. If you change the query sort from\n``totalNumber`` to a different field, the query has a different\nquery shape.\n\nFor example, sorting by pizza ``price`` changes the query shape:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/query-shapes.txt"
  },
  {
    "code": "   :copyable: false\n\n   queryShapeHash: 'AC1ECADBE8F1EB0F417A30741AB4813BE7E0BFEF523B0870CA11FCBC87F1A8B2'\n   planCacheShapeHash: '31A52130'\n\nBehavior\n--------\n\nStarting in MongoDB 8.0, add query settings for query shapes instead of\n:ref:`index filters <index-filters>` for collections. Index filters are\ndeprecated starting in MongoDB 8.0. Query settings have more\nfunctionality than index filters, and index filters aren't persistent\nafter cluster shutdown.\n\nQuery settings allow you to use an index for all executions of a query\nshape in a cluster. Also, to prevent an operation from causing excessive\ncluster workload, you can reject all operations associated with a query\nshape using an operation rejection filter. \n\nThe :term:`query optimizer` uses the query settings as an additional\ninput during query planning. The query settings affect the plan selected\nto run a query that has a matching query shape.\n\n.. _query-shape-get-started:\n\nGet Started\n-----------\n\n- To add query settings for a query shape, use\n  :dbcommand:`setQuerySettings`.\n- To delete query settings, use :dbcommand:`removeQuerySettings`.\n- To retrieve query settings, use a :pipeline:`$querySettings` stage in\n  an aggregation pipeline.\n- To block a query shape, use an :ref:`operation rejection filter\n  <operation-rejection-filters>`.\n\nLearn More\n----------\n\n- :ref:`query-plans-query-optimization`\n- :ref:`Query shape statistics <queryStats-queryShape>`\n- :ref:`indexes`\n- :ref:`aggregation-pipeline`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/query-shapes.txt"
  },
  {
    "code": "      :emphasize-lines: 8-10\n\n      const client = new MongoClient(uri, {\n         autoEncryption: {\n            keyVaultNameSpace: \"<your keyvault namespace>\",\n            kmsProviders: \"<your kms provider>\",\n            extraOptions: {\n               cryptSharedLibPath: \"<path to {+shared-library+}>\"\n            },\n            encryptedFieldsMap: {\n               \"<databaseName.collectionName>\": { encryptedFieldsObject }\n            }\n         }\n\n         ...\n\n         await client.db(\"<database name>\").createEncryptedCollection(\"<collection name>\");\n      }\n\n   For more information on ``autoEncryption`` configuration options, see the\n   section on :ref:`qe-reference-mongo-client`.\n\n-  Pass the {+enc-schema+} ``encryptedFieldsObject`` to \n   ``createEncryptedCollection()``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/fundamentals/enable-qe.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        AWS\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_aws_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"aws\"``\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        AWS\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_aws_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"aws\"``\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        AWS\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_aws_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"aws\"``\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        AWS\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_aws_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"aws\"``\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-kms-credentials\n                     :end-before: end-aws-kms-credentials\n                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        AWS\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_aws_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"aws\"``\n      \n            .. include:: /includes/queryable-encryption/tutorials/automatic/aws/role-authentication.rst\n\n         .. step:: Add your CMK credentials\n\n            Create a variable containing your {+cmk-long+} credentials\n            with the following structure. Use the {+aws-arn-abbr+} and\n            Region you recorded in step 1.3 when you :ref:`created a CMK <qe-create-cmk-aws>`.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-aws-cmk-credentials\n                     :end-before: end-aws-cmk-credentials\n                     :language: csharp\n                     :dedent:\n\n         .. step:: Set automatic encryption options\n\n            .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n        \n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n                  Create an ``autoEncryptionOptions`` object with the following\n                  options:\n\n                  - The namespace of your {+key-vault-long+}\n                  - The ``kmsProviderCredentials`` object, which\n                    contains your AWS KMS credentials\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n                  Create an ``autoEncryptionOptions`` object with the following\n                  options:\n\n                  - The namespace of your {+key-vault-long+}\n                  - The ``kmsProviders`` object, which contains your AWS KMS credentials\n                  - The ``sharedLibraryPathOptions`` object, which\n                    contains the path to your {+shared-library+}\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :emphasize-lines: 5-9\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n                  Create an ``AutoEncryptionOpts`` object with the following\n                  options:\n\n                  - The ``kms_provider_credentials`` object, which\n                    contains your AWS KMS credentials\n                  - The namespace of your {+key-vault-long+}\n                  - The path to your {+shared-library+}\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n                  Create an ``AutoEncryptionSettings`` object with the following\n                  options:\n\n                  - The namespace of your {+key-vault-long+}\n                  - The ``kmsProviderCredentials`` object, which\n                    contains your AWS KMS credentials\n                  - The ``extraOptions`` object, which contains the path\n                    to your {+shared-library+}\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :emphasize-lines: 4-8\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n                  Create an ``AutoEncryption`` object with the following\n                  options:\n\n                  - The namespace of your {+key-vault-long+}\n                  - The ``kmsProviderCredentials`` object, which\n                    contains your AWS KMS credentials\n                  - The ``cryptSharedLibraryPath`` object, which\n                    contains the path to your {+shared-library+}\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :emphasize-lines: 5-8\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n                  Create an ``AutoEncryptionOptions`` object with the following\n                  options:\n\n                  - The namespace of your {+key-vault-long+}\n                  - The ``kmsProviderCredentials`` object, which\n                    contains your AWS KMS credentials\n                  - The ``extraOptions`` object, which contains the path\n                    to your {+shared-library+}\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-auto-encryption-options\n                     :end-before: end-auto-encryption-options\n                     :emphasize-lines: 7-10\n                     :language: csharp\n                     :dedent:\n\n         .. step:: Create a Client to Set Up an Encrypted Collection\n\n            To create a client used to encrypt and decrypt data in\n            your collection, instantiate a new ``MongoClient`` by using your\n            connection URI and your automatic encryption options.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: end-create-client\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: end-create-client\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: end-create-client\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: end-create-client\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: end-create-client\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n                  :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,\n                  you must add the following code to your application before\n                  instantiating a new ``MongoClient``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-create-client\n                     :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);\n                     :language: csharp\n                     :dedent:\n            \n                  Instantiate a new ``MongoClient`` by using your\n                  connection URI and automatic encryption options:\n                     \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                     :end-before: end-create-client\n                     :language: csharp\n                     :dedent:\n\n\n\n\n\n\n\n\n\n\n   .. tab:: {+azure-kv+}\n      :tabid: create-app-azure\n\n      .. procedure::\n\n         .. step:: Assign application variables\n\n            .. include:: /includes/queryable-encryption/tutorials/assign-app-variables.rst\n\n         .. _qe-tutorials-automatic-encryption-azure-kms-providers:\n\n         .. step:: Add your KMS credentials\n\n            Create a variable containing your KMS credentials with the\n            following structure. Use the {+azure-kv+} credentials you \n            recorded in the when you :ref:`registered your application with Azure <qe-register-cmk-azure>`.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        Azure\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_azure_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"azure\"``\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        Azure\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_azure_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"azure\"``\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        Azure\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_azure_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"azure\"``\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        Azure\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_azure_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"azure\"``\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-kms-credentials\n                     :end-before: end-azure-kms-credentials\n                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        Azure\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_azure_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"azure\"``\n\n         .. step:: Add your CMK credentials\n            \n            Create a variable containing your {+cmk-long+} credentials \n            with the following structure. Use the CMK details you \n            recorded when you :ref:`created a CMK <qe-create-cmk-azure>`.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-azure-cmk-credentials\n                     :end-before: end-azure-cmk-credentials\n                     :language: csharp\n                     :dedent:\n\n\n         .. step:: Create an encryption client\n\n               To create a client for encrypting and decrypting data in\n               encrypted collections, instantiate a new ``MongoClient``\n               using your connection URI and automatic encryption\n               options.\n\n               .. tabs-drivers::\n\n                  .. tab::\n                     :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: python\n                        :dedent:\n\n                  .. tab::\n                     :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: java\n                        :dedent:\n\n                  .. tab::\n                     :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: go\n                        :dedent:\n\n                  .. tab::\n                     :tabid: csharp\n\n                     :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,\n                     you must add the following code to your application before\n                     instantiating a new ``MongoClient``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);\n                        :language: csharp\n                        :dedent:\n            \n                     Instantiate a new ``MongoClient`` by using your\n                     connection URI and automatic encryption options:\n                     \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                        :end-before: end-create-client\n                        :language: csharp\n                        :dedent:\n\n\n\n\n\n\n\n\n\n\n   .. tab:: {+gcp-kms-abbr+}\n      :tabid: create-app-gcp\n\n      .. procedure::\n\n         .. step:: Assign application variables\n\n            .. include:: /includes/queryable-encryption/tutorials/assign-app-variables.rst\n\n\n         .. step:: Add your KMS credentials\n\n            Create a variable containing your KMS credentials with the\n            following structure. \n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        GCP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_gcp_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"gcp\"``\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        GCP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_gcp_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"gcp\"``\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        GCP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_gcp_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"gcp\"``\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        GCP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_gcp_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"gcp\"``\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-kms-credentials\n                     :end-before: end-gcp-kms-credentials\n                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        GCP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_gcp_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"gcp\"``\n\n\n         .. step:: Add your CMK credentials\n            \n            Create a variable containing your {+cmk-long+} credentials \n            with the following structure. Use the credentials you recorded\n            when you :ref:`created a CMK <qe-create-cmk-gcp>`.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-gcp-cmk-credentials\n                     :end-before: end-gcp-cmk-credentials\n                     :language: csharp\n                     :dedent:\n\n\n         .. step:: Create an encryption client\n\n               To create a client for encrypting and decrypting data in\n               encrypted collections, instantiate a new ``MongoClient``\n               using your connection URI and automatic encryption\n               options.\n\n               .. tabs-drivers::\n\n                  .. tab::\n                     :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: python\n                        :dedent:\n\n                  .. tab::\n                     :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: java\n                        :dedent:\n\n                  .. tab::\n                     :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: go\n                        :dedent:\n\n                  .. tab::\n                     :tabid: csharp\n\n                     :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,\n                     you must add the following code to your application before\n                     instantiating a new ``MongoClient``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);\n                        :language: csharp\n                        :dedent:\n            \n                     Instantiate a new ``MongoClient`` by using your\n                     connection URI and automatic encryption options:\n                     \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                        :end-before: end-create-client\n                        :language: csharp\n                        :dedent:\n\n\n\n\n\n\n\n\n\n\n   .. tab:: {+kmip-kms-no-hover+}\n      :tabid: create-app-kmip\n\n      .. procedure::\n\n         .. step:: Assign application variables\n\n            .. include:: /includes/queryable-encryption/tutorials/assign-app-variables.rst\n\n         .. step:: Add your KMS credentials\n\n            Create a variable containing the endpoint of your \n            {+kmip-kms-no-hover+} with the following structure: \n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        KMIP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_kmip_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"kmip\"``\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        KMIP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_kmip_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: javascript\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"kmip\"``\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        KMIP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_kmip_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: python\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"kmip\"``\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        KMIP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_kmip_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: java\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"kmip\"``\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-kms-credentials\n                     :end-before: end-kmip-kms-credentials\n                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n                     .. replacement:: kms-provider\n\n                        KMIP\n                     \n                     .. replacement:: kms-provider-name\n\n                        \"my_kmip_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :language: csharp\n                     :dedent:\n\n                  .. include:: /includes/queryable-encryption/tutorials/automatic/default-kms-note.rst\n\n                     .. replacement:: kms-provider-string\n\n                        ``\"kmip\"``\n\n\n         .. step:: Add your CMK credentials\n            \n            Create an empty object as shown in the following code example.\n            This prompts your {+kmip-kms+} to generate a new {+cmk-long+}.\n\n            .. tabs-drivers::\n\n               .. tab::\n                  :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: javascript\n                     :dedent:\n\n               .. tab::\n                  :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: python\n                     :dedent:\n\n               .. tab::\n                  :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: java\n                     :dedent:\n\n               .. tab::\n                  :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: go\n                     :dedent:\n\n               .. tab::\n                  :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                     :start-after: start-kmip-local-cmk-credentials\n                     :end-before: end-kmip-local-cmk-credentials\n                     :language: csharp\n                     :dedent: \n\n\n         .. step:: Create an encryption client\n\n               To create a client for encrypting and decrypting data in\n               encrypted collections, instantiate a new ``MongoClient``\n               using your connection URI and automatic encryption\n               options.\n\n               .. tabs-drivers::\n\n                  .. tab::\n                     :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: javascript\n                        :dedent:\n\n                  .. tab::\n                     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: python\n                        :dedent:\n\n                  .. tab::\n                     :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: java\n                        :dedent:\n\n                  .. tab::\n                     :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: end-create-client\n                        :language: go\n                        :dedent:\n\n                  .. tab::\n                     :tabid: csharp\n\n                     :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,\n                     you must add the following code to your application before\n                     instantiating a new ``MongoClient``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: start-create-client\n                        :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);\n                        :language: csharp\n                        :dedent:\n            \n                     Instantiate a new ``MongoClient`` by using your\n                     connection URI and automatic encryption options:\n                     \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                        :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                        :end-before: end-create-client\n                        :language: csharp\n                        :dedent:\n\nNext Steps\n----------\n\nAfter installing a driver and dependencies, creating a {+cmk-long+}, and\ncreating your application, see :ref:`Overview: Use {+qe+} \n<qe-overview-use-qe>` to encrypt and query data.\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-application.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: javascript\n                  :dedent:\n                  :emphasize-lines: 7\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: javascript\n                  :dedent:\n                  :emphasize-lines: 7\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: python\n                  :dedent:\n                  :emphasize-lines: 6\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: java\n                  :dedent:\n                  :emphasize-lines: 7-8\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: go\n                  :dedent:\n                  :emphasize-lines: 7-11\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: csharp\n                  :dedent:\n                  :emphasize-lines: 11\n   \n      #. Specify Fields for Range Queries\n\n         To enable range queries on a field, add the field to the\n         {+enc-schema+} with a ``queryType`` of ``\"range\"``. The following\n         example adds the ``billAmount`` field to the {+enc-schema+} created in the\n         preceding step and enables range queries on it:\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: javascript\n                  :dedent:\n                  :emphasize-lines: 13-23\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: javascript\n                  :dedent:\n                  :emphasize-lines: 13-23\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: python\n                  :dedent:\n                  :emphasize-lines: 15-21\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: java\n                  :dedent:\n                  :emphasize-lines: 13-24\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: go\n                  :dedent:\n                  :emphasize-lines: 18-32\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "                  :start-after: start-enable-range\n                  :end-before: end-enable-range\n                  :language: csharp\n                  :dedent:\n                  :emphasize-lines: 19-33\n\n      For extended versions of these steps, see :ref:`Create an\n      {+enc-schema-title+} <qe-create-encryption-schema>`.\n\n   .. step:: Instantiate ``ClientEncryption`` to access the API for the encryption helper methods\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-client-encryption\n               :end-before: end-client-encryption\n               :language: csharp\n               :dedent:\n\n   .. step:: Create the collection\n\n      .. include:: /includes/queryable-encryption/qe-explicitly-create-collection.rst\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n            Create your encrypted collection by using the encryption\n            helper method accessed through the ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n            .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n            Create your encrypted collection by using the encryption\n            helper method accessed through the ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: javascript\n               :dedent:\n\n            .. tip:: Database vs. Database Name\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*.\n\n         .. tab::\n            :tabid: python\n\n            Create your encrypted collection by using the encryption\n            helper method accessed through the ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: python\n               :dedent:\n\n            .. tip:: Database vs. Database Name\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n         .. tab::\n            :tabid: java-sync\n\n            Create your encrypted collection by using the encryption\n            helper method accessed through the ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: java\n               :dedent:\n\n            .. tip:: Database vs. Database Name\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n         .. tab::\n            :tabid: go\n\n            The Golang version of this tutorial uses data models to\n            represent the document structure. Add the following\n            structs to your project to represent the data in your\n            collection:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-patient-document\n               :end-before: end-patient-document\n               :language: go\n               :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-patient-record\n               :end-before: end-patient-record\n               :language: go\n               :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-payment-info\n               :end-before: end-payment-info\n               :language: go\n               :dedent:\n\n            After you've added these classes, create your encrypted\n            collection by using the encryption helper method accessed\n            through the ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: go\n               :dedent:\n\n            .. tip:: Database vs. Database Name\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n         .. tab::\n            :tabid: csharp\n\n            The C# version of this tutorial uses separate classes as data models\n            to represent the document structure.\n            Add the following ``Patient``, ``PatientRecord``, and ``PatientBilling``\n            classes to your project:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-patient\n               :end-before: end-patient\n               :language: csharp\n               :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-patient-record\n               :end-before: end-patient-record\n               :language: csharp\n               :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-patient-billing\n               :end-before: end-patient-billing\n               :language: csharp\n               :dedent:\n\n            After you've added these classes, create your encrypted collection by\n            using the encryption helper method accessed through the\n            ``ClientEncryption`` class.\n            This method automatically generates data encryption keys for your\n            encrypted fields and creates the encrypted collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-create-encrypted-collection\n               :end-before: end-create-encrypted-collection\n               :language: csharp\n               :dedent:\n\n            .. tip:: Database vs. Database Name\n\n               The method that creates the collection requires a reference\n               to a database *object* rather than the database *name*. \n         \n      For additional information, see :ref:`Enable {+qe+} when Creating a\n      Collection <qe-fundamentals-enable-qe>`.\n               \n   .. step:: Insert a Document with Encrypted Fields\n\n      .. _qe-aws-insert:\n      .. _qe-azure-insert:\n      .. _qe-gcp-insert:\n      .. _qe-kmip-insert:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 16\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 18\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 16\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n            This tutorial uses POJOs as data models\n            to represent the document structure. To set up your application to\n            use POJOs, add the following code:\n            \n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-setup-application-pojo\n               :end-before: end-setup-application-pojo\n               :language: java\n               :dedent:\n\n            To learn more about Java POJOs, see the `Plain Old Java Object\n            wikipedia article <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__.\n            \n            This tutorial uses the following POJOs:\n            \n            - ``Patient``\n            - ``PatientRecord``\n            - ``PatientBilling``\n            \n            You can view these classes in the `models package of the complete Java application\n            <{+sample-app-url-qe+}/java/src/main/java/com/mongodb/tutorials/qe/models>`__.\n\n            Add these POJO classes to your application. Then, create an instance\n            of a ``Patient`` that describes a patient's personal information. Use\n            the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 9\n               :language: java\n               :dedent: \n\n         .. tab::\n            :tabid: go\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 16\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 20\n               :language: csharp\n               :dedent:\n\nNext Steps\n----------\n\nAfter creating a {+qe+}-enabled collection, you can :ref:`query the\nencrypted fields <qe-query-encrypted-document>`.\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encrypted-collection.txt"
  },
  {
    "code": "            :emphasize-lines: 4, 5\n\n            const encryptedFieldsObject = {\n               fields: [\n                  {\n                     path: \"myDocumentField\",\n                     bsonType: \"int\"\n                  }\n               ]\n            }\n\n         .. important::\n\n            You can specify any field for encryption except the\n            ``_id`` field.\n\n      #. If you are using :ref:`{+manual-enc+}\n         <qe-fundamentals-manual-encryption>`, add a ``keyId`` field\n         with the {+dek-abbr+} ID:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "            :emphasize-lines: 4\n\n            {\n               path: \"myDocumentField\",\n               bsonType: \"int\",\n               keyId: \"<unique data encryption key>\"\n            }\n\n         .. tip::\n         \n            With Automatic Encryption, MongoDB creates encryption keys for\n            each field. You configure ``AutoEncryptionSettings`` on the\n            client, then use the ``createEncryptedCollection`` helper method\n            to create your collections.\n\n   .. step:: Enable equality queries on desired fields.\n      \n      This enables querying with the :query:`$eq`, :query:`$ne`, :query:`$in`, \n      and :query:`$nin` operators.\n\n      .. _qe-enable-queries:\n\n      Add the ``queries`` object and set ``queryType`` to ``\"equality\"``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "         :emphasize-lines: 4\n\n         {\n            path: \"myDocumentField\",\n            bsonType: \"int\",\n            queries: { queryType: \"equality\" }\n         }\n\n   .. step:: Enable range queries on desired fields.\n      \n      This enables querying with the :query:`$lt`, :query:`$lte`, :query:`$gt`, and :query:`$gte` operators.\n\n      For details on how the following options affect security and performance, see :ref:`qe-field-configuration`.\n\n      a. Add the ``queries`` object and set ``queryType`` to ``\"range\"``:\n            \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "            :emphasize-lines: 4\n\n            {\n               path: \"myDocumentRangeField\",\n               bsonType: \"int\",\n               queries: { queryType: \"range\" }\n            }\n      \n      #. Set the following fields:\n      \n         .. list-table::\n            :header-rows: 1\n            :widths: 20 30 50\n\n            * - Field\n              - Type\n              - Description\n            \n            * - :ref:`min and max <qe-field-min-max>`\n              - Same as field ``bsonType``\n              - Required if ``bsonType`` is ``decimal`` or\n                ``double``. Optional but highly recommended if it is ``int``,\n                ``long``, or ``date``. Defaults to the minimum and maximum\n                values of the ``bsonType``.\n                \n                When possible, specifying bounds on a query improves \n                performance. If querying values outside of these inclusive \n                bounds, MongoDB returns an error.\n         \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "            :emphasize-lines: 5-6\n\n            {\n               path: \"myDocumentRangeField\",\n               bsonType: \"int\",\n               queries: { queryType: \"range\",\n                          min: 0,\n                          max: 1200\n               }\n            }\n\nExample\n-------\n\nThis example shows how to create an {+enc-schema+} for hospital data.\n\nConsider the following document that contains personally identifiable information\n(PII), credit card information, and sensitive medical information:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "   :emphasize-lines: 6, 11\n\n   const encryptedFieldsObject = {\n      fields: [\n         {\n            path: \"patientId\",\n            bsonType: \"int\",\n            queries: { queryType: \"equality\" }\n         },\n         {\n            path: \"patientInfo.ssn\",\n            bsonType: \"string\",\n            queries: { queryType: \"equality\" }\n         },\n         {\n            path: \"medications\",\n            bsonType: \"array\"\n         },\n         {\n            path: \"patientInfo.billing\",\n            bsonType: \"object\"\n         },\n      ]\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-create-encryption-schema.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: csharp\n               :dedent:\n\n   .. step:: Query an Encrypted Field with Range\n   \n      If you enabled range queries on an encrypted field, you can retrieve\n      documents where the value of that field is within the range that you specify.\n      \n      The following example performs a range query on an\n      encrypted field and prints the decrypted data:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-query-range\n               :end-before: end-query-range\n               :language: csharp\n               :dedent:\n\n      Query Result\n      ~~~~~~~~~~~~\n\n      The output of the preceding code examples should look similar to the\n      following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "         :language: json\n         :copyable: false\n         :dedent:\n\n      .. include:: /includes/queryable-encryption/safe-content-warning.rst\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/qe-retrieve-encrypted-document.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n            .. include:: /includes/qe-tutorials/qe-quick-start.rst\n\n            You can declare these variables by using the following code:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n            - **kms_provider_name** - The KMS you're using to store your {+cmk-long+}.\n              Set this variable to ``\"local\"`` for this tutorial.\n            - **uri** - Your MongoDB deployment connection URI. Set your connection\n              URI in the ``MONGODB_URI`` environment variable or replace the value\n              directly.\n            - **key_vault_database_name** - The database in MongoDB where your data\n              encryption keys (DEKs) will be stored. Set this variable\n              to ``\"encryption\"``.\n            - **key_vault_collection_name** - The collection in MongoDB where your DEKs\n              will be stored. Set this variable to ``\"__keyVault\"``, which is the \n              convention to help prevent mistaking it for a user collection.\n            - **key_vault_namespace** - The namespace in MongoDB where your DEKs will\n              be stored. Set this variable to the values of the ``key_vault_database_name``\n              and ``key_vault_collection_name`` variables, separated by a period.\n            - **encrypted_database_name** - The database in MongoDB where your encrypted\n              data will be stored. Set this variable to ``\"medicalRecords\"``.\n            - **encrypted_collection_name** - The collection in MongoDB where your encrypted\n              data will be stored. Set this variable to ``\"patients\"``.\n\n            You can declare these variables by using the following code:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n            .. include:: /includes/qe-tutorials/qe-quick-start.rst\n\n            You can declare these variables by using the following code:\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n            .. include:: /includes/qe-tutorials/qe-quick-start.rst\n\n            You can declare these variables by using the following code:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.\n              Set this value to ``\"local\"`` for this tutorial.\n            - **keyVaultDatabaseName** - The database in MongoDB where your data\n              encryption keys (DEKs) will be stored. Set the value of ``keyVaultDatabaseName``\n              to ``\"encryption\"``.\n            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs\n              will be stored. Set this variable to ``\"__keyVault\"``, which is the \n              convention to help prevent mistaking it for a user collection.\n            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will\n              be stored. Set ``keyVaultNamespace`` to a new ``CollectionNamespace`` object whose name\n              is the values of the ``keyVaultDatabaseName`` and ``keyVaultCollectionName`` variables,\n              separated by a period.\n            - **encryptedDatabaseName** - The database in MongoDB where your encrypted\n              data will be stored. Set the value of ``encryptedDatabaseName`` to ``\"medicalRecords\"``.\n            - **encryptedCollectionName** - The collection in MongoDB where your encrypted\n              data will be stored. Set the value of ``encryptedCollectionName`` to ``\"patients\"``.\n            - **uri** - Your MongoDB deployment connection URI. Set your connection\n              URI in the ``appsettings.json`` file or replace the value\n              directly.\n\n            You can declare these variables by using the following code:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-variables\n               :end-before: end-setup-application-variables\n               :language: csharp\n               :dedent:\n\n      .. important:: {+key-vault-long-title+} Namespace Permissions\n\n         .. include:: /includes/note-key-vault-permissions\n\n      .. include:: /includes/queryable-encryption/env-variables.rst\n\n   .. step:: Create your Encrypted Collection\n\n      a. Create a {+cmk-long+}\n\n         .. _fle-create-a-master-key:\n         .. _qe-quick-start-create-master-key:\n\n         You must create a {+cmk-long+} ({+cmk-abbr+}) to perform {+qe+}.\n\n         Create a 96-byte {+cmk-long+} and save it to your filesystem as the\n         file ``customer-master-key.txt``:\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-generate-local-key\n                  :end-before: end-generate-local-key\n                  :language: csharp\n                  :dedent:\n\n         .. include:: /includes/queryable-encryption/qe-warning-local-keys.rst\n\n         .. include:: /includes/in-use-encryption/cmk-bash.rst\n\n      #. Retrieve the {+cmk-long+} and Specify KMS Provider Settings\n\n         .. _qe-field-level-encryption-data-key-create:\n         .. _field-level-encryption-data-key-create:\n\n         Retrieve the contents of the {+cmk-long+} file that you generated\n         in the :ref:`Create a {+cmk-long+} <qe-quick-start-create-master-key>` step of this guide.\n\n         Use the {+cmk-abbr+} value in your KMS provider settings. The\n         client uses these settings to discover the {+cmk-abbr+}. Set the\n         provider name to ``local`` to indicate that you are using a\n         Local Key Provider.\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :emphasize-lines: 10-14\n                  :language: javascript\n                  :dedent:\n\n               .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :emphasize-lines: 10-14\n                  :language: javascript\n                  :dedent:\n\n               .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :language: python\n                  :emphasize-lines: 6-10\n                  :dedent:\n\n               .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :language: java\n                  :emphasize-lines: 9-13\n                  :dedent:\n\n               .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :language: go\n                  :emphasize-lines: 8\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-get-local-key\n                  :end-before: end-get-local-key\n                  :language: csharp\n                  :emphasize-lines: 13-18\n                  :dedent:\n\n               .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst\n\n      #. Set Your Automatic Encryption Options\n\n         .. _qe-quick-start-shared-lib:\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n               Create an ``autoEncryptionOptions`` object that contains the following\n               options:\n\n               - The namespace of your {+key-vault-long+}\n               - The ``kmsProviderCredentials`` object, defined in the previous step\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n               Create an ``autoEncryptionOptions`` object that contains the following\n               options:\n\n               - The namespace of your {+key-vault-long+}\n               - The ``kmsProviders`` object, defined in the previous step\n               - The ``sharedLibraryPathOptions`` object, which contains the path to\n                  your {+shared-library+}\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :emphasize-lines: 5-9\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n               Create an ``AutoEncryptionOpts`` object that contains the following\n               options:\n\n               - The ``kms_provider_credentials`` object, defined in the previous step\n               - The namespace of your {+key-vault-long+}\n               - The path to your {+shared-library+}\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n               Create an ``AutoEncryptionSettings`` object that contains the following\n               options:\n\n               - The namespace of your {+key-vault-long+}\n               - The ``kmsProviderCredentials`` object, defined in the previous step\n               - The ``extraOptions`` object, which contains the path to\n                  your {+shared-library+}\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :emphasize-lines: 4-8\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n               Create an ``AutoEncryption`` object that contains the following\n               options:\n\n               - The namespace of your {+key-vault-long+}\n               - The ``kmsProviderCredentials`` object, defined in the previous step\n               - The ``cryptSharedLibraryPath`` object, which contains the path to\n                  your {+shared-library+}\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :emphasize-lines: 5-8\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n               Create an ``AutoEncryptionOptions`` object that contains the following\n               options:\n\n               - The namespace of your {+key-vault-long+}\n               - The ``kmsProviderCredentials`` object, defined in the previous step\n               - The ``extraOptions`` object, which contains the path to\n                  your {+shared-library+}\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-auto-encryption-options\n                  :end-before: end-auto-encryption-options\n                  :emphasize-lines: 6-9\n                  :language: csharp\n                  :dedent:\n\n         .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n\n      #. Create a Client to Set Up an Encrypted Collection\n\n         To create a client used to encrypt and decrypt data in\n         your collection, instantiate a new ``MongoClient`` by using your\n         connection URI and your automatic encryption options.\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: end-create-client\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: end-create-client\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: end-create-client\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: end-create-client\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: end-create-client\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n               :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,\n               you must add the following code to your application before\n               instantiating a new ``MongoClient``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-client\n                  :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);\n                  :language: csharp\n                  :dedent:\n         \n               Instantiate a new ``MongoClient`` by using your\n               connection URI and automatic encryption options:\n                  \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-create-client\n                  :language: csharp\n                  :dedent:\n\n      #. Specify Fields to Encrypt\n\n         .. _qe-quickstart-encrypted-fields-map:\n\n         To encrypt a field, add it to the {+enc-schema+}.\n         To enable queries on a field, add the \"queries\"\n         property. Create the {+enc-schema+} as follows:\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-encrypted-fields-map\n                  :end-before: end-encrypted-fields-map\n                  :language: csharp\n                  :dedent:\n\n         .. note::\n\n            In the previous code sample, both the \"ssn\" and\n            \"billing\" fields are encrypted, but only the \"ssn\"\n            field can be queried.\n\n      #. Create the Collection\n\n         Instantiate ``ClientEncryption`` to access the API for the\n         encryption helper methods.\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-client-encryption\n                  :end-before: end-client-encryption\n                  :language: csharp\n                  :dedent:\n\n         Because you are using a local {+cmk-long+}, you don't need to\n         provide {+cmk-long+} credentials. Create a variable\n         containing an empty object to use in place of credentials when you\n         create your encrypted collection.\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: python\n                  :dedent:\n\n            .. tab::\n               :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: java\n                  :dedent:\n\n            .. tab::\n               :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: go\n                  :dedent:\n\n            .. tab::\n               :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-kmip-local-cmk-credentials\n                  :end-before: end-kmip-local-cmk-credentials\n                  :language: csharp\n                  :dedent:\n\n         .. tabs-drivers::\n\n            .. tab::\n               :tabid: shell\n\n               Create your encrypted collection by using the encryption\n               helper method accessed through the ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: javascript\n                  :dedent:\n\n            .. tab::\n               :tabid: nodejs\n\n               Create your encrypted collection by using the encryption\n               helper method accessed through the ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n               .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: javascript\n                  :dedent:\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n            .. tab::\n               :tabid: python\n\n               Create your encrypted collection by using the encryption\n               helper method accessed through the ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: python\n                  :dedent:\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n            .. tab::\n               :tabid: java-sync\n\n               Create your encrypted collection by using the encryption\n               helper method accessed through the ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: java\n                  :dedent:\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n            .. tab::\n               :tabid: go\n\n               The Golang version of this tutorial uses data models to\n               represent the document structure. Add the following\n               structs to your project to represent the data in your\n               collection:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-patient-document\n                  :end-before: end-patient-document\n                  :language: go\n                  :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-patient-record\n                  :end-before: end-patient-record\n                  :language: go\n                  :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-payment-info\n                  :end-before: end-payment-info\n                  :language: go\n                  :dedent:\n\n               After you've added these classes, create your encrypted\n               collection by using the encryption helper method accessed\n               through the ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: go\n                  :dedent:\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n            .. tab::\n               :tabid: csharp\n\n               The C# version of this tutorial uses separate classes as data models\n               to represent the document structure.\n               Add the following ``Patient``, ``PatientRecord``, and ``PatientBilling``\n               classes to your project:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-patient\n                  :end-before: end-patient\n                  :language: csharp\n                  :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-patient-record\n                  :end-before: end-patient-record\n                  :language: csharp\n                  :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-patient-billing\n                  :end-before: end-patient-billing\n                  :language: csharp\n                  :dedent:\n\n               After you've added these classes, create your encrypted collection by\n               using the encryption helper method accessed through the\n               ``ClientEncryption`` class.\n               This method automatically generates data encryption keys for your\n               encrypted fields and creates the encrypted collection:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "                  :start-after: start-create-encrypted-collection\n                  :end-before: end-create-encrypted-collection\n                  :language: csharp\n                  :dedent:\n\n               The method that creates the encrypted collection requires a reference\n               to a database *object* rather than the database *name*. You can\n               obtain this reference by using a method on your client object.\n\n   .. step:: Insert a Document with Encrypted Fields\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 15\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 17\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 15\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n            This tutorial uses POJOs as data models\n            to represent the document structure. To set up your application to\n            use POJOs, add the following code:\n            \n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-setup-application-pojo\n               :end-before: end-setup-application-pojo\n               :language: java\n               :dedent:\n\n            To learn more about Java POJOs, see the `Plain Old Java Object\n            wikipedia article <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__.\n            \n            This tutorial uses the following POJOs:\n            \n            - ``Patient``\n            - ``PatientRecord``\n            - ``PatientBilling``\n            \n            You can view these classes in the `models package of the complete Java application\n            <{+sample-app-url-qe+}/java/src/main/java/com/mongodb/tutorials/qe/models>`__.\n\n            Add these POJO classes to your application. Then, create an instance\n            of a ``Patient`` that describes a patient's personal information. Use\n            the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 8\n               :language: java\n               :dedent: \n\n         .. tab::\n            :tabid: go\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 15\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n            Create a sample document that describes a patient's personal information.\n            Use the encrypted client to insert it into the ``patients`` collection,\n            as shown in the following example:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-insert-document\n               :end-before: end-insert-document\n               :emphasize-lines: 20\n               :language: csharp\n               :dedent:\n\n   .. step:: Query on an Encrypted Field\n\n      The following code sample executes a find query on an encrypted field and\n      prints the decrypted data:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "               :start-after: start-find-document\n               :end-before: end-find-document\n               :language: csharp\n               :dedent:\n\n      The output of the preceding code sample should look similar to the\n      following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "         :language: json\n         :copyable: false\n         :dedent:\n\n      .. include:: /includes/queryable-encryption/safe-content-warning.rst\n\nLearn More\n----------\n\nTo view a tutorial on production-ready {+qe+} with a remote\nKMS, see :ref:`<qe-tutorial-automatic-encryption>`.\n\nTo learn how {+qe+} works, see\n:ref:`<qe-fundamentals>`.\n\nTo learn more about the topics mentioned in this guide, see the\nfollowing links:\n\n- Learn more about {+qe+} components on the :ref:`Reference <qe-reference>` page.\n- Learn how {+cmk-long+}s and {+dek-long+}s work on the :ref:`<qe-reference-keys-key-vaults>` page.\n- See how KMS Providers manage your {+qe+} keys on the :ref:`<qe-fundamentals-kms-providers>` page.\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/quick-start.txt"
  },
  {
    "code": "          :copyable: false\n\n          $addFields : {\n            \"valueWithUnknownEncryption\" : {\n              $cond : {\n                if : { \"$encryptedField\" : \"value\" },\n                then : \"$encryptedField\",\n                else: \"unencryptedValue\"\n              }\n            }\n          },\n          {\n            $match : {\n              \"valueWithUnknownEncryption\" : \"someNewValue\"\n            }\n          }\n\n   * - :expression:`$eq`\n\n       :expression:`$ne`\n     - The expression creates a new field that references an\n       encrypted field *and* operates on that new field in the same\n       expression.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $eq : [\n              {\"newField\" : \"$encryptedField\"},\n              {\"newField\" : \"value\"\n            ]\n          }\n\n   * - :expression:`$eq`\n\n       :expression:`$ne`\n     - The expression references the prefix of an encrypted field\n       within the comparison expression.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $eq : [ \"$prefixOfEncryptedField\" , \"value\"] }\n\n   * - :expression:`$eq`\n\n       :expression:`$ne`\n     - The result of the expression is compared to an encrypted field.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $eq : [\n                \"$encryptedField\" ,\n                { $ne : [ \"field\", \"value\" ] }\n            ]\n          }\n\n   * - :expression:`$let`\n     - The expression binds a variable to an encrypted\n       field or attempts to rebind :variable:`$$CURRENT <CURRENT>`.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $let: {\n              \"vars\" : {\n                \"newVariable\" : \"$encryptedField\"\n              }\n            }\n          }\n\n   * - :expression:`$in`\n     - The first argument to the expression *is* an encrypted field,\n       *and*\n\n       - The second argument to the expression is *not* an array literal\n\n         *-OR-*\n\n       - The second argument to the expression is an encrypted field.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $in : [\n              \"$encryptedField\" ,\n              \"$otherEncryptedField\"\n            ]\n          }\n\nUnsupported Field Types\n-----------------------\n\nDrivers configured for automatic encryption do *not* support any\nread or write operation that requires encrypting the following value\ntypes:\n\n- :bsontype:`MaxKey`\n- :bsontype:`MinKey`\n- ``null``\n- ``undefined``\n\n{+qe+} does not adequately hide the type information for these values.\n\n{+qe+} does not support automatic encryption on fields within an array of \ndocuments.\n\n{+qe+} does not support read or write operations on an\nencrypted field where the operation compares the encrypted field to the\nfollowing value types:\n\n- ``array``\n- ``decimal128``\n- ``double``\n- ``object``\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/queryable-encryption/reference/supported-operations.txt"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Causal Consistency Example 1\n            :end-before:  End Causal Consistency Example 1\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: java\n             :dedent: 8\n             :start-after: Start Causal Consistency Example 1\n             :end-before:  End Causal Consistency Example 1\n\n     - id: php\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Causal Consistency Example 1\n            :end-before:  End Causal Consistency Example 1\n\n     - id: csharp\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Causal Consistency Example 1\n            :end-before:  End Causal Consistency Example 1\n\n     - id: c\n       content: |\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: c\n            :dedent: 2\n            :start-after: Start Causal Consistency Example 1\n            :end-before:  End Causal Consistency Example 1\n\n     - id: motor\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: python\n            :dedent: 6\n            :start-after: Start Causal Consistency Example 1\n            :end-before:  End Causal Consistency Example 1\n\n     - id: swift-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: swift\n             :dedent: 4\n             :start-after: Start Causal Consistency Example 1\n             :end-before:  End Causal Consistency Example 1\n\n     - id: swift-async\n       content: |\n       \n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: swift\n             :dedent: 4\n             :start-after: Start Causal Consistency Example 1\n             :end-before:  End Causal Consistency Example 1\n                \n\nIf another client needs to read all current ``sku`` values, you can\nadvance the cluster time and the operation time to that of the other\nsession to ensure that this client is causally consistent with the\nother session and read after the two writes:\n\n.. tabs-drivers::\n\n   tabs:\n     - id: python\n       content: |\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Causal Consistency Example 2\n            :end-before:  End Causal Consistency Example 2\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: java\n             :dedent: 8\n             :start-after: Start Causal Consistency Example 2\n             :end-before:  End Causal Consistency Example 2\n\n     - id: php\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Causal Consistency Example 2\n            :end-before:  End Causal Consistency Example 2\n\n     - id: csharp\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: csharp\n            :dedent: 16\n            :start-after: Start Causal Consistency Example 2\n            :end-before:  End Causal Consistency Example 2\n\n     - id: c\n       content: |\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: c\n            :dedent: 2\n            :start-after: Start Causal Consistency Example 2\n            :end-before:  End Causal Consistency Example 2\n\n     - id: motor\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "            :language: python\n            :dedent: 6\n            :start-after: Start Causal Consistency Example 2\n            :end-before:  End Causal Consistency Example 2\n\n     - id: swift-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: swift\n             :dedent: 4\n             :start-after: Start Causal Consistency Example 2\n             :end-before:  End Causal Consistency Example 2\n\n     - id: swift-async\n       content: |\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "             :language: swift\n             :dedent: 4\n             :start-after: Start Causal Consistency Example 2\n             :end-before:  End Causal Consistency Example 2\n\n.. _causal-consistency-limitations:\n\nLimitations\n~~~~~~~~~~~\n\nThe following operations that build in-memory structures are not\ncausally consistent:\n\n.. list-table::\n   :header-rows: 1\n\n   * - Operation\n     - Notes\n\n   * - :dbcommand:`collStats`\n\n     - \n\n   * - :pipeline:`$collStats` with ``latencyStats`` option.\n\n     - \n\n   * - :pipeline:`$currentOp`\n\n     - Returns an error if the operation is associated with a causally\n       consistent client session.\n\n   * - :dbcommand:`createIndexes`\n\n     - \n\n   * - :dbcommand:`dbHash`\n\n     - \n\n\n   * - :dbcommand:`dbStats`\n\n     - \n\n   * - :dbcommand:`getMore`\n\n     - Returns an error if the operation is associated with a causally\n       consistent client session.\n\n   * - :pipeline:`$indexStats`\n\n     - \n\n   * - :dbcommand:`mapReduce`\n\n     - \n\n   * - :dbcommand:`ping`\n\n     - Returns an error if the operation is associated with a causally\n       consistent client session.\n\n   * - :dbcommand:`serverStatus`\n\n     - Returns an error if the operation is associated with a causally\n       consistent client session.\n\n\n   * - :dbcommand:`validate`\n\n     - \n\n.. toctree::\n   :hidden:\n   :titlesonly:\n\n   Causal Consistency </core/causal-consistency-read-write-concerns>\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-isolation-consistency-recency.txt"
  },
  {
    "code": "   :copyable: false\n   \n   { \"<tag1>\": \"<string1>\", \"<tag2>\": \"<string2>\",... }\n\nThen, you can include a tag set list in the read preference to target\ntagged members. A tag set list is an array of tag sets, where each \ntag set contains one or more tag/value pairs.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { \"<tag1>\": \"<string1>\", \"<tag2>\": \"<string2>\",... }, ... ]\n\nTo find replica set members, MongoDB tries each document in succession\nuntil a match is found.  See :ref:`read-pref-order-matching` for details.\n\nFor example, if a secondary member has the following\n:rsconf:`members[n].tags`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "   :copyable: false\n   \n   [ { \"region\": \"South\", \"datacenter\": \"A\" }, { } ]     // Find members with both tag values. If none are found, read from any eligible member.\n   [ { \"region\": \"South\" }, { \"datacenter\": \"A\" }, { } ] // Find members with the specified region tag. Only if not found, then find members with the specified datacenter tag. If none are found, read from any eligible member.\n   [ { \"datacenter\": \"A\" }, { \"region\": \"South\" }, { } ] // Find members with the specified datacenter tag. Only if not found, then find members with the specified region tag. If none are found, read from any eligible member.\n   [ { \"region\": \"South\" }, { } ]                        // Find members with the specified region tag value. If none are found, read from any eligible member.\n   [ { \"datacenter\": \"A\" }, { } ]                        // Find members with the specified datacenter tag value. If none are found, read from any eligible member.\n   [ { } ]                                               // Find any eligible member.\n\n.. _read-pref-order-matching:\n.. _read-preference-tag-order-matching:\n\nOrder of Tag Matching\n---------------------\n\nIf the tag set list contains multiple documents, MongoDB tries each \ndocument in succession until a match is found. Once a match is found,\nthat tag set is used to find all eligible matching members, and the \nremaining tag sets are ignored. If no members match any of the tag \nsets, the read operation returns with an error.\n\n.. tip::\n\n   To avoid an error if no members match any of the tag specifications,\n   you can add an empty document ``{ }`` as the last element of the tag\n   set list to read from any eligible member.\n\nFor example, consider the following tag set list with three tag\nsets:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { \"region\": \"South\", \"datacenter\": \"A\" },  { \"rack\": \"rack-1\" }, { } ]  \n\nFirst, MongoDB tries to find members tagged with both ``\"region\":\n\"South\"`` and ``\"datacenter\": \"A\"``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"region\": \"South\", \"datacenter\": \"A\" }\n      \n\n- If a member is found, the remaining tag sets are not considered. \n  Instead, MongoDB uses this tag set to find all eligible members.\n\n- Else, MongoDB tries to find members with the tags specified in the\n  second document\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"rack\": \"rack-1\" }\n\n  - If a member is found tagged, the remaining tag set is not considered.\n    Instead, MongoDB uses this tag set to find all eligible members.\n\n  - Else, the third document is considered. \n  \n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "       :copyable: false\n\n       { }\n\n    The empty document matches any eligible member.\n\nTag Set List and Read Preference Modes\n--------------------------------------\n\nTags are not compatible with mode :readmode:`primary`, and in general,\nonly apply when :ref:`selecting <replica-set-read-preference-behavior-member-selection>`\na :term:`secondary` member of a set for a read operation. However, the\n:readmode:`nearest` read mode, when combined with a tag set list, selects\nthe matching member with the lowest network latency. This member may be a\nprimary or secondary.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Mode\n     - Notes\n\n   * - :readmode:`primaryPreferred`\n     - Specified tag set list only applies if selecting eligible secondaries.\n\n   * - :readmode:`secondary`\n     - Specified tag set list always applies.\n\n   * - :readmode:`secondaryPreferred`\n     -  Specified tag set list only applies if selecting eligible secondaries.\n\n   * - :readmode:`nearest`\n\n     -  Specified tag set list applies whether selecting either primary or eligible secondaries.\n\nFor information on the interaction between the :ref:`modes\n<replica-set-read-preference-modes>` and tag set lists, refer to the\n:ref:`specific read preference mode documentation\n<replica-set-read-preference-modes>`.\n\nFor information on configuring tag set lists, see the\n:doc:`/tutorial/configure-replica-set-tag-sets` tutorial.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/read-preference-tags.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: Multiple arbiters are not allowed unless all nodes\n   were started with --setParameter 'allowMultipleArbiters=true'\n\nTo add multiple arbiters to a replica set using MongoDB 5.3 or later, start\neach node with the :parameter:`allowMultipleArbiters` parameter set to ``true``:\n\n.. include:: /includes/setParameter-allowMultipleArbiters.rst\n\nSecurity\n--------\n\nAuthentication\n~~~~~~~~~~~~~~\n\nWhen running with :setting:`~security.authorization`, arbiters exchange credentials with\nother members of the set to authenticate. MongoDB encrypts the\nauthentication process, and the MongoDB authentication exchange is\ncryptographically secure.\n\nBecause arbiters do not store data, they do not possess the internal table of user and role mappings\nused for authentication.  Thus, the only way to log on to an arbiter with authorization active is to\nuse the :ref:`localhost exception <localhost-exception>`.\n\n\nCommunication\n~~~~~~~~~~~~~\n\nThe only communication between arbiters and other set members are:\nvotes during elections, heartbeats, and configuration data. These\nexchanges are not encrypted.\n\n**However**, if your MongoDB deployment uses TLS/SSL, MongoDB will encrypt\n*all* communication between replica set members. See\n:doc:`/tutorial/configure-ssl` for more information.\n\nAs with all MongoDB components, run arbiters in trusted network\nenvironments.\n\nExample\n-------\n\n.. start-content-even-votes-example\n\nFor example, in the following replica set with 2 data-bearing members\n(the primary and a secondary), an arbiter allows the set to have an odd\nnumber of votes to break a tie:\n\n.. include:: /images/replica-set-primary-with-secondary-and-arbiter.rst\n\n.. end-content-even-votes-example\n\n\n",
    "language": "text",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/replica-set-arbiter.txt"
  },
  {
    "code": "   :copyable: false\n   \n   removed.<timestamp>.bson   \n\nFor example, if data for the collection ``comments`` in the ``reporting`` \ndatabase rolled back:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/replica-set-rollbacks.txt"
  },
  {
    "code": "   :copyable: false\n\n   <dbpath>/rollback/20f74796-d5ea-42f5-8c95-f79b39bad190/removed.2020-02-19T04-57-11.0.bson\n\nwhere ``<dbpath>`` is the :binary:`~bin.mongod`'s :setting:`~storage.dbPath`.\n\n.. tip:: Collection Name\n   \n   To get the collection name, you can search for ``rollback file`` in the \n   MongoDB log. For example, if the log file is\n   ``/var/log/mongodb/mongod.log``, you can use ``grep`` to search for instances \n   of ``\"rollback file\"`` in the log:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/replica-set-rollbacks.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3\n\n         {\n            name: \"Alice\",\n            year: Int32( 2016 ),\n            major: \"History\",\n            gpa: Double(3.0),\n            address: {\n               city: \"NYC\",\n               street: \"33rd Street\"\n            }\n         }\n\n      To bypass the validation rules and insert the invalid document,\n      run the following ``insert`` command, which sets the\n      ``bypassDocumentValidation`` option to ``true``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/bypass-document-validation.txt"
  },
  {
    "code": "         :emphasize-lines: 15\n\n         db.runCommand( {\n            insert: \"students\",\n            documents: [\n               {\n                  name: \"Alice\",\n                  year: Int32( 2016 ),\n                  major: \"History\",\n                  gpa: Double(3.0),\n                  address: {\n                     city: \"NYC\",\n                     street: \"33rd Street\"\n                  }\n               }\n            ],\n            bypassDocumentValidation: true\n         } )\n\nResults\n-------\n\nTo confirm that the document was successfully inserted, query the\n``students`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/bypass-document-validation.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"62bcb4db3f7991ea4fc6830e\"),\n         name: 'Alice',\n         year: 2016,\n         major: 'History',\n         gpa: 3,\n         address: { city: 'NYC', street: '33rd Street' }\n      }\n   ]\n\nLearn More\n----------\n\n- :ref:`use-json-schema-query-conditions`\n\n- :ref:`schema-specify-validation-level`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/bypass-document-validation.txt"
  },
  {
    "code": "         :copyable: false\n\n         MongoServerError: Document failed validation\n         Additional information: {\n           failingDocumentId: ObjectId(\"6377cca4aac957f2b77ea955\"),\n           details: {\n             operatorName: '$jsonSchema',\n             schemaRulesNotSatisfied: [\n               {\n                 operatorName: 'properties',\n                 propertiesNotSatisfied: [\n                   {\n                     propertyName: 'email',\n                     description: \"must be a string and end with '@mongodb.com'\",\n                     details: [\n                       {\n                         operatorName: 'pattern',\n                         specifiedAs: { pattern: '@mongodb\\\\.com$' },\n                         reason: 'regular expression did not match',\n                         consideredValue: 'amanda@xyz.com'\n                       }\n                     ]\n                   }\n                 ]\n               },\n               {\n                 operatorName: 'required',\n                 specifiedAs: { required: [ 'phone' ] },\n                 missingProperties: [ 'phone' ]\n               }\n             ]\n           }\n         }\n\nOption 2: Allow Invalid Documents, but Record Them in the Log \n-------------------------------------------------------------\n\nThe following procedure shows how to create a schema validation that\nallows invalid documents, but records invalid documents in the MongoDB\nlog.\n\n.. procedure::\n\n   .. step:: Create a collection with ``validationAction: \"warn\"``.\n\n      Create a ``contacts2`` collection with a JSON schema validator that has\n      ``validationAction: \"warn\"``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/handle-invalid-documents.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            \"t\": {\n               \"$date\": \"2022-11-18T13:30:43.607-05:00\"\n            },\n            \"s\": \"W\",\n            \"c\": \"STORAGE\",\n            \"id\": 20294,\n            \"ctx\": \"conn2\",\n            \"msg\": \"Document would fail validation\",\n            \"attr\": {\n               \"namespace\": \"test.contacts2\",\n               \"document\": {\n                  \"_id\": {\n                     \"$oid\": \"6377cf53d59841355cac1cd0\"\n                  },\n                  \"name\": \"Amanda\",\n                  \"email\": \"amanda@xyz.com\"\n               },\n               \"errInfo\": {\n                  \"failingDocumentId\": {\n                     \"$oid\": \"6377cf53d59841355cac1cd0\"\n                  },\n                  \"details\": {\n                     \"operatorName\": \"$jsonSchema\",\n                     \"schemaRulesNotSatisfied\": [{\n                        \"operatorName\": \"properties\",\n                        \"propertiesNotSatisfied\": [{\n                           \"propertyName\": \"email\",\n                           \"description\": \"must be a string and end with '@mongodb.com'\",\n                           \"details\": [{\n                              \"operatorName\": \"pattern\",\n                              \"specifiedAs\": {\n                                 \"pattern\": \"@mongodb\\\\.com$\"\n                              },\n                              \"reason\": \"regular expression did not match\",\n                              \"consideredValue\": \"amanda@xyz.com\"\n                           }]\n                        }]\n                     }, {\n                        \"operatorName\": \"required\",\n                        \"specifiedAs\": {\n                           \"required\": [\"phone\"]\n                        },\n                        \"missingProperties\": [\"phone\"]\n                     }]\n                  }\n               }\n            }\n         }\n\nLearn More\n----------\n\n- :ref:`log-messages-ref`\n\n- :ref:`schema-specify-validation-level`\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/handle-invalid-documents.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   {\n     \"$jsonSchema\": {\n       \"required\": [ \"_id\", \"storeLocation\" ],\n       \"properties\": {\n         \"_id\": { \"bsonType\": \"objectId\" },\n         \"storeLocation\": { \"bsonType\": \"string\" }\n       },\n       \"additionalProperties\": false\n     }\n   }\n\nValidation for ``null`` Field Values\n------------------------------------\n\nYour application may be configured to set missing field values to\n``null``, instead of not including those fields in the object sent to\nthe collection. \n\nIf your schema validates data types for a field, to insert documents\nwith a ``null`` value for that field, you must explicitly allow ``null``\nas a valid BSON type.\n\nFor example, this schema validation does not allow documents where\n``storeLocation`` is ``null``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/json-schema-tips.txt"
  },
  {
    "code": "         :emphasize-lines: 7-10\n\n         db.createCollection(\"shipping\", {\n            validator: {\n               $jsonSchema: {\n                  bsonType: \"object\",\n                  title: \"Shipping Country Validation\",\n                  properties: {\n                     country: {\n                        enum: [ \"France\", \"United Kingdom\", \"United States\" ],\n                        description: \"Must be either France, United Kingdom, or United States\"\n                     }\n                  }\n               }\n            }\n         } )\n\n      The ``enum`` field in the ``country`` object only allows documents\n      where the ``country`` field is either ``France``, ``United\n      Kingdom``, or ``United States``.\n\n   .. step:: Confirm that the validation prevents invalid documents.\n\n      The following insert operation fails because ``country`` is\n      ``Germany``, which isn't in the list of allowed values.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/specify-allowed-field-values.txt"
  },
  {
    "code": "         :emphasize-lines: 4\n\n         db.shipping.insertOne( {\n            item: \"sweater\",\n            size: \"medium\",\n            country: \"Germany\"\n         } )\n\n      The operation returns this error:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/specify-allowed-field-values.txt"
  },
  {
    "code": "         :copyable: false\n\n         MongoServerError: Document failed validation\n         Additional information: {\n           failingDocumentId: ObjectId(\"630d1057931191850b40d0aa\"),\n           details: {\n             operatorName: '$jsonSchema',\n             title: 'Shipping Country Validation',\n             schemaRulesNotSatisfied: [\n               {\n                 operatorName: 'properties',\n                 propertiesNotSatisfied: [\n                   {\n                     propertyName: 'country',\n                     description: 'Must be either France, United Kingdom, or United States',\n                     details: [\n                       {\n                         operatorName: 'enum',\n                         specifiedAs: {\n                           enum: [ 'France', 'United Kingdom', 'United States' ]\n                         },\n                         reason: 'value was not found in enum',\n                         consideredValue: 'Germany'\n                       }\n                     ]\n                   }\n                 ]\n               }\n             ]\n           }\n         }\n\n   .. step:: Insert a valid document.\n    \n      The insert succeeds after you change the ``country`` field to one\n      of the allowed values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/specify-allowed-field-values.txt"
  },
  {
    "code": "         :emphasize-lines: 4\n\n         db.shipping.insertOne( {\n            item: \"sweater\",\n            size: \"medium\",\n            country: \"France\"\n         } )\n\n   .. step:: Query for the valid document.\n\n      To confirm that the document was successfully inserted, query the\n      ``shipping`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/specify-allowed-field-values.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n           {\n             _id: ObjectId(\"630d10d5931191850b40d0ab\"),\n             item: 'sweater',\n             size: 'medium',\n             country: 'France'\n           }\n         ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema/specify-allowed-field-values.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n            :emphasize-lines: 5\n\n            db.students.insertOne( {\n               name: \"Alice\",\n               year: Int32( 2019 ),\n               major: \"History\",\n               gpa: Int32(3),\n               address: {\n                  city: \"NYC\",\n                  street: \"33rd Street\"\n               }\n            } )\n\n         .. output::\n            :language: json\n\n            MongoServerError: Document failed validation\n\n            Additional information: {\n              failingDocumentId: ObjectId(\"630d093a931191850b40d0a9\"),\n              details: {\n                operatorName: '$jsonSchema',\n                title: 'Student Object Validation',\n                schemaRulesNotSatisfied: [\n                  {\n                    operatorName: 'properties',\n                    propertiesNotSatisfied: [\n                      {\n                        propertyName: 'gpa',\n                        description: \"'gpa' must be a double if the field exists\",\n                        details: [\n                          {\n                            operatorName: 'bsonType',\n                            specifiedAs: { bsonType: [ 'double' ] },\n                            reason: 'type did not match',\n                            consideredValue: 3,\n                            consideredType: 'int'\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            }\n\n      .. tip:: \n\n         By default, :binary:`mongosh` prints nested objects up to six\n         levels deep. To print all nested objects to their full\n         depth, set ``inspectDepth`` to ``Infinity``. \n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema.txt"
  },
  {
    "code": "            :copyable: true\n            \n            config.set(\"inspectDepth\", Infinity)\n\n   .. step:: Insert a valid document.\n    \n      If you change the ``gpa`` field value to a ``double`` type, the \n      insert operation succeeds. Run the following command to\n      insert the valid document:\n\n",
    "language": "shell",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema.txt"
  },
  {
    "code": "         :emphasize-lines: 5\n\n         db.students.insertOne( {\n            name: \"Alice\",\n            year: NumberInt(2019),\n            major: \"History\",\n            gpa: Double(3.0),\n            address: {\n               city: \"NYC\",\n               street: \"33rd Street\"\n            }\n         } )\n\n   .. step:: Query for the valid document.\n\n      To confirm that you've successfully inserted the document, run\n      the following command to query the ``students`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.students.find()\n\n         .. output:: \n            :language: json\n\n            [\n               {\n                  _id: ObjectId(\"62bb413014b92d148400f7a5\"),\n                  name: 'Alice',\n                  year: 2019,\n                  major: 'History',\n                  gpa: 3,\n                  address: { city: 'NYC', street: '33rd Street' }\n               }\n            ]\n\n      .. tip:: \n          \n         If you're connected to an Atlas deployment, you can also \n         :atlas:`view and filter for the document in the Atlas UI \n         </atlas-ui/documents/#view--filter--and-sort-documents>`.\n\nAdditional Information\n----------------------\n\nYou can combine JSON Schema validation with :ref:`query operator\nvalidation <schema-validation-query-expression>`.\n\n.. include:: /includes/schema-validation-combine-validation-types.rst\n\nLearn More \n----------\n\n- To see the complete list of allowed keywords in a JSON schema, see\n  :ref:`jsonSchema-keywords`.\n\n- To restrict what values a certain field can contain, see\n  :ref:`schema-allowed-field-values`.\n\n- To avoid issues with JSON schema validation, see\n  :ref:`json-schema-tips`.\n\n.. toctree::\n   :titlesonly:\n\n   Specify Field Values </core/schema-validation/specify-json-schema/specify-allowed-field-values>\n   Best Practices </core/schema-validation/specify-json-schema/json-schema-tips>\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-json-schema.txt"
  },
  {
    "code": "         :copyable: false\n\n         MongoServerError: Document failed validation\n         Additional information: {\n           failingDocumentId: ObjectId(\"62bcc9b073c105dde9231293\"),\n           details: {\n             operatorName: '$expr',\n             specifiedAs: {\n               '$expr': {\n                 '$eq': [\n                   '$totalWithVAT',\n                   {\n                     '$multiply': [ '$total', { '$sum': [ 1, '$VAT' ] } ]\n                   }\n                 ]\n               }\n             },\n             reason: 'expression did not match',\n             expressionResult: false\n           }\n         }\n\n   .. step:: Make the document valid and insert it.\n\n      After updating the document to have the correct ``totalWithVAT``\n      value, the operation succeeds:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-query-expression-rules.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           acknowledged: true,\n           insertedId: ObjectId(\"6304f4651e52f124b84479ba\")\n         }\n\nAdditional Information\n----------------------\n\nYou can combine query operator validation with :ref:`JSON Schema\nvalidation <schema-validation-json>`.\n\n.. include:: /includes/schema-validation-combine-validation-types.rst\n\nLearn More\n----------\n\n- To see all query operators available in MongoDB, see\n  :ref:`query-selectors`.\n\n- To learn more about the ``$expr`` operator, which allows the use of\n  aggregation expressions within the query language, see :query:`$expr`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-query-expression-rules.txt"
  },
  {
    "code": "         :copyable: false\n\n          MongoServerError: Document failed validation\n          Additional information: {\n            failingDocumentId: <id>,\n            details: {\n              operatorName: '$jsonSchema',\n              schemaRulesNotSatisfied: [\n                {\n                  operatorName: 'properties',\n                  propertiesNotSatisfied: [\n                    {\n                      propertyName: 'name',\n                      description: 'name must be a string and is required',\n                      details: [\n                        {\n                          operatorName: 'bsonType',\n                          specifiedAs: { bsonType: 'string' },\n                          reason: 'type did not match',\n                          consideredValue: <value>,\n                          consideredType: 'int'\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  operatorName: 'required',\n                  specifiedAs: { required: [ 'phone', 'name' ] },\n                  missingProperties: [ 'phone' ]\n                }\n              ]\n            }\n          }\n\n\nSteps: Use ``moderate`` Validation\n----------------------------------\n\nThe following example adds a ``moderate`` validation to the ``contacts``\ncollection and shows the results when attempting to update invalid\ndocuments.\n\n.. procedure::\n\n   .. step:: Specify validation rules with ``moderate`` validation level.\n\n      Add a validator to the ``contacts`` collection with ``moderate``\n      ``validationLevel``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-validation-level.txt"
  },
  {
    "code": "         :copyable: false\n\n         // _id: 1\n\n         MongoServerError: Document failed validation\n         Additional information: {\n           failingDocumentId: 1,\n           details: {\n             operatorName: '$jsonSchema',\n             schemaRulesNotSatisfied: [\n               {\n                 operatorName: 'properties',\n                 propertiesNotSatisfied: [\n                   {\n                     propertyName: 'name',\n                     description: 'name must be a string and is required',\n                     details: [\n                       {\n                         operatorName: 'bsonType',\n                         specifiedAs: { bsonType: 'string' },\n                         reason: 'type did not match',\n                         consideredValue: 10,\n                         consideredType: 'int'\n                       }\n                     ]\n                   }\n                 ]\n               }\n             ]\n           }\n         }\n\n         // _id: 2\n\n         {\n            acknowledged: true,\n            insertedId: null,\n            matchedCount: 1,\n            modifiedCount: 0,\n            upsertedCount: 0\n         }\n\n      The output shows:\n\n      - The update fails for the document with ``_id: 1``. This document\n        met the initial validation requirements, and MongoDB applies\n        validation rules to this document.\n\n      - The update succeeds for the document with ``_id: 2``. This\n        document did not meet the initial validation requirements, and\n        MongoDB does not apply validation rules to this document.\n\n\n.. important:: \n\n   The error output is intended for human consumption. It may change in\n   the future and should not be relied upon in scripts.\n\nLearn More\n----------\n\n- :ref:`schema-validation-handle-invalid-docs`\n- :ref:`schema-update-validation`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/specify-validation-level.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: Document failed validation\n   Additional information: {\n     failingDocumentId: ObjectId(\"62be0adb73c105dde9231299\"),\n     details: {\n       operatorName: '$jsonSchema',\n       schemaRulesNotSatisfied: [\n         {\n           operatorName: 'properties',\n           propertiesNotSatisfied: [\n             {\n               propertyName: 'password',\n               description: 'must be a string of at least 8 characters, and is required',\n               details: [\n                 {\n                   operatorName: 'minLength',\n                   specifiedAs: { minLength: 12 },\n                   reason: 'specified string length was not satisfied',\n                   consideredValue: 'kT9$j4wg#M'\n                 }\n               ]\n             }\n           ]\n         }\n       ]\n     }\n   }\n\nInsert a Valid Document\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation inserts a valid document, where the ``password``\nfield is at least 12 characters long:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/update-schema-validation.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a3\"),\n       item: 'apple',\n       qty: 45,\n       status: 'A',\n       instock: true\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a4\"),\n       item: 'pears',\n       qty: 50,\n       status: 'A',\n       instock: true\n     }\n   ]\n\n.. _use-json-schema-query-conditions-find-documents:\n\nFind Documents that Don't Match the Schema\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo find documents in a collection that don't match the schema validation\nrules, use :query:`$jsonSchema` with the :query:`$nor` operator. For\nexample:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/use-json-schema-query-conditions.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f79e\"),\n       item: 'journal',\n       qty: 25,\n       size: { h: 14, w: 21, uom: 'cm' },\n       instock: true\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f79f\"),\n       item: 'notebook',\n       qty: 50,\n       size: { h: 8.5, w: 11, uom: 'in' },\n       instock: true\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a0\"),\n       item: 'paper',\n       qty: 100,\n       size: { h: 8.5, w: 11, uom: 'in' },\n       instock: 1\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a1\"),\n       item: 'planner',\n       qty: 75,\n       size: { h: 22.85, w: 30, uom: 'cm' },\n       instock: 1\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a2\"),\n       item: 'postcard',\n       qty: 45,\n       size: { h: 10, w: 15.25, uom: 'cm' },\n       instock: true\n     }\n   ]\n\nUpdate Documents that Don't Match the Schema\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   \nThis command updates all documents that don't match the schema and sets\nthe documents' ``isValid`` field to ``false``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/use-json-schema-query-conditions.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f79e\"),\n       item: 'journal',\n       qty: 25,\n       size: { h: 14, w: 21, uom: 'cm' },\n       instock: true,\n       isValid: false\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f79f\"),\n       item: 'notebook',\n       qty: 50,\n       size: { h: 8.5, w: 11, uom: 'in' },\n       instock: true,\n       isValid: false\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a0\"),\n       item: 'paper',\n       qty: 100,\n       size: { h: 8.5, w: 11, uom: 'in' },\n       instock: 1,\n       isValid: false\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a1\"),\n       item: 'planner',\n       qty: 75,\n       size: { h: 22.85, w: 30, uom: 'cm' },\n       instock: 1,\n       isValid: false\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a2\"),\n       item: 'postcard',\n       qty: 45,\n       size: { h: 10, w: 15.25, uom: 'cm' },\n       instock: true,\n       isValid: false\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a3\"),\n       item: 'apple',\n       qty: 45,\n       status: 'A',\n       instock: true\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a4\"),\n       item: 'pears',\n       qty: 50,\n       status: 'A',\n       instock: true\n     }\n   ]\n   \nDelete Documents that Don't Match the Schema\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis command deletes all documents that don't match the schema:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/use-json-schema-query-conditions.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a3\"),\n       item: 'apple',\n       qty: 45,\n       status: 'A',\n       instock: true\n     },\n     {\n       _id: ObjectId(\"62b5cd5a14b92d148400f7a4\"),\n       item: 'pears',\n       qty: 50,\n       status: 'A',\n       instock: true\n     }\n   ]\n\nLearn More\n----------\n\n- :ref:`query-projection-operators-top`\n\n- :ref:`schema-specify-validation-level`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/use-json-schema-query-conditions.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     '$jsonSchema': {\n       bsonType: 'object',\n       required: [ 'name', 'year', 'major', 'address' ],\n       properties: {\n         name: {\n           bsonType: 'string',\n           description: 'must be a string and is required'\n         },\n         year: {\n           bsonType: 'int',\n           minimum: 2017,\n           maximum: 3017,\n           description: 'must be an integer in [ 2017, 3017 ] and is required'\n         },\n         gpa: {\n           bsonType: [ 'double' ],\n           description: 'must be a double if the field exists'\n         }\n       }\n     }\n   }\n\n.. note:: Validation Action and Level Not Included by Default\n\n  If ``validationAction`` and ``validationLevel`` are not explicitly\n  set, :method:`db.getCollectionInfos()` does not include those fields\n  in its output.\n\nExample: ``listCollections`` Syntax\n-----------------------------------\n\nThe following command uses :dbcommand:`listCollections` to return the\nvalidation rules for the ``students`` collection: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/view-existing-validation-rules.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     cursor: {\n       id: Long(\"0\"),\n       ns: 'test.$cmd.listCollections',\n       firstBatch: [\n         {\n           name: 'students',\n           type: 'collection',\n           options: {\n             validator: {\n               '$jsonSchema': {\n                 bsonType: 'object',\n                 required: [ 'name', 'year', 'major', 'address' ],\n                 properties: {\n                   name: {\n                     bsonType: 'string',\n                     description: 'must be a string and is required'\n                   },\n                   gpa: {\n                     bsonType: [ 'double' ],\n                     description: 'must be a double if the field exists'\n                   }\n                 }\n               },\n               validationAction: 'warn'\n             }\n           },\n           info: {\n             readOnly: false,\n             uuid: UUID(\"bf560865-5879-4ec1-b389-f77a03abbc5a\")\n           },\n           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }\n         }\n       ]\n     },\n     ok: 1\n   }\n\nLearn More\n----------\n\n- :ref:`use-json-schema-query-conditions`\n\n- :ref:`schema-validation-handle-invalid-docs`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/schema-validation/view-existing-validation-rules.txt"
  },
  {
    "code": "     :copyable: false\n\n     db.adminCommand(\n        {\n          currentOp: true,\n          $or: [\n            { op: \"command\", \"command.createIndexes\": { $exists: true }  },\n            { op: \"none\", \"msg\" : /^Index Build/ }\n          ]\n        }\n    )\n\n  In the result document, if the ``inprog`` field value is an empty\n  array, there are no index builds in progress:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/sharding-reshard-a-collection.txt"
  },
  {
    "code": "     :copyable: false\n\n     {\n        inprog: [],\n        ok: 1,\n        '$clusterTime': { ... },\n        operationTime: <timestamp>\n     }\n\n.. |operation| replace:: Resharding\n.. include:: /includes/resharding-oplog-note.rst\n\n.. _resharding_process:\n\nSteps\n-----\n\n.. important::\n\n   We strongly recommend that you check the\n   :ref:`resharding-limitations` and read the :ref:`resharding_process`\n   section in full before resharding your collection.\n\n.. include:: /includes/reshard-collection-introduction.rst\n\n.. include:: /includes/steps/reshard-a-collection.rst\n\nBehavior\n--------\n\nMinimum Duration of a Resharding Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe minimum duration of a resharding operation is always 5 minutes.\n\nRetryable Writes\n~~~~~~~~~~~~~~~~\n\n:ref:`Retryable writes <retryable-writes>` initiated before or during\nresharding can be retried during and after the collection has been\nresharded for up to 5 minutes. After 5 minutes you may be unable to find\nthe definitive result of the write and subsequent attempts to retry the\nwrite fail with an ``IncompleteTransactionHistory`` error.\n\nError Case\n----------\n\nDuplicate ``_id`` Values\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe resharding operation fails if ``_id`` values are not globally unique\nto avoid corrupting collection data. Duplicate ``_id`` values can also\nprevent successful chunk migration. If you have documents with duplicate\n``_id`` values, copy the data from each into a new document, and then\ndelete the duplicate documents.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/sharding-reshard-a-collection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      date: ISODate(\"2020-01-03T05:00:00.000Z\"),\n      symbol: 'AAPL',\n      volume: 146322800,\n      open: 74.287498,\n      adjClose: 73.486023,\n      high: 75.144997,\n      low: 74.125,\n      close: 74.357498\n   }\n\nThis aggregation pipeline performs the following actions:\n\n- Uses :expression:`$dateTrunc` to truncate each document's ``date`` to the\n  appropriate month.\n- Uses :pipeline:`$group` to group the documents by month and symbol. \n- Uses :group:`$avg` to calculate the average price per month. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-aggregations-operators.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: {\n         firstDayOfMonth: ISODate(\"2020-06-01T00:00:00.000Z\"),\n         symbol: 'GOOG'\n      },\n      avgMonthClose: 1431.0477184545455\n   },\n   {\n      _id: {\n         firstDayOfMonth: ISODate(\"2021-07-01T00:00:00.000Z\"),\n         symbol: 'MDB'\n      },\n      avgMonthClose: 352.7314293333333\n   },\n   {\n      _id: {\n         firstDayOfMonth: ISODate(\"2021-06-01T00:00:00.000Z\"),\n         symbol: 'MSFT'\n      },\n      avgMonthClose: 259.01818086363636\n   }\n\n\nCalculate a Rolling Average Over 30 Days\n````````````````````````````````````````\n\nConsider a ``dowJonesTickerData`` collection that contains\ndocuments with the following structure:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-aggregations-operators.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      date: ISODate(\"2020-01-03T05:00:00.000Z\"),\n      symbol: 'AAPL',\n      volume: 146322800,\n      open: 74.287498,\n      adjClose: 73.486023,\n      high: 75.144997,\n      low: 74.125,\n      close: 74.357498\n   }\n\nThis aggregation pipeline performs the following operations:\n\n- Uses :pipeline:`$setWindowFields` to specify a window of 30 days.\n- Calculates a rolling average of the closing price over the last 30\n  days for each stock.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-aggregations-operators.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 10\n\n   {\n      date: ISODate(\"2020-01-29T05:00:00.000Z\"),\n      symbol: 'AAPL',\n      volume: 216229200,\n      adjClose: 80.014801,\n      low: 80.345001,\n      high: 81.962502,\n      open: 81.112503,\n      close: 81.084999,\n      averageMonthClosingPrice: 77.63137520000001\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-aggregations-operators.txt"
  },
  {
    "code": "  :copyable: false\n\n  {\n      cursor: {\n         id: <number>,\n         ns: 'test.$cmd.listCollections',\n         firstBatch: [\n           {\n              name: <string>,\n              type: 'timeseries',\n              options: {\n                 expireAfterSeconds: <number>,\n                 timeseries: { ... }\n              },\n              ...\n           },\n           ...\n         ]\n      }\n   }\n\nDisable Automatic Removal\n-------------------------\n\nTo disable automatic removal, use the :dbcommand:`collMod` command to\nset ``expireAfterSeconds`` to ``off``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-automatic-removal.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 7\n\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:00.441Z\"),\n      coordinates: [1.0, 2.0]\n   },\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:10.441Z\"),\n      coordinates: []\n   },\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:20.441Z\"),\n      coordinates: [3.0, 5.0]\n   }\n\n``coordinates`` fields with populated values and ``coordinates`` fields\nwith an empty array result in a schema change for the compressor. The\nschema change causes the second and third documents in the sequence to\nremain uncompressed.\n\nOptimize compression by omitting the fields with empty values, as shown\nin the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-best-practices.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:00.441Z\"),\n      coordinates: [1.0, 2.0]\n   },\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:10.441Z\")\n   },\n   {\n      timestamp: ISODate(\"2020-01-23T00:00:20.441Z\"),\n      coordinates: [3.0, 5.0]\n   }\n\nRound Numeric Data to Few Decimal Places\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRound numeric data to the precision that your application requires.\nRounding numeric data to fewer decimal places improves the compression\nratio.\n\n.. _tsc-best-practice-optimize-inserts:\n\nInserts Best Practices\n----------------------\n\nTo optimize insert performance for time series collections, perform the\nfollowing actions:\n\nBatch Document Writes\n~~~~~~~~~~~~~~~~~~~~~\n\nWhen inserting multiple documents:\n\n- To avoid network roundtrips, use a single\n  :method:`~db.collection.insertMany()` statement as opposed to\n  multiple :method:`~db.collection.insertOne()` statements.\n\n- If possible, insert data that contains identical ``metaField`` values in\n  the same batches.\n \n- Set the ``ordered`` parameter to ``false``.\n\nFor example, if you have two sensors that correspond to two ``metaField``\nvalues, ``sensor A`` and ``sensor B``, a batch that contains multiple\nmeasurements from a single sensor incurs the cost of one insert, rather\nthan one insert per measurement.\n\nThe following operation inserts six documents, but only incurs the cost\nof two inserts (one per ``metaField`` value), because the documents are\nordered by sensor. The ``ordered`` parameter is set to ``false`` to\nimprove performance:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-best-practices.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: ObjectId(\"6572371964eb5ad43054d572\"),\n     metaField: { sensorId: 5578, type: 'temperature' },\n     timestamp: ISODate( \"2021-05-18T00:00:00.000Z\" ),\n     temp: 12\n   }\n\nUse $group Instead of Distinct()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/time-series/timeseries-distinct-command.rst\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-best-practices.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      timestamp: ISODate(\"2021-05-18T00:00:00.000Z\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      temp: 12,\n      _id: ObjectId(\"62f11bbf1e52f124b84479ad\")\n   }\n\n.. _timeseries-bucket-catalog:\n.. _timeseries-bucket-lifecycle:\n\nThe Bucket Catalog\n------------------\n\nThe bucket catalog is a specialized in-memory cache in :ref:`WiredTiger \n<storage-wiredtiger>`. It tracks buckets to minimize latency and coordinate \nconcurrent writes. \n\nFor each open bucket, the catalog maintains information such as the\n``metaField``, active writers, covered time span, number of documents, size,\nand recent operations. Because MongoDB creates separate buckets for documents\nwith a different ``metaField``, multiple buckets are typically open at the same\ntime.\n\nTo avoid inconsistencies caused by race conditions, buckets may be closed and \nremoved from the bucket catalog when a conflicting operation is executed.\nRestarting :binary:`~bin.mongod` closes all buckets and resets the bucket\ncatalog.\n\nCreation\n~~~~~~~~\n\n* MongoDB creates a new bucket if there isn't a suitable one for an incoming \n  document. This occurs when any of the following are true:\n\n  * The document ``metaField`` doesn't match any active buckets.\n  * The document timestamp is outside of the range of all active buckets.\n  * The document exceeds the remaining size or document limit of all \n    active buckets.\n  \n  The starting timestamp of a new bucket is rounded down based on the\n  collection's :ref:`granularity <timeseries-granularity>`. This handles cases\n  where documents with out-of-order timestamps arrive in close succession.\n\n.. _timeseries-bucket-closure:\n\nClosure\n~~~~~~~\n\nMongoDB closes a bucket under any of the following circumstances:\n\n* Time has moved forward or backward past the covered time span, as\n  indicated by an incoming document timestamp that falls outside of the \n  bucket's bounds. These bounds are determined by the collection's \n  :ref:`granularity <timeseries-granularity>` setting.\n* The bucket has hit the document limit (default 1000).\n* The bucket has exceeded its storage size limit. This happens when:\n  \n  * The size exceeds the allowed maximum (default 125KiB).\n\n  * The number of documents is below a minimum number (default 10) and the \n    size is below 12MiB. \n    \n    This is a set, internal limit that optimizes performance when data\n    consists of fewer, larger documents.\n\n  * The set of active buckets doesn't fit within the allowed storage engine\n    cache size. You can review this information using the\n    :dbcommand:`collStats` database command.\n\n* The bucket catalog exceeds its allowed total memory allocation (by default, \n  2.5% of available system memory)\n* A conflicting operation, such as a chunk migration or update, changes a \n  bucket's on-disk state.\n* :binary:`~bin.mongod` restarts. This closes all buckets.\n\nDeletion\n~~~~~~~~\n\nMongoDB deletes a bucket when:\n\n* Its maximum allowed timestamp is less than the current time minus\n  the collection's ``expireAfterSeconds`` parameter. This is equivalent to a\n  :ref:`TTL collection's <ttl-collections>` time to live.\n* A :dbcommand:`delete` or :method:`db.collection.deleteMany()` command deletes\n  the last document in the bucket.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-bucketing.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 8-15\n\n   {\n     cursor: {\n       id: Long(\"0\"),\n       ns: 'test.$cmd.listCollections',\n       firstBatch: [\n         {\n           name: 'weather',\n           type: 'timeseries',\n           options: {\n             timeseries: {\n               timeField: 'timestamp',\n               metaField: 'metadata',\n               granularity: 'hours',\n               bucketMaxSpanSeconds: 2592000\n             }\n           },\n           info: { readOnly: false }\n         }\n       ]\n     },\n     ok: 1\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-check-type.txt"
  },
  {
    "code": "  :copyable: false\n\n  {\n      cursor: {\n         id: <number>,\n         ns: 'test.$cmd.listCollections',\n         firstBatch: [\n           {\n              name: <string>,\n              type: 'timeseries',\n              options: {\n                 expireAfterSeconds: <number>,\n                 timeseries: {\n                    timeField: <string>,\n                    metaField: <string>,\n                    granularity: <string>,\n                    bucketMaxSpanSeconds: <number>,\n                    bucketRoundingSeconds: <number>\n                 }\n              },\n              ...\n           },\n           ...\n         ]\n      }\n   }\n\n\nSet the \"granularity\" Parameter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example sets the ``granuarity`` of a ``weather24h``\ncollection to ``hours``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-granularity.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.runCommand( {\n      collMod: \"weather24h\",\n      timeseries: { granularity: \"seconds\" | \"minutes\" | \"hours\" }\n   } )\n\nIf you are using the custom bucketing parameters\n``bucketRoundingSeconds`` and ``bucketMaxSpanSeconds`` instead of\n``granularity``, include both custom parameters in the ``collMod``\ncommand and set them to the same value:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-granularity.txt"
  },
  {
    "code": "         :copyable: false\n\n         { $addFields: {\n               metaData: {\n               st: \"$st\",\n               position: \"$position\",\n               elevation: \"$elevation\",\n               callLetters: \"$callLetters\",\n               qualityControlProcess: \"$qualityControlProcess\",\n               type: \"$type\"\n               }\n            },\n         }, \n         { $project: {\n               _id: 1,\n               ts: 1,\n               metaData: 1,\n               dataSource: 1,\n               airTemperature: 1,\n               dewPoint: 1,\n               pressure: 1,\n               wind: 1,\n               visibility: 1,\n               skyCondition: 1,\n               sections: 1,\n               precipitationEstimatedObservation: 1\n            }\n         }\n\n   .. step:: Create your time series collection and insert your data.\n    \n      The example below performs the following operations:\n      \n      - Uses the :pipeline:`$addFields` aggregation stage to add a ``metaData`` field to\n        your ``weather_data`` collection.\n      - Uses the :pipeline:`$out` aggregation stage with the\n        ``timeseries`` option to create a ``weathernew`` time series\n        collection in the ``mydatabase`` database. \n      - Defines the ``metaField`` of your ``weathernew`` collection\n        as the ``metaData`` field. \n      - Defines the ``timeField`` of your ``weathernew`` collection\n        as the ``ts`` field. \n\n      .. note::\n\n         The ``timeField`` of a time series collection must be a :ref:`date\n         <document-bson-type-date>` type. \n      \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-migrate-data-into-timeseries-collection.txt"
  },
  {
    "code": "   :copyable: false\n\n      {\n         _id: ObjectId(\"5553a998e4b02cf7151190b8\"),\n         ts: ISODate(\"1984-03-05T13:00:00Z\"),\n         metaData: {\n            st: \"x+47600-047900\",\n            position: {\n               type: \"Point\",\n               coordinates: [ -47.9, 47.6 ]\n            },\n            elevation: 9999,\n            callLetters: \"VCSZ\",\n            qualityControlProcess: \"V020\",\n            type: \"FM-13\"\n         },\n         dataSource: \"4\",\n         airTemperature: { value: -3.1, quality: \"1\" },\n         dewPoint: { value: 999.9, quality: \"9\" },\n         pressure: { value: 1015.3, quality: \"1\" },\n         wind: {\n            direction: { angle: 999, quality: \"9\" },\n            type: \"9\",\n            speed: { rate: 999.9, quality: \"9\" }\n         },\n         visibility: {\n            distance: { value: 999999, quality: \"9\" },\n            variability: { value: \"N\", quality: \"9\" }\n         },\n         skyCondition: {\n            ceilingHeight: { value: 99999, quality: \"9\", determination: \"9\" },\n            cavok: \"N\"\n         },\n         sections: [ \"AG1\" ],\n         precipitationEstimatedObservation: { discrepancy: \"2\", estimatedWaterDepth: 999 }\n      }\n\nNext Steps\n----------\n\nIf your original collection had secondary indexes, manually recreate \nthem now. \n\nIf your time series collection includes ``timeField`` values before\n``1970-01-01T00:00:00.000Z`` or after ``2038-01-19T03:14:07.000Z``,\nMongoDB logs a warning and disables some query optimizations that make\nuse of the :ref:`internal clustered index\n<manual-timeseries-internal-index>`. To regain query performance and\nresolve the log warning, :ref:`create a secondary index\n<timeseries-add-secondary-index>` on the ``timeField``.\n\n.. seealso::\n\n   :ref:`timeseries-add-secondary-index`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-migrate-data-into-timeseries-collection.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            timeField: \"timestamp\",\n            metaField: \"metadata\"\n         }\n\n      In this example, ``timestamp`` is the name of the\n      ``timeField`` and ``metadata`` is the name of the ``metaField``.\n      The value of the ``timestamp`` field must be a :ref:`date\n      <document-bson-type-date>` type. \n\n      .. important::\n\n         Choosing the right ``metaField`` for your collection optimizes\n         both storage and query performance. For more information on\n         ``metaField`` selection and best practices, see\n         :ref:`timeseries-collections-metafield`. \n\n   .. step:: \n      Define the time interval for each bucket of data using one \n      of the two approaches below:\n   \n      .. important:: Changing Time Series Intervals\n\n         After creation, you can modify granularity or bucket\n         definitions using the :dbcommand:`collMod` method. However,\n         you can only increase the time span covered by each bucket. You\n         cannot decrease it.\n      \n      A. Define a ``granularity`` field:\n         \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "            :copyable: false\n\n            {\n               granularity: \"seconds\"\n            }\n\n         For more detailed information on selecting a ``granularity``\n         value, see :ref:`Granularity Considerations\n         <timeseries-granularity-considerations>`.\n\n      **OR**\n\n      B. In MongoDB 6.3 and later, you can define\n         ``bucketMaxSpanSeconds`` and ``bucketRoundingSeconds`` fields.\n         Both values must be the same:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "            :copyable: false\n\n            {\n               bucketMaxSpanSeconds: \"300\",\n               bucketRoundingSeconds: \"300\"\n            }\n\n   .. step:: \n      Optionally, set ``expireAfterSeconds`` to expire documents \n      when the value of the ``timeField`` is at least that old:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            expireAfterSeconds: 86400\n         }\n\n   .. step:: \n      Create the collection using either the\n      :method:`db.createCollection()` method or the :dbcommand:`create`\n      command. The follow example uses the\n      :method:`db.createCollection()` method to create a ``weather``\n      time series collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      timestamp: ISODate(\"2021-05-18T00:00:00.000Z\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      temp: 12,\n      _id: ObjectId(\"62f11bbf1e52f124b84479ad\")\n   }\n\nFor more information on time series queries, see\n:ref:`tsc-best-practice-optimize-query-performance`.\n\nRun Aggregations on a Time Series Collection\n--------------------------------------------\n\nFor additional query functionality, use an :ref:`aggregation pipeline\n<aggregation-pipeline>` such as:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n    \"_id\" : {\n      \"date\" : {\n        \"year\" : 2021,\n        \"month\" : 5,\n        \"day\" : 18\n      }\n    },\n    \"avgTmp\" : 12.714285714285714\n  }\n  {\n    \"_id\" : {\n      \"date\" : {\n        \"year\" : 2021,\n        \"month\" : 5,\n        \"day\" : 19\n      }\n    },\n    \"avgTmp\" : 13\n  }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/timeseries/timeseries-procedures.txt"
  },
  {
    "code": "               :language: python\n               :dedent: 8\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n      - id: java-sync\n        content: |\n\n            .. include:: /includes/extracts/transactions-example-note.rst\n\n            The example uses the new callback API for working with\n            transactions, which starts a transaction, executes the\n            specified operations, and commits (or aborts on error). The\n            new callback API incorporates retry logic for\n            :ref:`transient-transaction-error` or\n            :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "               :language: javascript\n               :dedent: 4\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n      - id: php\n        content: |\n\n            .. include:: /includes/extracts/transactions-example-note.rst\n\n            The example uses the new callback API for working with\n            transactions, which starts a transaction, executes the\n            specified operations, and commits (or aborts on error). The\n            new callback API incorporates retry logic for\n            :ref:`transient-transaction-error` or\n            :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "               :language: php\n               :dedent: 8\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n      - id: csharp\n        content: |\n\n            .. include:: /includes/extracts/transactions-example-note.rst\n\n            The example uses the new callback API for working with\n            transactions, which starts a transaction, executes the\n            specified operations, and commits (or aborts on error). The\n            new callback API incorporates retry logic for\n            :ref:`transient-transaction-error` or\n            :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "               :language: csharp\n               :dedent: 12\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n\n      - id: c\n        content: |\n\n            .. include:: /includes/extracts/transactions-example-note.rst\n\n            The example uses the new callback API for working with\n            transactions, which starts a transaction, executes the\n            specified operations, and commits (or aborts on error). The\n            new callback API incorporates retry logic for\n            :ref:`transient-transaction-error` or\n            :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "               :language: c\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n      - id: cpp\n        content: |\n\n            .. include:: /includes/extracts/transactions-example-note.rst\n\n            The example uses the new callback API for working with\n            transactions, which starts a transaction, executes the\n            specified operations, and commits (or aborts on error). The\n            new callback API incorporates retry logic for\n            :ref:`transient-transaction-error` or\n            :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "               :language: cpp\n               :dedent: 4\n               :start-after: Start Transactions withTxn API Example 1\n               :end-before: End Transactions withTxn API Example 1\n\n      - id: motor\n        content: |\n      \n         .. include:: /includes/extracts/transactions-example-note.rst\n\n         The example uses the new callback API for working with\n         transactions, which starts a transaction, executes the\n         specified operations, and commits (or aborts on error). The\n         new callback API incorporates retry logic for\n         :ref:`transient-transaction-error` or\n         :ref:`unknown-transaction-commit-result` commit errors.\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Transactions withTxn API Example 1\n            :end-before: End Transactions withTxn API Example 1\n\n      - id: ruby\n        content: |\n\n         .. include:: /includes/extracts/transactions-example-note.rst\n\n         The example uses the new callback API for working with\n         transactions, which starts a transaction, executes the\n         specified operations, and commits (or aborts on error). The\n         new callback API incorporates retry logic for\n         :ref:`transient-transaction-error` or\n         :ref:`unknown-transaction-commit-result` commit errors.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "            :language: ruby\n            :dedent: 4\n            :start-after: Start Transactions withTxn API Example 1\n            :end-before: End Transactions withTxn API Example 1\n\n      - id: go\n        content: |\n\n         The example uses the new callback API for working with\n         transactions, which starts a transaction, executes the\n         specified operations, and commits (or aborts on error). The\n         new callback API incorporates retry logic for\n         :ref:`transient-transaction-error` or\n         :ref:`unknown-transaction-commit-result` commit errors.\n\n         .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "            :language: go\n            :start-after: Start Transactions withTxn API Example 1\n            :end-before: End Transactions withTxn API Example 1\n\n      - id: perl\n        content: |\n\n            .. note::\n            \n               For the Perl driver, see the :ref:`txn-core-api` usage example instead.\n\n      - id: scala\n        content: |\n\n            .. note::\n            \n               For the Scala driver, see the :ref:`txn-core-api` usage example instead.\n\n.. _txn-core-api:\n\nCore API\n--------\n\nThe core transaction API does not incorporate retry logic for errors\nlabeled:\n\n- :ref:`transient-transaction-error`. If an operation in a transaction\n  returns an error labeled :ref:`transient-transaction-error`, the\n  transaction as a whole can be retried.\n   \n  To handle :ref:`transient-transaction-error`, applications should\n  explicitly incorporate retry logic for the error.\n\n- :ref:`unknown-transaction-commit-result`. If the commit returns an\n  error labeled :ref:`unknown-transaction-commit-result`, the commit\n  can be retried. \n\n  To handle :ref:`unknown-transaction-commit-result`,\n  applications should explicitly incorporate retry logic for the error.\n\n.. _txn-core-api-retry:\n\nExample\n~~~~~~~\n\n----------\n\n|arrow| Use the **Select your language** drop-down menu in the\nupper-right to set the language of the examples on this page.\n\n----------\n\nThe following example incorporates logic to retry the transaction for\ntransient errors and retry the commit for unknown commit error:\n\n.. include:: /includes/driver-examples/driver-example-transactions-retry-3.rst\n\nDriver Versions\n---------------\n\n.. include:: /includes/list-4.2-drivers.rst\n\n.. _transactions-retry:\n\nTransaction Error Handling\n---------------------------\n\nRegardless of the database system, whether MongoDB or relational\ndatabases, applications should take measures to handle errors during\ntransaction commits and incorporate retry logic for transactions.\n\n.. _transient-transaction-error:\n\n``TransientTransactionError``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe *individual* write operations inside the transaction are not\nretryable, regardless of the value of :urioption:`retryWrites`. If an\noperation encounters an error `associated with the label\n<https://github.com/mongodb/specifications/blob/master/source/transactions/transactions.rst#error-labels>`_ \n``\"TransientTransactionError\"``, such as when the primary steps down,\nthe transaction as a whole can be retried.\n\n- The callback API incorporates retry logic for\n  ``\"TransientTransactionError\"``.\n\n- The core transaction API does not incorporate retry logic\n  for ``\"TransientTransactionError\"``. To handle\n  ``\"TransientTransactionError\"``, applications should explicitly\n  incorporate retry logic for the error. To view an example that incorporates \n  retry logic for transient errors, see :ref:`Core API Example \n  <txn-core-api-retry>`.\n\n.. _unknown-transaction-commit-result:\n\n``UnknownTransactionCommitResult``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCommit operations are :ref:`retryable write operations <retryable-writes>`. If \nthe commit operation encounters an error, MongoDB drivers retry the commit \nregardless of the value of :urioption:`retryWrites`.\n\nIf the commit operation encounters an error labeled\n``\"UnknownTransactionCommitResult\"``, the commit can be retried.\n\n- The callback API incorporates retry logic for\n  ``\"UnknownTransactionCommitResult\"``.\n\n- The core transaction API does not incorporate retry logic for\n  ``\"UnknownTransactionCommitResult\"``. To handle\n  ``\"UnknownTransactionCommitResult\"``, applications should explicitly\n  incorporate retry logic for the error. To view an example that incorporates \n  retry logic for unknown commit errors, see :ref:`Core API Example \n  <txn-core-api-retry>`.\n\n.. _transactionTooLargeForCache-error:\n\n``TransactionTooLargeForCache``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 6.2 \n\nStarting in MongoDB 6.2, the server does not retry the transaction if\nit receives a ``TransactionTooLargeForCache`` error. This error means\nthe cache is too small and a retry is likely to fail.\n\nThe default value for the\n:parameter:`transactionTooLargeForCacheThreshold` threshold is ``0.75``.\nThe server returns ``TransactionTooLargeForCache`` instead of retrying\nthe transaction when the transaction uses more than 75% of the cache.\n\nIn earlier versions of MongoDB, the server returns\n``TemporarilyUnavailable`` or ``WriteConflict`` instead of\n``TransactionTooLargeForCache``.\n\nUse the :dbcommand:`setParameter` command to modify the error threshold. \n\nAdditional Information\n----------------------\n\n.. _txn-mongo-shell-example:\n\n``mongosh`` Example\n~~~~~~~~~~~~~~~~~~~\n\nThe following :binary:`~bin.mongosh` methods are available for\ntransactions:\n\n- :method:`Session.startTransaction()`\n\n- :method:`Session.commitTransaction()`\n\n- :method:`Session.abortTransaction()`\n\n.. note::\n\n   The :binary:`~bin.mongosh` example omits retry logic\n   and robust error handling for simplicity's sake. For a\n   more practical example of incorporating transactions in\n   applications, see :ref:`transactions-retry` instead.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "   :copyable: false\n\n   // Create collections:\n   db.getSiblingDB(\"mydb1\").foo.insertOne(\n       {abc: 0},\n       { writeConcern: { w: \"majority\", wtimeout: 2000 } }\n   )\n   db.getSiblingDB(\"mydb2\").bar.insertOne(\n      {xyz: 0},\n      { writeConcern: { w: \"majority\", wtimeout: 2000 } }\n   )\n   \n   // Start a session.\n   session = db.getMongo().startSession( { readPreference: { mode: \"primary\" } } );\n\n   coll1 = session.getDatabase(\"mydb1\").foo;\n   coll2 = session.getDatabase(\"mydb2\").bar;\n\n   // Start a transaction\n   session.startTransaction( { readConcern: { level: \"local\" }, writeConcern: { w: \"majority\" } } );\n\n   // Operations inside the transaction\n   try {\n      coll1.insertOne( { abc: 1 } );\n      coll2.insertOne( { xyz: 999 } );\n   } catch (error) {\n      // Abort transaction on error\n      session.abortTransaction();\n      throw error;\n   }\n\n   // Commit the transaction using write concern set at transaction start\n   session.commitTransaction();\n\n   session.endSession();\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions-in-applications.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: java-sync\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: javascript\n         :dedent: 4\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: php\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: csharp\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: c\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: c\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: cpp\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: cpp\n         :dedent: 4\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: motor\n       \n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: ruby\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 4\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: rust\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: rust\n         :dedent: 4\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "rust",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: go\n         :start-after: Start Transactions withTxn API Example 1\n         :end-before: End Transactions withTxn API Example 1\n\n   .. tab::\n      :tabid: perl\n \n      .. include:: /includes/transactions/example-intro.rst\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: perl\n         :start-after: Start Transactions Retry Example 3\n         :end-before: End Transactions Retry Example 3\n\n   .. tab::\n      :tabid: scala\n\n      This example uses the :ref:`core API <txn-core-api>`. Because the\n      core API does not incorporate retry logic for the\n      :ref:`transient-transaction-error` or\n      :ref:`unknown-transaction-commit-result` commit errors, the\n      example includes explicit logic to retry the transaction for\n      these errors:\n\n      .. include:: /includes/extracts/transactions-example-note.rst\n\n",
    "language": "perl",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "         :language: scala\n\n.. seealso::\n\n   For an example in :binary:`~bin.mongosh`, see\n   :ref:`txn-mongo-shell-example`.\n\n.. _transactions-atomicity:\n\nTransactions and Atomicity\n--------------------------\n\n.. include:: /includes/transactions/distributed-transaction-repl-shard-support.rst\n\nDistributed transactions are atomic:\n\n- Transactions either apply all data changes or roll back the changes.\n\n- If a transaction commits, all data changes made in the transaction\n  are saved and are visible outside of the transaction.\n\n  .. include:: /includes/extracts/transactions-committed-visibility.rst\n\n- When a transaction aborts, all data changes made in the transaction\n  are discarded without ever becoming visible. For example, if any\n  operation in the transaction fails, the transaction aborts and all\n  data changes made in the transaction are discarded without ever\n  becoming visible.\n\n.. include:: /includes/extracts/transactions-usage.rst\n\n.. seealso::\n\n   :ref:`transactions-prod-consideration-outside-reads`\n\n.. _transactions-operations:\n\nTransactions and Operations\n---------------------------\n\nDistributed transactions can be used across multiple operations,\ncollections, databases, documents, and shards.\n\nFor transactions:\n\n.. include:: /includes/extracts/transactions-operations-crud.rst\n\nFor a list of operations not supported in transactions, see\n:ref:`transactions-ops-restricted`.\n\n.. include:: /includes/extracts/transactions-operations-catalog-tip.rst\n\n.. seealso::\n\n   :ref:`Transactions and Operations Reference <transactions-operations-ref>`\n\n.. _transactions-create-collections-indexes:\n\nCreate Collections and Indexes in a Transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform the following operations in a :ref:`distributed\ntransaction <transactions>` if the transaction is not a\ncross-shard write transaction:\n\n- Create collections.\n\n- Create indexes on new empty collections created earlier in the same\n  transaction.\n\nWhen creating a collection inside a transaction:\n\n- You can :ref:`implicitly create a collection\n  <transactions-operations-ddl-implicit>`, such as with:\n\n  - an :ref:`insert operation <transactions-operations-ddl-implicit>`\n    for a non-existent collection, or\n\n  - an :ref:`update/findAndModify operation\n    <transactions-operations-ddl-implicit>` with ``upsert: true``\n    for a non-existent collection.\n\n- You can :ref:`explicitly create a collection\n  <transactions-operations-ddl-explicit>` using the :dbcommand:`create`\n  command or its helper :method:`db.createCollection()`.\n\nWhen :ref:`creating an index inside a transaction\n<transactions-operations-ddl-explicit>` [#create-existing-index]_, the\nindex to create must be on either:\n\n- a non-existent collection. The collection is created as part of the\n  operation.\n\n- a new empty collection created earlier in the same transaction.\n\n.. [#create-existing-index]\n\n   You can also run :method:`db.collection.createIndex()` and\n   :method:`db.collection.createIndexes()` on existing indexes to check\n   for existence. These operations return successfully without creating\n   the index.\n\nRestrictions\n````````````\n\n- .. include:: /includes/extracts/transactions-cross-shard-collection-restriction.rst\n\n- .. include:: /includes/graphLookup-sharded-coll-transaction-note.rst\n\n- For explicit creation of a collection or an index inside a\n  transaction, the transaction read concern level must be\n  :readconcern:`\"local\"`.\n  \n  To explicitly create collections and indexes, use the following\n  commands and methods:\n\n  .. list-table::\n     :header-rows: 1\n\n     * - Command\n       - Method\n\n     * - :dbcommand:`create`\n       - :method:`db.createCollection()`\n\n     * - :dbcommand:`createIndexes`\n\n       - | :method:`db.collection.createIndex()`\n         | :method:`db.collection.createIndexes()`\n\n.. seealso::\n\n   :ref:`transactions-ops-restricted`\n\n.. _transactions-ops-count:\n\nCount Operation\n~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-count.rst\n\n.. _transactions-ops-distinct:\n\nDistinct Operation\n~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-distinct.rst\n\n.. _transactions-ops-info:\n\nInformational Operations\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-operations-restrictions-info.rst\n\n.. _transactions-ops-restricted:\n\nRestricted Operations\n~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-operations-restrictions.rst\n\n.. seealso::\n\n   - :ref:`txn-prod-considerations-ddl`\n\n   - :ref:`Transactions and Operations Reference <transactions-operations-ref>`\n\nTransactions and Sessions\n-------------------------\n\n- Transactions are associated with a session.\n\n- You can have at most one open transaction at a time for a session.\n\n- When using the drivers, each operation in the transaction must be\n  associated with the session. Refer to your driver specific\n  documentation for details.\n\n- If a session ends and it has an open transaction, the transaction\n  aborts.\n\n.. _transaction-options:\n\nRead Concern/Write Concern/Read Preference\n------------------------------------------\n\n.. _transactions-read-preference:\n\nTransactions and Read Preference\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOperations in a transaction use the transaction-level :ref:`read\npreference <replica-set-read-preference>`.\n\nUsing the drivers, you can set the transaction-level :ref:`read\npreference <replica-set-read-preference>` at the transaction start:\n\n- If the transaction-level read preference is unset, the transaction\n  uses the session-level read preference.\n\n- If transaction-level and the session-level read preference are unset,\n  the transaction uses the client-level read preference. By default,\n  the client-level read preference is :readmode:`primary`.\n\n.. include:: /includes/extracts/transactions-read-pref.rst\n\n.. _transactions-read-concern:\n\nTransactions and Read Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOperations in a transaction use the transaction-level :doc:`read\nconcern </reference/read-concern>`. This means a read concern set at\nthe collection and database level is ignored inside the transaction.\n\nYou can set the transaction-level :doc:`read concern\n</reference/read-concern>` at the transaction start.\n\n- If the transaction-level read concern is unset, the transaction-level\n  read concern defaults to the session-level read concern.\n\n- If transaction-level and the session-level read concern are unset,\n  the transaction-level read concern defaults to the client-level read\n  concern. By default, the client-level read concern is\n  :readconcern:`\"local\"` for reads on the primary. See also:\n\n  - :ref:`transactions-read-preference`\n  - :doc:`/reference/mongodb-defaults`\n\nTransactions support the following read concern levels:\n\n``\"local\"``\n```````````\n\n- Read concern :readconcern:`\"local\"` returns the most recent data\n  available from the node but can be rolled back.\n\n- .. include:: /includes/transactions/read-isolation-levels.rst\n\n- For transactions on sharded cluster, :readconcern:`\"local\"` read\n  concern cannot guarantee that the data is from the same snapshot\n  view across the shards. If snapshot isolation is required, use\n  :ref:`transactions-read-concern-snapshot` read concern.\n\n- .. include:: /includes/extracts/transactions-create-collections-read-concern.rst\n\n``\"majority\"``\n``````````````\n\n- If the transaction commits with :ref:`write concern \"majority\"\n  <transactions-write-concern>`, read concern :readconcern:`\"majority\"`\n  returns data that has been acknowledged by a majority of the replica\n  set members and can't be rolled back. Otherwise, read concern\n  :readconcern:`\"majority\"` provides no guarantees that read operations\n  read majority-committed data.\n\n- For transactions on sharded cluster, read concern\n  :readconcern:`\"majority\"` can't guarantee that the data is from the \n  same snapshot view across the shards. If snapshot isolation is\n  required, use read concern :ref:`transactions-read-concern-snapshot`.\n\n.. _transactions-read-concern-snapshot:\n\n``\"snapshot\"``\n``````````````\n\n- Read concern :readconcern:`\"snapshot\"` returns data from a\n  snapshot of majority committed data **if** the transaction commits\n  with :ref:`write concern \"majority\" <transactions-write-concern>`.\n\n- If the transaction does not use :ref:`write concern \"majority\"\n  <transactions-write-concern>` for the commit, the\n  :readconcern:`\"snapshot\"` read concern provides **no** guarantee that\n  read operations used a snapshot of majority-committed data.\n\n- For transactions on sharded clusters, the\n  :readconcern:`\"snapshot\"` view of the data **is** synchronized\n  across shards.\n\n.. _transactions-write-concern:\n\nTransactions and Write Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTransactions use the transaction-level :doc:`write concern\n</reference/write-concern>` to commit the write operations. Write\noperations inside transactions must be run without an explicit write\nconcern specification and use the default write concern. At commit\ntime, the writes committed using the transaction-level write\nconcern.\n\n.. tip::\n\n   Don't explicitly set the write concern for the individual write\n   operations inside a transaction. Setting write concerns for the\n   individual write operations inside a transaction returns an error.\n\nYou can set the transaction-level :doc:`write concern\n</reference/write-concern>` at the transaction start:\n\n- If the transaction-level write concern is unset, the\n  transaction-level write concern defaults to the session-level write\n  concern for the commit.\n\n- If the transaction-level write concern and the session-level write\n  concern are unset, the transaction-level write concern defaults to the\n  client-level write concern of:\n\n  - :writeconcern:`w: \"majority\" <\"majority\">` in MongoDB 5.0 and later,\n    with differences for deployments containing :ref:`arbiters\n    <replica-set-arbiter-configuration>`. See\n    :ref:`wc-default-behavior`.\n\n  - :writeconcern:`w: 1 <\\<number\\>>`\n\n.. seealso::\n\n   :doc:`/reference/mongodb-defaults`\n\nTransactions support all write concern :ref:`w <wc-w>`\nvalues, including:\n\n``w: 1``\n````````\n\n- Write concern :writeconcern:`w: 1 <\\<number\\>>` returns\n  acknowledgment after the commit has been applied to the primary.\n\n  .. important::\n\n     When you commit with :writeconcern:`w: 1 <\\<number\\>>`, your\n     transaction can be :doc:`rolled back if there is a failover\n     </core/replica-set-rollbacks>`.\n\n- When you commit with :writeconcern:`w: 1 <\\<number\\>>` write\n  concern, transaction-level :readconcern:`\"majority\"` read concern\n  provides **no** guarantees that read operations in the transaction\n  read majority-committed data.\n\n- When you commit with :writeconcern:`w: 1 <\\<number\\>>` write\n  concern, transaction-level :readconcern:`\"snapshot\"` read concern\n  provides **no** guarantee that read operations in the transaction\n  used a snapshot of majority-committed data.\n\n``w: \"majority\"``\n`````````````````\n\n- Write concern :writeconcern:`w: \"majority\" <\"majority\">` returns\n  acknowledgment after the commit has been applied to a majority of\n  voting members.\n\n- When you commit with :writeconcern:`w: \"majority\" <\"majority\">`\n  write concern, transaction-level :readconcern:`\"majority\"` read\n  concern guarantees that operations have read majority-committed\n  data. For transactions on sharded clusters, this view of the\n  majority-committed data is not synchronized across shards.\n\n- When you commit with :writeconcern:`w: \"majority\" <\"majority\">`\n  write concern, transaction-level :readconcern:`\"snapshot\"` read\n  concern guarantees that operations have read from a synchronized\n  snapshot of majority-committed data.\n\n.. note::\n\n   .. include:: /includes/extracts/transactions-sharded-clusters-commit-writeconcern.rst\n\n   .. include:: /includes/return-commit-decision-parameter.rst\n\n   .. include:: /includes/write-concern-majority-and-transactions.rst\n\n   Regardless of the :ref:`write concern specified for the\n   transaction <transactions-write-concern>`, the driver applies\n   :writeconcern:`w: \"majority\" <\"majority\">` as the write concern when\n   retrying :dbcommand:`commitTransaction`.\n\nGeneral Information\n-------------------\n\nThe following sections describe more considerations for transactions.\n\nProduction Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor transactions in production environments, see\n:ref:`production-considerations`. In addition, for sharded\nclusters, see :ref:`production-considerations-sharded`.\n\nArbiters\n~~~~~~~~\n\n.. include:: /includes/extracts/transactions-arbiters.rst\n\n.. _transactions-wcmajority-disabled:\n\nShard Configuration Restriction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-shards-wcmajority-disabled.rst\n\n.. note::\n\n   .. include:: /includes/extracts/transactions-sharded-clusters-commit-writeconcern.rst\n\nDiagnostics\n~~~~~~~~~~~\n\nTo obtain transaction status and metrics, use the following methods:\n\n.. list-table::\n   :widths: 40 60\n   :header-rows: 1\n\n   * - Source\n     - Returns\n\n   * - | :method:`db.serverStatus()` method\n       | :dbcommand:`serverStatus` command\n   \n     - Returns :ref:`server-status-transactions` metrics.\n\n       Some ``serverStatus`` response fields are not returned on \n       {+atlas+} M0/M2/M5 clusters. For more information, see \n       :ref:`free-shard-commands-with-limits` in the {+atlas+} \n       documentation.\n  \n   * - :pipeline:`$currentOp` aggregation pipeline\n   \n     - Returns:\n     \n       - :data:`$currentOp.transaction` if an operation is part of a\n         transaction.\n        \n       - Information on :ref:`inactive sessions\n         <currentOp-stage-idleSessions>` that are holding locks as part\n         of a transaction.\n\n       - :data:`$currentOp.twoPhaseCommitCoordinator` metrics for\n         sharded transactions that involves writes to multiple shards.\n\n   * - | :method:`db.currentOp()` method\n       | :dbcommand:`currentOp` command\n\n     - Returns:\n     \n       - :data:`currentOp.transaction` if an operation is part of a\n         transaction.\n         \n       - :data:`currentOp.twoPhaseCommitCoordinator` metrics for\n         sharded transactions that involves writes to multiple shards.\n\n   * - :binary:`~bin.mongod` and :binary:`~bin.mongos` log messages\n\n     - Includes information on slow transactions (which are transactions\n       that exceed the :setting:`operationProfiling.slowOpThresholdMs`\n       threshold) in the :data:`TXN` log component.\n\n..  _transactions-fcv:\n\nFeature Compatibility Version (FCV)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`\nfor all members of the deployment must be at least:\n\n.. list-table::\n   :header-rows: 1\n\n   * - Deployment\n     - Minimum ``featureCompatibilityVersion``\n\n   * - Replica Set\n     - ``4.0``\n\n   * - Sharded Cluster\n     - ``4.2``\n\nTo check the FCV for a member, connect to the member and run the\nfollowing command:\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/transactions.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { sID: 22001, name: 'Alex', year: 1, score: 4 },\n     { sID: 22021, name: 'Drew', year: 1, score: 3.2 },\n     { sID: 21022, name: 'Farmer', year: 1, score: 2.2 }\n   ]\n\n.. note:: Projection Restrictions\n\n   .. include:: /includes/extracts/views-unsupported-projection-operators.rst\n\nUse db.createCollection() to Create a View\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`db.createCollection()` method allows you to create a\ncollection or a view with specific options.\n\nThe following example creates a ``graduateStudents`` view. The view\nonly contains documents selected by the :pipeline:`$match` stage. The\noptional :ref:`collation <collation>` setting determines the sort\norder.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { sID: 18020, name: 'Harley', year: 5, score: 2.8 },\n     { sID: 17301, name: 'harley', year: 6, score: 3.1 }\n   ]\n\n.. _create-view-user-roles-system-variable-medical-example:\n\nRetrieve Medical Information for Roles Granted to the Current User\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 7.0, you can use the new :variable:`USER_ROLES`\nsystem variable to return user :ref:`roles <roles>`.\n\nThe example in this section shows users with limited access to fields in\na collection containing medical information. The example uses a view\nthat reads the current user roles from the ``USER_ROLES`` system\nvariable and hides fields based on the roles.\n\nThe example creates these users:\n\n- ``James`` with a ``Billing`` role who can access a ``creditCard``\n  field.\n- ``Michelle`` with a ``Provider`` role who can access a\n  ``diagnosisCode`` field.\n\nPerform the following steps to create the roles, users, collection, and\nview:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the roles\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "         :emphasize-lines: 8, 20\n\n         db.createView(\n            \"medicalView\", \"medical\",\n            [ {\n               $set: {\n                  \"diagnosisCode\": {\n                     $cond: {\n                        if: { $in: [\n                           \"Provider\", \"$$USER_ROLES.role\"\n                        ] },\n                        then: \"$diagnosisCode\",\n                        else: \"$$REMOVE\"\n                     }\n               }\n            },\n            }, {\n               $set: {\n                  \"creditCard\": {\n                     $cond: {\n                        if: { $in: [\n                           \"Billing\", \"$$USER_ROLES.role\"\n                        ] },\n                        then: \"$creditCard\",\n                        else: \"$$REMOVE\"\n                     }\n                  }\n               }\n            } ]\n         )\n\n      The view example:\n      \n      - includes the ``diagnosisCode`` field for a user with the\n        ``Provider`` role.\n      - includes the ``creditCard`` field for a user with the\n        ``Billing`` role.\n      - uses :pipeline:`$set` pipeline stages and :variable:`$$REMOVE\n        <REMOVE>` to hide fields based on whether the user who queries\n        the view has the matching role returned in\n        ``$$USER_ROLES.role``.\n\nPerform the following steps to retrieve the information accessible to\n``James``:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Log in as James\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 4, 8\n\n         [\n            {\n               _id: 0, patientName: 'Jack Jones',\n               creditCard: '1234-5678-9012-3456'\n            },\n            {\n               _id: 1, patientName: 'Mary Smith',\n               creditCard: '6541-7534-9637-3456'\n            }\n         ]\n\nPerform the following steps to retrieve the information accessible to\n``Michelle``:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Log in as Michelle\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3, 5\n\n         [\n            { _id: 0, patientName: 'Jack Jones',\n               diagnosisCode: 'CAS 17' },\n            { _id: 1, patientName: 'Mary Smith',\n               diagnosisCode: 'ACH 01' }\n         ]\n\n.. _create-view-user-roles-system-variable-example:\n\nRetrieve Budget Documents for Roles Granted to the Current User\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/user-roles-system-variable-introduction.rst\n\nPerform the following steps to create a view and retrieve the documents\naccessible to ``John``:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the view\n\n      .. include:: /includes/user-roles-system-variable-example-description-start.rst\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "         :emphasize-lines: 7\n\n         db.createView(\n            \"budgetView\", \"budget\",\n            [ {\n               $match: {\n                  $expr: {\n                     $not: {\n                        $eq: [ { $setIntersection: [ \"$allowedRoles\", \"$$USER_ROLES.role\" ] }, [] ]\n                     }\n                  }\n               }\n            } ]\n         )\n\n      If you cannot create the view, ensure you log in as a user with\n      the privilege to create a view.\n\n      .. include:: /includes/user-roles-system-variable-example-description.rst\n\n   .. step:: Log in as John\n\n      .. include:: /includes/user-roles-system-variable-example-login-john.rst\n\n   .. step:: Retrieve the documents\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3-6\n\n         {\n            _id: 0,\n            myRoles: [\n               { _id: 'test.Operations', role: 'Operations', db: 'test' },\n               { _id: 'test.Sales', role: 'Sales', db: 'test' },\n               { _id: 'test.read', role: 'read', db: 'test' }\n            ]\n         }\n\nBehavior\n--------\n\nThe following sections describe the behaviors of view creation and\nqueries.\n\nAggregation Optimizations\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you query a view:\n\n- Query ``filter``, ``projection``, ``sort``, ``skip``, ``limit``,\n  and other operations for :method:`db.collection.find()` are\n  converted to the equivalent :ref:`aggregation pipeline stages\n  <aggregation-pipeline-operator-reference>`.\n\n- MongoDB appends the client query to the underlying pipeline and\n  returns the results of that combined pipeline to the client. MongoDB\n  may apply :ref:`aggregation pipeline optimizations\n  <agg-pipeline-optimization>` to the combined pipeline.\n\n- The aggregation pipeline optimizer reshapes the view aggregation \n  pipeline stages to improve performance. The optimization does not \n  change the query results.\n\nResource Locking\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/createView-resource-lock.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/create-view.txt"
  },
  {
    "code": "   :copyable: false\n\n  { orderId: 201, prodId: 100, numPurchased: 20, price: 20 },\n  { orderId: 202, prodId: 101, numPurchased: 10, price: 10 },\n  { orderId: 203, prodId: 102, numPurchased: 5, price: 15 },\n  { orderId: 204, prodId: 103, numPurchased: 15, price: 17 },\n  { orderId: 205, prodId: 103, numPurchased: 20, price: 17 },\n  { orderId: 206, prodId: 102, numPurchased: 1, price: 15 },\n  { orderId: 207, prodId: 101, numPurchased: 5, price: 10 },\n  { orderId: 208, prodId: 100, numPurchased: 10, price: 20 },\n  { orderId: 209, prodId: 103, numPurchased: 30, price: 17 }\n\nQuery the View\n~~~~~~~~~~~~~~\n\nTo find the total amount sold of each product, query the view:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/join-collections-with-view.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 102, amountSold: 90 },\n     { _id: 101, amountSold: 150 },\n     { _id: 103, amountSold: 1105 },\n     { _id: 100, amountSold: 600 }\n   ]\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/views/join-collections-with-view.txt"
  },
  {
    "code": "      :copyable: false\n\n      // Update A\n      db.games.updateOne(\n         { _id: 1 },\n         {\n            $set: { score: 90 }\n         }\n      )\n      \n      // Update B\n      db.games.updateOne(\n         { _id: 1 },\n         {\n            $set: { score: 100 }\n         }\n      )\n\n   After one update operation completes, the remaining operation still\n   matches the query predicate ``{ _id: 1 }``. As a result, both update\n   operations occur and the stored ``score`` value reflects the second\n   update operation. This is problematic because the client that issued the\n   first update does not receive any indication that the update was\n   overwritten and the ``score`` value is different than expected.\n\nTo prevent conflicting write operations when your update filter is on a\ndifferent field than the one being updated, use the :update:`$inc`\noperator.\n\nFor example, consider if these update operations occur concurrently:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/core/write-operations-atomicity.txt"
  },
  {
    "code": "   :copyable: false\n\n   {  \n      title: \"Tale of Two Cities\",\n      author: \"Charles Dickens\",\n      genre: \"Historical Fiction\",\n      cover_image: \"<url>\",\n      year: 1859,\n      pages: 448,\n      price: 15.99,\n      description: \"A historical novel set during the French Revolution.\n   }\n\nIn the current schema, to display the information for the website's \nmain page, all of the book information must be queried. To reduce document \nsize and streamline queries, you can split the large document into two \nsmaller collections.  \n\nExample\n-------\n\nIn the following example, the book information is split into two \ncollections: ``mainBookInfo`` and ``additionalBookDetails``. \n\n- The ``mainBookInfo`` collection contains the information displayed on \n  the website's main page.\n\n- The ``additionalBookDetails`` collection contains extra details revealed \n  after a user clicks on the book.\n\nThe ``mainBookInfo`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/bloated-documents.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n        _id: ObjectId('666b1235eda086b5e22dbcf1'),\n        title: 'Tale of Two Cities',\n        author: 'Charles Dickens',\n        genre: 'Historical Fiction',\n        cover_image: '<url>',\n        bookId: 1234,\n        year: 1859,\n        pages: 448,\n        price: 15.99,\n        description: 'A historical novel set during the French Revolution.'\n      }\n   ]\n\nIn this example, the ``$lookup`` operation joins the ``mainBookInfo`` \ncollection with the ``additionalBookDetails`` collection using the ``_id`` \nand ``bookId`` fields. The :expression:`$mergeObjects` and \n:pipeline:`$replaceRoot` operations merge the joined documents from \nthe ``mainBookInfo`` and ``additionalBookDetails`` collections.\n\nLearn More\n----------\n\n- :ref:`schema-design-antipatterns`\n- :ref:`embedding-vs-references`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/bloated-documents.txt"
  },
  {
    "code": "   :emphasize-lines: 10, 15, 28\n\n   //orders collection\n   db.orders.insertMany( [\n      {\n         _id: 101,\n         customer_name: \"John Doe\",\n         timestamp: \"2024-05-11T10:00:00Z\",\n         products: [\n            {\n               product_id: 1,\n               name: \"Laptop\",\n               price: 1000\n            },\n            {\n               product_id: 2,\n               name: \"Headphones\",\n               price: 100\n            }\n         ],\n         total: 1100\n      },\n      {\n         _id: 102,\n         customer_name: \"Jane Smith\",\n         timestamp: \"2024-05-11T12:00:00Z\",\n         products: [\n            {\n               product_id: 2,\n               name: \"Headphones\",\n               price: 100\n            }\n         ],\n         total: 100\n      }\n   ] )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/reduce-lookup-operations.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      title: \"Harry Potter\",\n      author: \"J.K. Rowling\",\n      publisher: \"Scholastic\",\n      reviews: [ \n         {\n            user: \"Alice\",\n            review: \"Great book!\",\n            rating: 5\n         },\n         {\n            user: \"Bob\",\n            review: \"Didn't like it!\",\n            rating: 1\n         },\n         {\n            user: \"Charlie\",\n            review: \"Not bad, but could be better.\",\n            rating: 3\n         }\n      ]\n   } \n\nIn this schema, the ``reviews`` field is an unbounded array. Every time a \nnew review is created for this book, the application adds a new sub-document \nto the ``reviews`` array. As more reviews are added, the array can grow too \nlarge and strain application resources. \n\nIn this example, the bookstore application only needs to show three book \nreviews per book. To avoid unbounded arrays, you can use the subset design \npattern or :ref:`document references <data-modeling-referencing>`, depending \non your use case. \n\nSubset Pattern\n~~~~~~~~~~~~~~\n\nSubsetting data is best for when you need quick access to data that is \nnot frequently updated. Using the subset pattern, you can embed three of \nthe reviews in the book document to return all required information in a \nsingle operation. The other reviews are stored in a separate ``reviews`` \ncollection. This schema design pattern provides the following benefits:\n\n- Eliminate the unbounded array\n- Control the document size\n- Avoid use of multiple queries\n\nThe ``books`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/unbounded-arrays.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId('665de81eeda086b5e22dbcc9'),\n         title: 'Harry Potter',\n         author: 'J.K. Rowling',\n         publisher: 'Scholastic',\n         reviews: [ 'review1', 'review2', 'review3' ],\n         reviewDetails: [\n         {\n            _id: ObjectId('665de82beda086b5e22dbccb'),\n            review_id: 'review1',\n            reviewer: 'Jason',\n            review: 'Did not enjoy!',\n            rating: 1\n         },\n         {\n            _id: ObjectId('665de82beda086b5e22dbccc'),\n            review_id: 'review2',\n            reviewer: 'Pam',\n            review: 'Favorite book!',\n            rating: 5\n         },\n         {\n            _id: ObjectId('665de82beda086b5e22dbccd'),\n            review_id: 'review3',\n            reviewer: 'Bob',\n            review: 'Not bad, but could be better.',\n            rating: 3\n         } ]\n      },\n      {\n         _id: ObjectId('665de81eeda086b5e22dbcca'),\n         title: 'Pride and Prejudice',\n         author: 'Jane Austen',\n         publisher: 'Penguin',\n         reviews: [ 'review4', 'review5' ],\n         reviewDetails: [\n         {\n            _id: ObjectId('665de82beda086b5e22dbcce'),\n            review_id: 'review4',\n            reviewer: 'Tina',\n            review: 'Amazing!',\n            rating: 5\n         },\n         {\n            _id: ObjectId('665de82beda086b5e22dbccf'),\n            review_id: 'review5',\n            reviewer: 'Jacob',\n            review: 'A little overrated',\n            rating: 4\n         } ]\n      }\n   ]\n\nIn this example, the ``$lookup`` operation joins the ``books`` collection \nwith the ``reviews`` collection using the ``reviews`` array in the book \ndocument and the ``review_id`` field in the reviews documents. The \n``reviewDetails`` document stores the combined data.\n\nLearn More\n----------\n\n- :ref:`schema-design-antipatterns`\n- :ref:`embedding-vs-references`\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/unbounded-arrays.txt"
  },
  {
    "code": "         :emphasize-lines: 6,13,20,27 \n\n         [\n            {\n               name: \"building_1\",\n               key: { \"building\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('0')\", \"since\": \"ISODate('2024-06-24T17:35:00.000Z')\" },\n               spec: { \"v\": 2, \"key\": { \"building\": 1 }, \"name\": \"building_1\" }\n            },\n            {\n               name: \"day_1\",\n               key: { \"day\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('1')\", \"since\": \"ISODate('2024-06-24T17:35:30.000Z')\" },\n               spec: { \"v\": 2, \"key\": { \"day\": 1 }, \"name\": \"day_1\" }\n            },\n            {\n               name: \"time_1\",\n               key: { \"time\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('1')\", \"since\": \"ISODate('2024-06-24T17:36:00.000Z')\" },\n               spec: { \"v\": 2, \"key\": { \"time\": 1 }, \"name\": \"time_1\" }\n            },\n            {\n               name: \"day_1_time_1\",\n               key: { \"day\": 1, \"time\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('110')\", \"since\": \"ISODate('2024-06-24T17:31:21.800Z')\" },\n               spec: { \"v\": 2, \"key\": { \"day\": 1, \"time\": 1 }, \"name\": \"day_1_time_1\" }\n            },\n            {\n               name: \"_id_\",\n               key: { \"_id\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('150')\", \"since\": \"ISODate('2024-06-24T15:31:49.463Z')\" },\n               spec: { \"v\": 2, \"key\": { \"_id\": 1 }, \"name\": \"_id_\" }\n            },\n            {\n               name: \"course_name_1\",\n               key: { \"course_name\": 1 },\n               host: \"M-C02FJ3BDML85:27017\",\n               accesses: { \"ops\": \"Long('120')\", \"since\": \"ISODate('2024-06-24T17:29:26.344Z')\" },\n               spec: { \"v\": 2, \"key\": { \"course_name\": 1 }, \"name\": \"course_name_1\" }\n            },\n            ...\n         ]\n\n      - The ``building_1`` index can be dropped because it is not used \n        for any queries, as indicated by its ``accesses`` count of zero.\n\n      - The ``{ days: 1 }`` and ``{ time: 1 }`` indexes can be dropped because \n        the :ref:`compound index <index-type-compound>` ``{ day: 1, time: 1 }`` \n        covers time-related queries.\n\n      You can also use :atlas:`MongoDB Atlas Performance Advisor </performance-advisor>` \n      (available for M10 clusters or higher) and :compass:`MongoDB Compass </>` to \n      determine, hide, and drop unnecessary indexes.\n\n   .. step:: Hide Indexes\n\n      After you identify unnecessary indexes, you can use the \n      :method:`db.collection.hideIndex()` method to hide the indexes and \n      evaluate their impact on the database before you remove them.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-antipatterns/unnecessary-indexes.txt"
  },
  {
    "code": "         :emphasize-lines: 5-6\n\n         db.movies.insertOne(\n            {\n               _id: 1,\n               title: \"Lost in the Shadows\",\n               total_viewers: 1840,\n               total_revenue: 25880\n            }\n         )\n\n   .. step:: Updated computed data\n\n      Consider a new screening is added to the ``screenings``\n      collection:\n      \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/computed-values/computed-schema-pattern.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 5-6\n\n         [\n            {\n               _id: 1,\n               title: 'Lost in the Shadows',\n               total_viewers: 2600,\n               total_revenue: 33480\n            }\n         ]\n\nResults\n-------\n\nThe computed pattern reduces CPU workload and increases application\nperformance. Consider the computed pattern your application performs the\nsame calculations repeatedly and has a high read to write ratio.\n\nLearn More\n----------\n\n- :ref:`approximation-schema-pattern`\n- :ref:`schema-pattern-group-data`\n- :ref:`data-modeling-data-consistency`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/computed-values/computed-schema-pattern.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 5-6\n\n         {\n            _id: ObjectId(\"661e873d1a930b8ea1f75c57\"),\n            policyId: 1,\n            customerName: 'Michelle',\n            revision: 2,\n            itemsInsured: [ 'golf clubs', 'car', 'watch' ],\n            dateSet: ISODate(\"2024-04-16T14:12:24.476Z\")\n         }\n\n   .. step:: Write the updated policy to the policyRevisions collection\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/data-versioning/document-versioning.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: ObjectId(\"6626c8f02a98aba8ddec31d1\"),\n               policyId: 1,\n               customerName: 'Michelle',\n               revision: 1,\n               itemsInsured: [ 'golf clubs', 'car' ],\n               dateSet: ISODate(\"2024-04-22T20:30:40.809Z\")\n            },\n            {\n               _id: ObjectId(\"6626c92b2a98aba8ddec31d2\"),\n               customerName: 'Michelle',\n               dateSet: ISODate(\"2024-04-22T20:31:03.000Z\"),\n               itemsInsured: [ 'golf clubs', 'car', 'watch' ],\n               policyId: 1,\n               revision: 2\n            }\n         ]\n\nNext Steps\n----------\n\nTo view a customer's policy history, you can sort the\n``policyRevisions`` collection by revision. Consider if the customer\nMichelle makes another change to her policy and no longer wants to\ninsure her golf clubs.\n\n.. procedure::\n   :style: normal\n\n   .. step:: Update the policy in the currentPolicies collection\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/data-versioning/document-versioning.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 5-6\n\n         {\n            _id: ObjectId(\"661e873d1a930b8ea1f75c57\"),\n            policyId: 1,\n            customerName: 'Michelle',\n            revision: 3,\n            itemsInsured: [ 'car', 'watch' ],\n            dateSet: ISODate(\"2024-04-16T14:13:38.203Z\")\n         }\n\n   .. step:: Write the updated policy to the policyRevisions collection\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/data-versioning/document-versioning.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           \"customerId\": 123,\n           \"history\": [\n             {\n               \"type\": \"buy\",\n               \"ticker\": \"MDB\",\n               \"qty\": 419,\n               \"date\": ISODate(\"2023-10-26T15:47:03.434Z\")\n             },\n             {\n               \"type\": \"sell\",\n               \"ticker\": \"MDB\",\n               \"qty\": 29,\n               \"date\": ISODate(\"2023-10-30T09:32:57.765Z\")\n             }\n           ]\n         },\n         { \n           \"customerId\": 456,\n           \"history\": [\n             {\n               \"type\" : \"buy\", \n               \"ticker\" : \"GOOG\",\n               \"quantity\" : 50, \n               \"date\" : ISODate(\"2023-10-31T11:16:02.120Z\") \n             }\n           ]\n         }\n\n      With the bucket pattern:\n      \n      - Documents with common ``customerId`` values are condensed into a\n        single document, with the ``customerId`` being a top-level\n        field.\n        \n      - Trades for that customer are grouped into an embedded array\n        field, called ``history``.\n\n   .. step:: Add an identifier and count for each bucket\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/group-data/bucket-pattern.txt"
  },
  {
    "code": "         :emphasize-lines: 6,8,25,27\n         :linenos:\n\n         db.trades.drop()\n         \n         db.trades.insertMany(\n           [\n             {\n               \"_id\": \"123_1698349623\",\n               \"customerId\": 123,\n               \"count\": 2,\n               \"history\": [\n                 {\n                   \"type\": \"buy\",\n                   \"ticker\": \"MDB\",\n                   \"qty\": 419,\n                   \"date\": ISODate(\"2023-10-26T15:47:03.434Z\")\n                 },\n                 {\n                   \"type\": \"sell\",\n                   \"ticker\": \"MDB\",\n                   \"qty\": 29,\n                   \"date\": ISODate(\"2023-10-30T09:32:57.765Z\")\n                 }\n               ]\n             },\n             {\n               \"_id\": \"456_1698765362\",\n               \"customerId\": 456,\n               \"count\": 1,\n               \"history\": [\n                 {\n                   \"type\" : \"buy\", \n                   \"ticker\" : \"GOOG\",\n                   \"quantity\" : 50, \n                   \"date\" : ISODate(\"2023-10-31T11:16:02.120Z\") \n                 }\n               ]\n             },\n           ]\n         )\n      \n      The ``_id`` field value is a concatenation of the ``customerId``\n      and the first trade time in seconds (since the :term:`unix epoch`)\n      in the ``history`` field.\n\n      The ``count`` field indicates how many elements are in that\n      document's ``history`` array. The ``count`` field is used to\n      implement pagination logic.\n\nNext Steps\n----------\n\nAfter you update your schema to use the bucket pattern, update your\napplication logic for reading and writing data. See the following\nsections:\n\n- :ref:`bucket-pattern-next-steps-query`\n\n- :ref:`bucket-pattern-next-steps-insert`\n\n.. _bucket-pattern-next-steps-query:\n\nQuery for Data with the Bucket Pattern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn the updated schema, each document contains data for a single page in\nthe application. You can use the ``_id`` and ``count`` field to\ndetermine how to return and update data.\n\nTo query for data on the appropriate page, use a regex query to return\ndata for a specified ``customerId``, and use :method:`skip\n<cursor.skip()>` to return to the data for the correct page. The regex\nquery on ``_id`` uses the :ref:`default _id index <index-type-id>`,\nwhich results in performant queries without the need for an additional\nindex.\n\nThe following query returns data for the first page of trades for\ncustomer ``123``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/group-data/bucket-pattern.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: '123_1698349623',\n       customerId: 123,\n       count: 3,\n       history: [\n         {\n           type: 'buy',\n           ticker: 'MDB',\n           qty: 419,\n           date: ISODate(\"2023-10-26T15:47:03.434Z\")\n         },\n         {\n           type: 'sell',\n           ticker: 'MDB',\n           qty: 29,\n           date: ISODate(\"2023-10-30T09:32:57.765Z\")\n         },\n         {\n           type: 'buy',\n           ticker: 'MSFT',\n           qty: 42,\n           date: ISODate(\"2023-11-02T11:43:10.000Z\")\n         }\n       ]\n     },\n     {\n       _id: '456_1698765362',\n       customerId: 456,\n       count: 1,\n       history: [\n         {\n           type: 'buy',\n           ticker: 'GOOG',\n           quantity: 50,\n           date: ISODate(\"2023-10-31T11:16:02.120Z\")\n         }\n       ]\n     }\n   ]\n\nResults\n-------\n\nAfter you implement the bucket pattern, you don't need to incorporate\npagination logic to return results in your application. The way the data\nis stored matches the way it is used in the application.\n\nLearn More\n----------\n\n- :ref:`manual-timeseries-collection`\n\n- :ref:`embedded-vs-linked-data`\n\n- :pipeline:`$bucket` aggregation stage\n\n- `MongoDB University Data Modeling Course\n  <https://learn.mongodb.com/learning-paths/data-modeling-for-mongodb>`__\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/group-data/bucket-pattern.txt"
  },
  {
    "code": "         :emphasize-lines: 8\n         :copyable: false\n\n         db.sales.insertOne(\n            {\n               \"_id\": 2,\n               \"title\": \"The Wooden Amulet\",\n               \"year\": 2023,\n               \"author\": \"Lesley Moreno\",\n               \"customers_purchased\": [ \"user00\", \"user01\", \"user02\", ... \"user49\" ],\n               \"has_extras\": true\n            }\n         )\n      \n   .. step:: Store additional sales in a separate collection\n\n      Create a collection called ``extra_sales`` to store sales beyond\n      the initial 50. Link documents from the ``extra_sales`` collection\n      to the ``sales`` collection with a reference:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/group-data/outlier-pattern.txt"
  },
  {
    "code": "         :copyable: false\n\n         db.extra_sales.insertOne(\n            {\n               \"book_id\": 2,\n               \"customers_purchased_extra\": [ \"user50\", \"user51\", \"user52\", ... \"user999\" ]\n            }\n         )\n\nResults\n-------\n\nThe outlier pattern prevents atypical documents from impacting query\nperformance. The resulting schema avoids large documents in the\ncollection while maintaining a full list of sales.\n\nConsider an application page that shows information about a book and all\nusers who bought that book. After implementing the outlier pattern, the\npage displays information for most books (typical documents) quickly.\n\nFor popular books (outliers), the application performs an extra query in\nthe ``extra_sales`` collection on ``book_id``. To improve performance\nfor this query, you can create an index on the ``book_id`` field.\n\n.. _outlier-pattern-updates:\n\nUpdates for Outliers\n~~~~~~~~~~~~~~~~~~~~\n\nYou need to handle updates for outlier documents differently than\ntypical documents. The logic you use to perform updates depends on your\nschema design.\n\nTo perform updates for outliers for the preceding schema,\nimplement the following application logic:\n\n- Check if the document being updated has ``has_extras`` set to\n  ``true``.\n\n  - If ``has_extras`` is missing or ``false``, add the new purchases\n    to the ``sales`` collection.\n      \n    - If the resulting ``customers_purchased`` array contains more than\n      50 elements, set ``has_extras`` to ``true``.\n\n  - If ``has_extras`` is ``true``, add the new purchases to the\n    ``sales_extras`` collection for the corresponding ``book_id``.\n\nLearn More\n----------\n\n- :ref:`group-data-bucket-pattern`\n\n- :atlas:`Avoid Unbounded Arrays </schema-suggestions/avoid-unbounded-arrays>`\n\n- :ref:`data-modeling-decisions`\n\n- :ref:`model-computed-data`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/group-data/outlier-pattern.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: ObjectId('66eb4160ef006be6eda8e2ee'),\n               product_type: 'ebook',\n               title: 'Practical MongoDB Aggregations',\n               author: 'Paul Done',\n               rating: 4.8,\n               genres: [ 'programming' ],\n               pages: 338,\n               download_url: '<url>'\n            },\n            {\n               _id: ObjectId('66eb4160ef006be6eda8e2ef'),\n               product_type: 'audiobook',\n               title: 'Practical MongoDB Aggregations',\n               author: 'Paul Done',\n               rating: 4.6,\n               genres: [ 'programming' ],\n               narrators: [ 'Paul Done' ],\n               duration: { hours: 21, minutes: 8 },\n               time_by_chapter: [\n                  { chapter: 1, start: '00:00:00', end: '01:00:00' },\n                  { chapter: 2, start: '01:00:00', end: '01:55:00' }\n               ]\n            },\n            {\n               _id: ObjectId('66eb4160ef006be6eda8e2f0'),\n               product_type: 'physical_book',\n               title: 'Practical MongoDB Aggregations',\n               author: 'Paul Done',\n               rating: 4.9,\n               genres: [ 'programming' ],\n               pages: 338,\n               stock: 132,\n               delivery_time: 2\n            }\n         ]\n\n   .. step:: Query unique fields\n\n      The inheritance pattern does not require additional logic to\n      query on fields that are specific to a particular media type. For\n      example, the following query returns books that have a duration\n      longer than 20 hours, which only applies to the product type\n      ``audio_book``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/polymorphic-data/inheritance-schema-pattern.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: ObjectId('66eb4160ef006be6eda8e2ef'),\n               product_type: 'audiobook',\n               title: 'Practical MongoDB Aggregations',\n               author: 'Paul Done',\n               rating: 4.6,\n               genres: [ 'programming' ],\n               narrators: [ 'Paul Done' ],\n               duration: { hours: 21, minutes: 8 },\n               time_by_chapter: [\n                  { chapter: 1, start: '00:00:00', end: '01:00:00' },\n                  { chapter: 2, start: '01:00:00', end: '01:55:00' }\n               ]\n            }\n         ]\n\nLearn More\n----------\n\n- :ref:`polymorphic-schema-pattern`\n\n- :ref:`schema-validation-overview`\n\n- :ref:`create-indexes-to-support-queries`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/polymorphic-data/inheritance-schema-pattern.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: ObjectId('6706dcd66fd2c3b24f2e7e92'),\n               sport: 'bowling',\n               name: 'Earl Anthony',\n               career_earnings: 1440000,\n               perfect_games: 25,\n               pba_championships: 43,\n               events: [ { name: 'japan_pba', score: 300, year: 1972 } ]\n            },\n            {\n               _id: ObjectId('6706dcd66fd2c3b24f2e7e93'),\n               sport: 'tennis',\n               name: 'Steffi Graf',\n               career_earnings: 21000000,\n               grand_slam_wins: 22,\n               surfaces: [ 'grass', 'clay', 'hard court' ]\n            },\n            {\n               _id: ObjectId('6706dcd66fd2c3b24f2e7e94'),\n               sport: 'cricket',\n               name: 'Sachin Tendulkar',\n               career_earnings: 8000000,\n               runs: 15921,\n               centuries: 51,\n               teammates: [ 'Arshad Ayub', 'Kapil Dev' ]\n            }\n         ]\n\n   .. step:: Query unique fields\n\n      The polymorphic pattern does not require additional logic to query\n      on fields that are specific to a particular sport. For example,\n      the following query returns athletes that have more than 20 grand\n      slam wins, which only applies to athletes who play tennis:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/polymorphic-data/polymorphic-schema-pattern.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: ObjectId('6706cd8a6fd2c3b24f2e7e8d'),\n               sport: 'tennis',\n               name: 'Steffi Graf',\n               career_earnings: 21000000,\n               grand_slam_wins: 22,\n               surfaces: [ 'grass', 'clay', 'hard court' ]\n            }\n         ]\n\nLearn More\n----------\n\n- :ref:`inheritance-schema-pattern`\n\n- :ref:`schema-validation-overview`\n\n- :ref:`create-indexes-to-support-queries`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/design-patterns/polymorphic-data/polymorphic-schema-pattern.txt"
  },
  {
    "code": "   :copyable: false\n\n   // products collection\n\n      [\n         {\n            _id: 111,\n            sellerId: 456,\n            name: \"sweater\",\n            price: 30,         \n            rating: 4.9,\n            color: \"green\"\n         },\n         {\n            _id: 222,\n            sellerId: 456,\n            name: \"t-shirt\",\n            price: 10,         \n            rating: 4.2,\n            color: \"blue\"\n         },\n         {\n            _id: 333,\n            sellerId: 456,\n            name: \"vest\",\n            price: 20,         \n            rating: 4.7,\n            color: \"red\"\n         }\n      ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/enforce-consistency/embed-data.txt"
  },
  {
    "code": "   :copyable: false\n\n   // sellers collection\n\n      [\n         {\n            _id: 456,\n            name: \"Cool Clothes Co\",\n            location: {\n               address: \"21643 Andreane Shores\",\n               state: \"Ohio\",\n               country: \"United States\"\n            },\n            phone: \"567-555-0105\",\n            products: [\n               {\n                  id: 111,\n                  name: \"sweater\",\n                  price: 30\n               },\n               {\n                  id: 222,\n                  name: \"t-shirt\",\n                  price: 10\n               },\n               {\n                  id: 333\n                  name: \"vest\",\n                  price: 20\n               }\n            ]\n         }\n      ]\n\nSteps\n-----\n\nTo denormalize the schema and enforce consistency, embed the product\ninformation inside of the ``sellers`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/enforce-consistency/embed-data.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 6\n\n   [\n      {\n        _id: ObjectId(\"64d506c3ddebf45734d06c58\"),\n        sellerId: 456,\n        name: 'vest',\n        price: 25,\n        rating: 4.7\n      } \n   ]\n\nQuery the Sellers Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/enforce-consistency/transactions.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 15\n\n   [\n      {\n        _id: ObjectId(\"64d516d9ddebf45734d06c5a\"),\n        id: 456,\n        name: 'Cool Clothes Co',\n        location: {\n          address: '21643 Andreane Shores',\n          state: 'Ohio',\n          country: 'United States'\n        },\n        phone: '567-555-0105',\n        products: [\n          { name: 'sweater', price: 30 },\n          { name: 't-shirt', price: 10 },\n          { name: 'vest', price: 25 }\n        ]\n      }\n   ]\n\nLearn More\n----------\n\nTo see other ways to enforce data consistency, see:\n\n- :atlas:`Atlas Database Triggers\n  </app-services/triggers/database-triggers/>`\n\n- :ref:`enforce-consistency-embedding`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/enforce-consistency/transactions.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.movie.insertOne(\n     {\n       _id: 1,\n       title: \"Titanic\",\n       year: 1997,\n       director: \"James Cameron\",\n       runtime: 194,\n       distributor: \"Paramount Pictures\",\n       languages: [ \"English\" ],\n       total_views: 3500\n     }\n   )\n\ntheater Collection\n~~~~~~~~~~~~~~~~~~\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/schema-design-process/apply-patterns.txt"
  },
  {
    "code": "   :emphasize-lines: 14,29\n\n   db.theater.insertMany(\n     [\n       {\n         name: \"Downtown Cinemas\",\n         address: {\n           street: \"2212 Taylor Street\",\n           state: \"NY\"\n         },\n         movies: [\n           {\n              movie_id: 1,\n              title: \"Titanic\",\n              runtime: 194,\n              views: 1500\n           }\n         ]\n       },\n       {\n         name: \"Midtown Theater\",\n         address: {\n           street: \"1232 5th Street\",\n           state: \"NY\"\n         },\n         movies: [\n           {\n              movie_id: 1,\n              title: \"Titanic\",\n              runtime: 194,\n              views: 2000\n           }\n         ]\n       }\n     ]\n   )\n  \n\nLearn More\n----------\n\n- :ref:`data-models-application-context`\n\n- :ref:`data-modeling-duplicate-data`\n\n- :ref:`data-modeling-data-consistency`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/schema-design-process/apply-patterns.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   db.articles.insertOne(\n      {\n         title: \"My Favorite Vacation\",\n         date: ISODate(\"2023-06-02\"),\n         text: \"We spent seven days in Italy...\",\n         authorId: 987,\n         tags: [\n            {\n               name: \"travel\",\n               url: \"<blog-site>/tags/travel\"\n            },\n            {\n               name: \"adventure\",\n               url: \"<blog-site>/tags/adventure\"\n            }\n         ],\n         comments: [\n            {\n               name: \"pedro345\",\n               text: \"Great article!\"\n            }\n         ]\n      }\n   )\n\nAuthors Collection\n``````````````````\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/schema-design-process/map-relationships.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.authors.insertOne(\n      {\n         _id: 987,\n         name: \"alice123\",\n         email: \"alice@mycompany.com\",\n         avatar: \"photo1.jpg\"\n      }\n   )\n\nNext Steps\n----------\n\nAfter you map relationships for your application's data, the next step\nin the schema design process is to apply design patterns to optimize\nyour schema. See :ref:`data-modeling-apply-patterns`.\n\nLearn More\n----------\n\n- :ref:`databases-and-collections`\n\n- :ref:`data-modeling-duplicate-data`\n\n- :ref:`data-model-example-keyword-search`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/data-modeling/schema-design-process/map-relationships.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"userMetadata\" : { \"likes\" : [ \"dogs\", \"cats\" ] } }\n   { \"userMetadata\" : { \"dislikes\" : \"pickles\" } }\n   { \"userMetadata\" : { \"age\" : 45 } }\n   { \"userMetadata\" : \"inactive\" }\n\nAdministrators want to create indexes to support queries on any\nsubfield of ``userMetadata``.\n\nA wildcard index on ``userMetadata``\ncan support single-field queries on ``userMetadata``,\n``userMetadata.likes``, ``userMetadata.dislikes``, and\n``userMetadata.age``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/4.2-changes/wildcard-indexes-refactored.rst"
  },
  {
    "code": "   :copyable: false\n\n   db.userData.find({ \"userMetadata.likes\" : \"dogs\" })\n   db.userData.find({ \"userMetadata.dislikes\" : \"pickles\" })\n   db.userData.find({ \"userMetadata.age\" : { $gt : 30 } })\n   db.userData.find({ \"userMetadata\" : \"inactive\" })\n\nA non-wildcard index on ``userMetadata`` can only support queries on\nvalues of ``userMetadata``.\n\n.. important::\n\n   Wildcard indexes are not designed to replace workload-based index\n   planning. For more information on creating indexes to support\n   queries, see :ref:`create-indexes-to-support-queries`. For \n   complete documentation on wildcard index limitations, see \n   :ref:`wildcard-index-restrictions`.\n\n\nThe :binary:`~bin.mongod` \n:ref:`featureCompatibilityVersion <view-fcv>` must be ``4.2`` to\ncreate wildcard indexes. For instructions on setting the FCV, see \n:ref:`Setting the FCV <set-fcv>`.\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/4.2-changes/wildcard-indexes-refactored.rst"
  },
  {
    "code": "   :copyable: false\n\n   if [ (#arbiters > 0) AND (#non-arbiters <= majority(#voting-nodes)) ]\n       defaultWriteConcern = { w: 1 }\n   else\n       defaultWriteConcern = { w: \"majority\" }\n\nFor example, consider the following deployments and their respective\ndefault write concerns:\n\n.. list-table::\n   :header-rows: 1\n   \n   * - Non-Arbiters\n     - Arbiters\n     - Voting Nodes\n     - Majority of Voting Nodes\n     - Implicit Default Write Concern\n\n   * - 2\n     - 1\n     - 3\n     - 2\n     - ``{ w: 1 }``\n\n   * - 4\n     - 1\n     - 5\n     - 3\n     - ``{ w: \"majority\" }``\n\n- In the first example:\n\n  - There are 2 non-arbiters and 1 arbiter for a total of 3 voting\n    nodes.\n    \n  - The majority of voting nodes (1 plus half of 3, rounded\n    down) is 2.\n    \n  - The number of non-arbiters (2) is equal to\n    the majority of voting nodes (2), resulting in an implicit write\n    concern of ``{ w: 1 }``.\n\n- In the second example:\n\n  - There are 4 non-arbiters and 1 arbiter for a total of 5\n    voting nodes.\n    \n  - The majority of voting nodes (1 plus half of 5, rounded\n    down) is 3.\n    \n  - The number of non-arbiters (4) is greater than the majority\n    of voting nodes (3), resulting in an implicit write concern of\n    ``{ w: \"majority\" }``.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/5.0-default-wc.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      userId: <uuid>,\n      firstName: <string>,\n      lastName: <string>,\n      body: <string>,  // the field that can be modified.\n      date: <date>,    // the field that can be modified.\n   }\n\nBackground Information\n~~~~~~~~~~~~~~~~~~~~~~\n\n- The app has 1500 users.\n- There are 30 last names and 45 first names, some more common than \n  others. \n- There are three celebrity users. \n- Each user follows exactly five other users and has a very high \n  probability of following at least one celebrity user.\n\nSample Workload \n~~~~~~~~~~~~~~~\n\n- Each user posts about two posts a day at random times. They edit each \n  post once, right after it is posted.\n- Each user logs in every six hours to read their own profile and posts \n  by the users they follow from the past 24 hours. They also reply under \n  a random post from the past three hours.\n- For every user, the app removes posts that are more than three days \n  old at midnight.\n\nWorkload Query Patterns\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThis workload has the following query patterns:\n\n- ``find`` command with filter \n  ``{ userId: , firstName: , lastName: }``\n- ``find`` command with filter \n  ``{ $or: [{ userId: , firstName: , lastName:, date: { $gte:  }, ] }``\n- ``findAndModify`` command with filter \n  ``{ userId: , firstName: , lastName: , date:  }`` to \n  update the body and date field.\n- ``update`` command with ``multi: false`` and filter \n  ``{ userId: , firstName: , lastName: , date: { $gte: , $lt:  } }`` \n  to update the body and date field.\n- ``delete`` command with ``multi: true`` and filter \n  ``{ userId: , firstName: , lastName: , date: { $lt:  } }``\n\nBelow are example metrics returned by |analyzeShardKey| for some \ncandidate shard keys, with sampled queries collected from seven days of \nworkload.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-example-intro.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"keyCharacteristics\": {\n        \"numDocsTotal\" : 9039,\n        \"avgDocSizeBytes\" : 153,\n        \"numDocsSampled\" : 9039,\n        \"isUnique\" : false,\n        \"numDistinctValues\" : 30,\n        \"mostCommonValues\" : [\n            {\n              \"value\" : {\n                  \"lastName\" : \"Smith\"\n              },\n              \"frequency\" : 1013\n            },\n            {\n              \"value\" : {\n                  \"lastName\" : \"Johnson\"\n              },\n              \"frequency\" : 984\n            },\n            {\n              \"value\" : {\n                  \"lastName\" : \"Jones\"\n              },\n              \"frequency\" : 962\n            },\n            {\n              \"value\" : {\n                  \"lastName\" : \"Brown\"\n              },\n              \"frequency\" : 925\n            },\n            {\n              \"value\" : {\n                  \"lastName\" : \"Davies\"\n              },\n              \"frequency\" : 852\n            }\n        ],\n        \"monotonicity\" : {\n          \"recordIdCorrelationCoefficient\" : 0.0771959161,\n          \"type\" : \"not monotonic\"\n      },\n    }\n   }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-example1-output.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"keyCharacteristics\": {\n       \"numDocsTotal\" : 9039,\n       \"avgDocSizeBytes\" : 162,\n       \"numDocsSampled\" : 9039,\n       \"isUnique\" : false,\n       \"numDistinctValues\" : 1495,\n       \"mostCommonValues\" : [\n         {\n           \"value\" : {\n             \"userId\" : UUID(\"aadc3943-9402-4072-aae6-ad551359c596\")\n           },\n           \"frequency\" : 15\n         },\n        {\n          \"value\" : {\n            \"userId\" : UUID(\"681abd2b-7a27-490c-b712-e544346f8d07\")\n          },\n          \"frequency\" : 14\n        },\n        {\n          \"value\" : {\n            \"userId\" : UUID(\"714cb722-aa27-420a-8d63-0d5db962390d\")\n          },\n          \"frequency\" : 14\n        },\n        {\n          \"value\" : {\n            \"userId\" : UUID(\"019a4118-b0d3-41d5-9c0a-764338b7e9d1\")\n          },\n          \"frequency\" : 14\n        },\n        {\n          \"value\" : {\n            \"userId\" : UUID(\"b9c9fbea-3c12-41aa-bc69-eb316047a790\")\n          },\n          \"frequency\" : 14\n        }\n      ],\n      \"monotonicity\" : {\n        \"recordIdCorrelationCoefficient\" : -0.0032039729,\n        \"type\" : \"not monotonic\"\n      },\n    }\n   }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-example2-output.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"readDistribution\" : {\n        \"sampleSize\" : {\n          \"total\" : 61363,\n          \"find\" : 61363,\n          \"aggregate\" : 0,\n          \"count\" : 0,\n          \"distinct\" : 0\n        },\n        \"percentageOfSingleShardReads\" : 50.0008148233,\n        \"percentageOfMultiShardReads\" : 49.9991851768,\n        \"percentageOfScatterGatherReads\" : 0,\n        \"numReadsByRange\" : [\n          688,\n          775,\n          737,\n          776,\n          652,\n          671,\n          1332,\n          1407,\n          535,\n          428,\n          985,\n          573,\n          1496,\n          ...\n          ],\n        },\n      \"writeDistribution\" : {\n        \"sampleSize\" : {\n          \"total\" : 49638,\n          \"update\" : 30680,\n          \"delete\" : 7500,\n          \"findAndModify\" : 11458\n        },\n        \"percentageOfSingleShardWrites\" : 100,\n        \"percentageOfMultiShardWrites\" : 0,\n        \"percentageOfScatterGatherWrites\" : 0,\n        \"numWritesByRange\" : [\n          389,\n          601,\n          430,\n          454,\n          462,\n          421,\n          668,\n          833,\n          493,\n          300,\n          683,\n          460,\n          ...\n         ],\n         \"percentageOfShardKeyUpdates\" : 0,\n         \"percentageOfSingleWritesWithoutShardKey\" : 0,\n         \"percentageOfMultiWritesWithoutShardKey\" : 0\n       }\n   }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-example3-output.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      keyCharacteristics: {\n         numDocsTotal: <integer>,\n         numOrphanDocs: <integer>, \n         avgDocSizeBytes: <integer>,\n         numDocsSampled: <integer>,\n         isUnique: <bool>,\n         numDistinctValues: <integer>,\n         mostCommonValues: [\n           { value: <shardkeyValue>, frequency: <integer> },\n           ...\n         ],\n         monotonicity: {\n           recordIdCorrelationCoefficient: <double>,\n           type: \"monotonic\"|\"not monotonic\"|\"unknown\",\n       }\n     }\n   }\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 30 20 30 \n\n   * - Field\n     - Type\n     - Description\n     - Usage    \n\n   * - ``numDocsTotal``\n     - integer\n     - The number of documents in the collection.\n     - \n\n   * - ``numOrphanDocs``\n     - integer\n     - The number of orphan documents.\n     - Orphan documents are not excluded from metrics calculation for \n       performance reasons. If ``numOrphanDocs`` is large relative \n       to ``numDocsTotal``, consider waiting until the number of orphan \n       documents is very small compared to the total number of documents \n       in the collection to run the command.\n\n   * - ``avgDocSizeBytes``\n     - integer\n     - The average size of documents in the collection, in bytes.\n     - If ``numDocsTotal`` is comparable to ``numDocsSampled``, you can\n       estimate the size of the largest chunks by multiplying the \n       ``frequency`` of each ``mostCommonValues`` by \n       ``avgDocSizeBytes``.\n\n   * - ``numDocsSampled``\n     - integer\n     - The number of sampled documents.\n     - \n\n   * - ``numDistinctValues``\n     - integer\n     - The number of distinct shard key values.\n     - Choose a shard key with a large ``numDistinctValues`` since the \n       number of distinct shard key values is the maximum number of \n       chunks that the balancer can create.\n   \n   * - ``isUnique``\n     - boolean\n     - Indicates whether the shard key is unique. This is only set to \n       ``true`` if there is a unique index for the shard key.\n     - If the shard key is unique, then the number of distinct values \n       is equal to the number of documents. \n   \n   * - ``mostCommonValues``\n     - array of documents\n     - An array of value and ``frequency`` (number of documents) of \n       the top most common shard key values.\n     - The frequency of a shard key value is the minimum number of \n       documents in the chunk containing that value. If the frequency \n       is large, then the chunk can become a bottleneck for storage, \n       reads and writes. Choose a shard key where the frequency for \n       each most common value is low relative to ``numDocsSampled``.  \n\n       The number of most common shard key values can be configured\n       by setting ``analyzeShardKeyNumMostCommonValues`` which defaults \n       to ``5``. To avoid exceeding the 16MB BSON size limit for the \n       response, each value is set to \"truncated\" if its size exceeds \n       15MB / \n       :ref:`analyzeShardKey\n       NumMostCommonValues <ask-nmcv-param>`.\n\n   * - ``mostCommonValues[n].value``\n     - document\n     - The shard key.\n     - \n   \n   * - ``mostCommonValues[n].frequency``\n     - integer\n     - The number of documents for a given shard key.\n     - Choose a shard key where the frequency for each most common \n       value is low relative to ``numDocsSampled``.\n\n   * - ``monotonicity.``\n       ``recordIdCorrelationCoefficient``\n     - double\n     - Only set if the monotonicity is known.\n     - This is set to ``\"unknown\"`` when the one of the following is\n       true:\n\n       - The shard key does not have a supporting index per \n         ``shardCollection`` definition.\n       - The collection is :ref:`clustered <clustered-collections>`.\n       - The shard key is a hashed compound shard key where the hashed \n         field is not the first field. \n\n       The monotonicity check can return an incorrect result if the \n       collection has gone through chunk migrations. Chunk migration \n       deletes documents from the donor shard and re-inserts them on \n       the recipient shard. There is no guarantee that the insertion \n       order from the client is preserved.\n\n       You can configure the threshold for the correlation coefficient \n       with \n       :ref:`analyzeShardKeyMonotonicity\n       CorrelationCoefficientThreshold <ask-mcct-param>`.\n\n   * - ``monotoncity.type``\n     - string\n     - Can be one of: \n\n       ``\"monotonic\"``,\n       ``\"not monotonic\"``,\n       ``\"unknown\"``\n     - Avoid a shard key with type ``\"monotonic\"`` unless you do not \n       expect to insert new documents often.\n\n       If a collection is sharded on a shard key that is monotonically \n       increasing or decreasing, new documents will be inserted onto \n       the shard that owns the ``MaxKey`` or ``MinKey`` chunk. That \n       shard can become the bottleneck for inserts and the data will \n       likely be unbalanced most of the time since the balancer will \n       need to compete with the inserts that come in. \n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-keyCharacteristics.rst"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      readDistribution: {\n        sampleSize: {\n          total: <integer>,\n          find: <integer>,\n          aggregate: <integer>,\n          count: <integer>,\n          distinct: <integer>\n        },\n        percentageOfSingleShardReads: <double>,\n        percentageOfMultiShardReads: <double>,\n        percentageOfScatterGatherReads: <double>,\n        numReadsByRange: [\n          <integer>,\n          ...\n        ]\n      },\n      writeDistribution: {\n        sampleSize: {\n          total: <integer>,\n          update: <integer>,\n          delete: <integer>,\n          findAndModify: <integer>\n        },\n        percentageOfSingleShardWrites: <double>,\n        percentageOfMultiShardWrites: <double>,\n        percentageOfScatterGatherWrites: <double>,\n        numWritesByRange: [\n          <integer>,\n          ...     \n        ],\n        percentageOfShardKeyUpdates: <double>,\n        percentageOfSingleWritesWithoutShardKey: <double>,\n        percentageOfMultiWritesWithoutShardKey: <double>\n      }\n   }\n\n.. include:: /includes/analyzeShardKey-read-and-write-distribution-metrics.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/analyzeShardKey-readWriteDistribution-structure.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       id: '6524096020da840844a4c4a7',\n       name: 'default',\n       status: 'BUILDING',\n       queryable: true,\n       latestDefinitionVersion: {\n         version: 2,\n         createdAt: ISODate(\"2023-10-09T14:51:57.355Z\")\n       },\n       latestDefinition: {\n         mappings: { dynamic: true },\n         storedSource: { include: [ 'awards.text' ] }\n       },\n       statusDetail: [\n         {\n           hostname: 'atlas-n1cm1j-shard-00-02',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           },\n           stagedIndex: {\n             status: 'PENDING',\n             queryable: false,\n             definitionVersion: {\n               version: 1,\n               createdAt: ISODate(\"2023-10-09T14:51:29.000Z\")\n             },\n             definition: {\n               mappings: { dynamic: true, fields: {} },\n               storedSource: true\n             }\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-01',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           },\n           stagedIndex: {\n             status: 'PENDING',\n             queryable: false,\n             definitionVersion: {\n               version: 1,\n               createdAt: ISODate(\"2023-10-09T14:51:29.000Z\")\n             },\n             definition: {\n               mappings: { dynamic: true, fields: {} },\n               storedSource: true\n             }\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-00',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           }\n         }\n       ]\n     },\n     {\n       id: '65240be420da840844a4d077',\n       name: 'synonym_mappings',\n       status: 'READY',\n       queryable: true,\n       latestDefinitionVersion: {\n         version: 0,\n         createdAt: ISODate(\"2023-10-09T14:19:16.305Z\")\n       },\n       latestDefinition: {\n         mappings: {\n           dynamic: true,\n           fields: {\n             fullplot: { type: 'string' }\n           }\n         },\n         synonyms: [\n           {\n             name: 'synonym_mapping',\n             analyzer: 'lucene.english',\n             source: { collection: 'synonyms' }\n           }\n         ]\n       },\n       synonymMappingStatus: 'READY',\n       synonymMappingStatusDetail: [\n         {\n           synonym_mapping: {\n             status: 'READY',\n             queryable: true\n           }\n         }\n       ],\n       statusDetail: [\n         {\n           hostname: 'atlas-n1cm1j-shard-00-02',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-01',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-00',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         }\n       ]\n     }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/atlas-search-commands/command-output/examples/multi-doc-example-output.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       id: '6524096020da840844a4c4a7',\n       name: 'default',\n       status: 'BUILDING',\n       queryable: true,\n       latestDefinitionVersion: {\n         version: 2,\n         createdAt: ISODate(\"2023-10-09T14:51:57.355Z\")\n       },\n       latestDefinition: {\n         mappings: { dynamic: true },\n         storedSource: { include: [ 'awards.text' ] }\n       },\n       statusDetail: [\n         {\n           hostname: 'atlas-n1cm1j-shard-00-02',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           },\n           stagedIndex: {\n             status: 'PENDING',\n             queryable: false,\n             definitionVersion: {\n               version: 1,\n               createdAt: ISODate(\"2023-10-09T14:51:29.000Z\")\n             },\n             definition: {\n               mappings: { dynamic: true, fields: {} },\n               storedSource: true\n             }\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-01',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           },\n           stagedIndex: {\n             status: 'PENDING',\n             queryable: false,\n             definitionVersion: {\n               version: 1,\n               createdAt: ISODate(\"2023-10-09T14:51:29.000Z\")\n             },\n             definition: {\n               mappings: { dynamic: true, fields: {} },\n               storedSource: true\n             }\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-00',\n           status: 'BUILDING',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:08:32.000Z\")\n             },\n             definition: { mappings: { dynamic: true, fields: {} } }\n           }\n         }\n       ]\n     }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/atlas-search-commands/command-output/examples/single-doc-default-example-output.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       id: '65240be420da840844a4d077',\n       name: 'synonym_mappings',\n       status: 'READY',\n       queryable: true,\n       latestDefinitionVersion: {\n         version: 0,\n         createdAt: ISODate(\"2023-10-09T14:19:16.305Z\")\n       },\n       latestDefinition: {\n         mappings: {\n           dynamic: true,\n           fields: {\n             fullplot: { type: 'string' }\n           }\n         },\n         synonyms: [\n           {\n             name: 'synonym_mapping',\n             analyzer: 'lucene.english',\n             source: { collection: 'synonyms' }\n           }\n         ]\n       },\n       synonymMappingStatus: 'READY',\n       synonymMappingStatusDetail: [\n         {\n           synonym_mapping: {\n             status: 'READY',\n             queryable: true\n           }\n         }\n       ],\n       statusDetail: [\n         {\n           hostname: 'atlas-n1cm1j-shard-00-02',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-01',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         },\n         {\n           hostname: 'atlas-n1cm1j-shard-00-00',\n           status: 'READY',\n           queryable: true,\n           mainIndex: {\n             status: 'READY',\n             queryable: true,\n             definitionVersion: {\n               version: 0,\n               createdAt: ISODate(\"2023-10-09T14:19:16.000Z\")\n             },\n             definition: {\n               mappings: {\n                 dynamic: true,\n                 fields: {\n                   fullplot: {\n                     type: 'string',\n                     indexOptions: 'offsets',\n                     store: true,\n                     norms: 'include'\n                   }\n                 }\n               },\n               synonyms: [\n                 {\n                   name: 'synonym_mapping',\n                   analyzer: 'lucene.english',\n                   source: { collection: 'synonyms' }\n                 }\n               ]\n             },\n             synonymMappingStatus: 'READY',\n             synonymMappingStatusDetail: [\n               {\n                 synonym_mapping: {\n                   status: 'READY',\n                   queryable: true\n                 }\n               }\n             ]\n           }\n         }\n       ]\n     }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/atlas-search-commands/command-output/examples/single-doc-synonyms-example-output.rst"
  },
  {
    "code": "         :language: java\n         :emphasize-lines: 3-8\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "         :language: javascript\n         :emphasize-lines: 5-9\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "         :language: python\n         :emphasize-lines: 2-5\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "        :language: csharp\n        :emphasize-lines: 2-6\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "        :language: go\n        :emphasize-lines: 1-5\n\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "         :language: javascript\n         :emphasize-lines: 1-7\n\n      .. tip:: Environment Variables\n\n         If possible, consider defining the credentials provided in\n         ``kmsProviders`` as environment variables, and then passing them\n         to :binary:`~bin.mongosh` using the :option:`--eval\n         <mongosh --eval>` option. This minimizes the chances of credentials\n         leaking into logs.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/automatic-enc-options/tabs.rst"
  },
  {
    "code": "   :copyable: false\n\n   \"fullDocumentBeforeChange\" : {\n      \"_id\" : ObjectId(\"599af247bb69cd89961c986d\"), \n      \"userName\" : \"alice123\",\n      \"name\" : \"Alice Smith\"\n   }\n\nFor complete examples with the change stream output, see\n:ref:`db.collection.watch-change-streams-pre-and-post-images-example`.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/change-stream-pre-and-post-images-change-events.rst"
  },
  {
    "code": "   :copyable: false\n\n   changeStreamPreAndPostImages: {\n      enabled: <boolean>\n   }\n\nTo enable change stream pre- and post-images for the collection, set ``enabled``\nto ``true``.\n\nFor complete examples with the change stream output, see\n:ref:`db.collection.watch-change-streams-pre-and-post-images-example`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/change-stream-pre-and-post-images-field.rst"
  },
  {
    "code": "   :copyable: false\n\n   clusteredIndex: {\n      key: <object>,\n      unique: <boolean>,\n      name: <string>\n   }\n\n``key``\n   Required. The clustered index key field. Must be set to ``{ _id:\n   1 }``. The default value for the ``_id`` field is an\n   automatically generated unique :ref:`object identifier\n   <objectid>`, but you can set your own :ref:`clustered index key\n   values <clustered-collections-clustered-index-key-values>`.\n\n``unique``\n   Required. Must be set to ``true``. A unique index indicates the\n   collection will not accept inserted or updated documents where\n   the clustered index key value matches an existing value in the\n   index.\n\n``name``\n   Optional. A name that uniquely identifies the clustered index.\n\n.. versionadded:: 5.3\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/clustered-index-fields.rst"
  },
  {
    "code": "               :emphasize-lines: 8\n\n               setParameter:\n                  authenticationMechanisms: MONGODB-OIDC\n                  oidcIdentityProviders: [ {\n                       \"issuer\": \"https://okta-test.okta.com\", \n                       \"audience\": \"example@kernel.mongodb.com\",\n                       \"authNamePrefix\": \"okta-issuer\",\n                       \"matchPattern\": \"@mongodb.com$\",\n                       \"useAuthorizationClaim\": \"false\",\n                       \"JWKSPollSecs\": 86400\n                  } ]\n         .. tab:: Command line\n            :tabid: update command line internal auth\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/configure-mongodb-oidc.rst"
  },
  {
    "code": "               :emphasize-lines: 7\n\n               mongod --auth --setParameter authenticationMechanisms=MONGODB-OIDC --setParameter \\ \n               'oidcIdentityProviders=[ { \n                  \"issuer\": \"https://okta-test.okta.com\", \n                       \"audience\": \"example@kernel.mongodb.com\",\n                       \"authNamePrefix\": \"okta-issuer\",\n                       \"matchPattern\": \"@mongodb.com$\",\n                       \"useAuthorizationClaim\": \"false\",\n                       \"JWKSPollSecs\": 86400\n                  } ]'\n\n      When you set ``useAuthorizationClaim`` to ``false``, users who \n      authenticate with the ``MONGODB-OIDC`` mechanism obtain their \n      authorization rights from a user document in ``$external``. The server \n      searches for a user document with an ``_id`` matching the value of the \n      ``authNamePrefix/principalName`` claim for every OIDC based authentication \n      attempt for a user of your identity provider. \n\n      .. important::\n\n         If this field is set to ``false``, **do not** include the ``authorizationClaim`` \n         field. \n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/configure-mongodb-oidc.rst"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 2\n\n   {\n     _id: \"config\",\n     host: \"configRepl/localhost:27018\",\n     state: 1,\n     topologyTime: Timestamp({ t: 1732218671, i: 13 }),\n     replSetConfigVersion: Long('-1')\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/confirm-use-config-shard.rst"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      ok: 1,\n      oldConfiguration: {\n        mode: ...,\n        samplesPerSecond: ...\n      }\n      newConfiguration: {\n        ...\n      }\n   }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/cqa-output.rst"
  },
  {
    "code": "     :copyable: false\n   \n     planner returned error :: caused by :: hint provided does not \n     correspond to an existing index\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/create-indexes-stable-api-compatibility.rst"
  },
  {
    "code": "      :emphasize-lines: 5\n\n         var autoEncryptionOpts = {\n            \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n            \"kmsProviders\" : {\n               \"local\" : {\n                  \"key\" : BinData(0, TEST_LOCAL_KEY)\n               }\n            }\n         }\n\n#. Create an Encrypted Client Object\n\n   To create an encrypted client object, use the :method:`Mongo()`\n   constructor. Replace the ``mongodb://myMongo.example.net`` URI with\n   the :ref:`connection string URI <mongodb-uri>` for the target\n   cluster. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/csfle-connection-boilerplate-example-2.rst"
  },
  {
    "code": "      :emphasize-lines: 2\n         \n      encryptedClient = Mongo( \n         \"mongodb://myMongo.example.net:27017/?replSetName=myMongo\", \n         autoEncryptionOpts\n      )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/csfle-connection-boilerplate-example-2.rst"
  },
  {
    "code": "         :emphasize-lines: 5\n\n          var autoEncryptionOpts = {\n            \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n            \"kmsProviders\" : {\n              \"local\" : {\n                \"key\" : BinData(0, TEST_LOCAL_KEY)\n              }\n            }\n          }\n\n   .. step:: Create Your Encrypted Client\n\n      Use the :method:`Mongo()` constructor with the client-side field level \n      encryption options configured to create a database connection. Replace \n      the ``mongodb://myMongo.example.net`` URI with the :ref:`connection \n      string URI <mongodb-uri>` of the target cluster.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/csfle-connection-boilerplate-example.rst"
  },
  {
    "code": "         :emphasize-lines: 2\n          \n         encryptedClient = Mongo( \n           \"mongodb://myMongo.example.net:27017/?replSetName=myMongo\", \n            autoEncryptionOpts\n         )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/csfle-connection-boilerplate-example.rst"
  },
  {
    "code": "         :copyable:false\n\n         {\n            \"desc\" : \"query analyzer\",\n            \"ns\" : \"testDb.testColl\",\n            \"collUuid\" : UUID(\"ed9dfb1d-5b7c-4c6b-82e9-b0f537335795\"),\n            \"samplesPerSecond\" : 5,\n            \"startTime\" : ISODate(\"2023-08-08T16:23:22.846Z\"),\n            \"sampledReadsCount\" : NumberLong(2),\n            \"sampledReadsBytes\" : NumberLong(346),\n            \"sampledWritesCount\" : NumberLong(3),\n            \"sampledWritesBytes\" : NumberLong(904)\n         }\n\n   .. tab:: Sharded Cluster: mongos\n      :tabid: currentOp-query-analyzer-mongos\n\n      When run on a ``mongos`` that is part of a sharded cluster:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/currentOp-query-analyzer-output.rst"
  },
  {
    "code": "         :copyable:false\n\n         {\n            \"desc\" : \"query analyzer\",\n            \"ns\" : \"testDb.testColl\",\n            \"collUuid\" : UUID(\"5130b4df-5966-434f-85f0-f8956b5ca74e\"),\n            \"samplesPerSecond\" : 5,\n            \"startTime\" : ISODate(\"2023-08-08T16:15:07.427Z\"),\n            \"sampledReadsCount\" : NumberLong(2),\n            \"sampledWritesCount\" : NumberLong(3)\n         }\n\n\n   .. tab:: Sharded Cluster: mongod --shardsvr\n      :tabid: currentOp-query-analyzer-mongod-shardsvr\n      \n      When run on a ``mongod --shardsvr`` that is part of a sharded \n      cluster:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/currentOp-query-analyzer-output.rst"
  },
  {
    "code": "         :copyable:false\n\n         {\n            \"desc\" : \"query analyzer\",\n            \"ns\" : \"testDb.testColl\",\n            \"collUuid\" : UUID(\"5130b4df-5966-434f-85f0-f8956b5ca74e\"),\n            \"startTime\" : ISODate(\"2023-08-08T16:15:07.427Z\"),\n            \"sampledReadsCount\" : NumberLong(2),\n            \"sampledReadsBytes\" : NumberLong(346),\n            \"sampledWritesCount\" : NumberLong(3),\n            \"sampledWritesBytes\" : NumberLong(904)\n         }    \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/currentOp-query-analyzer-output.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: nodejs\n       content: |\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 55\n            :end-before: End Example 55\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-55.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 56\n            :end-before: End Example 56\n    \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: nodejs\n       content: |\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 56\n            :end-before: End Example 56\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-56.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 57\n            :end-before: End Example 57\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: nodejs\n       content: |\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 57\n            :end-before: End Example 57\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-57.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: nodejs\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 58\n            :end-before: End Example 58\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-delete-58.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Index Example 1\n            :end-before: End Index Example 1\n\n     - id: nodejs\n       content: |\n\n         This example creates a single key ascending index on the\n         ``name`` field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-indexes-1.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 1\n            :end-before: End Example 1\n     \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: nodejs\n       content: |\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 1\n            :end-before: End Example 1\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-1.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 2\n            :end-before: End Example 2\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 2\n            :end-before: End Example 2\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-2.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 3\n            :end-before: End Example 3\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-insert-3.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 10\n            :end-before: End Example 10\n         \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 10\n            :end-before: End Example 10\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 10\n            :end-before: End Example 10\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-10.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 11\n            :end-before: End Example 11\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-11.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 12\n            :end-before: End Example 12\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-12.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n    \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 13\n            :end-before: End Example 13\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-13.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 14\n            :end-before: End Example 14\n      \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 14\n            :end-before: End Example 14\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-14.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 15\n            :end-before: End Example 15  \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n            \n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 15\n            :end-before: End Example 15\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-15.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 16\n            :end-before: End Example 16\n      \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 16\n            :end-before: End Example 16\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-16.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 17\n            :end-before: End Example 17   \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 17\n            :end-before: End Example 17\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-17.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 18\n            :end-before: End Example 18\n    \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 18\n            :end-before: End Example 18\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-18.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 19\n            :end-before: End Example 19\n      \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 19\n            :end-before: End Example 19\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-19.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 20\n            :end-before: End Example 20\n           \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 20\n            :end-before: End Example 20\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-20.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 21\n            :end-before: End Example 21\n  \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 21\n            :end-before: End Example 21\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-21.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 22\n            :end-before: End Example 22\n         \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 22\n            :end-before: End Example 22\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-22.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 23\n            :end-before: End Example 23\n           \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 23\n            :end-before: End Example 23\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-23.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 24\n            :end-before: End Example 24\n \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 24\n            :end-before: End Example 24\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-24.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 25\n            :end-before: End Example 25\n   \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 25\n            :end-before: End Example 25\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-25.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 26\n            :end-before: End Example 26\n         \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n            \n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-26.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 27\n            :end-before: End Example 27\n    \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 26\n            :end-before: End Example 26\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 27\n            :end-before: End Example 27\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-27.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 28\n            :end-before: End Example 28\n         \n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst  \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 28\n            :end-before: End Example 28\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-28.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 29\n            :end-before: End Example 29\n    \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 29\n            :end-before: End Example 29\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-29.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 30\n            :end-before: End Example 30\n         \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 30\n            :end-before: End Example 30\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-30.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 31\n            :end-before: End Example 31\n          \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 31\n            :end-before: End Example 31\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-31.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 32\n            :end-before: End Example 32\n            \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 32\n            :end-before: End Example 32\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-32.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 33\n            :end-before: End Example 33\n           \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 33\n            :end-before: End Example 33\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-33.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 34\n            :end-before: End Example 34\n          \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 34\n            :end-before: End Example 34\n\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-34.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 35\n            :end-before: End Example 35\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-35.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 36\n            :end-before: End Example 36\n\n\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-36.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 37\n            :end-before: End Example 37  \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 37\n            :end-before: End Example 37\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-37.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 38\n            :end-before: End Example 38\n    \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 38\n            :end-before: End Example 38\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-38.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 39\n            :end-before: End Example 39\n  \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 39\n            :end-before: End Example 39\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-39.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 40\n            :end-before: End Example 40\n             \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 40\n            :end-before: End Example 40\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-40.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 41\n            :end-before: End Example 41\n         \n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 41\n            :end-before: End Example 41\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-41.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 42\n            :end-before: End Example 42\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 42\n            :end-before: End Example 42\n\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-42.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 43\n            :end-before: End Example 43\n           \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 43\n            :end-before: End Example 43\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-43.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 44\n            :end-before: End Example 44 \n\n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n            \n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 44\n            :end-before: End Example 44\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-44.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 45\n            :end-before: End Example 45  \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 45\n            :end-before: End Example 45\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-45.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 46\n            :end-before: End Example 46\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-46.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 47\n            :end-before: End Example 47\n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 47\n            :end-before: End Example 47\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-47.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 48\n            :end-before: End Example 48  \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 48\n            :end-before: End Example 48\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-48.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 49\n            :end-before: End Example 49  \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 49\n            :end-before: End Example 49\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-49.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 50\n            :end-before: End Example 50          \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: java-sync\n       content: |\n         To specify a projection document, chain the\n         com.mongodb.client.FindIterable.projection_ method to the\n         ``find`` method. The example uses the\n         com.mongodb.client.model.Projections_ class to create the\n         projection documents.\n\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: kotlin-coroutine\n       content: |\n         To specify a projection document, chain the\n         `FindFlow.projection() <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-find-flow/projection.html>`__ method to the\n         ``find()`` method. The example uses the\n         `com.mongodb.client.model.Projections <{+java-api-docs+}/mongodb-driver-core/com/mongodb/client/model/Projections.html>`__ class to create the\n         projection documents.\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 50\n            :end-before: End Example 50\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-50.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 6\n            :end-before: End Example 6\n    \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 6\n            :end-before: End Example 6\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-6.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 7\n            :end-before: End Example 7\n         \n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 7\n            :end-before: End Example 7\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-7.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 9\n            :end-before: End Example 9\n         \n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 9\n            :end-before: End Example 9\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-query-9.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Transactions Intro Example 1\n            :end-before: End Transactions Intro Example 1\n\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-intro-1.rst"
  },
  {
    "code": "            :language: cpp\n            :dedent: 8\n            :start-after:  Start Transactions Intro Example 1\n            :end-before: End Transactions Intro Example 1\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-intro-1.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: java-sync\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: perl\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: perl\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: scala\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "perl",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: scala\n\n     - id: ruby\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: php\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 4\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: csharp\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: c\n       content: |\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: c\n            :start-after: runs transactions with retry logic\n            :end-before: commit transactions with retry logic\n\n     - id: cpp\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: cpp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n     - id: go\n       content: |\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: go\n            :start-after: Start Transactions Retry Example 1\n            :end-before: End Transactions Retry Example 1\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-1.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: java-sync\n       content: |\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: perl\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: perl\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: scala\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "perl",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: scala\n\n     - id: ruby\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: php\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 4\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: csharp\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n\n     - id: c\n       content: |\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: c\n            :start-after: commit transactions with retry logic\n            :end-before: updates two collections in a transaction and calls commit_with_retry\n\n     - id: cpp\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: cpp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n     - id: go\n       content: |\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: go\n            :start-after: Start Transactions Retry Example 2\n            :end-before: End Transactions Retry Example 2\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-2.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: java-sync\n       content: |\n\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: perl\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: perl\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: scala\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "perl",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: scala\n\n     - id: ruby\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: php\n       content: |\n         .. important::\n\n            To associate read and write operations with a transaction, you **must**\n            pass the session to each operation in the transaction.\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 4\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: csharp\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: c\n       content: |\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: c\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: cpp\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: cpp\n            :dedent: 8\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: go\n       content: |\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: go\n            :start-after: Start Transactions Retry Example 3\n            :end-before: End Transactions Retry Example 3\n\n     - id: motor\n       content: |\n\n          .. note::\n          \n             For Motor, see the :ref:`txn-callback-api` instead.\n\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-transactions-retry-3.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 4\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 6\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 51\n            :end-before: End Example 51\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-51.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 52\n            :end-before: End Example 52\n   \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-operation-uses.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-52.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 53\n            :end-before: End Example 53\n         \n            \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 52\n            :end-before: End Example 52\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 53\n            :end-before: End Example 53\n\n         .. include:: /includes/fact-update-many-operation-uses.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-53.rst"
  },
  {
    "code": "            :language: c\n            :dedent: 3\n            :start-after: Start Example 54\n            :end-before: End Example 54\n        \n         .. include:: /includes/driver-examples/driver-example-c-cleanup.rst\n     \n     - id: python\n       content: |\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: motor\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: python\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: java-sync\n       content: |\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: java-async\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: java\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: kotlin-coroutine\n       content: |\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: kotlin\n            :dedent:\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: nodejs\n       content: |\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent: 6\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: php\n       content: |\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: php\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: ruby\n       content: |\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: ruby\n            :dedent: 8\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: scala\n       content: |\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: scala\n            :dedent: 4\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: csharp\n       content: |\n\n",
    "language": "scala",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent: 12\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n     - id: go\n       content: |\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "            :language: go\n            :dedent: 2\n            :start-after: Start Example 54\n            :end-before: End Example 54\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/driver-examples/driver-example-update-54.rst"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 12,13,25,26,31,32\n\n   [\n     {\n       _id: ObjectId(\"620ad555394d47411658b5ef\"),\n       time: ISODate(\"2021-03-08T09:00:00.000Z\"),\n       price: 500,\n       linearFillPrice: 500,\n       locfPrice: 500\n     },\n     {\n       _id: ObjectId(\"620ad555394d47411658b5f0\"),\n       time: ISODate(\"2021-03-08T10:00:00.000Z\"),\n       linearFillPrice: 507.5,\n       locfPrice: 500\n     },\n     {\n       _id: ObjectId(\"620ad555394d47411658b5f1\"),\n       time: ISODate(\"2021-03-08T11:00:00.000Z\"),\n       price: 515,\n       linearFillPrice: 515,\n       locfPrice: 515\n     },\n     {\n       _id: ObjectId(\"620ad555394d47411658b5f2\"),\n       time: ISODate(\"2021-03-08T12:00:00.000Z\"),\n       linearFillPrice: 505,\n       locfPrice: 515\n     },\n     {\n       _id: ObjectId(\"620ad555394d47411658b5f3\"),\n       time: ISODate(\"2021-03-08T13:00:00.000Z\"),\n       linearFillPrice: 495,\n       locfPrice: 515\n     },\n     {\n       _id: ObjectId(\"620ad555394d47411658b5f4\"),\n       time: ISODate(\"2021-03-08T14:00:00.000Z\"),\n       price: 485,\n       linearFillPrice: 485,\n       locfPrice: 485\n     }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/example-multiple-fill-methods.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"62ffc70660b33b68e8f30435\"),\n         type: 'pepperoni',\n         size: 'small',\n         price: 4,\n         '$recordId': Long(\"1\")\n      },\n      {\n         _id: ObjectId(\"62ffc70660b33b68e8f30436\"),\n         type: 'cheese',\n         size: 'medium',\n         price: 7,\n         '$recordId': Long(\"2\")\n      },\n      {\n         _id: ObjectId(\"62ffc70660b33b68e8f30437\"),\n         type: 'vegan',\n         size: 'large',\n         price: 8,\n         '$recordId': Long(\"3\")\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/example-showRecordId.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Ant O. Knee\", \"value\" : 95 }\n      { \"_id\" : \"Busby Bee\", \"value\" : 125 }\n      { \"_id\" : \"Cam Elot\", \"value\" : 60 }\n      { \"_id\" : \"Don Quis\", \"value\" : 155 }\n\nAggregation Alternative\n```````````````````````\n\nUsing the available aggregation pipeline operators, you can rewrite\nthe map-reduce operation without defining custom functions:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Don Quis\", \"value\" : 155 }\n      { \"_id\" : \"Ant O. Knee\", \"value\" : 95 }\n      { \"_id\" : \"Cam Elot\", \"value\" : 60 }\n      { \"_id\" : \"Busby Bee\", \"value\" : 125 }\n\n#. Then, the :pipeline:`$out` writes the output to the collection\n   ``agg_alternative_1``. Alternatively, you could use\n   :pipeline:`$merge` instead of :pipeline:`$out`.\n\n#. Query the ``agg_alternative_1`` collection to verify the results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Ant O. Knee\", \"value\" : 95 }\n      { \"_id\" : \"Busby Bee\", \"value\" : 125 }\n      { \"_id\" : \"Cam Elot\", \"value\" : 60 }\n      { \"_id\" : \"Don Quis\", \"value\" : 155 }\n\n.. seealso::\n\n   For an alternative that uses custom aggregation expressions, see\n   :ref:`Map-Reduce to Aggregation Pipeline Translation Examples\n   <mr-to-agg-examples1>`.\n\n.. map-reduce-sum-price-end\n\nCalculate Order and Total Quantity with Average Quantity Per Item\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. map-reduce-counts-begin\n\nIn the following example, you will see a map-reduce operation on the\n``orders`` collection for all documents that have an ``ord_date`` value\ngreater than or equal to ``2020-03-01``.\n\nThe operation in the example:\n\n#. Groups by the ``item.sku`` field, and calculates the number of orders\n   and the total quantity ordered for each ``sku``.\n\n#. Calculates the average quantity per order for each ``sku`` value and\n   merges the results into the output collection.\n\nWhen merging results, if an existing document has the same key as the\nnew result, the operation overwrites the existing document. If there is\nno existing document with the same key, the operation inserts the\ndocument.\n\nExample steps:\n\n#. Define the map function to process each input document:\n\n   - In the function, ``this`` refers to the document that the\n     map-reduce operation is processing.\n\n   - For each item, the function associates the ``sku`` with a new\n     object ``value`` that contains the ``count`` of ``1`` and the item\n     ``qty`` for the order and emits the ``sku`` (stored in the ``key``)\n     and the ``value``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"apples\", \"value\" : { \"count\" : 4, \"qty\" : 35, \"avg\" : 8.75 } }\n      { \"_id\" : \"carrots\", \"value\" : { \"count\" : 2, \"qty\" : 15, \"avg\" : 7.5 } }\n      { \"_id\" : \"chocolates\", \"value\" : { \"count\" : 3, \"qty\" : 15, \"avg\" : 5 } }\n      { \"_id\" : \"oranges\", \"value\" : { \"count\" : 7, \"qty\" : 63, \"avg\" : 9 } }\n      { \"_id\" : \"pears\", \"value\" : { \"count\" : 1, \"qty\" : 10, \"avg\" : 10 } }\n\nAggregation Alternative\n```````````````````````\nUsing the available aggregation pipeline operators, you can rewrite\nthe map-reduce operation without defining custom functions:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"apples\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 8, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"pears\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 4, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-18T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 5, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-19T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      ...\n\n#. The :pipeline:`$group` stage groups by the ``items.sku``, calculating for each sku:\n\n   - The ``qty`` field. The ``qty`` field contains the\n      total ``qty`` ordered per each ``items.sku`` (See :group:`$sum`).\n\n   - The ``orders_ids`` array. The ``orders_ids`` field contains an\n      array of distinct order ``_id``'s for the ``items.sku`` (See\n      :group:`$addToSet`).\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"chocolates\", \"qty\" : 15, \"orders_ids\" : [ 2, 5, 8 ] }\n      { \"_id\" : \"oranges\", \"qty\" : 63, \"orders_ids\" : [ 4, 7, 3, 2, 9, 1, 10 ] }\n      { \"_id\" : \"carrots\", \"qty\" : 15, \"orders_ids\" : [ 6, 9 ] }\n      { \"_id\" : \"apples\", \"qty\" : 35, \"orders_ids\" : [ 9, 8, 1, 6 ] }\n      { \"_id\" : \"pears\", \"qty\" : 10, \"orders_ids\" : [ 3 ] }\n\n#. The :pipeline:`$project` stage reshapes the output document to\n   mirror the map-reduce's output to have two fields ``_id`` and\n   ``value``. The :pipeline:`$project` sets:\n   \n#. The :pipeline:`$unwind` stage breaks down the document by\n   the ``items`` array field to output a document for each array\n   element. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"apples\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 8, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"pears\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 4, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-18T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 5, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-19T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      ...\n\n#. The :pipeline:`$group` stage groups by the ``items.sku``, calculating for each sku:\n\n   - The ``qty`` field. The ``qty`` field contains the\n     total ``qty`` ordered per each ``items.sku`` using\n     :group:`$sum`.\n\n   - The ``orders_ids`` array. The ``orders_ids`` field contains an\n     array of distinct order ``_id``'s for the ``items.sku`` using\n     :group:`$addToSet`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"chocolates\", \"qty\" : 15, \"orders_ids\" : [ 2, 5, 8 ] }\n      { \"_id\" : \"oranges\", \"qty\" : 63, \"orders_ids\" : [ 4, 7, 3, 2, 9, 1, 10 ] }\n      { \"_id\" : \"carrots\", \"qty\" : 15, \"orders_ids\" : [ 6, 9 ] }\n      { \"_id\" : \"apples\", \"qty\" : 35, \"orders_ids\" : [ 9, 8, 1, 6 ] }\n      { \"_id\" : \"pears\", \"qty\" : 10, \"orders_ids\" : [ 3 ] }\n\n#. The :pipeline:`$project` stage reshapes the output document to\n   mirror the map-reduce's output to have two fields ``_id`` and\n   ``value``. The :pipeline:`$project` sets:\n   \n   - the ``value.count`` to the size of the ``orders_ids`` array\n     using :expression:`$size`.\n\n   - the ``value.qty`` to the ``qty`` field of input document.\n   \n   - the ``value.avg`` to the average number of qty per order\n     using :expression:`$divide` and :expression:`$size`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"apples\", \"value\" : { \"count\" : 4, \"qty\" : 35, \"avg\" : 8.75 } }\n      { \"_id\" : \"pears\", \"value\" : { \"count\" : 1, \"qty\" : 10, \"avg\" : 10 } }\n      { \"_id\" : \"chocolates\", \"value\" : { \"count\" : 3, \"qty\" : 15, \"avg\" : 5 } }\n      { \"_id\" : \"oranges\", \"value\" : { \"count\" : 7, \"qty\" : 63, \"avg\" : 9 } }\n      { \"_id\" : \"carrots\", \"value\" : { \"count\" : 2, \"qty\" : 15, \"avg\" : 7.5 } }\n      \n#. Finally, the :pipeline:`$merge` writes the output to the\n   collection ``agg_alternative_3``. If an existing document has the same\n   key ``_id`` as the new result, the operation overwrites the existing\n   document. If there is no existing document with the same key, the\n   operation inserts the document.\n\n#. Query the ``agg_alternative_3`` collection to verify the results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"apples\", \"value\" : { \"count\" : 4, \"qty\" : 35, \"avg\" : 8.75 } }\n      { \"_id\" : \"carrots\", \"value\" : { \"count\" : 2, \"qty\" : 15, \"avg\" : 7.5 } }\n      { \"_id\" : \"chocolates\", \"value\" : { \"count\" : 3, \"qty\" : 15, \"avg\" : 5 } }\n      { \"_id\" : \"oranges\", \"value\" : { \"count\" : 7, \"qty\" : 63, \"avg\" : 9 } }\n      { \"_id\" : \"pears\", \"value\" : { \"count\" : 1, \"qty\" : 10, \"avg\" : 10 } }\n\n.. seealso::\n\n   For an alternative that uses custom aggregation expressions, see\n   :ref:`Map-Reduce to Aggregation Pipeline Translation Examples\n   <mr-to-agg-examples2>`.\n\n.. map-reduce-counts-end\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/examples-map-reduce.rst"
  },
  {
    "code": "   :copyable: false\n\n   { \n       originalClusterServerParameter: <original parameter value>,\n       updatedClusterServerParameter\": <new parameter value> \n   }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-audit-message-setClusterParameter-form.rst"
  },
  {
    "code": "      :copyable: false\n\n      $ : / ? # [ ] @\n\n   those characters must be converted using `percent encoding\n   <https://tools.ietf.org/html/rfc3986#section-2.1>`__. \n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-aws-key-pct-encode-uri.rst"
  },
  {
    "code": "   :copyable: false\n\n   dek_id := \"<Your Base64 DEK ID>\"\n\nYou would replace everything between quotes with your {+dek-abbr+} ID.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-csfle-placeholder.rst"
  },
  {
    "code": "   :copyable: false\n\n   dek_id := \"abc123\"\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-csfle-placeholder.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"t\": { \"$date\": \"2024-07-19T15:36:55.024-07:00\" },\n      \"s\": \"I\",\n      \"c\": \"COMMAND\",\n      ...\n      \"attr\": {\n         \"type\": \"command\",\n         ...\n         \"appName\": \"mongosh 2.2.10\",\n         \"command\": {\n            \"insert\": \"clients\",\n            \"documents\": [\n               {\n                  \"name\": \"Joe\",\n                  \"PII\": \"Sensitive Information\",\n                  \"_id\": { \"$oid\": \"669aea8792c7fd822d3e1d8c\" }\n               }\n            ],\n            \"ordered\": true,\n            ...\n         }\n         ...\n      }\n   }\n\n\nWhen :binary:`~bin.mongod` runs with :parameter:`redactClientLogData` and\nperforms the same insert operation, it produces the following log event:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-log-redaction.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"t\": { \"$date\": \"2024-07-19T15:36:55.024-07:00\" },\n      \"s\": \"I\",\n      \"c\": \"COMMAND\",\n      ...\n      \"attr\": {\n         \"type\": \"command\",\n         ...\n         \"appName\": \"mongosh 2.2.10\",\n         \"command\": {\n            \"insert\": \"###\",\n            \"documents\": [\n               {\n                  \"name\": \"###\",\n                  \"PII\": \"###\",\n                  \"_id\": \"###\"\n               }\n            ],\n            \"ordered\": \"###\",\n            ...\n         }\n         ...\n      }\n   }\n\nUse :parameter:`redactClientLogData` in conjunction with \n:ref:`security-encryption-at-rest` and :ref:`transport-encryption` to assist \ncompliance with regulatory requirements.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-log-redaction.rst"
  },
  {
    "code": "   :copyable: false\n\n   $ : / ? # [ ] @\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-pct-encode-uri.rst"
  },
  {
    "code": "   :copyable: false\n\n   { \"<tag1>\": \"<string1>\", \"<tag2>\": \"<string2>\",... }\n\n- For read operations, you can specify a tag set in the :ref:`read\n  preference <replica-set-read-preference-tag-sets>` to direct the\n  operations to replica set member(s) with the specified tag(s).\n\n- For write operations, you can create a customize :doc:`write concern\n  </reference/write-concern>` using\n  :rsconf:`settings.getLastErrorModes` and\n  :rsconf:`settings.getLastErrorDefaults`.\n\nFor more information, see\n:doc:`/tutorial/configure-replica-set-tag-sets`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fact-tags-field.rst"
  },
  {
    "code": "        :language: java\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: javascript\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: python\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: csharp\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: go\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_mongoclient\n         :end-before: end_mongoclient\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: java\n        :dedent:\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: javascript\n        :dedent:\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: python\n        :dedent:\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n      \n     .. note:: CodecOptions\n\n        The MongoDB Python driver requires that you specify the\n        ``CodecOptions`` with which you would like to encrypt and\n        decrypt your documents.\n\n        Specify the ``CodecOptions`` you have configured on the\n        ``MongoClient``, ``Database``, or ``Collection`` with which\n        you are writing encrypted and decrypted application data to MongoDB.\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_client_enc\n         :end-before: end_client_enc\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: java\n        :dedent:\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: javascript\n        :dedent:\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: python\n        :dedent:\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_find_decrypt\n         :end-before: end_find_decrypt\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: java\n        :dedent:\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: nodejs\n\n     .. include:: /includes/fundamentals/manual-encryption/example/dek-note.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :language: javascript\n        :dedent:\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: python\n\n     .. include:: /includes/fundamentals/manual-encryption/example/dek-note-python.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :language: python\n        :dedent:\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: csharp\n\n     .. include:: /includes/fundamentals/manual-encryption/example/dek-note.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: go\n\n     .. include:: /includes/fundamentals/manual-encryption/example/dek-note.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n      :tabid: shell\n\n      .. include:: /includes/fundamentals/manual-encryption/example/dek-note.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_enc_and_insert\n         :end-before: end_enc_and_insert\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "   :copyable: false\n\n   { \"$**\": 1 }  \n   { \"userID\":, \"$**\": 1 }  \n\nHowever, you can't define an index that includes the same field in the\nwildcard fields and the regular (non-wildcard) fields. To define the\nindex correctly, use a ``wildcardProjection`` to exclude duplicated\nfields from the wildcard pattern.\n\n``wildcardProjection`` does not work with a specification like:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-projection-specifications.rst"
  },
  {
    "code": "   :copyable: false\n\n    ``{ \"path.to.field.$**\" : 1 }``  \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-projection-specifications.rst"
  },
  {
    "code": "     :copyable: false\n\n     db.inventory.find( {\"product_attributes\" : { $exists : false } } )\n\n     db.inventory.aggregate([\n       { $match : { \"product_attributes\" : { $exists : false } } }\n     ])\n\nField is equal to a document or an array\n  Wildcard indexes generate entries for the **contents** of a\n  document or array, and not the document or array itself. Therefore,\n  wildcard indexes don't support exact document or array equality \n  matches. Wildcard indexes *can* support querying where \n  the field equals an empty document ``{}``.\n\n  For example, consider a collection ``inventory`` with a wildcard\n  index on ``product_attributes``. The wildcard index\n  **cannot** support the following queries:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-query-restrictions.rst"
  },
  {
    "code": "     :copyable: false\n\n     db.inventory.find({ \"product_attributes\" : { \"price\" : 29.99 } } )\n     db.inventory.find({ \"product_attributes.tags\" : [ \"waterproof\", \"fireproof\" ] } )\n\n     db.inventory.aggregate([{ \n       $match : { \"product_attributes\" : { \"price\" : 29.99 } }\n     }])\n\n     db.inventory.aggregate([{ \n       $match : { \"product_attributes.tags\" : [\"waterproof\", \"fireproof\" ] } }\n     }])\n\nField is not equal to a document or array\n  Wildcard indexes generate entries for the **contents** of a\n  document or array, and not the document/array itself. Therefore,\n  wildcard indexes don't support exact document or array\n  inequality matches.\n\n  For example, consider a collection ``inventory`` with a wildcard\n  index on ``product_attributes``. The wildcard index\n  **cannot** support the following queries:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-query-restrictions.rst"
  },
  {
    "code": "     :copyable: false\n\n     db.inventory.find( { $ne : [ \"product_attributes\", { \"price\" : 29.99 } ] } )\n     db.inventory.find( { $ne : [ \"product_attributes.tags\",  [ \"waterproof\", \"fireproof\" ] ] } )\n\n     db.inventory.aggregate([{ \n       $match : { $ne : [ \"product_attributes\", { \"price\" : 29.99 } ] }\n     }])\n\n     db.inventory.aggregate([{ \n       $match : { $ne : [ \"product_attributes.tags\", [ \"waterproof\", \"fireproof\" ] ] }\n     }])\n\nArray Field is equal or not equal to null\n  If a given field is an array in any document in the collection,\n  wildcard indexes cannot support queries for documents where that\n  field is equal or not equal to null.\n\n  For example, consider a collection ``inventory`` with a wildcard\n  index on ``product_attributes``. The wildcard index\n  **cannot** support the following queries if \n  ``product_attributes.tags`` is an array in any document in the\n  collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-query-restrictions.rst"
  },
  {
    "code": "     :copyable: false\n\n     db.inventory.find( { \"product_attributes.tags\": { $ne: null } } )\n\n     db.inventory.find( { \"product_attributes.tags\": null } )\n\n     db.inventory.aggregate([{ \n       $match : { \"product_attributes.tags\": { $ne: null } }\n     }])\n\n     db.inventory.aggregate([{ \n       $match : { \"product_attributes.tags\": null }\n     }])\n\nField is equal to null\n  Wildcard indexes cannot support queries for documents where a field\n  is equal to null. \n  \n  The query ``{ $eq: null }`` matches all documents where the field is\n  null or missing, but wildcard indexes don't index null or empty fields. \n  that.\n\n  For example, consider a collection ``inventory`` with a wildcard index\n  on ``product_attributes``. The wildcard index **cannot** support the\n  following queries:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-query-restrictions.rst"
  },
  {
    "code": "     :copyable: false\n\n\n     db.inventory.find( { \"product_attributes.price\": { $eq: null } } )\n     \n     db.inventory.aggregate([{\n        $match : { \"product_attributes.price\": { $eq: null } }\n     }])\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-query-restrictions.rst"
  },
  {
    "code": "     :copyable: false\n\n     { userID: 1, \"object1.$**\": 1, \"object2.$**\": 1 }\n\n\n- The non-wildcard terms in a ``compound wildcard index`` must be single\n  key terms. :ref:`Multikey <index-type-multikey>` index terms are not\n  permitted.\n\n- The ``wildcardProjection`` option is only valid when the wildcard\n  field is ``$**``. You cannot use ``wildcardProjection`` when you\n  specify a field path for the wildcard index term. \n\n  This is a valid definition: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-restrictions-compound.rst"
  },
  {
    "code": "     :copyable: false\n\n    {\n        key: { \"someFields.$**\": 1 },\n        name: \"invalid_index\",\n        wildcardProjection: {\n           \"someFields.name\": 1,\n           \"otherFields.values\": 1\n        }\n    }\n\n- The ``_id`` field is omitted by default. If you need the ``_id``\n  field:\n  \n  - Specify a wildcard index as ``$**``\n  - Use a ``wildcardProjection``\n  - Specify the ``_id`` field\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/indexes/wildcard-restrictions-compound.rst"
  },
  {
    "code": "   :copyable: false\n\n   { \n     <variable_name_1>: <expression_1>,\n     ...,\n     <variable_name_n>: <expression_n>\n   }\n  \nThe variable is set to the value returned by the expression, and cannot\nbe changed afterwards.\n\nTo access the value of a variable in the command, use the double\ndollar sign prefix (``$$``) together with your variable name in the form\n``$$<variable_name>``. For example: ``$$targetTotal``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/let-variables-syntax.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      acknowledged: true,\n      insertedCount: 2,\n      insertedIds: { '0': 3, '1': 4 },\n      matchedCount: 2,\n      modifiedCount: 2,\n      deletedCount: 1,\n      upsertedCount: 0,\n      upsertedIds: {}\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/pizza-bulk-write-example.rst"
  },
  {
    "code": "   :copyable: false\n\n   querySettings: {\n      indexHints: [ { \n         ns: { db: <string>, coll: <string> },\n         allowedIndexes: <array>\n      }, ... ],\n      queryFramework: <string>\n   }\n\n``querySettings`` fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 5 35 60\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``indexHints.ns``\n     - document\n     - Namespace for index hints.\n\n       .. list-table::\n          :widths: 5 35 50\n\n          * - ``db`` \n            - string\n            - Name of the database for index hints.\n\n          * - ``coll``\n            - string\n            - Name of the collection for index hints.\n\n   * - ``indexHints.allowedIndexes``\n     - array\n     - Array of indexes for index hints. For more details, see\n       :ref:`indexes` and :method:`~cursor.hint()`.\n\n   * - ``queryFramework`` \n     - string\n     - :term:`Query framework <query framework>` string can be:\n\n       - ``classic`` for the classic engine.\n       - ``sbe`` for {+sbe+}. For details, see :ref:`sbe-landing`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/planCacheStats-querySettings.rst"
  },
  {
    "code": "      :emphasize-lines: 5\n\n         var autoEncryptionOpts = {\n         \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n         \"kmsProviders\" : {\n            \"local\" : {\n               \"key\" : BinData(0, TEST_LOCAL_KEY)\n            }\n         }\n         }\n\n#. Create Your Encrypted Client\n\n   Use the :method:`Mongo()` constructor with the queryable \n   encryption options configured to create a database connection. Replace \n   the ``mongodb://myMongo.example.net`` URI with the :ref:`connection \n   string URI <mongodb-uri>` of the target cluster.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/qe-connection-boilerplate.rst"
  },
  {
    "code": "      :emphasize-lines: 2\n         \n      encryptedClient = Mongo( \n         \"mongodb://myMongo.example.net:27017/?replSetName=myMongo\", \n         autoEncryptionOpts\n      )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/qe-connection-boilerplate.rst"
  },
  {
    "code": "   :emphasize-lines: 7,13\n\n   const encryptedFieldsObject = {\n      fields: [\n         {\n            path: \"patientId\",\n            bsonType: \"int\",\n            queries: { queryType: \"equality\",\n                       contention: \"8\"}\n         },\n         {\n            path: \"patientInfo.ssn\",\n            bsonType: \"string\",\n            queries: { queryType: \"equality\",\n                       contention: \"8\"}\n         },\n         {\n            path: \"medications\",\n            bsonType: \"array\"\n         },\n         {\n            path: \"patientInfo.billing\",\n            bsonType: \"object\"\n         }\n      ]\n   }\n\n.. Example context from Kenn White:\n.. - full name (unencrypted, ~750 possible values)\n.. - mobile (encrypted, high cardinality)\n.. - SSN (encrypted, high cardinality)\n.. - Address (unencrypted,high cardinality)\n.. - DOB between 1930-1990 (unencrypted, ~22K values)\n.. - gender (encrypted, Male/Female/Non-binary)\n.. - creditCard.type (encrypted, 4 types)\n.. - creditCard.expiry (encrypted, ~84 possible values)\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/example-qe-csfle-contention.rst"
  },
  {
    "code": "        :language: java\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: javascript\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: python\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: csharp\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: go\n        :dedent:\n        :start-after: start_mongoclient\n        :end-before: end_mongoclient\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_mongoclient\n         :end-before: end_mongoclient\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/client.rst"
  },
  {
    "code": "        :language: java\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: javascript\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: python\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n      \n     .. note:: CodecOptions\n\n        The MongoDB Python driver requires that you specify the\n        ``CodecOptions`` with which you would like to encrypt and\n        decrypt your documents.\n\n        Specify the ``CodecOptions`` you have configured on the\n        ``MongoClient``, ``Database``, or ``Collection`` with which\n        you are writing encrypted and decrypted application data to MongoDB.\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_client_enc\n        :end-before: end_client_enc\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_client_enc\n         :end-before: end_client_enc\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/clientEnc.rst"
  },
  {
    "code": "        :language: java\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: javascript\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: python\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_find_decrypt\n        :end-before: end_find_decrypt\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_find_decrypt\n         :end-before: end_find_decrypt\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/decFields.rst"
  },
  {
    "code": "        :language: java\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :language: javascript\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :language: python\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: csharp\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n     :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "        :dedent:\n        :language: go\n        :start-after: start_enc_and_insert\n        :end-before: end_enc_and_insert\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "         :language: javascript\n         :start-after: start_enc_and_insert\n         :end-before: end_enc_and_insert\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/fundamentals/manual-encryption/example/encFields.rst"
  },
  {
    "code": "   :language: json\n\nYou create your {+key-vault-long+} as you would a standard MongoDB\ncollection. Your {+key-vault-long+} must have a\n:ref:`unique index <index-type-unique>` on the ``keyAltNames`` field. To\ncheck if the unique index exists, run the :dbcommand:`listIndexes`\ncommand against the {+key-vault-long+}:\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/qe-csfle-about-key-vault-collections.rst"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: json\n      :linenos:\n   \n      db.runCommand({\n         listIndexes: \"__keyVault\",\n      });\n\n   .. output::\n      :linenos:\n\n      {\n         cursor: {\n            id: Long(\"0\"),\n            ns: 'encryption.__keyVault',\n            firstBatch: [ \n               { v: 2, key: { _id: 1 }, name: '_id_' } \n               ]\n         },\n         ok: 1,\n      }\n\nIf the unique index does not exist, your application must create it\nbefore performing {+dek-abbr+} management.\n\nTo learn how to create a MongoDB collection,\nsee :ref:`Databases and Collections <collections>`.\n\n.. tip:: mongosh Feature\n\n   The :binary:`~bin.mongosh` method\n   :method:`KeyVault.createKey()` automatically creates a\n   unique index on the ``keyAltNames`` field if one does not exist.\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/qe-csfle-about-key-vault-collections.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify the Local {+cmk-long+}\n\n      Specify the KMS provider and specify your {+cmk-long+} inline:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: csharp\n               :dedent:\n\n   .. step:: Create an {+enc-schema-title+} For Your Collection\n\n      .. _qe-quickstart-encrypted-fields-map:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify the Location of the {+shared-library+}\n\n      .. _qe-quick-start-shared-lib:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: go\n               :dedent:\n         \n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: csharp\n               :dedent:\n\n      .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n\n   .. step:: Create the MongoClient\n\n      Instantiate a MongoDB client object with the following\n      automatic encryption settings:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: csharp\n               :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/client.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: csharp\n         :dedent:\n\n.. include:: /includes/queryable-encryption/qe-warning-local-keys.rst\n\n.. include:: /includes/in-use-encryption/cmk-bash.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/cmk.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n#. Create your {+dek-long+}s\n\n   .. _qe-local-create-dek:\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create the {+dek-long+}s:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      .. include:: /includes/note-key-vault-permissions\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n#. Create Your Encrypted Collection\n\n   Use a {+qe+} enabled ``MongoClient`` instance to specify what\n   fields you must encrypt and create your encrypted collection:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: csharp\n            :dedent:\n\nThe output from the code in this section should resemble the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: csharp\n         :dedent:\n\nWhen you insert a document, your {+qe+} enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n      \n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/quick-start/key-vault-index.rst"
  },
  {
    "code": "           :copyable: false\n\n           -----BEGIN PRIVATE KEY-----\\nyour-private-key\\n-----END PRIVATE KEY-----\\n\n\n       | The value you would specify for this field is:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/reference/kms-providers/gcp.rst"
  },
  {
    "code": "           :copyable: false\n\n           your-private-key\n\n       | If you have a ``user-key.json`` credential file, you can extract\n         the string by executing the following command in a bash or\n         similar shell. The following command requires that you install\n         `OpenSSL <https://docs.openssl.org/master/>`__\n         :\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/reference/kms-providers/gcp.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n      - **kmsProviderName** - The KMS you use to store your\n        {+cmk-long+}. Set this to your key provider: ``\"aws\"``, \n        ``\"azure\"``, ``\"gcp\"``, or ``\"kmip\"``.\n      \n      - **uri** - Your MongoDB deployment connection URI. Set your connection\n        URI in the ``MONGODB_URI`` environment variable or replace the value\n        directly.\n      \n      - **keyVaultDatabaseName** - The MongoDB database where your data\n        encryption keys (DEKs) will be stored. Set this to ``\"encryption\"``.\n      \n      - **keyVaultCollectionName** - The collection in MongoDB where your DEKs\n        will be stored. Set this to ``\"__keyVault\"``.\n      \n      - **keyVaultNamespace** - The namespace in MongoDB where your DEKs\n        will be stored. Set this to the values of the ``keyVaultDatabaseName``\n        and ``keyVaultCollectionName`` variables, separated by a period.\n      \n      - **encryptedDatabaseName** - The MongoDB database where your encrypted\n        data will be stored. Set this to ``\"medicalRecords\"``.\n      \n      - **encryptedCollectionName** - The collection in MongoDB where your\n        encrypted data will be stored. Set this to ``\"patients\"``.\n\n      You can declare these variables by using the following code:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n      - **kms_provider_name** - The KMS you use to store your\n        {+cmk-long+}. Set this to your key provider: ``\"aws\"``, \n        ``\"azure\"``, ``\"gcp\"``, or ``\"kmip\"``.\n      \n      - **uri** - Your MongoDB deployment connection URI. Set your connection\n        URI in the ``MONGODB_URI`` environment variable or replace the value\n        directly.\n      \n      - **key_vault_database_name** - The MongoDB database where your data\n        encryption keys (DEKs) will be stored. Set this to ``\"encryption\"``.\n      \n      - **key_vault_collection_name** - The collection in MongoDB where your\n        DEKs will be stored. Set this to ``\"__keyVault\"``.\n      \n      - **key_vault_namespace** - The namespace in MongoDB where your DEKs\n        will be stored. Set this to the values of the ``key_vault_database_name``\n        and ``key_vault_collection_name`` variables, separated by a period.\n      \n      - **encrypted_database_name** - The MongoDB database where your encrypted\n        data will be stored. Set this to ``\"medicalRecords\"``.\n      \n      - **encrypted_collection_name** - The collection in MongoDB where\n        your encrypted data will be stored. Set this to ``\"patients\"``.\n\n      You can declare these variables by using the following code:\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n      - **kmsProviderName** - The KMS you use to store your\n        {+cmk-long+}. Set this to your key provider: ``\"aws\"``, \n        ``\"azure\"``, ``\"gcp\"``, or ``\"kmip\"``.\n      \n      - **uri** - Your MongoDB deployment connection URI. Set your connection\n        URI in the ``MONGODB_URI`` environment variable or replace the value\n        directly.\n      \n      - **keyVaultDatabaseName** - The MongoDB database where your data\n        encryption keys (DEKs) will be stored. Set this to ``\"encryption\"``.\n      \n      - **keyVaultCollectionName** - The collection in MongoDB where your DEKs\n        will be stored. Set this to ``\"__keyVault\"``.\n      \n      - **keyVaultNamespace** - The namespace in MongoDB where your DEKs\n        will be stored. Set this to the values of the ``keyVaultDatabaseName``\n        and ``keyVaultCollectionName`` variables, separated by a period.\n      \n      - **encryptedDatabaseName** - The MongoDB database where your encrypted\n        data will be stored. Set this to ``\"medicalRecords\"``.\n      \n      - **encryptedCollectionName** - The collection in MongoDB where your\n        encrypted data will be stored. Set this to ``\"patients\"``.\n\n      You can declare these variables by using the following code:\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      - **kmsProviderName** - The KMS you use to store your\n        {+cmk-long+}. Set this to your key provider: ``\"aws\"``, \n        ``\"azure\"``, ``\"gcp\"``, or ``\"kmip\"``.\n      \n      - **uri** - Your MongoDB deployment connection URI. Set your connection\n        URI in the ``MONGODB_URI`` environment variable or replace the value\n        directly.\n      \n      - **keyVaultDatabaseName** - The MongoDB database where your data\n        encryption keys (DEKs) will be stored. Set this to ``\"encryption\"``.\n      \n      - **keyVaultCollectionName** - The collection in MongoDB where your DEKs\n        will be stored. Set this to ``\"__keyVault\"``.\n      \n      - **keyVaultNamespace** - The namespace in MongoDB where your DEKs\n        will be stored. Set this to the values of the\n        ``keyVaultDatabaseName`` and ``keyVaultCollectionName``\n        variables, separated by a period.\n      \n      - **encryptedDatabaseName** - The MongoDB database where your encrypted\n        data will be stored. Set this to ``\"medicalRecords\"``.\n      \n      - **encryptedCollectionName** - The collection in MongoDB where your\n        encrypted data will be stored. Set this to ``\"patients\"``.\n\n      You can declare these variables by using the following code:\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n      - **kmsProviderName** - The KMS you use to store your\n        {+cmk-long+}. Set this to your key provider: ``\"aws\"``, \n        ``\"azure\"``, ``\"gcp\"``, or ``\"kmip\"``.\n      \n      - **keyVaultDatabaseName** - The MongoDB database where your data\n        encryption keys (DEKs) will be stored. Set ``keyVaultDatabaseName``\n        to ``\"encryption\"``.\n      \n      - **keyVaultCollectionName** - The collection in MongoDB where your DEKs\n        will be stored. Set ``keyVaultCollectionName`` to ``\"__keyVault\"``.\n      \n      - **keyVaultNamespace** - The namespace in MongoDB where your DEKs\n        will be stored. Set ``keyVaultNamespace`` to a new\n        ``CollectionNamespace`` object whose name is the values of the\n        ``keyVaultDatabaseName`` and ``keyVaultCollectionName``\n        variables, separated by a period.\n      \n      - **encryptedDatabaseName** - The MongoDB database where your encrypted\n        data will be stored. Set ``encryptedDatabaseName`` to ``\"medicalRecords\"``.\n      \n      - **encryptedCollectionName** - The collection in MongoDB where your\n        encrypted data will be stored. Set ``encryptedCollectionName`` to\n        ``\"patients\"``.\n      \n      - **uri** - Your MongoDB deployment connection URI. Set your connection\n        URI in the ``appsettings.json`` file or replace the value\n        directly.\n\n      You can declare these variables by using the following code:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "         :start-after: start-setup-application-variables\n         :end-before: end-setup-application-variables\n         :language: csharp\n         :dedent:\n\n.. important:: {+key-vault-long-title+} Namespace Permissions\n\n        The {+key-vault-long+} is in the ``encryption.__keyVault``\n        namespace. Ensure that the database user your application uses to connect\n        to MongoDB has :ref:`ReadWrite <manual-reference-role-read-write>`\n        permissions on this namespace.\n\n.. include:: /includes/queryable-encryption/env-variables.rst\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/assign-app-variables.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify your AWS Credentials\n\n      Specify the ``aws`` KMS provider and your {+aws-iam-abbr+} user\n      credentials:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: java\n               :dedent:\n\n            .. include:: /includes/tutorials/automatic/aws/obtain-automatic-credentials.rst\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: csharp\n               :dedent:\n\n   .. step:: Create an {+enc-schema-title+} For Your Collection\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify the Location of the {+shared-library+}\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: go\n               :dedent:\n   \n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: csharp\n               :dedent:\n\n      .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n\n   .. step:: Create the MongoClient\n\n      Instantiate a MongoDB client object with the following automatic\n      encryption settings that use the variables declared in the previous steps:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: go\n               :dedent:\n         \n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: csharp\n               :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "      :language: json\n\n   .. important::\n\n      Record the Amazon Resource Name ({+aws-arn-abbr+}) and Region of\n      your {+cmk-long+}. You will use these in later steps of this guide.\n\n   .. tip:: Key Policies \n\n      To learn more about key policies, see\n      `Key Policies in AWS KMS <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html>`__\n      in the official AWS documentation.\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/cmk.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/aws/obtain-automatic-credentials.rst\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+}'s {+aws-arn-abbr+} and Region\n      in the :ref:`Create a {+cmk-long+} <qe-aws-create-master-key>`\n      step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n#. Create your {+dek-long+}s\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create the {+dek-long+}s:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      The {+key-vault-long+} is in the ``encryption.__keyVault``\n      namespace. Ensure that the database user your application uses to connect\n      to MongoDB has :ref:`ReadWrite <manual-reference-role-read-write>`\n      permissions on this namespace.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n#. Create Your Encrypted Collection\n\n   Use a {+qe+} enabled ``MongoClient`` instance to specify what\n   fields you must encrypt and create your encrypted collection:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: csharp\n            :dedent:\n\nThe output from the code in this section should resemble the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an AWS KMS, see\n   :ref:`qe-fundamentals-kms-providers-aws-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in AWS KMS, see\n   :ref:`qe-kms-datakeyopts-aws`.\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: csharp\n         :dedent:\n\nWhen you insert a document, your {+qe+} enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n   \n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "      :language: json\n\n   To apply the preceding policy to your {+aws-iam-abbr+} user, follow the\n   `Adding IAM identity permissions <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html#add-policies-console>`__\n   guide in the AWS documentation.\n\n   .. important:: Authenticate with IAM Roles in Production\n\n         When deploying your {+qe+}-enabled application to a production environment,\n         authenticate your application by using an {+aws-iam-abbr+} role\n         instead of an {+aws-iam-abbr+} user.\n\n         To learn more about {+aws-iam-abbr+} roles, see the following\n         pages in the official AWS documentation:\n\n         - `IAM roles <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html>`__\n         - `When to create an IAM role (instead of a user) <https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html#id_which-to-choose_role>`__\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/aws/user.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify your Azure Credentials\n\n      Specify the ``azure`` KMS provider and your Azure\n      credentials:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: java\n               :dedent:\n\n            .. include:: /includes/tutorials/automatic/azure/azure-vm-managed-identity.rst\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: csharp\n               :dedent:\n\n   .. step:: Create an {+enc-schema-title+} For Your Collection\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify the Location of the {+shared-library+}\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: csharp\n               :dedent:\n\n      .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n\n   .. step:: Create the MongoClient\n\n      Instantiate a MongoDB client object with the following automatic\n      encryption settings that use the variables declared in the previous steps:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: csharp\n               :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/azure/azure-vm-managed-identity.rst\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+} credentials in the\n      :ref:`azure-create-master-key` step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n#. Create your {+dek-long+}s\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create the {+dek-long+}s:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      The {+key-vault-long+} is in the ``encryption.__keyVault``\n      namespace. Ensure that the database user your application uses to connect\n      to MongoDB has :ref:`ReadWrite <manual-reference-role-read-write>`\n      permissions on this namespace.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n#. Create Your Encrypted Collection\n\n   Use a {+qe+} enabled ``MongoClient`` intance to specify what\n   fields you must encrypt and create your encrypted collection:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: csharp\n            :dedent:\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an {+azure-kv+}, see\n   :ref:`qe-fundamentals-kms-providers-azure-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in {+azure-kv+}, see\n   :ref:`qe-kms-provider-object-azure` and\n   :ref:`qe-kms-datakeyopts-azure`.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: csharp\n         :dedent:\n\nWhen you insert a document, your {+qe+} enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify your Cloud Account Credentials\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n            .. include:: /includes/tutorials/automatic/gcp/attached-service-account.rst\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n            .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: csharp\n               :dedent:\n\n   .. step:: Create an {+enc-schema-title+} For Your Collection\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: csharp\n               :dedent:\n\n   .. step:: Specify the Location of the {+shared-library+}\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: csharp\n               :dedent:\n\n      .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst\n\n   .. step:: Create the MongoClient\n\n      Instantiate a MongoDB client object with the following automatic\n      encryption settings that use the variables declared in the previous steps:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: csharp\n               :dedent:\n\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n         .. include:: /includes/tutorials/automatic/gcp/attached-service-account.rst\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n   .. include:: /includes/queryable-encryption/tutorials/automatic/gcp/gcp-credentials-note.rst\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+} details in the\n      in the :ref:`Create a {+cmk-long+} <qe-gcp-create-master-key>`\n      step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n#. Generate your {+dek-long+}s\n\n   .. _qe-gcp-create-dek:\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create the {+dek-long+}s:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      The {+key-vault-long+} is in the ``encryption.__keyVault``\n      namespace. Ensure that the database user your application uses to connect\n      to MongoDB has :ref:`ReadWrite <manual-reference-role-read-write>`\n      permissions on this namespace.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n#. Create Your Encrypted Collection\n\n   Use a {+qe+} enabled ``MongoClient`` instance to specify what\n   fields you must encrypt and create your encrypted collection:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: csharp\n            :dedent:\n\nThe output from the code in this section should resemble the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an {+gcp-kms+}, see\n   :ref:`qe-fundamentals-kms-providers-gcp-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in {+azure-kv+}, see\n   :ref:`qe-kms-provider-object-gcp` and\n   :ref:`qe-kms-datakeyopts-gcp`.\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "      :copyable: true\n\n      cat <credentials-filename> | jq -r .private_key | openssl pkcs8 -topk8 -nocrypt -inform PEM -outform DER | base64\n\n   If you downloaded your credentials in PKCS12 format, you need to\n   specify your GCP service account import password and to add a\n   PEM pass phrase to access the key when accessing it using the\n   following command, substituting ``<credentials-filename>`` with\n   the name of your credentials file:\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/gcp-credentials-note.rst"
  },
  {
    "code": "      :copyable: true\n\n      openssl pkcs12 -info -in <credentials-filename>\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/gcp-credentials-note.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: csharp\n         :dedent:\n\nWhen you insert a document, your {+qe+} enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :language: none\n         :dedent:\n\n      .. note:: Configure Client With SSLContext\n\n         If you would rather configure your client application using an SSL context, use the\n         `kmsProviderSslContextMap <{+java-driver-api+}/mongodb-driver-core/com/mongodb/ClientEncryptionSettings.Builder.html#kmsProviderSslContextMap(java.util.Map)>`__\n         method.\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "none",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: // start-tls-options\n         :end-before: // end-tls-options\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: # start-tls-options\n         :end-before: # end-tls-options\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: // start-tls-options\n         :end-before: // end-tls-options\n         :language: javascript\n         :dedent:\n\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: // start-tls-options\n         :end-before: // end-tls-options\n         :language: csharp\n         :dedent:\n\n      .. important::\n\n         Your client certificate must be in pcks12 format. You can convert\n         your certificate using `OpenSSL <https://docs.openssl.org/master/>`__\n         with the following command:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: // start-tls-options\n         :end-before: // end-tls-options\n         :language: go\n         :dedent:\n\n\n      .. important::\n\n         You must use certificates with `ECDSA keys <https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm>`__\n         when using the Go driver with `PyKMIP <https://github.com/OpenKMIP/PyKMIP>`__.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: csharp\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-key-vault\n               :end-before: end-key-vault\n               :language: go\n               :dedent:\n\n   .. step:: Specify your KMIP Endpoint\n\n      Specify ``kmip`` in your ``kmsProviders`` object and enter\n      the URI endpoint of your {+kmip-kms+}:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: csharp\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-kmsproviders\n               :end-before: end-kmsproviders\n               :language: go\n               :dedent:\n\n\n   .. step:: Create an {+enc-schema-title+} For Your Collection\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-schema\n               :end-before: end-schema\n               :language: csharp\n               :dedent:\n\n      .. include:: /includes/quick-start/schema/further-reading-note.rst\n\n   .. step:: Specify the Location of the {+shared-library+}\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               // mongosh does not require you to specify the\n               // location of the {+shared-library+} \n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: go\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-extra-options\n               :end-before: end-extra-options\n               :language: csharp\n               :dedent:\n\n   .. step:: Create the MongoClient\n\n      Instantiate a MongoDB client object with the following automatic\n      encryption settings that use the variables declared in the previous steps:\n\n      .. tabs-drivers::\n\n         .. tab::\n            :tabid: java-sync\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: java\n               :dedent:\n\n         .. tab::\n            :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: javascript\n               :dedent:\n\n         .. tab::\n            :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: python\n               :dedent:\n\n         .. tab::\n            :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: csharp\n               :dedent:\n\n         .. tab::\n            :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "               :start-after: start-client\n               :end-before: end-client\n               :language: go\n               :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Add Your Key Information\n\n   The following code prompts your {+kmip-kms+} to automatically generate a {+cmk-long+}:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n#. Generate your {+dek-long+}s\n\n   .. _qe-kmip-create-dek:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n          :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n          :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+qe+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n \n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   {\n       \"local:my_kms_provider\": {\n          { \"key\" : \"<local CMK>\" }\n       },\n   }\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/automatic/named-kms-note-local.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n#. Specify the {+cmk-long+}\n\n   Specify the KMS provider and specify your {+cmk-long+} inline:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n#. Retrieve {+dek-long+}s \n\n   Retrieve the {+dek-long+}s created in the\n   :ref:`Create a {+dek-long+} <qe-manual-encryption-tutorial-data-key-create>`\n   step of this guide:\n\n   .. _qe-quickstart-encrypted-fields-map:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-retrieve-deks\n            :end-before: end-retrieve-deks\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-retrieve-deks\n            :end-before: end-retrieve-deks\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-retrieve-deks\n            :end-before: end-retrieve-deks\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-retrieve-deks\n            :end-before: end-retrieve-deks\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-retrieve-deks\n            :end-before: end-retrieve-deks\n            :language: csharp\n            :dedent:\n\n#. Specify the Path of the {+shared-library+}\n\n   .. _qe-tutorials-manual-enc-shared-lib:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n      \n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n   .. tip:: Learn More\n\n      To learn more about the library referenced by this path,\n      see the :ref:`<qe-reference-shared-library>` page.\n\n\n#. Create a MongoClient Object\n\n   Instantiate a ``MongoClient`` object with the following\n   automatic encryption settings:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: csharp\n            :dedent:\n\n   .. note:: Automatic Decryption\n\n      We use a ``MongoClient`` instance with automatic encryption enabled\n      to perform automatic decryption.\n\n      To learn more about {+manual-enc+} with automatic decryption,\n      see the :ref:`Fundamentals <qe-fundamentals>` section. \n\n#. Create a ClientEncryption Object\n\n   Instantiate a ``ClientEncryption`` object as follows:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client-enc\n            :end-before: end-client-enc\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client-enc\n            :end-before: end-client-enc\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client-enc\n            :end-before: end-client-enc\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client-enc\n            :end-before: end-client-enc\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "            :start-after: start-client-enc\n            :end-before: end-client-enc\n            :language: csharp\n            :dedent:\n\n.. note:: Indexed and Unindexed Algorithms\n\n   To learn more about the indexed and unindexed algorithms in\n   {+manual-enc+}, see :ref:`<qe-fundamentals-man-enc-algorithm-choice>`.\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/client.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: csharp\n         :dedent:\n\n.. include:: /includes/queryable-encryption/qe-warning-local-keys.rst\n\n.. include:: /includes/in-use-encryption/cmk-bash.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/cmk.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n#. Create your {+dek-long+}s\n\n   .. _qe-exp-create-dek:\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create the {+dek-long+}s:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      .. include:: /includes/note-key-vault-permissions\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n#. Create Your Encrypted Collection\n\n   Use a {+qe+} enabled ``MongoClient`` instance to specify what\n   fields you must encrypt and create your encrypted collection:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-enc-collection\n            :end-before: end-create-enc-collection\n            :language: csharp\n            :dedent:\n\nThe output from the code in this section should resemble the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "   :language: text\n   :copyable: false\n\n",
    "language": "text",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\nThe output of the preceding code snippet should contain the following\ndocument:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: csharp\n         :dedent:\n\nWhen you insert a document, your {+qe+} enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n.. include:: /includes/queryable-encryption/safe-content-warning.rst\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n      .. include:: /includes/queryable-encryption/tutorials/go-build-constraint.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/queryable-encryption/tutorials/exp/key-vault-index.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n#. Specify the Local {+cmk-long+}\n\n   Specify the KMS provider and specify your key inline:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Create an Encryption Schema For Your Collection\n\n   .. tip:: Add Your {+dek-long+} Base64 ID\n\n      Make sure to update the following code to include your Base64\n      {+dek-abbr+} ID. You received this value in the\n      :ref:`Generate your {+dek-long+} <csfle-local-create-dek>` step of this\n      guide.\n\n   .. _csfle-quickstart-encryption-schema:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: go\n            :dedent:\n\n#. Specify the Location of the {+shared-library+}\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/csfle-shared-lib-learn-more.rst\n\n#. Create the MongoClient\n\n   Instantiate a MongoDB client object with the following\n   automatic encryption settings:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. tabs::\n\n            .. tab:: C# Driver v3.0+\n               :tabid: csharp-v3\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "                  :start-after: start-client\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n            \n            .. tab:: C# Driver < v3.0\n               :tabid: csharp-v2\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n            :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/client.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/cmk.rst"
  },
  {
    "code": "         :start-after: start-local-cmk\n         :end-before: end-local-cmk\n         :language: csharp\n         :dedent:\n\n.. include:: /includes/queryable-encryption/qe-warning-local-keys.rst\n\n.. include:: /includes/in-use-encryption/cmk-bash.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/cmk.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Create a Data Encryption Key\n\n   .. _csfle-local-create-dek:\n\n   Construct a client with your MongoDB connection string and {+key-vault-long+}\n   namespace, and create a {+dek-long+}:\n\n   .. note:: {+key-vault-long-title+} Namespace Permissions\n\n      .. include:: /includes/note-key-vault-permissions\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n\n   The output from the code above should resemble the following:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "      :copyable: false\n\n      DataKeyId [base64]: 3k13WkSZSLy7kwAAP4HDyQ==\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n          :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n          :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+csfle-abbrev+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/quick-start/key-vault-index.rst"
  },
  {
    "code": "   :copyable: false\n\n   db.myColl.find().sort({_id: 1}).skip(3).limit(6);\n\n   db.myColl.find().sort({_id: 1}).limit(6).skip(3);\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/reference/skip-limit.rst"
  },
  {
    "code": "  :copyable: false\n\n  storage_req = ( ( collection_storage_size + index_size ) * 2 ) / shard_count\n\nFor example, consider a collection that contains 2 TB of\ndata and has a 400 GB index distributed across four shards.\nTo perform a resharding operation on this collection, each\nshard would require 1.2 TB of available storage.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/reshard-storage-space.rst"
  },
  {
    "code": "  :copyable: false\n\n  1.2 TB storage = ( ( 2 TB collection + 0.4 TB index ) * 2 ) / 4 shards\n\nTo meet storage requirements, you may need to upgrade to\nthe next tier of storage during the resharding operation.\nYou can scale down once the operation completes.\n\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/reshard-storage-space.rst"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"chunkSize\": Long(\"128\"),\n      \"balancerCompliant\": false,\n      \"firstComplianceViolation\": \"defragmentingChunks\",\n      \"details\": {\n         \"currentPhase\": \"moveAndMergeChunks\",\n         \"progress\": { \"remainingChunksToProcess\": 1 }\n      }\n   }\n\n.. note::\n   \n   Chunk defragmentation occurs in multiple phases. The ``progress`` field\n   only pertains to the current phase. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/sharding/balancer-status-defrag-example.rst"
  },
  {
    "code": "         :copyable: false \n\n         never \n         never\n\n   .. step:: Configure your operating system to run it on boot \n    \n      To ensure that this setting is applied each time the operating sytem \n      starts, run the following command for your Linux distribution:\n\n      .. list-table::\n         :header-rows: 1\n         :widths: 20 80\n\n         * - Distribution\n\n           - Command\n\n         * - Ubuntu and Debian\n\n           - .. code:: sh\n\n                sudo update-rc.d disable-transparent-hugepages defaults\n\n         * - SUSE\n\n           - .. code:: sh\n\n                sudo insserv /etc/init.d/disable-transparent-hugepages\n\n         * - Red Hat, CentOS, Amazon Linux, and derivatives\n\n           - .. code:: sh\n\n                sudo chkconfig --add disable-transparent-hugepages\n\n\n   .. step:: (*Optional*) Customize tuned or ktune profile \n    \n      If you are using ``tuned`` or ``ktune`` profiles on \n      :abbr:`RHEL (Red Hat Enterprise Linux)`/ CentOS, you must also create \n      a custom ``tuned`` profile.\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-disable-thp-in-initd.rst"
  },
  {
    "code": "         :copyable: true\n\n         cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag\n\n      On Red Hat Enterprise Linux and potentially other Red Hat-based \n      derivatives, you may instead need to use the following:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-disable-thp-in-systemd.rst"
  },
  {
    "code": "         :copyable: false \n\n         never\n         never\n\n   .. step:: Configure your operating system to run it on boot\n    \n      To ensure that this setting is applied each time the operating system \n      starts, run the following command:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-disable-thp-in-systemd.rst"
  },
  {
    "code": "         :copyable: false \n\n         always \n         defer+madvise\n         0\n         1\n\n   .. step:: Configure your operating system to run it on boot \n    \n      To ensure that this setting is applied each time the operating sytem \n      starts, run the following command for your Linux distribution:\n\n      .. list-table::\n         :header-rows: 1\n         :widths: 20 80\n\n         * - Distribution\n\n           - Command\n\n         * - Ubuntu and Debian\n\n           - .. code:: sh\n\n                sudo update-rc.d enable-transparent-hugepages defaults\n\n         * - SUSE\n\n           - .. code:: sh\n\n                sudo insserv /etc/init.d/enable-transparent-hugepages\n\n         * - Red Hat, CentOS, Amazon Linux, and derivatives\n\n           - .. code:: sh\n\n                sudo chkconfig --add enable-transparent-hugepages\n\n\n   .. step:: (*Optional*) Customize tuned or ktune profile \n    \n      If you are using ``tuned`` or ``ktune`` profiles on \n      :abbr:`RHEL (Red Hat Enterprise Linux)`/ CentOS, you must also create \n      a custom ``tuned`` profile.\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-enable-thp-initd.rst"
  },
  {
    "code": "         :copyable: true\n\n         cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag && cat /sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none && cat /proc/sys/vm/overcommit_memory\n\n      On Red Hat Enterprise Linux and potentially other Red Hat-based \n      derivatives, you may instead need to use the following:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-enable-thp-systemd.rst"
  },
  {
    "code": "         :copyable: false \n\n         always \n         defer+madvise\n         0\n         1\n\n   .. step:: Configure your operating system to run it on boot.\n    \n      To ensure that this setting is applied each time the operating system \n      starts, run the following command:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-enable-thp-systemd.rst"
  },
  {
    "code": "      :copyable: true\n\n      mongosh \"mongodb+srv://my-test-cluster.1twap.mongodb.net/\" --apiVersion 1\n      --username <user>\n\n.. step:: Create a new database.\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "      :copyable: true\n\n      use timeseries\n\n   This creates and switches to an empty \"timeseries\" database.\n\n.. step:: Create an empty time series collection.\n\n   .. note::\n   \n      This exercise uses :ref:`stock ticker sample data  \n      <ts-quick-start-sample-data>`. The ``date`` field stores time data, and\n      the ``ticker`` field identifies the individual stock.\n\n   a. Set the ``timeField``, ``metaField``, and ``granularity``:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "         :copyable: true\n\n         timeseries: {\n            timeField: \"date\",\n            metaField: \"ticker\",\n            granularity: \"seconds\"\n         }\n\n      **OR** specify custom granularity:\n\n      .. versionadded:: 6.3\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "         :copyable: true\n         :emphasize-lines: 4,5\n\n         timeseries: {\n            timeField: \"date\",\n            metaField: \"ticker\",\n            granularity: \"seconds\",\n            bucketMaxSpanSeconds: \"300\",\n            bucketRoundingSeconds: \"300\"\n         }\n\n   #. Create the collection using the :method:`db.createCollection()` method:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "         :copyable: true\n\n         db.createCollection(\n            \"stocks\",\n            {\n               timeseries: {\n                  timeField: \"date\",\n                  metaField: \"ticker\",\n                  granularity: \"seconds\"\n               }\n            })\n\n      This creates an empty time series collection named ``stocks``.\n\n.. step:: Add sample documents.\n\n   Run the :method:`db.collection.insertMany()` method to add the\n   following sample documents to the collection:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "      :copyable: true\n\n      db.stocks.insertMany([\n         { ticker: \"MDB\", date: ISODate(\"2021-12-18T15:59:00.000Z\"), close: 252.47, volume: 55046.00}, \n         { ticker: \"MDB\", date: ISODate(\"2021-12-18T15:58:00.000Z\"), close: 252.93, volume: 44042.00}, \n         { ticker: \"MDB\", date: ISODate(\"2021-12-18T15:57:00.000Z\"), close: 253.61, volume: 40182.00}, \n         { ticker: \"MDB\", date: ISODate(\"2021-12-18T15:56:00.000Z\"), close: 253.63, volume: 27890.00}, \n         { ticker: \"MDB\", date: ISODate(\"2021-12-18T15:55:00.000Z\"), close: 254.03, volume: 40270.00}\n      ])\n\n   If you are running MongoDB on Atlas, you can click \n   :guilabel:`Browse collections` to view the sample data.\n\n.. step:: Query the data.\n\n   You query a time series collection like any other MongoDB collection. For\n   more information, see :ref:`About Querying Time Series Data\n   <timeseries-querying>`.\n   \n   Common queries for time series data are querying the ``metaField``\n   to get data for a single time series, or using a range query on the\n   ``timeField`` to get data for a given time span. \n   \n   To query the ``metaField`` for a single time series:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "      :copyable: true\n\n      db.stocks.find( { ticker: \"MDB\" } )\n   \n   To query the ``timeField`` for a time span:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "      :copyable: true\n\n      db.stocks.find({ date : {\n         $gte : ISODate(\"2021-12-18T15:50:00.000Z\"), \n         $lte : ISODate(\"2021-12-18T15:56:00.000Z\")}\n      });\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/steps-ts-quick-start-mongosh.rst"
  },
  {
    "code": "   :copyable: false\n\n   db.foo.distinct(\"meta.type\", {\"meta.project\": 10})\n\nUse:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/time-series/timeseries-distinct-command.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n#. Specify your AWS Credentials\n\n   Specify the ``aws`` KMS provider and your {+aws-iam-abbr+} user\n   credentials:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n   .. include:: /includes/queryable-encryption/tutorials/automatic/aws/role-authentication.rst\n\n#. Create an Encryption Schema For Your Collection\n\n   .. tip:: Add Your {+dek-long+} Base64 ID\n\n      Make sure to update the following code to include your Base64\n      {+dek-abbr+} ID. You received this value in the\n      :ref:`Generate your {+dek-long+} <csfle-aws-create-dek>` step of this\n      guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: go\n            :dedent:\n\n#. Specify the Location of the {+shared-library+}\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/csfle-shared-lib-learn-more.rst\n\n#. Create the MongoClient\n\n   Instantiate a MongoDB client object with the following automatic\n   encryption settings that use the variables declared in the previous steps:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. tabs::\n\n            .. tab:: C# Driver v3.0+\n               :tabid: csharp-v3\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "                  :start-after: start-client\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n            \n            .. tab:: C# Driver < v3.0\n               :tabid: csharp-v2\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/client.rst"
  },
  {
    "code": "      :language: json\n\n   .. important:: \n\n      Record the Amazon Resource Name ({+aws-arn-abbr+}) and Region of\n      your {+cmk-long+}. You will use these in later steps of this guide.\n\n   .. tip:: Learn More\n\n      To learn more about your {+cmk-long+}s, see\n      :ref:`qe-reference-keys-key-vaults`.\n\n      To learn more about key policies, see\n      `Key Policies in AWS KMS <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html>`__\n      in the official AWS documentation.\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/cmk.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n            .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n               .. replacement:: kms-provider\n\n                  AWS\n                     \n               .. replacement:: kms-provider-name\n\n                  \"my_aws_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "               :language: java\n               :dedent:\n\n         .. include:: /includes/tutorials/automatic/aws/obtain-automatic-credentials.rst\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               AWS\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_aws_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               AWS\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_aws_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               AWS\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_aws_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+}'s {+aws-arn-abbr+} and Region\n      in the :ref:`Create a {+cmk-long+} <aws-create-master-key>`\n      step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n#. Generate your {+dek-long+}\n\n   .. _csfle-aws-create-dek:\n\n   Generate your {+dek-long+} using the variables declared in :ref:`step one\n   <csfle-aws-create-index>` of this tutorial.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an AWS KMS, see\n   :ref:`qe-fundamentals-kms-providers-aws-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in AWS KMS, see\n   :ref:`qe-kms-datakeyopts-aws`.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+csfle-abbrev+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/key-vault-index.rst"
  },
  {
    "code": "      :language: json\n\n   To apply the preceding policy to your {+aws-iam-abbr+} user, follow the\n   `Adding IAM identity permissions <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html#add-policies-console>`__\n   guide in the AWS documentation.\n\n   .. important:: Authenticate with IAM Roles in Production\n\n         When deploying your CSFLE-enabled application to a production environment,\n         authenticate your application by using an {+aws-iam-abbr+} role\n         instead of an {+aws-iam-abbr+} user.\n\n         To learn more about {+aws-iam-abbr+} roles, see the following\n         pages in the official AWS documentation:\n\n         - `IAM roles <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html>`__\n         - `When to create an IAM role (instead of a user) <https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html#id_which-to-choose_role>`__\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/aws/user.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n#. Specify your Azure Credentials\n\n   Specify the ``azure`` KMS provider and your Azure\n   credentials:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/azure/azure-vm-managed-identity.rst\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Create an Encryption Schema For Your Collection\n\n   .. tip:: Add Your {+dek-long+} Base64 ID\n\n      Make sure to update the following code to include your Base64\n      {+dek-abbr+} ID. You received this value in the\n      :ref:`Generate your {+dek-long+} <csfle-azure-create-dek>` step of this\n      guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: go\n            :dedent:\n\n#. Specify the Location of the {+shared-library+}\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/csfle-shared-lib-learn-more.rst\n\n#. Create the MongoClient\n\n   Instantiate a MongoDB client object with the following automatic\n   encryption settings that use the variables declared in the previous steps:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. tabs::\n\n            .. tab:: C# Driver v3.0+\n               :tabid: csharp-v3\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "                  :start-after: start-client\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n            \n            .. tab:: C# Driver < v3.0\n               :tabid: csharp-v2\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n            :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               Azure\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_azure_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :language: java\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/azure/azure-vm-managed-identity.rst\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               Azure\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_azure_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               Azure\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_azure_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               Azure\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_azure_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+}'s {+aws-arn-abbr+} and Region\n      in the :ref:`Create a {+cmk-long+} <aws-create-master-key>`\n      step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n#. Generate your {+dek-long+}\n\n   .. _csfle-azure-create-dek:\n\n   Generate your {+dek-long+} using the variables declared in :ref:`step one\n   <csfle-azure-create-index>` of this tutorial.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an {+azure-kv+}, see\n   :ref:`qe-fundamentals-kms-providers-azure-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in {+azure-kv+}, see\n   :ref:`qe-kms-provider-object-azure` and\n   :ref:`qe-kms-datakeyopts-azure`.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n          :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n          :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+csfle-abbrev+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/azure/key-vault-index.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n#. Specify your Cloud Account Credentials\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n         .. include:: /includes/tutorials/automatic/gcp/attached-service-account.rst\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Create an Encryption Schema For Your Collection\n\n   .. tip:: Add Your {+dek-long+} Base64 ID\n\n      Make sure to update the following code to include your Base64\n      {+dek-abbr+} ID. You received this value in the\n      :ref:`Generate your {+dek-long+} <csfle-gcp-create-dek>` step of this\n      guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: go\n            :dedent:\n\n#. Specify the Location of the {+shared-library+}\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/csfle-shared-lib-learn-more.rst\n\n#. Create the MongoClient\n\n   Instantiate a MongoDB client object with the following automatic\n   encryption settings that use the variables declared in the previous steps:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. tabs::\n\n            .. tab:: C# Driver v3.0+\n               :tabid: csharp-v3\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "                  :start-after: start-client\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n            \n            .. tab:: C# Driver < v3.0\n               :tabid: csharp-v2\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n            :dedent:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               GCP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_gcp_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               GCP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_gcp_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               GCP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_gcp_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               GCP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_gcp_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n         .. include:: /includes/tutorials/automatic/gcp/specify-provider-credentials.rst\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/automatic/gcp/gcp-credentials-note.rst\n\n#. Add Your Key Information\n\n   Update the following code to specify your {+cmk-long+}:\n\n   .. tip::\n\n      You recorded your {+cmk-long+} details in the\n      in the :ref:`Create a {+cmk-long+} <gcp-create-master-key>`\n      step of this guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n#. Generate your {+dek-long+}\n\n   .. _csfle-gcp-create-dek:\n\n   Generate your {+dek-long+} using the variables declared in :ref:`step one\n   <csfle-gcp-create-index>` of this tutorial.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n\n.. tip:: Learn More\n\n   To view a diagram showing how your client application creates your\n   {+dek-long+} when using an {+gcp-kms+}, see\n   :ref:`qe-fundamentals-kms-providers-gcp-architecture`.\n\n   To learn more about the options for creating a {+dek-long+}\n   encrypted with a {+cmk-long+} hosted in {+azure-kv+}, see\n   :ref:`qe-kms-provider-object-gcp` and\n   :ref:`qe-kms-datakeyopts-gcp`.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/find.rst"
  },
  {
    "code": "      :copyable: true\n\n      cat <credentials-filename> | jq -r .private_key | openssl pkcs8 -topk8 -nocrypt -inform PEM -outform DER | base64\n\n   If you downloaded your credentials in PKCS12 format, you need to\n   specify your GCP service account import password and to add a\n   PEM pass phrase to access the key when accessing it using the\n   following command, substituting ``<credentials-filename>`` with\n   the name of your credentials file:\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/gcp-credentials-note.rst"
  },
  {
    "code": "      :copyable: true\n\n      openssl pkcs12 -info -in <credentials-filename>\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/gcp-credentials-note.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n          :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n          :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+csfle-abbrev+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/gcp/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-tls\n         :end-before: end-create-tls\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: start-create-tls\n         :end-before: end-create-tls\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: start-create-tls\n         :end-before: end-create-tls\n         :language: csharp\n         :dedent:\n\n      .. important::\n      \n         Your client certificate must be in pkcs12 format. You can convert\n         your certificate using your certificate using `OpenSSL <https://docs.openssl.org/master/>`__\n         with the following command:\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "         :start-after: start-create-tls\n         :end-before: end-create-tls\n         :language: go\n         :dedent:\n\n      .. important::\n      \n         You must use certificates with `ECDSA keys <https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm>`__ \n         when using the Go driver.\n         \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/certificates.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-key-vault\n            :end-before: end-key-vault\n            :language: go\n            :dedent:\n\n#. Specify your KMIP Endpoint\n\n   Specify ``kmip`` in your ``kmsProviders`` object and enter\n   the URI endpoint of your {+kmip-kms+}:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n\n#. Create an Encryption Schema For Your Collection\n\n   Create an encryption schema that specifies how your client\n   application encrypts your documents' fields:\n\n   .. tip:: Add Your {+dek-long+} Base64 ID\n\n      Make sure to update the following code to include your Base64\n      {+dek-abbr+} ID. You received this value in the\n      :ref:`Generate your {+dek-long+} <csfle-kmip-create-dek>` step of this\n      guide.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-schema\n            :end-before: end-schema\n            :language: go\n            :dedent:\n   \n   .. include:: /includes/quick-start/schema/further-reading-note.rst\n\n#. Specify the Location of the {+shared-library+}\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-extra-options\n            :end-before: end-extra-options\n            :language: go\n            :dedent:\n\n   .. include:: /includes/tutorials/csfle-shared-lib-learn-more.rst\n\n#. Create the MongoClient\n\n   Instantiate a MongoDB client object with the following automatic\n   encryption settings that use the variables declared in the previous steps:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n         .. tabs::\n\n            .. tab:: C# Driver v3.0+\n               :tabid: csharp-v3\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "                  :start-after: start-client\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n            .. tab:: C# Driver < v3.0\n               :tabid: csharp-v2\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only\n                  :end-before: end-client\n                  :language: csharp\n                  :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-client\n            :end-before: end-client\n            :language: go\n            :dedent:\n\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/client.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: java\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               KMIP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_kmip_provider\"\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               KMIP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_kmip_provider\"\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: python\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               KMIP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_kmip_provider\"\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: csharp\n            :dedent:\n\n         .. include:: /includes/queryable-encryption/tutorials/automatic/named-kms-note.rst\n\n            .. replacement:: kms-provider\n\n               KMIP\n                     \n            .. replacement:: kms-provider-name\n\n               \"my_kmip_provider\"\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-kmsproviders\n            :end-before: end-kmsproviders\n            :language: go\n            :dedent:\n\n#. Add Your Key Information\n\n   The following code prompts your {+kmip-kms+} to automatically generate a {+cmk-long+}:\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: javascript\n            :dedent:\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-datakeyopts\n            :end-before: end-datakeyopts\n            :language: go\n            :dedent:\n\n#. Generate your {+dek-long+}\n\n   .. _csfle-kmip-create-dek:\n\n   Generate your {+dek-long+} using the variables declared in :ref:`step one\n   <csfle-kmip-create-index>` of this tutorial.\n\n   .. tabs-drivers::\n\n      .. tab::\n         :tabid: java-sync\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: java\n            :dedent:\n\n      .. tab::\n         :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: javascript\n            :dedent:\n\n         .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst\n\n      .. tab::\n         :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: python\n            :dedent:\n\n      .. tab::\n         :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: csharp\n            :dedent:\n\n      .. tab::\n         :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "            :start-after: start-create-dek\n            :end-before: end-create-dek\n            :language: go\n            :dedent:\n               \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/dek.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: csharp\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-find\n         :end-before: end-find\n         :language: go\n         :dedent:\n\nThe output of the preceding code snippet should look like this:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/find.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "         :start-after: start-insert\n         :end-before: end-insert\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: python\n          :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: csharp\n          :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "          :start-after: start-insert\n          :end-before: end-insert\n          :language: go\n          :dedent:\n\n      .. note::\n\n         Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly\n         to the driver for encoding.\n\nWhen you insert a document, your {+csfle-abbrev+}-enabled client\nencrypts the fields of your document such that it resembles the following:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "   :language: json\n   :copyable: false\n\n",
    "language": "json",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/insert.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: java\n         :dedent:\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "java",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: javascript\n         :dedent:\n\n   .. tab::\n      :tabid: python\n\n",
    "language": "javascript",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: python\n         :dedent:\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: go\n         :dedent:\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "         :start-after: start-create-index\n         :end-before: end-create-index\n         :language: csharp\n         :dedent:\n         \n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/tutorials/automatic/kmip/key-vault-index.rst"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, category : \"food\", budget : 400, spent : 450 }\n   { _id : 2, category : \"drinks\", budget : 100, spent : 150 }\n   { _id : 5, category : \"travel\", budget : 200, spent : 650 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/use-expr-in-find-query.rst"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   db.budget.find( {\n      $expr: {\n         $not: {\n            $eq: [ { $setIntersection: [ \"$allowedRoles\", \"$$USER_ROLES.role\" ] }, [] ]\n         }\n      }\n   } )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-example-find.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 1,\n         allowedRoles: [ 'Sales' ],\n         comment: 'For sales team',\n         yearlyBudget: 17000,\n         salesEventsBudget: 1000\n      },\n      {\n         _id: 2,\n         allowedRoles: [ 'Operations' ],\n         comment: 'For operations team',\n         yearlyBudget: 19000,\n         cloudBudget: 12000\n      }\n   ]\n\n.. note::\n\n   On a sharded cluster, a query can be run on a shard by another server\n   node on behalf of the user. In those queries, ``USER_ROLES`` is still\n   populated with the roles for the user.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-example-output-jane.rst"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 0,\n         allowedRoles: [ 'Marketing' ],\n         comment: 'For marketing team',\n         yearlyBudget: 15000\n      },\n      {\n         _id: 2,\n         allowedRoles: [ 'Operations' ],\n         comment: 'For operations team',\n         yearlyBudget: 19000,\n         cloudBudget: 12000\n      },\n      {\n         _id: 3,\n         allowedRoles: [ 'Development' ],\n         comment: 'For development team',\n         yearlyBudget: 27000\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-example-output-john.rst"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   db.budget.aggregate( [ {\n      $match: {\n         $expr: {\n            $not: {\n               $eq: [ { $setIntersection: [ \"$allowedRoles\", \"$$USER_ROLES.role\" ] }, [] ]\n            }\n         }\n      }\n   } ] )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-example-pipeline.rst"
  },
  {
    "code": "   :emphasize-lines: 12\n\n   // Attempt to find and modify document\n   db.medical.findAndModify( {\n      query:\n         { $and: [\n            {\n               // Only update the document for Mary Smith\n               patientName: { $eq: \"Mary Smith\" }\n            },\n            {\n               // User must have the Provider role to perform the update\n               $expr: { $ne: [ {\n                  $setIntersection: [ [ \"Provider\" ], \"$$USER_ROLES.role\" ]\n               }, [] ] }\n            }\n         ]\n      },\n      // Update document\n      update: {\n         patientName: \"Mary Smith\",\n         diagnosisCode: \"ACH 03\",\n         creditCard: \"6541-7534-9637-3456\"\n      }\n   } )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-find-and-modify-example.rst"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   // Attempt to update many documents\n   db.medical.updateMany(\n      // User must have the Provider role to perform the update\n      { $expr: { $ne: [ {\n         $setIntersection: [ [ \"Provider\" ], \"$$USER_ROLES.role\" ] }, []\n      ] } },\n      // Update diagnosisCode\n      { $set: { diagnosisCode: \"ACH 02\"} }\n   )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-update-many-example.rst"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   // Attempt to update one document\n   db.medical.updateOne( {\n      // User must have the Provider role to perform the update\n      $expr: { $ne: [\n         { $setIntersection: [ [ \"Provider\" ], \"$$USER_ROLES.role\" ] }, []\n      ] } },\n      // Update diagnosisCode\n      { $set: { diagnosisCode: \"ACH 01\"} }\n   )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/includes/user-roles-system-variable-update-one-example.rst"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>,\n            mechanism: <mechanism>\n          }\n\n       Starting in MongoDB 5.0, ``authenticate``:\n\n       - Is logged for incomplete authentication attempts.\n       \n       - Includes the principle name and identifier in\n         ``mechanism`` for external authentication mechanisms such as\n         :ref:`x.509 <security-auth-x509>` and Amazon Web Services\n         Identity and Access Management (AWS-IAM) (see\n         :urioption:`authMechanism`).\n\n       .. versionchanged:: 5.0\n\n     - | ``0`` - Success\n       | ``18`` - Authentication Failed\n       | ``334`` - Mechanism Unavailable\n       | ``337`` - Authentication Abandoned\n\n   * - .. _audit-message-authCheck:\n\n       ``authCheck``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            command: <name>,\n            ns: <database>.<collection>,\n            args: <command object>\n          }\n\n       | ``ns`` field is optional.\n       | ``args`` field may be redacted.\n\n       By default, the auditing system logs only the authorization\n       failures. To enable the system to log authorization successes,\n       use the :parameter:`auditAuthorizationSuccess` parameter.\n       \n       .. include:: /includes/fact-auditAuthorizationSuccess-performance-impact.rst\n\n       Starting in MongoDB 5.0, ``authCheck`` is not logged for actions\n       that are generated internally.\n\n       .. versionchanged:: 5.0\n\n     - | ``0`` - Success\n       | ``13`` - Unauthorized to perform the operation.\n\n\n   * - .. _audit-message-clientMetadata:\n\n       ``clientMetadata``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             localEndpoint : {\n                ip : <IP address of running instance>,\n                port : <port of running instance>\n             } || {\n                unix : <MongoDB socket file path if connecting through\n                        a Unix domain socket>\n             },\n             clientMetadata : {\n                driver : {\n                   name : <client driver name>,\n                   version : <client driver version>\n                },\n                os : {\n                   type : <client operating system type>,\n                   name : <client operating system name>,\n                   architecture : <client operating system architecture>,\n                   version : <client operating system version>\n                },\n                platform : <client platform name>,\n                application : {\n                   name : <client application name>\n                }\n             }\n          }\n\n       Contains the client metadata. Logged when the client runs the\n       :dbcommand:`hello` command.\n\n       For more details, see :ref:`log-messages-client-data`.\n       \n       .. versionadded:: 5.0\n\n     - ``0`` - Success\n\n\n   * - .. _audit-message-createCollection:\n\n       :authaction:`createCollection`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             ns: <database>.<collection || view>,\n             viewOn: <database>.<collection>,\n             pipeline: [ <pipeline definition> ]\n          }\n\n       Logged when a:\n       \n       - Collection is created.\n       \n       - :ref:`View <views-landing-page>` is created, with the view\n         name logged in the ``ns`` field.\n\n       .. include:: /includes/collection-audit-event.rst\n\n       .. versionchanged:: 5.0\n\n     - ``0`` - Success\n\n\n   * - ``createDatabase``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { ns: <database> }\n\n\n     - ``0`` - Success\n\n\n   * - .. _audit-message-createIndex:\n\n       :authaction:`createIndex`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            ns: <database>.<collection>,\n            indexName: <index name>,\n            indexSpec: <index specification>,\n            indexBuildState: <index build state>\n          }\n\n       Possible values for ``indexBuildState`` are:\n\n       - ``IndexBuildStarted``\n       - ``IndexBuildSucceeded``\n       - ``IndexBuildAborted``\n\n       Starting in MongoDB 5.0, :authaction:`createIndex` audit events\n       are:\n       \n       - Logged at the start and end of index creation, and includes a\n         message indicating if the index was successfully created or\n         not.\n\n       - Attributed to the originating user for the action that\n         caused the :authaction:`createIndex` audit event.\n\n       - Logged for a :authaction:`createCollection` event if the\n         collection has an index.\n\n       .. versionchanged:: 5.0\n\n     - | ``0`` - Success\n       | ``276`` - Index build aborted.\n\n       The audit message contains result code ``276`` for\n       :authaction:`createIndex` audit events with ``IndexBuildState``\n       set to ``IndexBuildAborted``. The audit message contains result\n       code ``0`` for :authaction:`createIndex` audit events with\n       ``IndexBuildState`` set to ``IndexBuildStarted`` or\n       ``IndexBuildSucceeded``.\n\n\n   * - .. _audit-message-directAuthMutation:\n\n       ``directAuthMutation``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             document: {\n                <collection modifications>\n             },\n             ns: <database>.<collection>,\n             operation: <database operation>\n          }\n\n       Logged when a database operation directly modifies the contents\n       of the :data:`admin.system.users` or :data:`admin.system.roles`\n       collections.\n\n       .. versionadded:: 5.0\n\n     - ``0`` - Success\n\n\n   * - ``renameCollection``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            old: <database>.<collection>,\n            new: <database>.<collection>\n          }\n\n\n     - ``0`` - Success\n\n\n   * - .. _audit-message-dropCollection:\n\n       :authaction:`dropCollection`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             ns: <database>.<collection || view>,\n             viewOn: <database>.<collection>,\n             pipeline: [ <pipeline definition> ]\n          }\n\n       Logged when a:\n       \n       - Collection is dropped.\n       \n       - :ref:`View <views-landing-page>` is dropped, with the view\n         name logged in the ``ns`` field.\n\n       .. include:: /includes/collection-audit-event.rst\n\n       In addition, starting in MongoDB 5.0, a\n       :authaction:`dropCollection` audit event is logged when a\n       :authaction:`dropDatabase` event occurs.\n\n       .. versionchanged:: 5.0\n\n     - | ``0`` - Success\n       | ``26`` - ``NamespaceNotFound``\n\n       If the collection or view does not exist, the audit message shows\n       the return code as ``result: 26``. \n\n   * - :authaction:`dropDatabase`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { ns: <database> }\n\n     - ``0`` - Success\n\n   * - :authaction:`dropIndex`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            ns: <database>.<collection>,\n            indexName: <index name>\n          }\n\n\n     - ``0`` - Success\n\n   * - :authaction:`createUser`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>,\n            customData: <document>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n       The ``customData`` field is optional.\n\n\n     - ``0`` - Success\n\n   * - :authaction:`dropUser`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>\n          }\n\n\n     - ``0`` - Success\n\n   * - ``dropAllUsersFromDatabase``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { db: <database> }\n\n\n     - ``0`` - Success\n\n   * - .. _audit-message-getClusterParameter:\n\n       ``getClusterParameter``\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \n              requestedClusterServerParameters: <parameters> \n          }\n     - ``0`` - Success \n\n   * - .. _audit-message-setClusterParameter: \n\n       ``setClusterParameter``\n     - .. include:: /includes/fact-audit-message-setClusterParameter-form.rst \n     - ``0`` - Success \n\n   * - .. _audit-message-updateCachedClusterServerParameter:\n\n       ``updateCachedClusterServerParameter``\n     - .. include:: /includes/fact-audit-message-setClusterParameter-form.rst \n \n       Logged when a parameter is changed because of:\n\n       - Propagation of a ``setClusterParameter`` command\n       - Replication event such as rollback\n       - A refresh of new cluster parameter values from the config \n         server on ``mongos``\n     - ``0`` - Success \n\n   * - ``updateUser``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>,\n            passwordChanged: <boolean>,\n            customData: <document>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n       The ``customData`` field is optional.\n\n\n     - ``0`` - Success\n\n   * - ``grantRolesToUser``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n\n     - ``0`` - Success\n\n   * - ``revokeRolesFromUser``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            user: <user name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n\n     - ``0`` - Success\n\n   * - :authaction:`createRole`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ],\n            privileges: [\n              {\n                resource: <resource document>,\n                actions: [ <action>, ... ]\n              },\n              ...\n            ]\n          }\n\n       The ``roles`` and the ``privileges`` fields are optional.\n\n       For details on the resource document, see :ref:`resource-document`.\n       For a list of actions, see :ref:`security-user-actions`.\n\n\n     - ``0`` - Success\n\n   * - ``updateRole``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ],\n            privileges: [\n              {\n                resource: <resource document>,\n                actions: [ <action>, ... ]\n              },\n              ...\n            ]\n          }\n\n       The ``roles`` and the ``privileges`` fields are optional.\n\n       For details on the resource document, see :ref:`resource-document`.\n       For a list of actions, see :ref:`security-user-actions`.\n\n\n     - ``0`` - Success\n\n   * - :authaction:`dropRole`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>\n          }\n\n\n     - ``0`` - Success\n\n   * - ``dropAllRolesFromDatabase``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { db: <database> }\n\n\n     - ``0`` - Success\n\n   * - ``grantRolesToRole``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n\n     - ``0`` - Success\n\n   * - ``revokeRolesFromRole``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>,\n            roles: [\n               {\n                 role: <role name>,\n                 db: <database>\n               },\n               ...\n            ]\n          }\n\n\n     - ``0`` - Success\n\n   * - ``grantPrivilegesToRole``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database>,\n            privileges: [\n              {\n                resource: <resource document>,\n                actions: [ <action>, ... ]\n              },\n              ...\n            ]\n          }\n\n       For details on the resource document, see :ref:`resource-document`.\n       For a list of actions, see :ref:`security-user-actions`.\n\n\n     - ``0`` - Success\n\n   * -  ``revokePrivilegesFromRole``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            role: <role name>,\n            db: <database name>,\n            privileges: [\n              {\n                resource: <resource document>,\n                actions: [ <action>, ... ]\n              },\n              ...\n            ]\n          }\n\n       For details on the resource document, see :ref:`resource-document`.\n       For a list of actions, see :ref:`security-user-actions`.\n\n\n     - ``0`` - Success\n\n   * - ``replSetReconfig``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            old: {\n             _id: <replicaSetName>,\n             version: <number>,\n             ...\n             members: [ ... ],\n             settings: { ... }\n            },\n            new: {\n             _id: <replicaSetName>,\n             version: <number>,\n             ...\n             members: [ ... ],\n             settings: { ... }\n            }\n          }\n\n       For details on the replica set configuration document, see\n       :doc:`/reference/replica-configuration`.\n\n     - ``0`` - Success\n\n   * - :authaction:`enableSharding`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { ns: <database> }\n\n\n     - ``0`` - Success\n\n   * - ``shardCollection``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            ns: <database>.<collection>,\n            key: <shard key pattern>,\n            options: { unique: <boolean> }\n          }\n\n\n     - ``0`` - Success\n\n   * - :authaction:`addShard`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            shard: <shard name>,\n            connectionString: <hostname>:<port>,\n          }\n\n       When a shard is a replica set, the ``connectionString`` includes the\n       replica set name and can include other members of the replica set.\n\n\n     - ``0`` - Success\n\n   * - :authaction:`refineCollectionShardKey`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            ns: <database>.<collection>,\n            key: <shard key pattern>\n          }\n\n\n     - ``0`` - Success\n\n\n   * - :authaction:`removeShard`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { shard: <shard name> }\n\n\n     - ``0`` - Success\n\n   * - :authaction:`shutdown`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { }\n\n       Indicates commencement of database shutdown.\n\n\n     - ``0`` - Success\n\n   * - :authaction:`applicationMessage`\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { msg: <custom message string> }\n\n       See :dbcommand:`logApplicationMessage`.\n\n\n     - ``0`` - Success\n\n\n   * - .. _audit-message-logout:\n\n       ``logout``\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            reason: <string>,\n            initialUsers: [ <document>, ... ],\n            updatedUsers: [ <document>, ... ], \n          }\n\n       ``reason`` will be either:\n         - \"Explicit logout from <database>\"\n         - \"Implicit logout due to client connection closure\"\n\n       ``initialUsers`` is an array of documents containing users \n       authenticated on the current client prior to logout.\n\n       ``updatedUsers`` is an array of documents containing users \n       expected to be authenticated on the current client after the \n       logout event. \n\n       Each document in ``initialUsers`` and ``updatedUsers`` contains:\n         - ``user``: the username\n         - ``db``: the database ``user`` is authenticated to\n\n       .. versionadded:: 5.0\n\n\n     - ``0`` - Success\n\n\n   * - .. _audit-message-startup:\n   \n       ``startup``\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \n              startupOptions: <document>, \n              initialClusterServerParameter: <array of documents> \n          }\n\n       - ``startupOptions`` contains all of the options that the node \n         has after startup \n       - ``initialClusterServerParameters`` contains the initial values\n         of the cluster server parameters that the node has at the end \n         of startup:\n\n         - after they have been loaded from storage (for ``mongod``) \n         - after they have been refreshed from the config server \n           (for ``mongos``).\n     \n       .. versionadded:: 5.0\n       .. versionchanged:: 6.1\n     - ``0`` - Success\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/mongo.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"activity_id\" : 1,\n      \"category_uid\" : 3,\n      \"class_uid\" : 3002,\n      \"time\" : 1710715316123,\n      \"severity_id\" : 1,\n      \"type_uid\" : 300201,\n      \"metadata\" : {\n         \"correlation_uid\" : \"20ec4769-984d-445c-aea7-da0429da9122\",\n         \"product\" : \"MongoDB Server\",\n         \"version\" : \"1.0.0\"\n      },\n      \"actor\" : {\n         \"user\" : {\n            \"type_id\" : 1,\n            \"name\" : \"admin.admin\",\n            \"groups\" : [ { \"name\" : \"admin.root\" } ]\n         }\n      },\n      \"src_endpoint\" : { \"ip\" : \"127.0.0.1\", \"port\" : 56692 },\n      \"dst_endpoint\" : { \"ip\" : \"127.0.0.1\", \"port\" : 20040 },\n      \"user\" : { \"type_id\" : 1, \"name\" : \"admin.admin\" },\n      \"auth_protocol\" : \"SCRAM-SHA-256\",\n      \"unmapped\" : { \"atype\" : \"authenticate\" }\n   }\n\nAuthCheck Action\n~~~~~~~~~~~~~~~~\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/ocsf.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"activity_id\" : 0,\n      \"category_uid\" : 6,\n      \"class_uid\" : 6003,\n      \"time\" : 1710715315002,\n      \"severity_id\" : 1,\n      \"type_uid\" : 600300,\n      \"metadata\" : {\n         \"correlation_uid\" : \"af4510fb-0a9f-49aa-b988-06259a7a861d\",\n         \"product\" : \"MongoDB Server\",\n         \"version\" : \"1.0.0\"\n      },\n      \"actor\" : {},\n      \"src_endpoint\" : { \"ip\" : \"127.0.0.1\", \"port\" : 45836 },\n      \"dst_endpoint\" : { \"ip\" : \"127.0.0.1\", \"port\" : 20040 },\n      \"api\" : {\n         \"operation\" : \"getParameter\",\n         \"request\" : { \"uid\" : \"admin\" },\n         \"response\" : { \"code\" : 13, \"error\" : \"Unauthorized\" }\n      }\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/audit-message/ocsf.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3-4\n\n   [\n      { _id: 1, name: null },\n      { _id: 2 },\n      { _id: 3, name: [ \"Gabriel\" ] }\n      { _id: 4, names: [ \"Alice\", \"Charu\" ] }\n   ]\n\n.. _null-migrate-remove-undefined-values-unknown:\n\nRemove Fields with Unknown Names\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you don't know which fields contain ``undefined`` values, use the\nfollowing example to remove all ``undefined`` top-level fields.\n\n.. include:: /includes/migrate-null-values-no-index.rst\n\nThe following example removes top-level document fields from the\n``people`` collection where the value is ``undefined``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/bson-types/migrate-undefined.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   [\n      { _id: 1, name: null },\n      { _id: 2 },\n      { _id: 3, name: [ \"Gabriel\", undefined ] }\n      { _id: 4, names: [ \"Alice\", \"Charu\" ] }\n   ]\n\n.. include:: /includes/migrate-null-values-top-level-fields.rst\n\n.. _null-migrate-update-values:\n\nUpdate Undefined Values to Null\n-------------------------------\n\nYou can update ``undefined`` data values to the ``null`` data type. Use\nthis approach to migrate your data off of the deprecated ``undefined``\ndata type while retaining your document fields.\n\nHow to update undefined fields depends on whether you know the field\nname to update. If you know the field name, the operation is more\nperformant because it can use an index.\n\nSee either:\n\n- :ref:`null-migrate-update-undefined-values-known`\n- :ref:`null-migrate-update-undefined-values-unknown`\n\n.. _null-migrate-update-undefined-values-known:\n\nUpdate Field with Known Name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you know the name of the field that contains ``undefined`` values\nthat you want to set to ``null``, use the following example. The example\nupdates the ``people`` collection to set the following values to\n``null``:\n\n- The ``name`` field if its value is the scalar value ``undefined``.\n- ``undefined`` array elements that appear in the ``name`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/bson-types/migrate-undefined.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3-4\n\n   [\n      { _id: 1, name: null },\n      { _id: 2, name: null },\n      { _id: 3, name: [ \"Gabriel\", null ] }\n      { _id: 4, names: [ \"Alice\", \"Charu\" ] }\n   ]\n\n.. _null-migrate-update-undefined-values-unknown:\n\nUpdate Fields with Unknown Names\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you don't know which fields contain ``undefined`` values, use the\nfollowing example to set all ``undefined`` top-level fields to ``null``.\n\n.. include:: /includes/migrate-null-values-no-index.rst\n\nThe following example updates the ``people`` collection to set\n``undefined`` top-level document fields to ``null``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/bson-types/migrate-undefined.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   [\n      { _id: 1, name: null },\n      { _id: 2, name: null },\n      { _id: 3, name: [ \"Gabriel\", undefined ] }\n      { _id: 4, names: [ \"Alice\", \"Charu\" ] }\n   ]\n\n.. include:: /includes/migrate-null-values-top-level-fields.rst\n\n.. _null-migrate-update-queries:\n\nUpdate Queries to Match Undefined Values\n----------------------------------------\n\nIf you can't migrate your data types from ``null`` to ``undefined``, you\ncan rewrite your queries to match undefined values. If you use this\napproach, your data will still contain the deprecated ``undefined`` BSON\ntype.\n\nTo have queries for ``null`` match undefined values, add a query\npredicate that explicitly matches the ``undefined`` type. For example,\nthe following query matches documents where ``name`` is ``undefined``,\n``null``, or missing:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/bson-types/migrate-undefined.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, name: null },\n      { _id: 2, name: undefined },\n      { _id: 3, name: [ \"Gabriel\", undefined ],\n      { _id: 4, names: [ \"Alice\", \"Charu\" ] }\n   ]\n\nLearn More\n----------\n\n- :ref:`bson-types`\n- :query:`$type`\n- :expression:`$ifNull`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/bson-types/migrate-undefined.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"create\",\n      \"clusterTime\": Timestamp({ t: 1654894547, i: 24 }),\n      \"collectionUUID\": UUID(\"98046a1a-b649-4e5b-9c75-67594221ce19\"),\n      \"wallTime\": ISODate(\"2022-06-10T20:55:47.947Z\"),\n      \"ns\": {\n         \"db\": \"test\",\n         \"coll\": \"names\"\n      },\n      \"operationDescription\": {\n         \"idIndex\": { \"v\": 2, \"key\": { _id: 1 }, \"name\": \"_id_\" }\n      }\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/create.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"createIndexes\",\n      \"clusterTime\": Timestamp({ t: 1651257835, i: 1 }),\n      \"collectionUUID\": UUID(\"06bced37-7cc8-4267-96aa-a58a422153d8\"),\n      \"wallTime\": ISODate(\"2022-04-29T18:43:55.160Z\"),\n      \"ns\": {\n         \"db\": \"test\",\n         \"coll\": \"authors\"\n      },\n      \"operationDescription\": {\n         \"indexes\": [\n            { \"v\": 2, \"key\": { \"name\": 1 }, \"name\": \"name_1\" }\n         ]\n      }\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/createIndexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"delete\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"documentKey\": {\n         \"_id\": ObjectId(\"599af247bb69cd89961c986d\")\n      }\n   }\n\nThe ``fullDocument`` document is omitted as the document no longer exists at the\ntime the change stream cursor sends the ``delete`` event to the client.\n\n\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/delete.txt"
  },
  {
    "code": "   :copyable:\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"drop\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      }\n   }\n\nA ``drop`` event leads to an :data:`invalidate` event for change streams opened \nagainst its own ``ns`` collection.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/drop.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"dropDatabase\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\"\n      }\n   }\n\nA :dbcommand:`dropDatabase` command generates a\n:ref:`drop event <change-streams-drop-event>` for each collection in\nthe database before generating a ``dropDatabase`` event for the database.\n\nA ``dropDatabase`` event leads to an :data:`invalidate` event for \nchange streams opened against its own ``ns.db`` database.\n\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/dropDatabase.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"dropIndexes\",\n      \"clusterTime\": <Timestamp>\n      \"collectionUUID\": <uuid>,\n      \"wallTime\": <isodate>,\n      \"ns\": {\n         \"db\": \"test\",\n         \"coll\": \"authors\" },\n      \"operationDescription\": {\n         \"indexes\": [\n            { \"v\": 2, \"key\": { \"name\": 1 }, \"name\": \"name_1\" }\n         ]\n      }\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/dropIndexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"insert\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"documentKey\": {\n         \"userName\": \"alice123\",\n         \"_id\": ObjectId(\"599af247bb69cd89961c986d\")\n      },\n      \"fullDocument\": {\n         \"_id\": ObjectId(\"599af247bb69cd89961c986d\"),\n         \"userName\": \"alice123\",\n         \"name\": \"Alice\"\n      }\n   }\n\nThe ``documentKey`` field includes both the ``_id`` and the ``userName``\nfield. This indicates that the ``engineering.users`` collection is sharded,\nwith a shard key on ``userName`` and ``_id``.\n\nThe ``fullDocument`` document represents the version of the document at the\ntime of the insert.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"invalidate\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>\n   }\n\nChange streams opened on collections raise an ``invalidate`` event when a \n:ref:`drop <change-event-drop>`, :ref:`rename <change-event-rename>`, \nor :ref:`dropDatabase <change-event-dropDatabase>` operation occurs \nthat affects the watched collection.\n\nChange streams opened on databases raise an ``invalidate`` event when a\n:ref:`dropDatabase <change-event-dropDatabase>` event occurs that affects\nthe watched database.\n\n``invalidate`` events close the change stream cursor.\n\n.. include:: /includes/extracts/changestream-invalid-events.rst\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/invalidate.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"modify\",\n      \"clusterTime\": Timestamp({ t: 1654878543, i: 1 }),\n      \"collectionUUID\": UUID(\"47d6baac-eeaa-488b-98ae-893f3abaaf25\"),\n      \"wallTime\": ISODate(\"2022-06-10T16:29:03.704Z\"),\n      \"ns\": {\n         \"db\": \"test\",\n         \"coll\": \"authors\" },\n      \"operationDescription\": {\n         \"index\": {\n            \"name\": \"age_1\",\n            \"hidden\": true\n         }\n      },\n      \"stateBeforeChange\": {\n         \"collectionOptions\": { \n             \"uuid\": UUID(\"47d6baac-eeaa-488b-98ae-893f3abaaf25\") \n         },\n         \"indexOptions\": {\n            \"hidden\": false\n         }\n      }\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/modify.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"refineCollectionShardKey\",\n      \"clusterTime\": Timestamp({ t: 1654894852, i: 52 }),\n      \"collectionUUID\": UUID(\"98046a1a-b649-4e5b-9c75-67594221ce19\"),\n      \"ns\": {\"db\": \"reshard_collection_event\", \"coll\": \"coll\"},\n      \"operationDescription\": {\n        \"shardKey\": {\"_id\": 1, akey: 1}, \n        \"oldShardKey\": {\"_id\": 1}\n      }\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/refineCollectionShardKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"rename\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"to\": {\n         \"db\": \"engineering\",\n         \"coll\": \"people\"\n      },\n      \"operationDescription\": {\n         \"to\": {\n            \"db\": \"engineering\",\n            \"coll\": \"people\"\n         }\n      }\n   }\n\nA ``rename`` event leads to an\n:ref:`invalidate event <change-event-invalidate>` for change streams opened\nagainst its ``ns`` collection or ``to`` collection.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/rename.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"replace\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"documentKey\": {\n         \"_id\": ObjectId(\"599af247bb69cd89961c986d\")\n      },\n      \"fullDocument\": {\n         \"_id\": ObjectId(\"599af247bb69cd89961c986d\"),\n         \"userName\": \"alice123\",\n         \"name\": \"Alice\"\n      }\n   }\n\nA ``replace`` operation uses the update command, and consists of two stages:\n\n- Delete the original document with the ``documentKey`` and\n- Insert the new document using the same ``documentKey``\n\nThe ``fullDocument`` of a ``replace`` event represents the document after the\ninsert of the replacement document.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/replace.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"reshardCollection\",\n      \"collectionUUID\": 0,\n      \"ns\": {\"db\": \"reshard_collection_event\", \"coll\": \"coll\"},\n      \"operationDescription\": {\n        \"reshardUUID\": 0,\n        \"shardKey\": {\"newKey\": 1},\n        \"oldShardKey\": {\"_id\": 1},\n        \"unique\": false,\n        \"numInitialChunks\": NumberLong(1),\n        \"collation\": {\"locale\": \"simple\"},\n        \"zones\": [\n            {\"zone\": \"zone1\", \"min\": {\"newKey\": {\"$minKey\": 1}}, \"max\": {\"newKey\": {\"$maxKey\": 1}}}\n        ]\n      }\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/reshardCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <ResumeToken> },\n      \"operationType\": \"shardCollection\",\n      \"clusterTime\": Timestamp({ t: 1654894852, i: 52 }),\n      \"collectionUUID\": UUID(\"98046a1a-b649-4e5b-9c75-67594221ce19\"),\n      \"wallTime\": ISODate(\"2022-06-10T21:00:52.854Z\"),\n      \"ns\": {\n         \"db\": \"test\",\n         \"coll\": \"authors\"\n      },\n      \"operationDescription\": {\n         \"shardKey\": { \"age\": \"hashed\" },\n         \"unique\": false,\n         \"numInitialChunks\": Long(\"0\"),\n         \"presplitHashedZones\": false\n      }\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/shardCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"update\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"documentKey\": {\n         \"_id\": ObjectId(\"58a4eb4a30c75625e00d2820\")\n      },\n      \"updateDescription\": {\n         \"updatedFields\": {\n            \"email\": \"alice@10gen.com\"\n         },\n         \"removedFields\": [\"phoneNumber\"],\n         \"truncatedArrays\": [ {\n            \"field\" : \"vacation_time\",\n            \"newSize\" : 36\n         } ]\n      }\n   }\n\nThe following example illustrates an ``update`` event for change streams\nopened with the ``fullDocument : updateLookup`` option:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": { <Resume Token> },\n      \"operationType\": \"update\",\n      \"clusterTime\": <Timestamp>,\n      \"wallTime\": <ISODate>,\n      \"ns\": {\n         \"db\": \"engineering\",\n         \"coll\": \"users\"\n      },\n      \"documentKey\": {\n         \"_id\": ObjectId(\"58a4eb4a30c75625e00d2820\")\n      },\n      \"updateDescription\": {\n         \"updatedFields\": {\n            \"email\": \"alice@10gen.com\"\n         },\n         \"removedFields\": [\"phoneNumber\"],\n         \"truncatedArrays\": [ {\n            \"field\" : \"vacation_time\",\n            \"newSize\" : 36\n         } ],\n         \"disambiguatedPaths\": { }\n      },\n      \"fullDocument\": {\n         \"_id\": ObjectId(\"58a4eb4a30c75625e00d2820\"),\n         \"name\": \"Alice\",\n         \"userName\": \"alice123\",\n         \"email\": \"alice@10gen.com\",\n         \"team\": \"replication\"\n      }\n   }\n\nThe ``fullDocument`` document represents the most current majority-committed\nversion of the updated document. The ``fullDocument`` document may vary from\nthe document at the time of the update operation depending on the number of\ninterleaving majority-committed operations that occur between the update\noperation and the document lookup.\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/change-events/update.txt"
  },
  {
    "code": "   .. copyable: false\n\n   {\n      \"atype\" : \"createCollection\",\n      \"ts\" : { \"$date\" : \"2021-08-09T13:45:05.372+00:00\" },\n      \"uuid\" : { \"$binary\" : \"RKU/YLizS6K9se2GUU7ZVQ==\", \"$type\" : \"04\" },\n      \"local\" : { \"ip\" : \"127.0.0.1\", \"port\" : 27502 },\n      \"remote\" : { \"ip\" : \"127.0.0.1\", \"port\" : 51918 },\n      \"users\" : [],\n      \"roles\" : [],\n      \"param\" : { \"ns\" : \"sales.inventory\" },\n      \"result\" : 0\n   }\n\nIf the ``inventory`` collection is dropped from the ``sales`` database, the \naudit system logs a message similar to the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/cluster-parameters/auditConfig.txt"
  },
  {
    "code": "   .. copyable: false\n\n   {\n      \"atype\" : \"dropCollection\",\n      \"ts\" : { \"$date\" : \"2021-08-09T13:45:00.661+00:00\" },\n      \"uuid\" : { \"$binary\" : \"0gle4/pSQli+LUcz43ykag==\", \"$type\" : \"04\" },\n      \"local\" : { \"ip\" : \"127.0.0.1\", \"port\" : 27502 },\n      \"remote\" : { \"ip\" : \"127.0.0.1\", \"port\" : 51928 },\n      \"users\" : [],\n      \"roles\" : [],\n      \"param\" : { \"ns\" : \"sales.inventory\" },\n      \"result\" : 0\n   }\n\nLearn More \n----------\n\n- :ref:`auditing`\n- :ref:`audit-action-details-results`\n- :ref:`cluster-parameters`\n- :ref:`configure-audit-filters-at-runtime`\n- :ref:`audit-message`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/cluster-parameters/auditConfig.txt"
  },
  {
    "code": "   :emphasize-lines: 6,10\n\n   db.c.insertMany(\n     [\n         { \"n\" : \"1\" },\n         { \"n\" : \"2\" },\n         { \"n\" : \"2.1\" },\n         { \"n\" : \"-2.1\" },\n         { \"n\" : \"2.2\" },\n         { \"n\" : \"2.10\" },\n         { \"n\" : \"2.20\" },\n         { \"n\" : \"-10\" },\n         { \"n\" : \"10\" },\n         { \"n\" : \"20\" },\n         { \"n\" : \"20.1\" }\n     ]\n   )\n\nThe following :method:`find <db.collection.find()>` query uses a \ncollation document containing the ``numericOrdering`` parameter:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/collation.txt"
  },
  {
    "code": "   :emphasize-lines: 2-3,7-8\n   :copyable: false\n   \n   [\n       { n: '-2.1' },\n       { n: '-10' },\n       { n: '1' },\n       { n: '2' },\n       { n: '2.1' },\n       { n: '2.2' },\n       { n: '2.10' },\n       { n: '2.20' },\n       { n: '10' },\n       { n: '20' },\n       { n: '20.1' }\n   ]\n\n- ``numericOrdering: true`` sorts the string values in ascending \n  order as if they were numeric values.\n- The two negative values ``-2.1`` and ``-10`` are not sorted in the \n  expected sort order because they have unsupported ``-`` characters.\n- The value ``2.2`` is sorted before the value ``2.10``, due to the fact\n  that the ``numericOrdering`` parameter does not support decimal \n  values.\n- As a result, ``2.2`` and ``2.10`` are sorted in lexicographic order.\n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Locales & Default Parameters </reference/collation-locales-defaults>\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/collation.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.adminCommand(\n      {\n         appendOplogNote: 1,\n         data: <document>\n      }\n   )\n\nCommand Fields\n~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 80\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``appendOplogNote``\n     - any\n     - Set to any value.\n\n   * - ``data``\n     - document\n     - The document to append to the :term:`oplog`.\n\nExample\n-------\n\nTo append a non-operational entry to the :term:`oplog`, use the\n:method:`db.adminCommand` method:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/appendOplogNote.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      op: \"n\",\n      ns: \"\",\n      o: { \n         msg: \"Appending test message to oplog\"\n      }, \n      ts: Timestamp({ t: 1689177321, i: 1 }), \n      t: Long(\"1\"), \n      v: Long(\"2\"),\n      wall: ISODate(\"2023-07-12T15:55:21.180Z\")\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/appendOplogNote.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"chunkSize\": Long(\"128\"),\n      \"balancerCompliant\" : true,\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1583193238, 1),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1583193238, 1),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n            \"keyId\" : NumberLong(0)\n         }\n      }\n   }\n\n.. _balancer-collection-status-defrag-output-command:\n\nOngoing Defragmentation Process\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. |balancer-command| replace:: ``balancerCollectionStatus`` command\n\n.. include:: /includes/sharding/balancer-status-defrag-example.rst\n\nTo learn more about:\n\n- Monitoring defragmentation, see\n  :ref:`monitor-defragmentation-sharded-collection`.\n- Defragmenting sharded collections, see\n  :ref:`defragment-sharded-collections`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/balancerCollectionStatus.txt"
  },
  {
    "code": "   :copyable: false\n\n   insert\n   update\n   delete\n\nIf you replace those commands with the following example fragment, then\nthe command with the following fragment is faster regardless of other\noptions:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      bulkWrite: 1, \n      ops: [\n         insert,\n         update,\n         delete\n      ]\n   }\n\nMost of the performance improvement is because of network latency, which\nis variable depending on your implementation, but the example is always\nfaster.\n\nExamples\n--------\n\nThis section contains ``bulkWrite`` command examples.\n\nSingle Namespace Bulk Write Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following ``bulkWrite`` example modifies a single namespace:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the pizzas example collection\n\n      Run:\n\n      .. include:: /includes/pizza-example-collection.rst\n\n   .. step:: Modify the pizzas example collection\n\n      Run the following ``bulkWrite`` command to perform insert, update,\n      and delete operations on the ``pizzas`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            cursor: {\n               id: Long('0'),\n               firstBatch: [\n                  { ok: 1, idx: 0, n: 1 },\n                  { ok: 1, idx: 1, n: 1, nModified: 1 },\n                  { ok: 1, idx: 2, n: 1 }\n                ],\n                ns: 'admin.$cmd.bulkWrite'\n            },\n            nErrors: 0,\n            nInserted: 1,\n            nMatched: 1,\n            nModified: 1,\n            nUpserted: 0,\n            nDeleted: 1,\n            ok: 1\n         }\n\n      For details about the output fields, see the earlier\n      :ref:`bulkWrite-output` section.\n\nMultiple Namespaces Bulk Write Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can specify multiple namespaces in a ``bulkWrite`` command.\n\nThe following ``bulkWrite`` example contains insert, update, and delete\noperations for two namespaces:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the pizzas example collection\n\n      If you already have the ``pizzas`` collection in your ``test``\n      database, use the :method:`db.collection.drop` method to drop it\n      first and then run:\n\n      .. include:: /includes/pizza-example-collection.rst\n\n   .. step:: Create the pizza orders example collection\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            cursor: {\n               id: Long('0'),\n               firstBatch: [\n                  { ok: 1, idx: 0, n: 1 },\n                  { ok: 1, idx: 1, n: 1 },\n                  { ok: 1, idx: 2, n: 1, nModified: 1 },\n                  { ok: 1, idx: 3, n: 1 },\n                  { ok: 1, idx: 4, n: 1 },\n                  { ok: 1, idx: 5, n: 1 },\n                  { ok: 1, idx: 6, n: 1, nModified: 1 },\n                  { ok: 1, idx: 7, n: 1 },\n                  { ok: 1, idx: 8, n: 1 }\n               ],\n               ns: 'admin.$cmd.bulkWrite'\n            },\n            nErrors: 0,\n            nInserted: 4,\n            nMatched: 2,\n            nModified: 2,\n            nUpserted: 0,\n            nDeleted: 3,\n            ok: 1\n         }\n\nOperations with Errors Bulk Write Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following ``bulkWrite`` example contains operations with errors and\noperations that don't change any documents:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the pizzas example collection\n\n      If you already have the ``pizzas`` collection in your ``test``\n      database, use the :method:`db.collection.drop` method to drop it\n      first and then run:\n\n      .. include:: /includes/pizza-example-collection.rst\n\n   .. step:: Attempt to modify the pizzas example collection\n\n      Run the following ``bulkWrite`` command to perform insert, update,\n      and delete operations on the ``pizzas`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            cursor: {\n               id: Long(\"0\"),\n               firstBatch: [\n                  {\n                     ok: 0,\n                     idx: 0,\n                     code: 11000,\n                     errmsg: 'E11000 duplicate key error collection:\n                     test.pizzas index: _id_ dup key: { _id: 1 }',\n                     keyPattern: { _id: 1 },\n                     keyValue: { _id: 1 },\n                     n: 0\n                  },\n                  {\n                     ok: 0,\n                     idx: 1,\n                     code: 11000,\n                     errmsg: 'E11000 duplicate key error collection:\n                     test.pizzas index: _id_ dup key: { _id: 2 }',\n                     keyPattern: { _id: 1 },\n                     keyValue: { _id: 2 },\n                     n: 0\n                  },\n                  { ok: 1, idx: 2, n: 0, nModified: 0 },\n                  { ok: 1, idx: 3, n: 0 }\n               ],\n               ns: 'admin.$cmd.bulkWrite'\n            },\n            nErrors: 2,\n            nInserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nUpserted: 0,\n            nDeleted: 0,\n            ok: 1\n         }\n\n      For details about the output fields, including the error codes and\n      messages, see the earlier :ref:`bulkWrite-output` section.\n\nBulk Write Example with errorsOnly Enabled\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following ``bulkWrite`` example sets ``errorsOnly`` to ``true`` to\nonly show the error output:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the pizzas example collection\n\n      If you already have the ``pizzas`` collection in your ``test``\n      database, use the :method:`db.collection.drop` method to drop it\n      first and then run:\n\n      .. include:: /includes/pizza-example-collection.rst\n\n   .. step:: Attempt to modify the pizzas example collection\n\n      Run the following ``bulkWrite`` command to perform insert, update,\n      and delete operations on the ``pizzas`` collection with\n      ``errorsOnly`` set to ``true``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            cursor: {\n               id: Long(\"0\"),\n               firstBatch: [\n                  {\n                     ok: 0,\n                     idx: 0,\n                     code: 11000,\n                     errmsg: 'E11000 duplicate key error collection:\n                     test.pizzas index: _id_ dup key: { _id: 1 }',\n                     keyPattern: { _id: 1 },\n                     keyValue: { _id: 1 },\n                     n: 0\n                  },\n                  {\n                     ok: 0,\n                     idx: 1,\n                     code: 11000,\n                     errmsg: 'E11000 duplicate key error collection:\n                     test.pizzas index: _id_ dup key: { _id: 2 }',\n                     keyPattern: { _id: 1 },\n                     keyValue: { _id: 2 },\n                     n: 0\n                  },\n               ],\n               ns: 'admin.$cmd.bulkWrite'\n            },\n            nErrors: 2,\n            nInserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nUpserted: 0,\n            nDeleted: 0,\n            ok: 1\n         }\n\nLearn More\n----------\n\n- :ref:`server-sessions`\n- :ref:`query-selectors`\n- :ref:`aggregation-pipeline`\n- :ref:`indexes`\n- :ref:`collation`\n- :ref:`retryable-writes`\n- :ref:`transactions`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/bulkWrite.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"MisplacedCollection\",\n               description: \"Unsharded collection found on shard different from database primary shard\",\n               details: {\n                  namespace: \"test.authors\",\n                  shard: \"shard02\",\n                  localUUID: new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\")\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/checkMetadataConsistency.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 11-12\n\n   ... // Content omitted for brevity\n\n   test.jumbo\n            shard key: { \"x\" : 1 }\n            unique: false\n            balancing: true\n            chunks:\n                     shardA   2\n                     shardB   2\n            { \"x\" : { \"$minKey\" : 1 } } -->> { \"x\" : 1 } on : shardB Timestamp(3, 0) \n            { \"x\" : 1 } -->> { \"x\" : 2 } on : shardA Timestamp(6, 1) jumbo \n            { \"x\" : 2 } -->> { \"x\" : 3 } on : shardA Timestamp(5, 1) jumbo \n            { \"x\" : 3 } -->> { \"x\" : { \"$maxKey\" : 1 } } on : shardB Timestamp(6, 0) \n\nThe following :dbcommand:`clearJumboFlag` command specifies the\n:ref:`bounds <clearJumboFlag-bounds>` of the ``{ \"x\" : 1 } -->> { \"x\" :\n2 }`` chunk:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1580190080, 5),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1580190080, 5),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"0cYT49s72MHUYV1F2WpoEwlyeVs=\"),\n            \"keyId\" : NumberLong(\"6786859092951433239\")\n         }\n      }\n   }\n\nThe following :dbcommand:`clearJumboFlag` command specifies the\n:ref:`find <clearJumboFlag-bounds>` field to find the chunk that\ncontains the shard key ``{ \"x\" : 2 }`` :\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1580191819, 5),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1580191819, 5),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"N6x6drN7HUq5MR5ezUJns1rfeqY=\"),\n            \"keyId\" : NumberLong(\"6786859092951433239\")\n         }\n      }\n   }\n\nTo verify the operation, run :method:`sh.status()` again. The ``jumbo``\nflag should no longer appear in its output.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 11-12\n\n   ... // Content omitted for brevity\n\n   test.jumbo\n            shard key: { \"x\" : 1 }\n            unique: false\n            balancing: true\n            chunks:\n                     shardA   2\n                     shardB   2\n            { \"x\" : { \"$minKey\" : 1 } } -->> { \"x\" : 1 } on : shardB Timestamp(3, 0) \n            { \"x\" : 1 } -->> { \"x\" : 2 } on : shardA Timestamp(7, 0) \n            { \"x\" : 2 } -->> { \"x\" : 3 } on : shardA Timestamp(8, 0) \n            { \"x\" : 3 } -->> { \"x\" : { \"$maxKey\" : 1 } } on : shardB Timestamp(6, 0) \n\nClear Jumbo Flag for a Chunk (Hashed Shard Key)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`sh.status()` includes the following\n:data:`sh.status.databases.<collection>.chunk-details` for the\n``test.jumboHashed`` collection. The collection uses a hashed shard\nkey.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 12\n\n   ... // Content omitted for brevity\n\n   test.jumboHashed\n            shard key: { \"x\" : \"hashed\" }\n            unique: false\n            balancing: true\n            chunks:\n                     shardA   2\n                     shardB   2\n            { \"x\" : { \"$minKey\" : 1 } } -->> { \"x\" : NumberLong(0) } on : shardA Timestamp(1, 0) \n            { \"x\" : NumberLong(0) } -->> { \"x\" : NumberLong(\"848411777775835583\") } on : shardA Timestamp(4, 0) \n            { \"x\" : NumberLong(\"848411777775835583\") } -->> { \"x\" : NumberLong(\"5902408780260971510\") } on : shardB Timestamp(4, 1) jumbo \n            { \"x\" : NumberLong(\"5902408780260971510\") } -->> { \"x\" : { \"$maxKey\" : 1 } } on : shardB Timestamp(2, 2) \n\nTo clear the ``jumbo`` flag for a chunk if the collection uses a\n:term:`hashed shard key`, use :dbcommand:`clearJumboFlag` with the\n:ref:`bounds <clearJumboFlag-bounds>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1580194290, 5),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1580194290, 5),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"nWCqOYVrab7NEGHWoo2NYENqHR4=\"),\n            \"keyId\" : NumberLong(\"6786875525496307742\")\n         }\n      }\n   }\n\nTo verify the operation, run :method:`sh.status()` again. The\n``jumbo`` flag should no longer appear in its output.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 12\n\n   ... // Content omitted for brevity\n\n   test.jumboHashed\n            shard key: { \"x\" : \"hashed\" }\n            unique: false\n            balancing: true\n            chunks:\n                     shardA\t2\n                     shardB\t2\n            { \"x\" : { \"$minKey\" : 1 } } -->> { \"x\" : NumberLong(0) } on : shardA Timestamp(1, 0) \n            { \"x\" : NumberLong(0) } -->> { \"x\" : NumberLong(\"848411777775835583\") } on : shardA Timestamp(4, 0) \n            { \"x\" : NumberLong(\"848411777775835583\") } -->> { \"x\" : NumberLong(\"5902408780260971510\") } on : shardB Timestamp(5, 0) \n            { \"x\" : NumberLong(\"5902408780260971510\") } -->> { \"x\" : { \"$maxKey\" : 1 } } on : shardB Timestamp(2, 2)\n\n.. seealso::\n\n   :doc:`/tutorial/clear-jumbo-flag`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/clearJumboFlag.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.runCommand( \n      { \n        collMod: <collection or view>, \n        <option1>: <value1>, \n        <option2>: <value2>,\n        ... \n      } \n   )\n\nFor the ``<collection or view>``, specify the name of a collection\nor view in the current database.\n\nOptions\n-------\n\nChange Index Properties\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo change index options, specify either the key pattern or name of the\nexisting index options you want to change:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.runCommand( {\n      collMod: <collection>,\n      index: {\n         keyPattern: <index_spec> | name: <index_name>,\n         expireAfterSeconds: <number>,  // Set the TTL expiration threshold\n         hidden: <boolean>,             // Change index visibility in the query planner\n         prepareUnique: <boolean>,      // Reject new duplicate index entries \n         unique: <boolean>              // Convert an index to a unique index\n      },\n      dryRun: <boolean>\n   } )\n\nIf the index does not exist, the command errors with the message\n``\"cannot find index <name|keyPattern> for ns <db.collection>\"``.\n\n.. collflag:: index\n\n   The ``index`` option can change the following properties of\n   an **existing** index:\n\n   .. list-table::\n      :header-rows: 1\n      :widths: 20 80\n\n      * - Index Property\n        - Description\n\n      * - ``expireAfterSeconds``\n        - The number of seconds that determines the expiration\n          threshold of a :ref:`TTL Collection <ttl-collections>`.\n\n          If successful, the command returns a document that contains:\n\n          - ``expireAfterSeconds_new``, the new value for\n            ``expireAfterSeconds``\n          - ``expireAfterSeconds_old``, the old value for\n            ``expireAfterSeconds``, if the index had a value for\n            ``expireAfterSeconds`` before.\n\n          Modifying the index option ``expireAfterSeconds`` resets the\n          :pipeline:`$indexStats` for the index.\n\n          .. include:: /includes/indexes/expireAfterSeconds-warning.rst\n\n          .. include:: includes/expireAfterSeconds-range.rst\n\n      * - ``hidden``\n        - A boolean that determines whether the index is :ref:`hidden\n          <index-type-hidden>` or not from the query planner.\n\n          If the ``hidden`` value changes, the command returns a\n          document that contains both the old and new values for the\n          changed property: ``hidden_old`` and ``hidden_new``.\n\n          However, if the ``hidden`` value has not changed (i.e. hiding\n          an already hidden index or unhiding an already unhidden\n          index), the command omits the ``hidden_old`` and\n          ``hidden_new`` fields from the output.\n\n          To hide an index, you must have\n          :ref:`featureCompatibilityVersion <view-fcv>` set to ``4.4``\n          or greater.\n\n          Modifying the index option ``hidden`` resets the\n          :pipeline:`$indexStats` for the index if the value changes.\n\n      * - ``prepareUnique``\n        - A boolean that determines whether the index will accept\n          new duplicate entries.\n\n          New duplicate entries fail with DuplicateKey errors when\n          ``prepareUnique`` is ``true``. The resulting index can be\n          converted to a unique index. To convert the index, use\n          ``collMod`` with the ``unique`` option.\n\n          If an existing index is updated so that ``prepareUnique`` is\n          ``true``, the index is not checked for pre-existing,\n          duplicate index entries.\n\n          .. versionadded:: 6.0\n\n      * - ``unique``\n        - A boolean that determines whether the index is unique.\n\n          A value of ``false`` is not supported.\n\n          When ``unique`` is ``true``, ``collMod`` scans the\n          ``keyPattern`` index for duplicates and then converts it to\n          a unique index if there are no duplicate index entries.\n          \n          If duplicates are detected during the initial scan,\n          ``collMod`` returns ``CannotConvertIndexToUnique`` and a list\n          of conflicting documents. To convert an index with duplicate\n          entries to a unique index, correct any reported conflicts and\n          rerun ``collMod``.\n          \n          To end a conversion, set ``prepareUnique`` to ``false``.\n\n          To see an example of how to convert a non-unique index to a\n          unique index, see :ref:`index-convert-to-unique`.\n\n          .. versionadded:: 6.0\n\n.. collflag:: dryRun\n\n   *Default value:* ``false``\n   \n   Only used when ``index.unique`` is ``true``.\n   \n   Before you convert a non-unique index to a unique index, you can run\n   the ``collMod`` command with ``dryRun: true``. If you do, MongoDB\n   checks the collection for duplicate keys and returns any violations.\n\n   Use ``dryRun: true`` to confirm that you can convert an index to be\n   unique without any errors.\n\nValidate Documents\n~~~~~~~~~~~~~~~~~~\n\n.. collflag:: validator\n\n   ``validator`` allows users to specify :ref:`validation rules\n   or expressions <schema-validation-overview>` for a collection.\n\n   The ``validator`` option takes a document that specifies the\n   validation rules or expressions. You can specify the expressions\n   using the same operators as the :ref:`query operators\n   <query-selectors>` with the exception of :query:`$near`,\n   :query:`$nearSphere`, :query:`$text`, and :query:`$where`.\n\n   .. note::\n\n      - Validation occurs during updates and inserts. Existing\n        documents do not undergo validation checks until modification.\n\n      - You cannot specify a validator for collections in the ``admin``,\n        ``local``, and ``config`` databases.\n\n      - You cannot specify a validator for ``system.*`` collections.\n\n.. collflag:: validationLevel\n\n   The ``validationLevel`` determines how strictly MongoDB applies the\n   validation rules to existing documents during an update.\n\n   .. include:: /includes/extracts/table-validationLevel-values.rst\n\n   To see an example that uses ``validationLevel``, see\n   :ref:`schema-specify-validation-level`.\n\n.. collflag:: validationAction\n\n   The ``validationAction`` option determines whether to ``error`` on\n   invalid documents or just ``warn`` about the violations but allow\n   invalid documents.\n\n   .. important::\n\n      Validation of documents only applies to those documents as\n      determined by the ``validationLevel``.\n\n   To see an example that uses ``validationAction``, see\n   :ref:`schema-validation-handle-invalid-docs`.\n\nModify Views\n~~~~~~~~~~~~\n\n.. note::\n\n   The view modified by this command does not refer to materialized\n   views. For discussion of on-demand materialized views, see\n   :pipeline:`$merge` instead.\n\n.. collflag:: viewOn\n\n   The underlying source collection or :ref:`view\n   <views-landing-page>`. The view definition is determined by applying\n   the specified :collflag:`pipeline` to this source.\n\n   Required if modifying a view on a MongoDB deployment that is running\n   with access control.\n\n.. collflag:: pipeline\n\n   The :ref:`aggregation pipeline <aggregation-pipeline>` that defines\n   the :ref:`view <views-landing-page>`.\n\n   .. note::\n\n      .. include:: /includes/extracts/views-restriction-output-to-disk.rst\n\n   Required if modifying a view on a MongoDB deployment that is running\n   with access control.\n\n   .. include:: /includes/extracts/views-public-definition.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "      :copyable: false\n\n      db.runCommand( {\n         collMod: <collection>,\n         expireAfterSeconds: <number> | \"off\"\n      } )\n\n   Set ``expireAfterSeconds`` to ``\"off\"`` to disable automatic removal,\n   or a non-negative decimal number (``>=0``) to specify the number of\n   seconds after which documents expire.\n\n.. seealso::\n\n   :ref:`manual-timeseries-automatic-removal`\n\n.. collflag:: granularity\n   \n   To modify the :ref:`granularity <timeseries-granularity>` of a time \n   series collection, you can increase ``timeseries.granularity`` from a shorter unit of time to a longer one:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "      :copyable: false\n\n      db.runCommand( {\n         collMod: \"weather24h\",\n         timeseries: { granularity: \"seconds\" | \"minutes\" | \"hours\" }\n      } )\n\n   To update the custom bucketing fields ``bucketRoundingSeconds``\n   and ``bucketMaxSpanSeconds`` instead of ``granularity``, include both\n   custom fields in the ``collMod`` command and set them to the \n   same value:\n   \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.runCommand( {\n      collMod: <collection>,\n      cappedSize: 100000,\n      cappedMax: 500\n   } )\n\n.. _collMod-change-stream-pre-and-post-images:\n\nChange Streams with Document Pre- and Post-Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 6.0\n\n.. collflag:: changeStreamPreAndPostImages\n\n.. include:: /includes/change-stream-pre-and-post-images-introduction.rst\n\nTo use ``collMod`` to enable change stream pre- and post-images\nfor a collection, use the ``changeStreamPreAndPostImages`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.runCommand( {\n      collMod: <collection>,\n      changeStreamPreAndPostImages: { enabled: <boolean> }\n   } )\n\nTo enable change stream pre- and post-images for a collection, set\n``changeStreamPreAndPostImages`` to ``true``. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collMod.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      ns: 'test.nonExistentCollection',\n      size: 0,\n      count: 0,\n      ...\n   }\n\nExample\n-------\n\nThe following operation runs the ``collStats`` command on the\n``restaurants`` collection, specifying a scale of ``1024`` bytes:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/collStats.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.runCommand( { compact: \"movies\" } )\n\n   .. output::\n      :language: javascript\n\n      { bytesFreed: 27859, ok: 1 }\n\nEstimate Compaction\n~~~~~~~~~~~~~~~~~~~~\n\nThe following operation performs a dry run of the ``compact`` command on the\n``movies`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/compact.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.runCommand( {\n         compact: \"movies\",\n         dryRun: true\n      } )\n\n   .. output::\n      :language: javascript\n\n      { estimatedBytesFreed: 27859, ok: 1 }\n\n\n\nLearn More\n----------\n\n- :dbcommand:`autoCompact`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/compact.txt"
  },
  {
    "code": "      :copyable: false\n\n      \"acquisitionWaitTimes\" : {\n         \"(-inf, 0ms)\" : { \"count\" : <num> },\n         \"[0ms, 50ms)\" : { \"count\" : <num> },\n         \"[50ms, 100ms)\" : { \"count\" : <num> },\n         \"[100ms, 150ms)\" : { \"count\" : <num> },\n         \"[150ms, 200ms)\" : { \"count\" : <num> },\n         \"[200ms, 250ms)\" : { \"count\" : <num> },\n         \"[250ms, 300ms)\" : { \"count\" : <num> },\n         \"[300ms, 350ms)\" : { \"count\" : <num> },\n         \"[350ms, 400ms)\" : { \"count\" : <num> },\n         \"[400ms, 450ms)\" : { \"count\" : <num> },\n         \"[450ms, 500ms)\" : { \"count\" : <num> },\n         \"[500ms, 550ms)\" : { \"count\" : <num> },\n         \"[550ms, 600ms)\" : { \"count\" : <num> },\n         \"[600ms, 650ms)\" : { \"count\" : <num> },\n         \"[650ms, 700ms)\" : { \"count\" : <num> },\n         \"[700ms, 750ms)\" : { \"count\" : <num> },\n         \"[750ms, 800ms)\" : { \"count\" : <num> },\n         \"[800ms, 850ms)\" : { \"count\" : <num> },\n         \"[850ms, 900ms)\" : { \"count\" : <num> },\n         \"[900ms, 950ms)\" : { \"count\" : <num> },\n         \"[950ms, 1000ms)\" : { \"count\" : <num> },\n         \"[1000ms, inf)\" : { \"count\" : <num> },\n         \"totalCount\" : <num>\n      }\n\n.. data:: connPoolStats.numClientConnection\n\n   Reports the number of active and stored outgoing **synchronous**\n   connections from the current :binary:`mongod` / :binary:`mongos` instance\n   to other members of the :term:`sharded cluster` or :term:`replica set`.\n   \n   These connections are a part of a pool that is a subset of the data \n   reported by :data:`~connPoolStats.totalAvailable`, \n   :data:`~connPoolStats.totalCreated`, and :data:`~connPoolStats.totalInUse`.\n\n.. data:: connPoolStats.numAScopedConnection\n\n   Reports the number of active and stored outgoing **scoped\n   synchronous** connections from the current\n   :binary:`mongod` / :binary:`mongos` instance to other members of the\n   :term:`sharded cluster` or :term:`replica set`.\n   \n   These connections are a part of a pool that is a subset of the data \n   reported by :data:`~connPoolStats.totalAvailable`, \n   :data:`~connPoolStats.totalCreated`, and :data:`~connPoolStats.totalInUse`.\n\n.. data:: connPoolStats.pools\n\n   Reports on connection statistics (in\n   use/available/created/refreshing) grouped by the connection pools. A\n   :binary:`~bin.mongod` or :binary:`~bin.mongos` has two distinct families of\n   outgoing connection pools:\n\n   - DBClient-based pools (the \"write path\") and\n\n   - NetworkInterfaceTL-based pools (the \"read path\").\n\n   For each pool, the command returns a document that resembles the\n   following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/connPoolStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      ok: 1,\n      indexesCreated: [\n         {\n            id: \"<index Id>\",\n            name: \"<index name>\"   \n         }\n      ]\n   }\n\n.. important::\n\n   The response field ``ok: 1`` indicates that the command was\n   successful. However, there may be a delay between when you receive\n   the response and when the created indexes are ready for use.\n\n   To see the status of your search indexes, use the\n   :pipeline:`$listSearchIndexes` aggregation stage.\n\nExamples\n--------\n\nCreate a Search Index on All Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example creates a search index named ``searchIndex01`` on\nthe ``contacts`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/createSearchIndexes.txt"
  },
  {
    "code": "      :emphasize-lines: 12\n\n      {\n         type: 'op',\n         host: 'ip-10-122-5-147:27017',\n         desc: 'JournalFlusher',\n         active: true,\n         currentOpTime: '2022-10-11T12:45:52.053+00:00',\n         opid: 201,\n         op: 'none',\n         ns: '',\n         command: {},\n         numYields: 0,\n         admissionPriority: 'low',\n         locks: {},\n         waitingForLock: false,\n         lockStats: {},\n         waitingForFlowControl: false,\n         flowControlStats: {}\n      }\n\n   The ``admissionPriority`` value is also reported in the :ref:`slow\n   log <log-message-slow-ops>`.\n\n   .. versionadded:: 6.3\n\n.. data:: currentOp.waitingForLock\n\n   Returns a boolean value. :data:`~currentOp.waitingForLock` is ``true`` if the\n   operation is waiting for a lock and ``false`` if the operation has\n   the required lock.\n\n.. data:: currentOp.msg\n\n   The :data:`~currentOp.msg` provides a message that describes the status and\n   progress of the operation. In the case of indexing or mapReduce\n   operations, the field reports the completion percentage.\n\n.. data:: currentOp.progress\n\n   Reports on the progress of mapReduce or indexing operations. The\n   :data:`~currentOp.progress` fields corresponds to the completion percentage in\n   the :data:`~currentOp.msg` field. The :data:`~currentOp.progress` specifies the following\n   information:\n\n   .. data:: currentOp.progress.done\n\n      Reports the number completed.\n\n   .. data:: currentOp.progress.total\n\n      Reports the total number.\n\n.. data:: currentOp.killPending\n\n   Returns ``true`` if the operation is currently flagged for\n   termination.  When the operation encounters its next safe termination point, the\n   operation will terminate.\n\n.. data:: currentOp.numYields\n\n   :data:`~currentOp.numYields` is a counter that reports the number of times the\n   operation has yielded to allow other operations to complete.\n\n   Typically, operations yield when they need access to data that\n   MongoDB has not yet fully read into memory. This allows\n   other operations that have data in memory to complete quickly\n   while MongoDB reads in data for the yielding operation.\n\n.. data:: currentOp.dataThroughputLastSecond\n\n   Amount of data (in MiB) processed by the :dbcommand:`validate`\n   operation in the last second. Only available for a\n   :dbcommand:`validate` operation that is currently scanning\n   documents. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/currentOp.txt"
  },
  {
    "code": "      :emphasize-lines: 7\n\n      \"msg\" : \"Validate: scanning documents Validate: scanning documents: 7258/24000 30%\",\n      \"progress\" : {\n         \"done\" : 7258,\n         \"total\" : 24000\n      },\n      \"numYields\" : 0,\n      \"dataThroughputLastSecond\" : 15.576952934265137,\n      \"dataThroughputAverage\" : 15.375944137573242,\n\n.. data:: currentOp.dataThroughputAverage\n\n   The average amount of data (in MiB) processed by the\n   :dbcommand:`validate` operation. Only available for a\n   :dbcommand:`validate` operation that is currently scanning\n   documents. For example:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/currentOp.txt"
  },
  {
    "code": "      :emphasize-lines: 8\n\n      \"msg\" : \"Validate: scanning documents Validate: scanning documents: 7258/24000 30%\",\n      \"progress\" : {\n         \"done\" : 7258,\n         \"total\" : 24000\n      },\n      \"numYields\" : 0,\n      \"dataThroughputLastSecond\" : 15.576952934265137,\n      \"dataThroughputAverage\" : 15.375944137573242,\n\n.. data:: currentOp.fsyncLock\n\n   Specifies if database is currently locked for :method:`fsync\n   write/snapshot <db.fsyncLock()>`.\n\n   Only appears if locked; i.e. if :data:`~currentOp.fsyncLock` is\n   ``true``.\n\n.. data:: currentOp.info\n\n   Information regarding how to unlock database from\n   :method:`db.fsyncLock()`. Only appears if\n   :data:`~currentOp.fsyncLock` is ``true``.\n\n.. data:: currentOp.lockStats\n\n   For each lock type and mode (see :data:`currentOp.locks` for\n   descriptions of lock types and modes), returns the following\n   information:\n\n   .. COMMENT\n      these definitions are for per operations and not for server,\n      as such, they differ from those in serverStatus.txt\n\n   .. data:: currentOp.lockStats.acquireCount\n\n      Number of times the operation acquired the lock in the specified\n      mode.\n\n   .. data:: currentOp.lockStats.acquireWaitCount\n\n      Number of times the operation had to wait for the\n      :data:`~currentOp.lockStats.acquireCount` lock acquisitions\n      because the locks were held in a conflicting mode.\n      :data:`~currentOp.lockStats.acquireWaitCount` is less than or\n      equal to :data:`~currentOp.lockStats.acquireCount`.\n\n   .. data:: currentOp.lockStats.timeAcquiringMicros\n\n      Cumulative time in microseconds that the operation had to wait to\n      acquire the locks.\n\n      :data:`~currentOp.lockStats.timeAcquiringMicros` divided by\n      :data:`~currentOp.lockStats.acquireWaitCount` gives an\n      approximate average wait time for the particular lock mode.\n\n   .. data:: currentOp.lockStats.deadlockCount\n\n      Number of times the operation encountered deadlocks while waiting\n      for lock acquisitions.\n\n.. data:: currentOp.waitingForFlowControl\n\n   A boolean that indicates if the operation is in the process of waiting for\n   :ref:`flow control <replication-flow-control>`.\n\n.. data:: currentOp.flowControlStats\n\n   The flow control statistics for this operation.\n\n   .. data:: currentOp.flowControlStats.acquireCount\n   \n      The number of times this operation acquired a ticket.\n\n   .. data:: currentOp.flowControlStats.acquireWaitCount\n\n      The number of times this operation waited to acquire a ticket.\n\n   .. data:: currentOp.flowControlStats.timeAcquiringMicros\n\n      The total time this operation has waited to acquire a ticket.\n\n.. data:: currentOp.totalOperationTimeElapsedSecs\n\n   The total time elapsed, in seconds, for the current :ref:`resharding\n   operation <sharding-resharding>`. The time is set to 0 when a new\n   resharding operation starts.\n\n   Only present if a resharding operation is taking place.\n\n   .. versionadded:: 5.0\n\n   Starting in MongoDB 6.1, this metric is also available on the\n   coordinator during resharding.\n\n.. data:: currentOp.updatesApplied\n\n   The number of updates applied.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.remainingOperationTimeEstimatedSecs\n\n   .. include:: /includes/remainingOperationTimeEstimatedSecs-details.rst\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.allShardsLowestRemainingOperationTimeEstimatedSecs\n\n   Calculated across all shards, the lowest estimate of the number of\n   seconds remaining. \n\n   Only present on a coordinator when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.allShardsHighestRemainingOperationTimeEstimatedSecs\n\n   Calculated across all shards, the highest estimate of the number of\n   seconds remaining. \n\n   Only present on a coordinator when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.approxDocumentsToCopy\n\n   The approximate number of documents to be copied from the donor\n   shards to the recipient shards during the :ref:`resharding operation\n   <sharding-resharding>`. This number is an estimate that is set at the\n   beginning of the resharding operation and does not change after it\n   has been set. The number is set to 0 when a new resharding operation\n   starts. It is possible for ``$currentOp.documentsCopied`` and\n   ``$currentOp.bytesCopied`` to end up exceeding\n   ``$currentOp.approxDocumentsToCopy`` and\n   ``$currentOp.approxBytesToCopy``, respectively, if\n   the post-resharding data distribution is not perfectly uniform.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.documentsCopied\n\n   The number of documents copied form donor shards to recipient shards\n   during the :ref:`resharding operation <sharding-resharding>`. The\n   number is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.approxBytesToCopy\n\n   The approximate number of bytes to be copied from the donor shards to\n   the recipient shards during the :ref:`resharding operation\n   <sharding-resharding>`. This number is an estimate that is set at the\n   beginning of the resharding operation and does not change after it\n   has been set. The number is set to 0 when a new resharding operation\n   starts. It is possible for ``$currentOp.documentsCopied`` and\n   ``$currentOp.bytesCopied`` to end up exceeding\n   ``$currentOp.approxDocumentsToCopy`` and\n   ``$currentOp.approxBytesToCopy``, respectively, if the\n   post-resharding data distribution is not perfectly uniform.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.bytesCopied\n\n   The number of bytes copied from donor shards to recipient shards\n   during the :ref:`resharding operation <sharding-resharding>`. The\n   number is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.countWritesToStashCollections\n\n   The number of writes to the recipient :term:`stash collections\n   <stash collection>`.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.countWritesDuringCriticalSection\n\n   The number of writes attempted during the donor's critical\n   section.\n\n   Only present on a donor shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.countReadsDuringCriticalSection\n\n   The number of reads attempted during the donor's critical\n   section.\n\n   Only present on a donor shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.deletesApplied\n\n   The number of deletes applied to the temporary resharding collection.\n   Each oplog entry that involves a delete increments the counter by 1.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.insertsApplied\n\n   The number of inserts applied to the temporary resharding collection.\n   Each oplog entry that involves an insert increments the counter by 1.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 6.1\n\n.. data:: currentOp.totalCopyTimeElapsedSecs\n\n   The total elapsed time, in seconds, for ongoing data copy tasks from\n   donor shards to recipient shards for the current :ref:`resharding\n   operation <sharding-resharding>`. The time is set to 0 when a new\n   resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n   Starting in MongoDB 6.1, this metric is also available on the\n   coordinator during resharding.\n\n.. data:: currentOp.oplogEntriesFetched\n\n   The number of entries fetched from the :term:`oplog` for the current\n   :ref:`resharding operation <sharding-resharding>`. The number is set\n   to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.oplogEntriesApplied\n\n   The number of entries applied to the :term:`oplog` for the current\n   :ref:`resharding operation <sharding-resharding>`. The number is set\n   to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.totalApplyTimeElapsedSecs\n\n   The total elapsed time, in seconds, for the apply step of the\n   current :ref:`resharding operation <sharding-resharding>`. In the\n   apply step, recipient shards apply :term:`oplog` entries to modify\n   their data based on new incoming writes from donor shards. The time\n   is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n   Starting in MongoDB 6.1, this metric is also available on the\n   coordinator during resharding.\n\n.. data:: currentOp.countWritesDuringCriticalSection\n\n   The number of writes performed in the critical section for the current\n   :ref:`resharding operation <sharding-resharding>`. The critical\n   section prevents new incoming writes to the collection currently\n   being resharded. The number is set to 0 when a new resharding\n   operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.totalCriticalSectionTimeElapsedSecs\n\n   The total elapsed time, in seconds, for the critical section of the\n   current :ref:`resharding operation <sharding-resharding>`. The\n   critical section prevents new incoming writes to the collection\n   currently being resharded. The time is set to 0 when a new\n   resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. versionadded:: 5.0\n\n   Starting in MongoDB 6.1, this metric is also available on the\n   coordinator during resharding.\n\n.. data:: currentOp.donorState\n\n   The current state of a donor shard for the :ref:`resharding operation\n   <sharding-resharding>`. The state is set to ``unused`` when a new\n   resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``preparing-to-donate``\n        - The donor shard is preparing to donate data to the recipient\n          shards.\n\n      * - ``donating-initial-data``\n        - The donor shard is donating data to the recipient shards.\n\n      * - ``donating-oplog-entries``\n        - The donor shard is donating :term:`oplog` entries to the\n          recipient shards.\n\n      * - ``preparing-to-block-writes``\n        - The donor shard is about to prevent new incoming write\n          operations to the collection that is being resharded.\n\n      * - ``error``\n        - An error occurred during the resharding operation.\n\n      * - ``blocking-writes``\n        - The donor shard is preventing new incoming write operations\n          and the donor shard has notified all recipient shards that new\n          incoming writes are prevented.\n\n      * - ``done``\n        - The donor shard has dropped the old sharded collection and the\n          resharding operation is complete.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.recipientState\n\n   The current state of a recipient shard for a :ref:`resharding\n   operation <sharding-resharding>`. The state is set to ``unused`` when\n   a new resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``awaiting-fetch-timestamp``\n        - The recipient shard is waiting for the donor shards to be\n          prepared to donate their data.\n\n      * - ``creating-collection``\n        - The recipient shard is creating the new sharded collection.\n\n      * - ``cloning``\n        - The recipient shard is receiving data from the donor shards.\n\n      * - ``applying``\n        - The recipient shard is applying :term:`oplog` entries to\n          modify its copy of the data based on the new incoming writes\n          from donor shards.\n\n      * - ``error``\n        - An error occurred during the resharding operation.\n\n      * - ``strict-consistency``\n        - The recipient shard has all data changes stored in a temporary\n          collection.\n\n      * - ``done``\n        - The resharding operation is complete.\n\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.coordinatorState\n\n   The state of the resharding coordinator for the current\n   :ref:`resharding operation <sharding-resharding>`. The resharding\n   coordinator is an operation that runs on the :ref:`config server\n   <sharding-config-server>` primary. The state is set to\n   ``unused`` when a new resharding operation starts.\n\n   Only present on the coordinating config server.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``initializing``\n        - The resharding coordinator has inserted the coordinator\n          document into ``config.reshardingOperations`` and has added\n          the ``reshardingFields`` to the ``config.collections`` entry\n          for the original collection.\n\n      * - ``preparing-to-donate``\n        - The resharding coordinator\n\n          - has created a ``config.collections`` entry for the temporary\n            resharding collection.\n          - has inserted entries into ``config.chunks`` for ranges based\n            on the new shard key.\n          - has inserted entries into ``config.tags`` for any zones\n            associated with the new shard key.\n\n          The coordinator informs participant shards to begin the\n          resharding operation. The coordinator then waits until all\n          donor shards have picked a ``minFetchTimestamp`` and are ready\n          to donate.\n\n      * - ``cloning``\n        - The resharding coordinator informs donor shards to donate data\n          to recipient shards. The coordinator waits for all recipients\n          to finish cloning the data from the donor.\n\n      * - ``applying``\n        - The resharding coordinator informs recipient shards to modify\n          their copies of data based on new incoming writes from donor\n          shards. The coordinator waits for all recipients to finish\n          applying :term:`oplog` entries.\n\n      * - ``blocking-writes``\n        - The resharding coordinator informs donor shards to prevent new\n          incoming write operations to the collection being resharded.\n          The coordinator then waits for all recipients to have all data\n          changes.\n\n      * - ``aborting``\n        - An unrecoverable error occurred during the resharding\n          operation or the :dbcommand:`abortReshardCollection` command\n          (or the :method:`sh.abortReshardCollection()` method) was run.\n\n      * - ``committing``\n        - The resharding coordinator removes the ``config.collections``\n          entry for the temporary resharding collection. The coordinator\n          then adds the ``recipientFields`` to the source collection's\n          entry.\n\n   .. versionadded:: 5.0\n\n.. data:: currentOp.opStatus\n\n   This metric is removed in version 6.1. \n\n   .. versionchanged:: 6.1\n\n.. _currentOp-query-sampling-metrics:\n\n.. data:: currentOp.collUuid\n\n   The UUID of the :ref:`sampled collection <configureQueryAnalyzer>`.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: currentOp.startTime\n\n   The time at which query sampling began.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n\n   .. versionadded:: 7.0\n\n.. data:: currentOp.samplesPerSecond\n\n   The maximum number of queries to sample per second.\n   \n   On a sharded cluster, this is reported on ``mongos`` instead of \n   ``mongod``. On a replica set, this is reported on ``mongod``.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n   \n.. data:: currentOp.sampledReadsCount\n\n   The number of sampled read queries.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n\n   .. versionadded:: 7.0\n\n.. data:: currentOp.sampledWritesCount\n\n   The number of sampled write queries.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: currentOp.sampledReadsBytes\n\n   The size of the sampled read queries, in bytes.\n  \n   On a replica set, this is reported on every ``mongod``.\n\n   On a sharded cluster, this only reported on ``mongod`` with \n   ``--shardsvr``.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: currentOp.sampledWritesBytes\n   \n   The size of the sampled write queries, in bytes.\n   \n   On a replica set, this is reported on every ``mongod``.\n\n   On a sharded cluster, this only reported on ``mongod`` with \n   ``--shardsvr``.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/currentOp.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 9, 12, 14\n\n   {\n     db: 'test',\n     collections: 2,\n     views: 0,\n     objects: 1689,\n     avgObjSize: 52.56542332741267,\n     dataSize: 86.7021484375,\n     storageSize: 100,\n     freeStorageSize: 32,\n     indexes: 2,\n     indexSize: 116,\n     indexFreeStorageSize: 36,\n     totalSize: 216,\n     totalFreeStorageSize: 68,\n     scaleFactor: 1024,\n     fsUsedSize: 60155820,\n     fsTotalSize: 61255492,\n     ok: 1,\n     '$clusterTime': {\n       clusterTime: Timestamp({ t: 1646085664, i: 1 }),\n       signature: {\n         hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n         keyId: Long(\"0\")\n       }\n     },\n     operationTime: Timestamp({ t: 1646085664, i: 1 })\n   }\n\nThe :ref:`freeStorage <dbStats-freeStorage>` field enables\nthe collection and display of the highlighted metrics.\n\nThe :ref:`scale <dbStats-scale>` field sets the displayed values to\nkilobytes.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/dbStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ 4, 8, 12 ]\n\nExample for ``sensorView``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/distinct.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      ok: 1\n   }\n\nExample\n-------\n\nThe following example deletes a search index named ``searchIndex01`` on\nthe ``contacts`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/dropSearchIndex.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 110, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\n.. note::\n\n   .. include:: /includes/extracts/arrayFilters-update-aggregation-restriction.rst\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/findAndModify.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [\n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 } \n       ]\n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 90, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 85, \"std\" : 4 }\n      ]\n   }\n\n.. _cmdfindOneAndUpdate-agg-pipeline:\n\nUse an Aggregation Pipeline for Updates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:dbcommand:`findAndModify` can accept an aggregation pipeline for the update. \nThe pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example, create a collection ``students2`` with the following\ndocuments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/findAndModify.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n   \n   { \n     \"_id\" : 1, \n     \"grades\" : [ { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 }, { \"grade\" : 85, \"mean\" : 90, \"std\" : 4 }, { \"grade\" : 85, \"mean\" :85, \"std\" : 6 } ], \n     \"total\" : 250\n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [ { \"grade\" : 90, \"mean\" : 75, \"std\" : 6 }, { \"grade\" : 87, \"mean\" : 90, \"std\" : 3 }, { \"grade\" : 85, \"mean\" : 85,\"std\" : 4 } ]\n   }\n\n.. _ex-findAndModify-hint:\n\nSpecify ``hint`` for ``findAndModify`` Operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn :binary:`~bin.mongosh`, create a ``members`` collection\nwith the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/findAndModify.txt"
  },
  {
    "code": "      :copyable: false\n\n      // mongosh\n      signature: {\n         hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n         keyId: Long(\"0\")\n      }\n\n      // mongo\n      \"signature\" : {\n\t\t\t      \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n\t\t\t      \"keyId\" : NumberLong(0)\n\t\t    }\n\nExamples\n--------\n\nRun :dbcommand:`getAuditConfig` on the ``admin`` database .\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getAuditConfig.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3-7, 9\n\n   {\n     generation: ObjectId(\"60e73e74680a655705f16525\"),\n     filter: {\n       atype: 'authCheck',\n       'param.command': {\n         '$in': [ 'find', 'insert', 'delete', 'update', 'findandmodify' ]\n       }\n     },\n     auditAuthorizationSuccess: true,\n     ok: 1,\n     '$clusterTime': {\n       clusterTime: Timestamp(1, 1625767540),\n       signature: {\n         hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n         keyId: Long(\"0\")\n       }\n     },\n     operationTime: Timestamp(1, 1625767540)\n   }\n\n.. seealso::\n\n   :method:`db.adminCommand`, :dbcommand:`setAuditConfig`,\n   :ref:`configure audit filters <audit-filter>`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getAuditConfig.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"names\" : [ \"global\", \"startupWarnings\" ], \"ok\" : 1 }\n\nRetrieve Recent Events from Log\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation, run from :binary:`~bin.mongosh`,\nretrieves the most recent ``global`` events for the\n:binary:`~bin.mongod`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getLog.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n         \"totalLinesWritten\" : <num>,\n         \"log\" : [\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.871+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"STORAGE\\\",  \\\"id\\\":4615611, \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"MongoDB starting\\\",\\\"attr\\\":{\\\"pid\\\":12345,\\\"port\\\":27001,\\\"dbPath\\\":\\\"/var/lib/mongo\\\",\\\"architecture\\\":\\\"64-bit\\\",\\\"host\\\":\\\"server1.example.com\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.871+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONTROL\\\",  \\\"id\\\":23403,   \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"Build Info\\\",\\\"attr\\\":{\\\"buildInfo\\\":{\\\"version\\\":\\\"4.4.0\\\",\\\"gitVersion\\\":\\\"328c35e4b883540675fb4b626c53a08f74e43cf0\\\",\\\"openSSLVersion\\\":\\\"OpenSSL 1.1.1c FIPS  28 May 2019\\\",\\\"modules\\\":[],\\\"allocator\\\":\\\"tcmalloc\\\",\\\"environment\\\":{\\\"distmod\\\":\\\"rhel80\\\",\\\"distarch\\\":\\\"x86_64\\\",\\\"target_arch\\\":\\\"x86_64\\\"}}}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.871+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONTROL\\\",  \\\"id\\\":51765,   \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"Operating System\\\",\\\"attr\\\":{\\\"os\\\":{\\\"name\\\":\\\"CentOS Linux release 8.0.1905 (Core) \\\",\\\"version\\\":\\\"Kernel 4.18.0-80.11.2.el8_0.x86_64\\\"}}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.871+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONTROL\\\",  \\\"id\\\":21951,   \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"Options set by command line\\\",\\\"attr\\\":{\\\"options\\\":{\\\"config\\\":\\\"/etc/mongod.conf\\\",\\\"net\\\":{\\\"bindIp\\\":\\\"127.0.0.1\\\",\\\"port\\\":27001},\\\"processManagement\\\":{\\\"fork\\\":true,\\\"timeZoneInfo\\\":\\\"/usr/share/zoneinfo\\\"},\\\"replication\\\":{\\\"replSetName\\\":\\\"repl-shard1\\\"},\\\"sharding\\\":{\\\"clusterRole\\\":\\\"shardsvr\\\"},\\\"storage\\\":{\\\"dbPath\\\":\\\"/var/lib/mongo\\\",\\\"journal\\\":{\\\"enabled\\\":true},\\\"wiredTiger\\\":{\\\"engineConfig\\\":{\\\"cacheSizeGB\\\":0.1}}},\\\"systemLog\\\":{\\\"destination\\\":\\\"file\\\",\\\"logAppend\\\":true,\\\"path\\\":\\\"/var/log/mongodb/mongod.log\\\"}}}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.873+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"STORAGE\\\",  \\\"id\\\":22270,   \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"Storage engine to use detected by data files\\\",\\\"attr\\\":{\\\"dbpath\\\":\\\"/var/lib/mongo\\\",\\\"storageEngine\\\":\\\"wiredTiger\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:48.873+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"STORAGE\\\",  \\\"id\\\":22315,   \\\"ctx\\\":\\\"initandlisten\\\",\\\"msg\\\":\\\"wiredtiger_open config\\\",\\\"attr\\\":{\\\"config\\\":\\\"create,cache_size=102M,session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000,close_scan_interval=10,close_handle_minimum=250),statistics_log=(wait=0),verbose=[recovery_progress,checkpoint_progress,compact_progress],\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server1.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server2.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server3.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server4.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server5.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"CONNPOOL\\\", \\\"id\\\":22576,   \\\"ctx\\\":\\\"ReplicaSetMonitor-TaskExecutor\\\",\\\"msg\\\":\\\"Connecting\\\",\\\"attr\\\":{\\\"hostAndPort\\\":\\\"server6.example.com:27001\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"NETWORK\\\",  \\\"id\\\":23015,   \\\"ctx\\\":\\\"listener\\\",\\\"msg\\\":\\\"Listening on\\\",\\\"attr\\\":{\\\"address\\\":\\\"/tmp/mongodb-27001.sock\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"NETWORK\\\",  \\\"id\\\":23015,   \\\"ctx\\\":\\\"listener\\\",\\\"msg\\\":\\\"Listening on\\\",\\\"attr\\\":{\\\"address\\\":\\\"127.0.0.1\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:10:58.877+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"NETWORK\\\",  \\\"id\\\":23016,   \\\"ctx\\\":\\\"listener\\\",\\\"msg\\\":\\\"Waiting for connections\\\",\\\"attr\\\":{\\\"port\\\":27001,\\\"ssl\\\":\\\"off\\\"}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:15:10.392+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"NETWORK\\\",  \\\"id\\\":22943,   \\\"ctx\\\":\\\"listener\\\",\\\"msg\\\":\\\"connection accepted\\\",\\\"attr\\\":{\\\"remote\\\":\\\"127.0.0.1:35724\\\",\\\"sessionId\\\":67,\\\"connectionCount\\\":30}}\",\n                 \"{\\\"t\\\":{\\\"$date\\\":\\\"2020-05-19T19:15:10.393+00:00\\\"},\\\"s\\\":\\\"I\\\",  \\\"c\\\":\\\"NETWORK\\\",  \\\"id\\\":51800,   \\\"ctx\\\":\\\"conn67\\\",\\\"msg\\\":\\\"client metadata\\\",\\\"attr\\\":{\\\"remote\\\":\\\"127.0.0.1:35724\\\",\\\"client\\\":\\\"conn67\\\",\\\"doc\\\":{\\\"application\\\":{\\\"name\\\":\\\"MongoDB Shell\\\"},\\\"driver\\\":{\\\"name\\\":\\\"MongoDB Internal Client\\\",\\\"version\\\":\\\"4.4.0\\\"},\\\"os\\\":{\\\"type\\\":\\\"Linux\\\",\\\"name\\\":\\\"CentOS Linux release 8.0.1905 (Core) \\\",\\\"architecture\\\":\\\"x86_64\\\",\\\"version\\\":\\\"Kernel 4.18.0-80.11.2.el8_0.x86_64\\\"}}}}\"\n         ],\n         \"ok\" : 1,\n         \"$gleStats\" : {\n                 \"lastOpTime\" : Timestamp(<ts>),\n                 \"electionId\" : ObjectId(<id>)\n         },\n         \"lastCommittedOpTime\" : Timestamp(<ts>),\n         \"$configServerState\" : {\n                 \"opTime\" : {\n                         \"ts\" : Timestamp(<ts>),\n                         \"t\" : NumberLong(8)\n                  }\n         },\n         \"$clusterTime\" : {\n                 \"clusterTime\" : Timestamp(<ts>),\n                 \"signature\" : {\n                         \"hash\" : BinData(<bin>),\n                         \"keyId\" : NumberLong(0)\n                  }\n         },\n         \"operationTime\" : Timestamp(<ts>)\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getLog.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"cursor\" : {\n         \"id\" : NumberLong(\"678960441858272731\"),\n         \"ns\" : \"test.contacts\",\n         \"nextBatch\" : [\n            {\n               \"_id\" : ObjectId(\"5e8e501e1a32d227f9085857\"),\n               \"zipcode\" : \"220000\"\n            }\n         ],\n         \"partialResultsReturned\" : true,\n         \"postBatchResumeToken\": \"< Resume Token >\"\n      },\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1586385239, 2),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1586385239, 2),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"lLjejeW6AQGReR9x1PD8xU+tP+A=\"),\n            \"keyId\" : NumberLong(\"6813467763969884181\")\n         }\n      }\n   }\n\n.. list-table::\n   :widths: 20 80\n   :header-rows: 1\n   \n   * - Field\n     - Description\n\n   * - ``cursor``\n     \n     - Contains the cursor information, including the\n       cursor ID as well as the ``nextBatch`` of documents.\n\n       .. include:: /includes/find-getmore-partialresults.rst\n\n       The ``postBatchResumeToken`` field can be used with the\n       :pipeline:`$changeStream` pipeline to start or resume\n       a change stream from this point.\n\n   * - ``\"ok\"``\n   \n     - Indicates whether the command has succeeded (``1``) or failed\n       (``0``).\n\nIn addition to these fields, the :method:`db.runCommand()` response\nincludes the following information for replica sets and sharded \nclusters:\n\n- ``$clusterTime``\n  \n- ``operationTime``\n\nSee :ref:`db.runCommand() Response <command-response>` for details.\n\n\nBehavior\n--------\n\nAccess Control\n~~~~~~~~~~~~~~\n\nIf :ref:`authentication <authentication>` is enabled, you can \nonly run ``getMore`` against cursors you created.\n\nSessions\n~~~~~~~~\n\nFor cursors created inside a session, you cannot call\n``getMore`` outside the session.\n\nSimilarly, for cursors created outside of a session, you cannot call\n``getMore`` inside a session.\n\nTransactions\n````````````\n\nFor :ref:`multi-document transactions <transactions>`:\n\n.. include:: /includes/extracts/transactions-operations-getMore.rst\n\nSlow Queries\n~~~~~~~~~~~~\n\n.. include:: /includes/getMore-slow-queries.rst\n\nLearn More\n----------\n\n- :ref:`cursor-batchSize`\n- :ref:`read-operations-cursors`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getMore.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     saslHostName: {\n       value: '<hostname>',\n       settableAtRuntime: false,\n       settableAtStartup: true\n     },\n     ok: 1\n   }\n\n.. include:: /includes/note-output-may-vary.rst\n\n\n.. _getParameter-showdetails-all-params:\n\nReport Details for All Parameters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example runs :dbcommand:`getParameter` with \n``{showDetails: true, allParameters: true}`` to report \n:ref:`details <showdetails-fields>` on **all** parameters.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/getParameter.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 8,12,16\n\n   {\n      n: 0,\n      writeErrors: [\n         {\n            index: 0,\n            code: 121,\n            errInfo: {\n               failingDocumentId: ObjectId('6197a7f2d84e85d1cc90d270'),\n               details: {\n                  operatorName: '$in',\n                  specifiedAs: { status: { '$in': [Array] } },\n                  reason: 'no matching value found in array',\n                  consideredValue: 'Active'\n               }\n            },\n            errmsg: 'Document failed validation'\n         }\n      ],\n      ok: 1\n   }\n\n\nSet ``bypassDocumentValidation : true`` and rerun the insert:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   motorhead\n   ramones\n   taylorSwift\n\nTo get a similar list with the ``listCollections`` collections command,\nuse the ``nameOnly`` option.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listCollections.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     cursor: {\n       id: Long(\"0\"),\n       ns: 'music.$cmd.listCollections',\n       firstBatch: [\n         { name: 'motorhead', type: 'collection' },\n         { name: 'taylorSwift', type: 'collection' },\n         { name: 'ramones', type: 'collection' }\n       ]\n     },\n     ok: 1\n   }\n\nTo get more detailed information, remove the ``nameOnly`` option.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listCollections.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     cursor: {\n       id: Long(\"0\"),\n       ns: 'music.$cmd.listCollections',\n       firstBatch: [\n         {\n           name: 'motorhead',\n           type: 'collection',\n           options: {},\n           info: {\n             readOnly: false,\n             uuid: new UUID(\"09ef1858-2831-47d2-a3a7-9a29a9cfeb94\")\n           },\n           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }\n         },\n         {\n           name: 'taylorSwift',\n           type: 'collection',\n           options: {},\n           info: {\n             readOnly: false,\n             uuid: new UUID(\"6c46c8b9-4999-4213-bcef-9a36b0cff228\")\n           },\n           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }\n         },\n         {\n           name: 'ramones',\n           type: 'collection',\n           options: {},\n           info: {\n             readOnly: false,\n             uuid: new UUID(\"7e1925ba-f2f9-4e42-90e4-8cafd434a6c4\")\n           },\n           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }\n         }\n       ]\n     },\n     ok: 1\n   }\n\nLearn More\n----------\n\nFor collection options:\n\n- :method:`db.createCollection()`\n- :dbcommand:`create`\n\nFor collection information:\n\n- :method:`db.getCollectionInfos()`\n- :ref:`mongosh built-in commands <mongosh-help>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listCollections.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: json\n      :linenos:\n   \n      db.runCommand ( \n        { \n           listIndexes: \"contacts\"\n        } \n      ) \n\n   .. output::\n      :linenos:\n\n      {\n         cursor: {\n            id: Long(\"0\"),\n            ns: 'test.contacts',\n            firstBatch: [\n               { v: 2, key: { _id: 1 }, name: '_id_', ns: 'test.contacts' },\n               { v: 2, key: { a: 1 }, name: 'a_1', ns: 'test.contacts' }\n            ]\n         },\n         ok: 1\n      }\n\nSpecify Result Batch Size\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example lists indexes for the ``contacts`` collection, and specifies a cursor \nbatch size of 1. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listIndexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: json\n      :linenos:\n\n      db.runCommand ( \n         {\n            listIndexes: \"contacts\", cursor: { batchSize: 1 }\n         }\n      )\n\n   .. output::\n      :linenos:\n\n      {\n         cursor: {\n           id: Long(\"4809221676960028307\"),\n           ns: 'test.contacts',\n          firstBatch: [ { v: 2, key: { _id: 1 }, name: '_id_', ns: 'test.contacts' } ]\n        },\n        ok: 1\n      }\n\nRetrieve Additional Results\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses ``getMore`` to retrieve additional result batches from the \n``contacts`` collection. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listIndexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: json\n      :linenos:\n\n      db.runCommand( \n         { \n            getMore: Long(\"4809221676960028307\"), collection: \"contacts\"\n         } \n      )\n\n   .. output::\n      :linenos:\n\n      {\n         cursor: {\n          nextBatch: [ { v: 2, key: { a: 1 }, name: 'a_1', ns: 'test.contacts' } ],\n          id: Long(\"0\"),\n          ns: 'test.contacts'\n        },\n        ok: 1\n      }\n      \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/listIndexes.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n         \n         db.aggregate( [\n            { $querySettings: {} }\n         ] )\n\n      To locate the query settings to delete, use the ``queryShapeHash``\n      string in this output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/removeQuerySettings.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3\n\n         [\n            {\n               queryShapeHash: 'F42757F1AEB68B4C5A6DE6182B29B01947C829C926BCC01226BDA4DDE799766C',\n               settings: {\n                  indexHints: {\n                     ns: { db: 'test', coll: 'pizzaOrders' },\n                     allowedIndexes: [ 'orderDate_1' ]\n                  },\n                  queryFramework: 'classic',\n                  comment: 'Index hint for orderDate_1 index to improve query performance'\n               },\n               representativeQuery: {\n                  find: 'pizzaOrders',\n                  filter: { orderDate: { '$gt': ISODate('2024-01-20T00:00:00.000Z') } },\n                  sort: { totalNumber: 1 },\n                  '$db': 'test'\n               }\n            }\n         ]\n\n   .. step:: Delete the query settings\n\n      The following example uses ``removeQuerySettings`` to delete the\n      query settings identified using ``queryShapeHash`` from\n      the previous output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/removeQuerySettings.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         db.adminCommand( {\n            removeQuerySettings: \"F42757F1AEB68B4C5A6DE6182B29B01947C829C926BCC01226BDA4DDE799766C\"\n         } )\n\n      You can also delete query settings using a query shape. For\n      example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/removeQuerySettings.txt"
  },
  {
    "code": "      :copyable: false\n\n      MongoServerError: no replset config has been received\n\n   Run the :dbcommand:`replSetInitiate` command and try again. \n\n.. _rs-status-output:\n\nExample\n-------\n\n.. tabs::\n\n   tabs:\n\n      - id: primary\n        name: Primary\n        content: |\n\n          The following example runs the :dbcommand:`replSetGetStatus`\n          command on the :term:`admin database` of the replica set\n          primary:\n\n",
    "language": "shell",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/replSetGetStatus.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     ok: 1,\n     '$clusterTime': {\n       clusterTime: Timestamp(1, 1624887954),\n       signature: {\n         hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n         keyId: 0\n       }\n     },\n     operationTime: Timestamp(1, 1624887947)\n   }\n\n.. seealso::\n\n   :ref:`sharding-resharding`\n\n.. _reshardCollection-redistribute-data:\n\nRedistribute Data to New Shards\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 8.0, you can reshard a collection on the same key,\nwhich can be used to redistribute data onto new shards.\n\nAfter adding a shard to the cluster, you use the ``reshardCollection`` command\nwith the ``forceRedistribution`` option to redistribute data across the\ncluster:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/reshardCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     roles: [\n       {\n         _id: 'products.associate',\n         role: 'associate',\n         db: 'products',\n         privileges: [\n           {\n             resource: { db: 'products', collection: '' },\n             actions: [ 'bypassDocumentValidation' ]\n           }\n         ],\n         roles: [ { role: 'readWrite', db: 'products' } ],\n         isBuiltin: false,\n         inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n         inheritedPrivileges: [\n           {\n             resource: { db: 'products', collection: '' },\n             actions: [ 'bypassDocumentValidation' ]\n           },\n           {\n             resource: { db: 'products', collection: '' },\n             actions: [\n               'changeStream',\n               'collStats',\n               'compactStructuredEncryptionData',\n               ...\n             ]\n           },\n           ...\n         ]\n       }\n     ],\n     ok: 1\n   }\n\n.. _rolesInfo-example-user-defined-and-built-in-roles:\n\nView All User-Defined and Built-In Roles for a Database\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation returns all roles on the database on which the command\nruns, including both built-in and user-defined roles:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/rolesInfo.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     roles: [\n       {\n         role: 'enableSharding',\n         db: 'products',\n         isBuiltin: true,\n         roles: [],\n         inheritedRoles: []\n       },\n       {\n         role: 'userAdmin',\n         db: 'products',\n         isBuiltin: true,\n         roles: [],\n         inheritedRoles: []\n       },\n       {\n         role: 'read',\n         db: 'products',\n         isBuiltin: true,\n         roles: [],\n         inheritedRoles: []\n       },\n       ...\n     ],\n     ok: 1\n   }\n\n.. _rolesInfo-example-auth-restrictions:\n\nView Authentication Restrictions for Roles\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation returns all user-defined roles on the\n``products`` database and includes authentication restrictions:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/rolesInfo.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     roles: [\n       {\n         _id: 'products.associate',\n         role: 'associate',\n         db: 'products',\n         roles: [ { role: 'readWrite', db: 'products' } ],\n         authenticationRestrictions: [\n           [ { clientSource: [ '198.51.100.0' ] } ]\n         ],\n         isBuiltin: false,\n         inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n         inheritedAuthenticationRestrictions: [\n           [ { clientSource: [ '198.51.100.0' ] } ]\n         ]\n       }\n     ],\n     ok: 1\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/rolesInfo.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      arrayFilters : Long(\"0\"),\n      failed : Long(\"0\"),\n      pipeline : Long(\"0\"),\n      total : Long(\"1\")\n   }\n\nInclude ``mirroredReads``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the :serverstatus:`mirroredReads` information is not included in \nthe output. To return :serverstatus:`mirroredReads` information, you must \nexplicitly specify the inclusion:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/serverStatus.txt"
  },
  {
    "code": "      :copyable: false\n\n      db.matchCount.aggregate(\n         [\n            { $match:\n               {  $expr: { $gt: [ \"$_id\", 0 ] } }\n            }\n         ]\n      )\n\n   The counter for ``$expr`` increments when the query runs. The\n   counter for ``$gt`` does not. \n\n.. serverstatus:: metrics.changeStreams.largeEventsSplit\n\n   The number of change stream events larger than 16 MB that were split\n   into smaller fragments. Events are only split if you use the\n   :pipeline:`$changeStreamSplitLargeEvent` pipeline stage.\n\n   .. versionadded:: 7.0 (*Also available in 6.0.9*)\n\n.. serverstatus:: metrics.changeStreams\n\n   A document that reports information about :ref:`change stream\n   <changeStreams>` events larger than 16 MB.\n\n   .. versionadded:: 7.0\n\n.. serverstatus:: metrics.changeStreams.largeEventsFailed\n\n   The number of change stream events that caused a\n   ``BSONObjectTooLarge`` exception because the event was larger than 16\n   MB. To prevent the exception, see\n   :pipeline:`$changeStreamSplitLargeEvent`.\n\n   .. versionadded:: 7.0 (*Also available in 6.0.9 and 5.0.19*)\n\n.. serverstatus:: metrics.changeStreams.showExpandedEvents\n\n   The number of change stream cursors with the :ref:`showExpandedEvents \n   <change-streams-expanded-events>` option set to ``true``.\n\n   The counter for ``showExpandedEvents`` increments when you: \n   \n   - Open a change stream cursor.\n   \n   - Run the :dbcommand:`explain` command on a change stream cursor.\n\n   .. versionadded:: 7.1\n\n.. serverstatus:: metrics.commands\n\n   A document that reports on the use of database commands. The fields\n   in :serverstatus:`metrics.commands` are the names of :doc:`database\n   commands </reference/command>`. For each command, the\n   :dbcommand:`serverStatus` reports the total number of executions and\n   the number of failed executions.\n\n   :serverstatus:`metrics.commands` includes\n   ``replSetStepDownWithForce`` (i.e. the :dbcommand:`replSetStepDown`\n   command with ``force: true``) as well as the overall\n   ``replSetStepDown``. In earlier versions, the command\n   reported only overall ``replSetStepDown`` metrics.\n\n.. serverstatus:: metrics.commands.<command>.failed\n\n   The number of times ``<command>`` failed on this\n   :binary:`~bin.mongod`.\n\n\n.. serverstatus:: metrics.commands.<create or collMod>.validator\n\n   For the :dbcommand:`create` and :dbcommand:`collMod` commands, a document\n   that reports on non-empty ``validator`` objects passed to the command to\n   specify :ref:`validation rules or expressions <schema-validation-overview>`\n   for the collection.\n\n\n.. serverstatus:: metrics.commands.<create or collMod>.validator.total\n\n   The number of times a non-empty ``validator`` object was passed as an option\n   to the command on this :binary:`~bin.mongod`.\n\n.. serverstatus:: metrics.commands.<create or collMod>.validator.failed\n\n   The number of times a call to the command on this :binary:`~bin.mongod`\n   failed with a non-empty ``validator`` object due to a schema validation\n   error.\n\n.. serverstatus:: metrics.commands.<create or collMod>.validator.jsonSchema\n\n   The number of times a ``validator`` object with a ``$jsonSchema`` was passed\n   as an option to the command on this :binary:`~bin.mongod`.\n\n\n.. serverstatus:: metrics.commands.<command>.total\n\n   The number of times ``<command>`` executed on this\n   :binary:`~bin.mongod`.\n\n.. serverstatus:: metrics.commands.<command>.rejected\n\n   The number of times ``<command>`` was rejected on this\n   :binary:`~bin.mongod` because the command or operation has an\n   associated query setting where the ``reject`` field is ``true``.\n\n   To set the ``reject`` field, use ``setQuerySettings``.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.commands.update.pipeline\n\n   The number of times an\n   :ref:`aggregation pipeline <aggregation-pipeline-operator-reference>`\n   was used to update documents on this :binary:`~bin.mongod`. Subtract\n   this value from the total number of updates to get the number of\n   updates made with :ref:`document <update-operators-top-level>`\n   syntax.\n\n   The ``pipeline`` counter is only available for ``update`` and\n   ``findAndModify`` operations.\n\n.. serverstatus:: metrics.commands.findAndModify.pipeline\n\n   The number of times :method:`~db.collection.findAndModify()` was\n   used in an\n   :ref:`aggregation pipeline <aggregation-pipeline-operator-reference>`\n   to update documents on this :binary:`~bin.mongod`.\n\n   The ``pipeline`` counter is only available for ``update`` and\n   ``findAndModify`` operations.\n\n.. serverstatus:: metrics.commands.update.arrayFilters\n\n   The number of times an :ref:`arrayFilter <findAndModify-arrayFilters>`\n   was used to update documents on this :binary:`~bin.mongod`.\n\n   The ``arrayFilters`` counter is only available for ``update`` and\n   ``findAndModify`` operations.\n\n.. serverstatus:: metrics.commands.findAndModify.arrayFilters\n\n   The number of times an :ref:`arrayFilter <findAndModify-arrayFilters>`\n   was used with :method:`~db.collection.findAndModify()` to update\n   documents on this :binary:`~bin.mongod`.\n\n   The ``arrayFilters`` counter is only available for ``update`` and\n   ``findAndModify`` operations.\n\n.. serverstatus:: metrics.document\n\n   A document that reflects document access and modification patterns.\n   Compare these values to the data in the :serverstatus:`opcounters`\n   document, which track total number of operations.\n\n.. serverstatus:: metrics.document.deleted\n\n   The total number of documents deleted.\n\n.. serverstatus:: metrics.document.inserted\n\n   The total number of documents inserted.\n\n.. serverstatus:: metrics.document.returned\n\n   The total number of documents returned by queries.\n\n.. serverstatus:: metrics.document.updated\n\n   The total number of documents matched for update operations. This value is not \n   necessarily the same as the number of documents modified by updates.\n\n.. serverstatus:: metrics.dotsAndDollarsFields\n\n   A document with a number that indicates how often\n   :ref:`insert <write-op-insert>` or :ref:`update <write-op-update>`\n   operations ran using a dollar (``$``) prefixed name. The value does\n   not report the exact number of operations.  \n\n   When an :term:`upsert` operation creates a new document, it is\n   considered to be an ``insert`` rather than an ``update``.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.executor\n\n   A document that reports on various statistics for the replication\n   executor.\n\n.. serverstatus:: metrics.getLastError\n\n   A document that reports on :ref:`write concern <write-concern>` use.\n\n.. serverstatus:: metrics.getLastError.wtime\n\n   A document that reports :ref:`write concern <write-concern>`\n   operation counts with a ``w`` argument greater than ``1``.\n\n.. serverstatus:: metrics.getLastError.wtime.num\n\n   The total number of operations with a specified write concern\n   (i.e. ``w``) that wait for one or more members of a replica set to\n   acknowledge the write operation (i.e. a ``w`` value greater than\n   ``1``.)\n\n.. serverstatus:: metrics.getLastError.wtime.totalMillis\n\n   The total amount of time in milliseconds that the\n   :binary:`~bin.mongod` has spent performing :ref:`write concern\n   <write-concern>` operations with a write concern (i.e. ``w``) that\n   waits for one or more members of a replica set to acknowledge the\n   write operation (i.e. a ``w`` value greater than ``1``.)\n\n.. serverstatus:: metrics.getLastError.wtimeouts\n\n   The number of times that :term:`write concern` operations have timed\n   out as a result of the ``wtimeout`` threshold. This number\n   increments for both default and non-default write concern\n   specifications.\n\n.. serverstatus:: metrics.getLastError.default\n\n   A document that reports on when a default :ref:`write concern\n   <write-concern>` was used (meaning, a non-``clientSupplied`` write\n   concern). The possible origins of a default write concern are:\n\n   - ``implicitDefault``\n   - ``customDefault``\n   - ``getLastErrorDefaults``\n\n   Refer to the following table for information on\n   each possible write concern origin, or ``provenance``:\n\n   .. include:: /includes/fact-wc-provenance-table.rst\n\n.. serverstatus:: metrics.getLastError.default.unsatisfiable\n\n   Number of times that a non-``clientSupplied`` write concern\n   returned the ``UnsatisfiableWriteConcern`` error code.\n\n.. serverstatus:: metrics.getLastError.default.wtimeouts\n\n   Number of times a non-``clientSupplied`` write concern timed out.\n\n.. _server-status-metrics-mongos:\n\n.. serverstatus:: metrics.mongos\n\n   A document that contains metrics about :binary:`~bin.mongos`.\n\n.. serverstatus:: metrics.mongos.cursor\n\n   A document that contains metrics for cursors used by\n   :binary:`~bin.mongos`.\n\n.. serverstatus:: metrics.mongos.cursor.moreThanOneBatch\n\n   The total number of cursors that have returned more than one batch\n   since :binary:`~bin.mongos` started. Additional batches are retrieved\n   using the :dbcommand:`getMore` command.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.mongos.cursor.totalOpened\n\n   The total number of cursors that have been opened since\n   :binary:`~bin.mongos` started, including cursors currently open.\n   Differs from :serverstatus:`metrics.cursor.open.total`, which is the\n   number of currently open cursors only.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.network\n\n   .. versionadded:: 6.3\n\n   A document that reports server network metrics.\n\n.. serverstatus:: metrics.network.totalEgressConnectionEstablishmentTimeMillis\n\n   .. versionadded:: 6.3\n\n   The total time in milliseconds to establish server connections.\n\n.. serverstatus:: metrics.network.totalIngressTLSConnections\n\n   .. versionadded:: 6.3\n\n   The total number of incoming connections to the server that use TLS.\n   The number is cumulative and is the total after the server was\n   started.\n\n.. serverstatus:: metrics.network.totalIngressTLSHandshakeTimeMillis\n\n   .. versionadded:: 6.3\n\n   The total time in milliseconds that incoming connections to the\n   server have to wait for the TLS network handshake to complete. The\n   number is cumulative and is the total after the server was started.\n\n.. serverstatus:: metrics.network.totalTimeForEgressConnectionAcquiredToWireMicros\n\n   .. versionadded:: 6.3\n\n   The total time in microseconds that operations wait between\n   acquisition of a server connection and writing the bytes to send to\n   the server over the network. The number is cumulative and is the\n   total after the server was started.\n\n.. serverstatus:: metrics.network.totalTimeToFirstNonAuthCommandMillis\n\n   .. versionadded:: 6.3\n\n   The total time in milliseconds from accepting incoming connections to\n   the server and receiving the first operation that isn't part of the\n   connection authentication handshake. The number is cumulative and is\n   the total after the server was started.\n\n.. serverstatus:: metrics.operation\n\n   A document that holds counters for several types of update and query\n   operations that MongoDB handles using special operation types.\n\n.. serverstatus:: metrics.operation.killedDueToClientDisconnect\n\n   .. versionadded:: 7.1\n\n   Total number of operations cancelled before completion \n   because the client disconnected.\n\n.. serverstatus:: metrics.operation.killedDueToDefaultMaxTimeMSExpired\n\n   .. versionadded:: 8.0\n\n   Total number of operations that timed out due to the cluster-level\n   default timeout, :parameter:`defaultMaxTimeMS`. \n\n.. serverstatus:: metrics.operation.killedDueToMaxTimeMSExpired\n\n   .. versionadded:: 7.2\n\n   Total number of operations that timed out due to the operation-level\n   timeout, :method:`cursor.maxTimeMS()`.\n\n.. serverstatus:: metrics.operation.numConnectionNetworkTimeouts\n\n   .. versionadded:: 6.3\n\n   Total number of operations that failed because of server connection\n   acquisition time out errors.\n\n.. serverstatus:: metrics.operation.scanAndOrder\n\n   The total number of queries that return sorted numbers that cannot\n   perform the sort operation using an index.\n\n.. serverstatus:: metrics.operation.totalTimeWaitingBeforeConnectionTimeoutMillis\n\n   .. versionadded:: 6.3\n\n   Total time in milliseconds that operations waited before failing\n   because of server connection acquisition time out errors.\n\n.. serverstatus:: metrics.operation.unsendableCompletedResponses\n   \n   .. versionadded:: 7.1\n\n   Total number of operations that completed server-side but\n   did not send their response to the client because \n   the connection between the client and server failed or disconnected.\n\n.. serverstatus:: metrics.operation.writeConflicts\n\n   The total number of queries that encountered write conflicts.\n\n.. serverstatus:: metrics.query.lookup\n\n   A document that provides detailed data on the use of the  :pipeline:`$lookup` \n   stage with the |sbe|. To learn more, see :ref:`agg-lookup-optimization-sbe`.\n\n   These metrics are primarily intended for internal use by MongoDB.\n\n   *New in version 6.1* \n\n.. serverstatus:: metrics.query.multiPlanner\n\n   Provides detailed query planning data for the |sbe| and the classic\n   query engine. For more information on the |sbe| see:\n   :ref:`sbe-pipeline-optimizations`.\n\n   These metrics are primarily intended for internal use by MongoDB.\n\n   *New in version 6.0.0 and 5.0.9* \n\n.. serverstatus:: metrics.query.sort\n\n   A document that holds counters related to sort stages.\n\n   .. versionadded:: 6.2\n\n.. serverstatus:: metrics.query.sort.spillToDisk\n\n   The total number of writes to disk caused by sort stages.\n\n   .. versionadded:: 6.2\n\n.. serverstatus:: metrics.query.sort.totalBytesSorted\n\n   The total amount of sorted data in bytes. \n   \n   .. versionadded:: 6.2\n\n.. serverstatus:: metrics.query.sort.totalKeysSorted\n\n   The total number of keys used in sorts.\n   \n   .. versionadded:: 6.2\n\n.. serverstatus:: query.multiPlanner.classicMicros\n\n   Aggregates the total number of microseconds spent in the classic\n   multiplanner.\n\n.. serverstatus:: query.multiPlanner.classicWorks\n\n   Aggregates the total number of \"works\" performed in the classic\n   multiplanner.\n\n.. serverstatus:: query.multiPlanner.classicCount\n\n   Aggregates the total number of invocations of the classic\n   multiplanner.\n\n.. serverstatus:: query.multiPlanner.sbeMicros\n\n   Aggregates the total number of microseconds spent in the |sbe-short|\n   multiplanner.\n\n.. serverstatus:: query.multiPlanner.sbeNumReads\n\n   Aggregates the total number of reads done in the |sbe-short|\n   multiplanner.\n\n.. serverstatus:: query.multiPlanner.sbeCount\n\n   Aggregates the total number of invocations of the |sbe-short|\n   multiplanner.\n\n.. serverstatus::  query.multiPlanner.histograms.classicMicros\n\n   A histogram measuring the number of microseconds spent in an\n   invocation of the classic multiplanner.\n\n.. serverstatus:: query.multiPlanner.histograms.classicWorks\n\n   A histogram measuring the number of \"works\" performed during an\n   invocation of the classic multiplanner.\n\n.. serverstatus::  query.multiPlanner.histograms.classicNumPlans\n\n   A histogram measuring the number of plans in the candidate set during\n   an invocation of the classic multiplanner.\n\n.. serverstatus:: query.multiPlanner.histograms.sbeMicros\n\n   A histogram measuring the number of microseconds spent in an\n   invocation of the |sbe-short| multiplanner.\n\n.. serverstatus:: query.multiPlanner.histograms.sbeNumReads\n\n   A histogram measuring the number of reads during an invocation of the\n   |sbe-short| multiplanner.\n\n.. serverstatus:: query.multiPlanner.histograms.sbeNumPlans\n\n   A histogram measuring the number of plans in the candidate set during\n   an invocation of the |sbe-short| multiplanner.\n\n.. serverstatus:: query.queryFramework.aggregate\n\n   A document that reports on the number of aggregation operations run on each \n   :term:`query framework`. The subfields in ``query.queryFramework.aggregate``\n   indicate the number of times each framework was used to perform an \n   aggregation operation.\n\n.. serverstatus:: query.queryFramework.find\n\n   A document that reports on the number of find operations run on each \n   :term:`query framework`. The subfields in ``query.queryFramework.find`` \n   indicate the number of times each framework was used to perform a find \n   operation.\n\n.. serverstatus:: metrics.queryExecutor\n\n   A document that reports data from the query execution system.\n\n.. serverstatus:: metrics.queryExecutor.scanned\n\n   The total number of index items scanned during queries and\n   query-plan evaluation. This counter is the same as\n   :data:`~explain.executionStats.totalKeysExamined` in the output of\n   :method:`~cursor.explain()`.\n\n.. serverstatus:: metrics.queryExecutor.scannedObjects\n\n   The total number of documents scanned during queries and query-plan\n   evaluation. This counter is the same as\n   :data:`~explain.executionStats.totalDocsExamined` in the output of\n   :method:`~cursor.explain()`.\n\n.. serverstatus:: metrics.queryExecutor.collectionScans\n\n   A document that reports on the number of queries that performed a\n   collection scan.\n\n.. serverstatus:: metrics.queryExecutor.collectionScans.nonTailable\n\n   The number of queries that performed a collection scan that did not\n   use a :ref:`tailable cursor <tailable-cursors-landing-page>`.\n\n.. serverstatus:: metrics.queryExecutor.collectionScans.total\n\n   The total number queries that performed a collection scan. The total\n   consists of queries that did and did not use a :doc:`tailable cursor\n   </core/tailable-cursors>`.\n\n.. serverstatus:: metrics.record\n\n   A document that reports on data related to record allocation in the\n   on-disk memory files.\n\n.. _server-status-replnetworkqueue:\n.. _server-status-repl-network-queue:\n\n.. serverstatus:: metrics.repl\n\n   A document that reports metrics related to the replication process.\n   :serverstatus:`metrics.repl` document appears on all\n   :binary:`~bin.mongod` instances, even those that aren't members of\n   :term:`replica sets <replica set>`.\n\n.. serverstatus:: metrics.repl.apply\n\n   A document that reports on the application of operations from the\n   replication :term:`oplog`.\n\n.. serverstatus:: metrics.repl.apply.batchSize\n\n   The total number of oplog operations applied. The\n   :serverstatus:`metrics.repl.apply.batchSize` is incremented with the\n   number of operations in a batch at the batch boundaries instead of\n   being incremented by one after each operation.\n\n   For finer granularity, see :serverstatus:`metrics.repl.apply.ops`.\n\n.. serverstatus:: metrics.repl.apply.batches\n\n   :serverstatus:`metrics.repl.apply.batches` reports on the\n   oplog application process on :term:`secondaries <secondary>`\n   members of replica sets. See\n   :ref:`replica-set-internals-multi-threaded-replication` for more\n   information on the oplog application processes.\n\n.. serverstatus:: metrics.repl.apply.batches.num\n\n   The total number of batches applied across all databases.\n\n.. serverstatus:: metrics.repl.apply.batches.totalMillis\n\n   The total amount of time in milliseconds the :binary:`~bin.mongod` has\n   spent applying operations from the oplog.\n\n.. serverstatus:: metrics.repl.apply.ops\n\n   The total number of :term:`oplog` operations applied.\n   :serverstatus:`metrics.repl.apply.ops` is incremented after each\n   operation.\n\n   .. seealso::\n\n      :serverstatus:`metrics.repl.apply.batchSize`\n\n.. serverstatus:: metrics.repl.write\n\n   Document that reports on entries written to the oplog.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.write.batchSize\n\n   Total number of entries written to the oplog. This metric updates with the number\n   of entries in each batch as the member finishes writing the batch to the oplog.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.write.batches\n\n   Document that reports on the oplog writing process for secondary members.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.write.batches.num\n\n   Total number of batches written across all databases.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.write.batches.totalMillis\n\n   Total time in milliseconds the member has spent writing entries to the oplog.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer\n\n   MongoDB buffers oplog operations from the replication sync source\n   buffer before applying oplog entries in a\n   batch. :serverstatus:`metrics.repl.buffer` provides a way to\n   track oplog buffers. See\n   :ref:`replica-set-internals-multi-threaded-replication` for more\n   information on the oplog application process.\n\n   .. versionchanged:: 8.0\n\n   Starting in MongoDB 8.0, secondaries now update the local oplog and apply\n   changes to the database in parallel. For each batch of oplog entries, MongoDB\n   uses two buffers:\n\n   - The :serverstatus:`write <metrics.repl.buffer.write>` buffer receives\n     new oplog entries from the primary. The writer adds these entries to the\n     local oplog and sends them to the applier.\n\n   - The :serverstatus:`apply <metrics.repl.buffer.apply>` buffer receives new\n     oplog entries from the writer. The applier uses these entries to update\n     the local database.\n\n   This is a breaking change as it deprecates the older ``metrics.repl.buffer``\n   status metrics.\n\n.. serverstatus:: metrics.repl.buffer.apply\n\n   Provides information on the status of the oplog apply buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.apply.count\n\n   The current number of operations in the oplog apply buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.apply.maxCount\n\n   Maximum number of operations in the oplog apply buffer. :program:`mongod`\n   sets this value using a constant, which is not configurable.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.apply.maxSizeBytes\n\n   Maximum size of the apply buffer. :program:`mongod` sets this size using\n   a constant, which is not configurable.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.apply.sizeBytes\n\n   The current size of the contents of the oplog apply buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.count\n\n   .. deprecated:: 8.0\n\n   Starting in MongoDB 8.0, secondaries use separate buffers to write and apply\n   oplog entries. For the current number of operations in the oplog buffers, see the\n   :serverstatus:`apply.count <metrics.repl.buffer.apply.count>` or\n   :serverstatus:`write.count <metrics.repl.buffer.write.count>` status metrics.\n\n.. serverstatus:: metrics.repl.buffer.maxSizeBytes\n\n   .. deprecated:: 8.0\n\n   Starting in MongoDB 8.0, secondaries use separate buffers to write and\n   apply oplog entries. For the maximum size of the buffers, see the\n   :serverstatus:`apply.maxSizeBytes <metrics.repl.buffer.apply.maxSizeBytes>` or\n   :serverstatus:`write.maxSizeBytes <metrics.repl.buffer.write.maxSizeBytes>`\n   status metrics.\n\n.. serverstatus:: metrics.repl.buffer.sizeBytes\n\n   .. deprecated:: 8.0\n\n   Starting in MongoDB 8.0, secondaries use separate buffers to write and apply\n   oplog entries. For the current size of the oplog buffers, see the\n   :serverstatus:`apply.sizeBytes <metrics.repl.buffer.apply.sizeBytes>` or\n   :serverstatus:`write.sizeBytes <metrics.repl.buffer.write.sizeBytes>` status metrics.\n\n.. serverstatus:: metrics.repl.buffer.write\n\n   Provides information on the status of the oplog write buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.write.count\n\n   The current number of operations in the oplog write buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.write.maxSizeBytes\n\n   Maximum size of the write buffer. :program:`mongod` sets this value\n   using a constant, which is not configurable.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.buffer.write.sizeBytes\n\n   The current size of the contents of the oplog write buffer.\n\n   .. versionadded:: 8.0\n\n.. serverstatus:: metrics.repl.network\n\n   :serverstatus:`metrics.repl.network` reports network use by\n   the replication process.\n\n.. serverstatus:: metrics.repl.network.bytes\n\n   :serverstatus:`metrics.repl.network.bytes` reports the total\n   amount of data read from the replication sync source.\n\n.. serverstatus:: metrics.repl.network.getmores\n\n   :serverstatus:`metrics.repl.network.getmores` reports on the\n   ``getmore`` operations, which are requests for additional results\n   from the oplog :term:`cursor` as part of the oplog replication\n   process.\n\n   .. TODO move the documentation of getmore into some central place\n\n.. serverstatus:: metrics.repl.network.getmores.num\n\n   :serverstatus:`metrics.repl.network.getmores.num` reports the\n   total number of ``getmore`` operations, which are operations that\n   request an additional set of operations from the replication sync\n   source.\n\n.. serverstatus:: metrics.repl.network.getmores.totalMillis\n\n   :serverstatus:`metrics.repl.network.getmores.totalMillis`\n   reports the total amount of time required to collect data from\n   ``getmore`` operations.\n\n   .. note::\n\n      This number can be quite large, as MongoDB will wait for more\n      data even if the ``getmore`` operation does not initial return\n      data.\n\n.. serverstatus:: metrics.repl.network.getmores.numEmptyBatches\n\n   The number of empty ``oplog`` batches a secondary receives from its\n   sync source. A secondary receives an empty batch if it is fully\n   synced with its source and either:\n\n   - The ``getmore`` times out waiting for more data, or\n\n   - The sync source's majority commit point has advanced since the\n     last batch sent to this secondary.\n\n   For a primary, if the instance was previously a secondary, the\n   number reports on the empty batches received when it was a\n   secondary. Otherwise, for a primary, this number is ``0``.\n\n.. serverstatus:: metrics.repl.network.notPrimaryLegacyUnacknowledgedWrites\n\n   The number of unacknowledged (``w: 0``) legacy write operations (see\n   :ref:`wp-request-opcodes`) that failed because the current\n   :binary:`~bin.mongod` is not in :replstate:`PRIMARY` state.\n\n.. serverstatus:: metrics.repl.network.notPrimaryUnacknowledgedWrites\n\n   The number of unacknowledged (``w: 0``) write operations that failed\n   because the current :binary:`~bin.mongod` is not in\n   :replstate:`PRIMARY` state.\n\n.. serverstatus:: metrics.repl.network.oplogGetMoresProcessed\n\n   A document that reports the number of :dbcommand:`getMore`\n   commands to fetch the :term:`oplog` that a node processed as a sync\n   source.\n\n.. serverstatus:: metrics.repl.network.oplogGetMoresProcessed.num\n\n   The number of :dbcommand:`getMore` commands to fetch the\n   :term:`oplog` that a node processed as a sync source.\n\n.. serverstatus:: metrics.repl.network.oplogGetMoresProcessed.totalMillis\n\n   The time, in milliseconds, that a node spent processing the\n   :dbcommand:`getMore` commands counted in\n   :serverstatus:`metrics.repl.network.oplogGetMoresProcessed.num`. \n\n.. serverstatus:: metrics.repl.network.ops\n\n   The total\n   number of operations read from the replication source.\n\n.. serverstatus:: metrics.repl.network.readersCreated\n\n   The total number of oplog query processes created. MongoDB will\n   create a new oplog query any time an error occurs in the\n   connection, including a timeout, or a network\n   operation. Furthermore,\n   :serverstatus:`metrics.repl.network.readersCreated` will\n   increment every time MongoDB selects a new source for replication.\n\n.. serverstatus:: metrics.repl.network.replSetUpdatePosition\n\n   A document that reports the number of ``replSetUpdatePosition``\n   commands a node sent to its sync source.\n\n.. serverstatus:: metrics.repl.network.replSetUpdatePosition.num\n\n   The number of ``replSetUpdatePosition`` commands a node sent\n   to its sync source. ``replSetUpdatePosition`` commands are internal\n   replication commands that communicate replication progress from\n   nodes to their sync sources.\n\n   .. note::\n\n      Replica set members in the :replstate:`STARTUP2` state do not send\n      the ``replSetUpdatePosition`` command to their sync source.\n\n.. serverstatus:: metrics.repl.reconfig\n\n   A document containing the number of times that member ``newlyAdded``\n   fields were automatically removed by the primary. When a member is\n   first added to the replica set, the member's ``newlyAdded`` field is\n   set to ``true``.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.repl.reconfig.numAutoReconfigsForRemovalOfNewlyAddedFields\n\n   The number of times that ``newlyAdded`` member fields were\n   automatically removed by the primary. When a member is first added to\n   the replica set, the member's ``newlyAdded`` field is set to\n   ``true``. After the primary receives the member's heartbeat response\n   indicating the member state is :replstate:`SECONDARY`,\n   :replstate:`RECOVERING`, or :replstate:`ROLLBACK`, the primary\n   automatically removes the member's ``newlyAdded`` field. The\n   ``newlyAdded`` fields are stored in the :data:`local.system.replset`\n   collection.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.repl.stateTransition\n\n   Information on user operations when the member undergoes one of the\n   following transitions that can stop user operations:\n\n   - The member steps up to become a primary.\n\n   - The member steps down to become a secondary.\n\n   - The member is actively performing a rollback.\n\n.. serverstatus:: metrics.repl.stateTransition.lastStateTransition\n\n   The transition being reported:\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State Change\n        - Description\n\n      * - ``\"stepUp\"``\n\n        - The member steps up to become a primary.\n\n      * - ``\"stepDown\"``\n        - The member steps down to become a secondary.\n\n      * - ``\"rollback\"``\n\n        - The member is actively performing a rollback.\n\n      * - ``\"\"``\n\n        - The member has not undergone any state changes.\n\n.. serverstatus:: metrics.repl.stateTransition.totalOperationsKilled\n\n   The total number of operations stopped during the\n   :binary:`~bin.mongod` instance's state change.\n\n   .. versionadded:: 7.3\n\n      ``totalOperationsKilled`` replaces \n      :serverstatus:`~metrics.repl.stateTransition.userOperationsKilled`\n\n.. serverstatus:: metrics.repl.stateTransition.totalOperationsRunning\n\n   The total number of operations that remained running during the\n   :binary:`~bin.mongod` instance's state change.\n\n   .. versionadded:: 7.3\n\n      ``totalOperationsRunning`` replaces\n      :serverstatus:`~metrics.repl.stateTransition.userOperationsRunning`\n\n.. serverstatus:: metrics.repl.stateTransition.userOperationsKilled\n\n   .. deprecated:: 7.3\n\n      :serverstatus:`~metrics.repl.stateTransition.totalOperationsKilled`\n      replaces ``userOperationsKilled``.\n\n.. serverstatus:: metrics.repl.stateTransition.userOperationsRunning\n\n   .. deprecated:: 7.3\n\n      :serverstatus:`~metrics.repl.stateTransition.totalOperationsRunning`\n      replaces ``userOperationsRunning``.\n\n.. serverstatus:: metrics.repl.syncSource\n\n   Information on a replica set node's\n   :ref:`sync source selection <replica-set-sync>` process.\n\n.. serverstatus:: metrics.repl.syncSource.numSelections\n\n   Number of times a node attempted to choose a node to sync from among\n   the available sync source options. A node attempts to choose a node\n   to sync from if, for example, the sync source is re-evaluated or the\n   node receives an error from its current sync source.\n\n.. serverstatus:: metrics.repl.syncSource.numTimesChoseSame\n\n   Number of times a node kept its original sync source after\n   re-evaluating if its current sync source was optimal.\n\n.. serverstatus:: metrics.repl.syncSource.numTimesChoseDifferent\n\n   Number of times a node chose a new sync source after re-evaluating if\n   its current sync source was optimal.\n\n.. serverstatus:: metrics.repl.syncSource.numTimesCouldNotFind\n\n   Number of times a node could not find an available sync source when\n   attempting to choose a node to sync from.\n\n.. serverstatus:: metrics.repl.waiters.replication\n\n   The number of threads waiting for replicated or journaled :ref:`write concern\n   acknowledgments <wc-ack-behavior>`.\n\n   .. versionadded:: 7.3\n\n.. serverstatus:: metrics.repl.waiters.opTime\n\n   The number of threads queued for local replication :term:`optime` assignments.\n\n   .. versionadded:: 7.3\n\n.. serverstatus:: metrics.storage.freelist.search.bucketExhausted\n\n   The number of times that :binary:`~bin.mongod` has examined the free\n   list without finding a large record allocation.\n\n.. serverstatus:: metrics.storage.freelist.search.requests\n\n   The number of times :binary:`~bin.mongod` has searched for available\n   record allocations.\n\n.. serverstatus:: metrics.storage.freelist.search.scanned\n\n   The number of available record allocations :binary:`~bin.mongod` has\n   searched.\n\n.. serverstatus:: metrics.ttl\n\n   A document that reports on the operation of the resource use of the\n   :ref:`ttl index <ttl-collections>` process.\n\n.. serverstatus:: metrics.ttl.deletedDocuments\n\n   The total number of documents deleted from collections with a\n   :ref:`ttl index <ttl-collections>`.\n\n.. serverstatus:: metrics.ttl.passes\n\n   Number of passes performed by the TTL background process to check for\n   expired documents. A pass is complete when the TTL monitor has\n   deleted as many candidate documents as it can find from all TTL\n   indexes. For more information on the TTL index deletion process, see\n   :ref:`ttl-monitor-deletion-process`.\n\n.. serverstatus:: metrics.ttl.subPasses\n\n   Number of sub-passes performed by the TTL background process to check\n   for expired documents. For more information on the TTL index deletion\n   process, see :ref:`ttl-monitor-deletion-process`.\n\n.. _server-status-metrics-cursor:\n\n.. serverstatus:: metrics.cursor\n\n   A document that contains data regarding cursor state and use.\n\n.. serverstatus:: metrics.cursor.moreThanOneBatch\n\n   The total number of cursors that have returned more than one batch\n   since the server process started. Additional batches are retrieved\n   using the :dbcommand:`getMore` command.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.timedOut\n\n   The total number of cursors that have timed out since the server\n   process started. If this number is large or growing at a regular\n   rate, this may indicate an application error.\n\n.. serverstatus:: metrics.cursor.totalOpened\n\n   The total number of cursors that have been opened since the server\n   process started, including cursors currently open. Differs from\n   :serverstatus:`metrics.cursor.open.total`, which is the number of\n   currently open cursors only.\n\n   .. versionadded:: 5.0\n\n.. _server-status-metrics-cursor-lifespan:\n\n.. serverstatus:: metrics.cursor.lifespan\n\n   A document that reports the number of cursors that have lifespans\n   within specified time periods. The cursor lifespan is the time period\n   from when the cursor is created to when the cursor is killed using\n   the :dbcommand:`killCursors` command or the cursor has no remaining\n   objects in the :ref:`batch <cursor-batches>`.\n\n   The lifespan time periods are:\n\n   - < 1 second\n\n   - >= 1 second to < 5 seconds\n\n   - >= 5 seconds to < 15 seconds\n\n   - >= 15 seconds to < 30 seconds\n\n   - >= 30 seconds to < 1 minute\n\n   - >= 1 minute to < 10 minutes\n\n   - >= 10 minutes\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.greaterThanOrEqual10Minutes\n\n   The number of cursors with a lifespan >= 10 minutes.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan10Minutes\n\n   The number of cursors with a lifespan >= 1 minute to < 10 minutes.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan15Seconds\n\n   The number of cursors with a lifespan >= 5 seconds to < 15 seconds.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan1Minute\n\n   The number of cursors with a lifespan >= 30 seconds to < 1 minute.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan1Second\n\n   The number of cursors with a lifespan < 1 second.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan30Seconds\n\n   The number of cursors with a lifespan >= 15 seconds to < 30 seconds.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.lifespan.lessThan5Seconds\n\n   The number of cursors with a lifespan >= 1 second to < 5 seconds.\n\n   .. versionadded:: 5.0\n\n.. serverstatus:: metrics.cursor.open\n\n   A document that contains data regarding open cursors.\n\n.. serverstatus:: metrics.cursor.open.noTimeout\n\n   The number of open cursors with the option\n   :data:`DBQuery.Option.noTimeout` set to prevent timeout after a\n   period of inactivity.\n\n.. serverstatus:: metrics.cursor.open.pinned\n\n   The number of \"pinned\" open cursors.\n\n.. serverstatus:: metrics.cursor.open.total\n\n   The number of cursors that MongoDB is maintaining for clients.\n   Because MongoDB exhausts unused cursors, typically this value small\n   or zero. However, if there is a queue, or stale tailable cursors, or\n   a large number of operations this value may increase.\n\n.. serverstatus:: metrics.cursor.open.singleTarget\n\n   The total number of cursors that only target a *single* shard. Only\n   :binary:`~bin.mongos` instances report\n   :serverstatus:`metrics.cursor.open.singleTarget` values.\n\n.. serverstatus:: metrics.cursor.open.multiTarget\n\n   The total number of cursors that only target *more than one* shard.\n   Only :binary:`~bin.mongos` instances report\n   :serverstatus:`metrics.cursor.open.multiTarget` values.\n\n.. _server-status-mirroredReads:\n\nmirroredReads\n~~~~~~~~~~~~~\n\n|mongod-only|\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/serverStatus.txt"
  },
  {
    "code": "      :copyable: false\n\n      noShards : {\n         initiated : Long(\"0\"),\n         successful : Long(\"0\"),\n         successfulDurationMicros : Long(\"0\")\n      },\n      singleShard : {\n         initiated : Long(\"5\"),\n         successful : Long(\"5\"),\n         successfulDurationMicros : Long(\"203118\")\n      },\n      singleWriteShard : {\n         initiated : Long(\"0\"),\n         successful : Long(\"0\"),\n         successfulDurationMicros : Long(\"0\")\n      },\n      readOnly : {\n         initiated : Long(\"0\"),\n         successful : Long(\"0\"),\n         successfulDurationMicros : Long(\"0\")\n      },\n      twoPhaseCommit : {\n         initiated : Long(\"1\"),\n         successful : Long(\"1\"),\n         successfulDurationMicros : Long(\"179616\")\n      },\n      recoverWithToken : {\n         initiated : Long(\"0\"),\n         successful : Long(\"0\"),\n         successfulDurationMicros : Long(\"0\")\n      }\n\n   The types of commit are:\n\n   .. list-table::\n      :header-rows: 1\n      :widths: 20 80\n\n      * - Type\n        - Description\n\n      * - ``noShards``\n\n        - Commits of transactions that did not contact any shards.\n\n      * - ``singleShard``\n\n        - Commits of transactions that affected a single shard.\n\n      * - ``singleWriteShard``\n\n        - Commits of transactions that contacted multiple shards but\n          whose write operations only affected a single shard.\n\n      * - ``readOnly``\n\n        - Commits of transactions that only involved read operations.\n\n      * - ``twoPhaseCommit``\n\n        - Commits of transactions that included writes to multiple\n          shards\n\n      * - ``recoverWithToken``\n\n        - Commits that recovered the outcome of transactions from\n          another instance or after this instance was restarted.\n\n   For each commit type, the command returns the following metrics:\n\n   .. list-table::\n      :header-rows: 1\n      :widths: 20 80\n\n      * - Metrics\n        - Description\n\n      * - ``initiated``\n\n        - Total number of times that commits of this type were\n          initiated.\n\n      * - ``successful``\n\n        - Total number of times that commits of this type succeeded.\n\n      * - ``successfulDurationMicros``\n\n        - Total time, in microseconds, taken by successful commits of\n          this type.\n\n.. serverstatus:: transactions.totalPrepared\n\n   |mongod-only|\n\n   The total number of transactions in prepared state on this server\n   since the :binary:`mongod <bin.mongod>` process's last startup.\n\n.. serverstatus:: transactions.totalPreparedThenCommitted\n\n   |mongod-only|\n\n   The total number of transactions that were prepared and committed on\n   this server since the :binary:`mongod <bin.mongod>` process's last\n   startup.\n\n.. serverstatus:: transactions.totalPreparedThenAborted\n\n   |mongod-only|\n\n   The total number of transactions that were prepared and aborted on\n   this server since the :binary:`mongod <bin.mongod>` process's last\n   startup.\n\n.. serverstatus:: transactions.currentPrepared\n\n   |mongod-only|\n\n   The current number of transactions in prepared state on this server.\n\n.. serverstatus:: transactions.lastCommittedTransaction\n\n   |mongod-only|\n\n   The details of the last transaction committed when the\n   :binary:`mongod <bin.mongod>` is primary.\n\n   When returned from a secondary,\n   :serverstatus:`~transactions.lastCommittedTransaction` returns the\n   details of the last transaction committed when that secondary was a\n   primary.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/serverStatus.txt"
  },
  {
    "code": "      :copyable: false\n\n      lastCommittedTransaction : {\n         operationCount : Long(\"1\"),\n         oplogOperationBytes : Long(\"211\"),\n         writeConcern : {\n            w : \"majority\",\n            wtimeout : 0\n         }\n      }\n\n   .. list-table::\n      :header-rows: 1\n      :widths: 20 80\n\n      * - Metrics\n        - Description\n\n      * - ``operationCount``\n        - The number of write operations in the transaction.\n\n      * - ``oplogOperationBytes``\n\n        - The size of the corresponding oplog entry or entries for\n          the transaction. [#oplog-change]_\n\n      * - ``writeConcern``\n        - The write concern used for the transaction.\n\n.. [#oplog-change]\n\n   MongoDB creates as many oplog entries as necessary to encapsulate all write \n   operations in a transaction. See :ref:`txn-oplog-size-limit` for details.\n\n\ntransportSecurity\n~~~~~~~~~~~~~~~~~\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/serverStatus.txt"
  },
  {
    "code": "   .. copyable: false\n\n   {\n      \"atype\" : \"createCollection\",\n      \"ts\" : { \"$date\" : \"2021-08-09T13:45:05.372+00:00\" },\n      \"uuid\" : { \"$binary\" : \"RKU/YLizS6K9se2GUU7ZVQ==\", \"$type\" : \"04\" },\n      \"local\" : { \"ip\" : \"127.0.0.1\", \"port\" : 27502 },\n      \"remote\" : { \"ip\" : \"127.0.0.1\", \"port\" : 51918 },\n      \"users\" : [],\n      \"roles\" : [],\n      \"param\" : { \"ns\" : \"sales.inventory\" },\n      \"result\" : 0\n   }\n\nWhen the ``inventory`` collection is dropped from the ``sales``\ndatabase, the audit system will log a message like this:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setAuditConfig.txt"
  },
  {
    "code": "   .. copyable: false\n\n   {\n      \"atype\" : \"dropCollection\",\n      \"ts\" : { \"$date\" : \"2021-08-09T13:45:00.661+00:00\" },\n      \"uuid\" : { \"$binary\" : \"0gle4/pSQli+LUcz43ykag==\", \"$type\" : \"04\" },\n      \"local\" : { \"ip\" : \"127.0.0.1\", \"port\" : 27502 },\n      \"remote\" : { \"ip\" : \"127.0.0.1\", \"port\" : 51928 },\n      \"users\" : [],\n      \"roles\" : [],\n      \"param\" : { \"ns\" : \"sales.inventory\" },\n      \"result\" : 0\n   }\n\nAudit Document Interactions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSet :parameter:`auditAuthorizationSuccess` to ``true`` and create a\nfilter which includes actions of interest to audit read and write\noperations.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setAuditConfig.txt"
  },
  {
    "code": "   .. copyable: false\n\n   {\n      \"atype\" : \"authCheck\",\n      \"ts\" : { \"$date\" : \"2021-08-09T15:28:10.788+00:00\" },\n      \"uuid\" : { \"$binary\" : \"ngwRt5CRTZqgE4TsfleoqQ==\", \"$type\" : \"04\" },\n      \"local\" : { \"ip\" : \"127.0.0.1\", \"port\" : 27502 },\n      \"remote\" : { \"ip\" : \"127.0.0.1\", \"port\" : 51930 },\n      \"users\" : [],\n      \"roles\" : [],\n      \"param\" : {\n         \"command\" : \"find\",\n         \"ns\" : \"sales.inventory\",\n         \"args\" : {\n            \"find\" : \"inventory\",\n            \"filter\" : { \"widget\" : 1 },\n            \"lsid\" : { \"id\" : { \"$binary\" : \"FNWNxiitQ8GHKrHx8eJSbg==\", \"$type\" : \"04\" } },\n            \"$clusterTime\" : { \"clusterTime\" : { \"$timestamp\" : { \"t\" : 1628521381, \"i\" : 1 } },\n            \"signature\" : { \"hash\" : { \"$binary\" : \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\", \"$type\" : \"00\" },\n            \"keyId\" : { \"$numberLong\" : \"0\" } } },\n            \"$db\" : \"sales\"\n         }\n      },\n      \"result\" : 0\n   }\n\n.. seealso::\n\n   - :method:`db.adminCommand`\n   - :dbcommand:`getAuditConfig`\n   - :ref:`configure audit filters <audit-filter>`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setAuditConfig.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"defaultWriteConcern\" : {\n      \"w\" : 2\n     },\n     \"updateOpTime\" : Timestamp(1586290895, 1),\n     \"updateWallClockTime\" : ISODate(\"2020-04-07T20:21:41.849Z\"),\n     \"localUpdateWallClockTime\" : ISODate(\"2020-04-07T20:21:41.862Z\"),\n     \"ok\" : 1,\n     \"$clusterTime\" : { ... }\n     \"operationTime\" : Timestamp(1586290925, 1)\n   }\n\nSet Global Default Read Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation sets the global read concern to \n:readconcern:`\"majority\"`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setDefaultRWConcern.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"defaultReadConcern\" : {\n       \"level\" : \"majority\"\n     },\n     \"updateOpTime\" : Timestamp(1586290895, 1),\n     \"updateWallClockTime\" : ISODate(\"2020-04-07T20:21:41.849Z\"),\n     \"localUpdateWallClockTime\" : ISODate(\"2020-04-07T20:21:41.862Z\"),\n     \"ok\" : 1,\n     \"$clusterTime\" : { ... }\n     \"operationTime\" : Timestamp(1586290925, 1)\n   }\n\n.. _set_global_default_write_concern:\n\nSet Global Default Read and Write Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation sets the global default read and write concern\nto the following:\n\n- :writeconcern:`w: 2 <\\<number\\>>` write concern\n- :readconcern:`level: \"majority\" <\"majority\">` read concern.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setDefaultRWConcern.txt"
  },
  {
    "code": "   :copyable: false\n\n   \"defaultWriteConcern\" : {\n     \"w\" : 2\n   },\n   \"defaultReadConcern\" : {\n     \"level\" : \"majority\"\n   }\n\nUnset Global Default Read and Write Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can:\n\n- Unset the global default read concern.\n- Only unset the global default write concern if you haven't already\n  set it.\n\nFor example, assume the global default read concern is set to\n:readconcern:`level: \"majority\" <\"majority\">`. To unset the global\ndefault read concern, use an empty document ``{}``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setDefaultRWConcern.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      defaultReadConcern: { level: 'local' },\n      defaultWriteConcern: { w: 2, wtimeout: 0 },\n      updateOpTime: Timestamp({ t: 1656696934, i: 1 }),\n      updateWallClockTime: ISODate(\"2022-07-01T17:35:40.578Z\"),\n      defaultWriteConcernSource: 'global',\n      defaultReadConcernSource: 'implicit',\n      localUpdateWallClockTime: ISODate(\"2022-07-01T17:35:40.578Z\"),\n      ok: 1,\n      '$clusterTime': {\n         ...\n      },\n      operationTime: Timestamp({ t: 1656632593, i: 1 })\n   }\n\nYou can only unset the global default write concern if you haven't\nalready set it.\n\nTo unset the global default write concern, use an empty document ``{}``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setDefaultRWConcern.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: The global default write concern cannot be unset\n   once it is set.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setDefaultRWConcern.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 11-17\n\n         queryPlanner: {\n            winningPlan: {\n              stage: 'SINGLE_SHARD',\n              shards: [\n                {\n                  explainVersion: '1',\n                  ...\n                  namespace: 'test.pizzaOrders',\n                  indexFilterSet: false,\n                  parsedQuery: { orderDate: { '$gt': ISODate('2023-01-20T00:00:00.000Z') } },\n                  querySettings: {\n                    indexHints: {\n                      ns: { db: 'test', coll: 'pizzaOrders' },\n                      allowedIndexes: [ 'orderDate_1' ]\n                    },\n                    queryFramework: 'classic',\n                    comment: 'Index hint for orderDate_1 index to improve query performance'\n                  },\n                  ...\n                }\n              ...\n              ]\n            }\n         }\n\n   .. step:: (Optional) Run the query\n\n      The following example runs the query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setQuerySettings.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n            {\n               _id: 0,\n               type: 'pepperoni',\n               size: 'small',\n               price: 19,\n               totalNumber: 10,\n               orderDate: ISODate('2023-03-13T08:14:30.000Z')\n            },\n            {\n               _id: 5,\n               type: 'cheese',\n               size: 'large',\n               price: 14,\n               totalNumber: 10,\n               orderDate: ISODate('2024-01-12T05:08:13.000Z')\n            },\n            {\n               _id: 3,\n               type: 'cheese',\n               size: 'small',\n               price: 12,\n               totalNumber: 15,\n               orderDate: ISODate('2023-03-13T11:21:39.736Z')\n            },\n            {\n               _id: 1,\n               type: 'pepperoni',\n               size: 'medium',\n               price: 20,\n               totalNumber: 20,\n               orderDate: ISODate('2023-03-13T09:13:24.000Z')\n            },\n            {\n               _id: 2,\n               type: 'pepperoni',\n               size: 'large',\n               price: 21,\n               totalNumber: 30,\n               orderDate: ISODate('2023-03-17T09:22:12.000Z')\n            },\n            {\n               _id: 4,\n               type: 'cheese',\n               size: 'medium',\n               price: 13,\n               totalNumber: 50,\n               orderDate: ISODate('2024-01-12T21:23:13.331Z')\n            }\n         ]\n\n   .. step:: (Optional) Obtain the query settings\n\n      The following example uses a :pipeline:`$querySettings` stage in\n      an aggregation pipeline to obtain the query settings:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setQuerySettings.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3\n\n         [\n            {\n               queryShapeHash: 'AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1',\n               settings: {\n                  indexHints: [\n                     {\n                        ns: { db: 'test', coll: 'pizzaOrders' },\n                        allowedIndexes: [ 'orderDate_1' ]\n                     }\n                  ],\n                  queryFramework: 'classic',\n                  comment: 'Index hint for orderDate_1 index to improve query performance'\n               },\n               representativeQuery: {\n                  find: 'pizzaOrders',\n                  filter: { orderDate: { '$gt': ISODate('2023-01-20T00:00:00.000Z') } },\n                  sort: { totalNumber: 1 },\n                  '$db': 'test'\n               }\n            }\n         ]\n\n   .. step:: Add query settings for a distinct command\n\n      The following example adds query settings for a\n      :dbcommand:`distinct` command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/setQuerySettings.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.adminCommand( { \n      transitionFromDedicatedConfigServer: 1\n   } )\n\nBehavior\n--------\n\nThe ``transitionFromDedicatedConfigServer`` command adds the config \nserver as a shard in the cluster. Internally, \n``transitionFromDedicatedConfigServer`` runs the ``addShard`` command. \n\n.. include:: /includes/confirm-sharded-cluster-config-server-intro.rst\n\nFor details, see :ref:`<confirm-use-of-config-shard>`.\n\nIf you must downgrade the :ref:`feature compatibility version\n<view-fcv>` below 8.0, first run the \n:dbcommand:`transitionToDedicatedConfigServer` command. For downgrade\ndetails, see\n:ref:`sharded-cluster-config-server-config-shards-downgrade`.\n\nAccess Control\n--------------\n\nIf access control is enabled, the\n``transitionFromDedicatedConfigServer`` command requires the\n:authaction:`transitionFromDedicatedConfigServer` authorization action\nfor the :ref:`cluster <resource-document>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/transitionFromDedicatedConfigServer.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      resource: { cluster : true },\n      actions: [ \"transitionFromDedicatedConfigServer\" ]\n   }\n\nThe :authrole:`clusterManager` role has\n``transitionFromDedicatedConfigServer`` authorization action and can be\nassigned to a user.\n\n.. include:: /includes/config-shard-add-role.rst\n\nExample\n-------\n\nThe following example configures a dedicated config server to run as a\nconfig shard: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/transitionFromDedicatedConfigServer.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.adminCommand( { \n      transitionToDedicatedConfigServer: 1\n   } )\n\nBehavior\n--------\n\nThe ``transitionToDedicatedConfigServer`` command moves application data \nfrom the config shard to the other shards in the same way that  \n:dbcommand:`removeShard` moves data. The balancer moves sharded \ncollection data to other eligible shards in the cluster. You must \nmove unsharded collection data and databases to a shard of your choice \nin the cluster. For the procedure to remove a config shard, see \n:ref:`Remove Shards from a Sharded Cluster \n<remove-shards-from-cluster-tutorial>`.\n\nInternally, ``transitionToDedicatedConfigServer`` runs the\n``removeShard`` command. ``transitionToDedicatedConfigServer``\nreturns the same response as ``removeShard``. The response after a\nsuccessful data move contains ``state: \"completed\"``. For full response\ndetails and examples, see :ref:`removeShard Example \n<removeShard-examples>`. Review the :dbcommand:`removeShard` \ndocumentation before running ``transitionToDedicatedConfigServer`` to \nunderstand how it may affect your deployment.\n\nIf you run ``transitionToDedicatedConfigServer`` twice and the shard\ndata is currently moving to other shards, the second run of\n``transitionToDedicatedConfigServer`` returns the current status of the\ndata move. ``transitionToDedicatedConfigServer`` returns the same \nresponse as ``removeShard``. \n\nAfter ``transitionToDedicatedConfigServer`` completes the data move, the\nconfig server is a dedicated config server and is no longer a config\nshard.\n\nAccess Control\n--------------\n\nIf access control is enabled, the\n``transitionToDedicatedConfigServer`` command requires the\n:authaction:`transitionToDedicatedConfigServer` authorization action\nfor the :ref:`cluster <resource-document>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/transitionToDedicatedConfigServer.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      resource: { cluster : true },\n      actions: [ \"transitionToDedicatedConfigServer\" ]\n   }\n\nThe :authrole:`clusterManager` role has\n``transitionToDedicatedConfigServer`` authorization action and can be\nassigned to a user.\n\n.. include:: /includes/config-shard-add-role.rst\n\nExample\n-------\n\nThe following example configures a config shard to run as a dedicated\nconfig server:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/transitionToDedicatedConfigServer.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"ok\" : 1,\n      \"nModified\" : 0,\n      \"n\" : 1,\n      \"upserted\" : [\n         {\n            \"index\" : 0,\n            \"_id\" : ObjectId(\"52ccb2118908ccd753d65882\")\n         }\n      ]\n   }\n\nFor details of the output fields, see :ref:`update-command-output`.\n\nAccess Control\n--------------\n\nOn deployments running with :setting:`~security.authorization`, the\nuser must have access that includes the following privileges:\n\n- :authaction:`update` action on the specified collection(s).\n\n- :authaction:`find` action on the specified collection(s).\n\n- :authaction:`insert` action on the specified collection(s).\n\nThe built-in role :authrole:`readWrite` provides the required\nprivileges.\n\n.. _update-command-behaviors:\n\nBehavior\n--------\n\n.. _update-command-behaviors-update-expressions:\n\nUpdate with an Update Operator Expressions Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe update statement field :ref:`u <update-command-u>` can accept a\ndocument that only contains :ref:`update operator <update-operators>`\nexpressions. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n   :copyable: false\n\n   updates: [\n      {\n        q: <query>,\n        u: { $set: { status: \"D\" }, $inc: { quantity: 2 } },\n         ...\n      },\n      ...\n   ]\n\nThen, the :dbcommand:`update` command updates only the corresponding\nfields in the document.\n\n.. _update-command-behaviors-replacement-document:\n\nUpdate with a Replacement Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe update statement field :ref:`u <update-command-u>` field can accept\na replacement document, i.e. the document contains *only*\n``field:value`` expressions. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n   :copyable: false\n\n   updates: [\n      {\n         q: <query>,\n         u: { status: \"D\", quantity: 4 },\n         ...\n      },\n      ...\n   ]\n\nThen the :dbcommand:`update` command *replaces* the matching document\nwith the update document. The :dbcommand:`update` command can only\nreplace a *single* matching document; i.e. the ``multi`` field cannot\nbe ``true``. The :dbcommand:`update` command *does not* replace the\n``_id`` value.\n\n.. _multi-update-failures:\n\nMulti-Update Failures\n~~~~~~~~~~~~~~~~~~~~~\n\nIf a single document fails to update in an update command with the \n``multi`` parameter set to ``true``, no further documents\nupdate as part of that command. \n\nFor example, create a ``members`` collection with the following documents: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id: 1, member: 'Taylor', status: 'A', points: 2 }\n   { _id: 2, member: 'Alexis', status: 'D', points: 59 }\n   { _id: 3, member: 'Elizabeth', status: 'C', points: 34 }\n\nThe update command updated the ``points`` value of the first document \nbut failed to update the second document because of the validator rule \nthat the ``points`` value can not equal ``60``. The third document did\nnot update because no further documents update following a write error. \n\n.. note::\n\n   .. include:: /includes/multi-update-nModified-clarification.rst\n\n.. _update-command-behaviors-aggregation-pipeline:\n\nUpdate with an Aggregation Pipeline\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe update statement field :ref:`u <update-command-u>` field can accept an \n:ref:`aggregation pipeline <aggregation-pipeline>` \n``[ <stage1>, <stage2>, ... ]`` that specifies the modifications to perform. \nThe pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :emphasize-lines: 4-7\n   :copyable: false\n\n   updates: [\n      {\n         q: <query>,\n         u: [ \n           { $set: { status: \"Modified\", comments: [ \"$misc1\", \"$misc2\" ] } }, \n           { $unset: [ \"misc1\", \"misc2\" ] } \n         ],\n         ...\n      },\n      ...\n   ]\n\n.. note::\n\n   The ``$set`` and ``$unset`` used in the pipeline refers to the\n   aggregation stages :pipeline:`$set` and :pipeline:`$unset`\n   respectively, and not the update operators :update:`$set` and :update:`$unset`.\n\nFor examples, see :ref:`update-command-example-agg`.\n\n.. _update-command-behaviors-unique-index:\n\nUpsert with Unique Index\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/upsert-unique-index-update-command.rst\n\nLimits\n~~~~~~\n\nFor each update element in the ``updates`` array, the sum of the query\nand the update sizes (i.e. ``q`` and ``u`` ) must be less than or equal\nto the :limit:`maximum BSON document size <BSON Document Size>`.\n\nThe total number of update statements in the ``updates`` array must be\nless than or equal to the :limit:`maximum bulk size\n<Write Command Batch Limit Size>`.\n\nDocument Validation\n~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/bypassDocumentValidation-update.rst\n\nSharded Collections\n~~~~~~~~~~~~~~~~~~~\n\n.. _cmd-update-sharded-upsert:\n\n``upsert`` on a Sharded Collection\n``````````````````````````````````\n\nTo use :dbcommand:`update` with ``multi: false`` on a sharded\ncollection,\n\n- If you do not specify :ref:`upsert: true <update-command-upsert>`,\n  the filter :ref:`q <update-command-q>` must either include an\n  equality match on the ``_id`` field or target a single shard (such as\n  by including the shard key).\n\n- If you specify :ref:`upsert: true <update-command-upsert>`, the\n  filter :ref:`q <update-command-q>` must include an equality match on the\n  shard key.\n\n  .. include:: /includes/extracts/missing-shard-key-equality-condition-update.rst\n\nReplace Document\n````````````````\n\nWhen replacing a document, :dbcommand:`update`  attempts to target a shard, \nfirst by using the query filter. If the operation cannot target a single shard \nby the query filter, it then attempts to target by the replacement document.\n\n.. _command-update-shard-key-modification:\n\nShard Key Modification\n``````````````````````\n\n.. include:: /includes/limits-sharding-shardkey-document-immutable.rst\n\nTo modify the **existing** shard key value with\n:dbcommand:`update`:\n\n- You :red:`must` run on a :binary:`~bin.mongos`. Do :red:`not`\n  issue the operation directly on the shard.\n\n- You :red:`must` run either in a :doc:`transaction\n  </core/transactions>` or as a :doc:`retryable write\n  </core/retryable-writes>`.\n\n- You :red:`must` specify ``multi: false``.\n\n- You :red:`must` include an equality :ref:`query filter\n  <update-command-q>` on the full shard key.\n\n.. tip::\n\n   .. include:: /includes/extracts/missing-shard-key-equality-condition-abridged.rst\n\nSee also :ref:`cmd-update-sharded-upsert`.\n\n.. _cmd-update-missing-shard-key:\n\nMissing Shard Key\n`````````````````\n\nDocuments in a sharded collection can be\n:ref:`missing the shard key fields <shard-key-missing>`. To use\n:dbcommand:`update` to set the document's\n**missing** shard key, you :red:`must` run on a\n:binary:`~bin.mongos`. Do :red:`not` issue the operation directly on\nthe shard.\n\nIn addition, the following requirements also apply:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Task\n\n     - Requirements\n\n   * - To set to ``null``\n\n     - - Can specify ``multi: true``.\n\n       - Requires equality filter on the full shard key if ``upsert:\n         true`` is specified.\n\n   * - To set to a non-``null`` value:\n\n     - - :red:`Must` be performed either inside a :doc:`transaction\n         </core/transactions>` or as a :doc:`retryable write\n         </core/retryable-writes>`.\n\n       - :red:`Must` specify ``multi: false``.\n\n       - Requires equality filter on the full shard key if either:\n\n         - ``upsert: true``, or\n\n         - if using a replacement document and the new shard key\n           value belongs to a different shard.\n\n.. tip::\n\n   .. include:: /includes/extracts/missing-shard-key-equality-condition-abridged.rst\n\nSee also:\n\n- :ref:`method-update-sharded-upsert`\n\n- :ref:`shard-key-missing`\n\nTransactions\n~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-supported-operation.rst\n\n.. include:: /includes/extracts/transactions-usage.rst\n\nUpsert within Transactions\n``````````````````````````\n\n.. include:: /includes/extracts/transactions-upsert-availability.rst\n\nWrite Concerns and Transactions\n````````````````````````````````\n\n.. include:: /includes/extracts/transactions-operations-write-concern.rst\n\n.. |operation| replace:: :dbcommand:`update`\n\nExamples\n--------\n\nUpdate Specific Fields of One Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse :ref:`update operators <update-operators>` to update only the\nspecified fields of a document.\n\nFor example, create a ``members`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"n\" : 1, \"nModified\" : 1, \"ok\" : 1, <additional fields if run on a replica set/sharded cluster> }\n\nSee :ref:`update-command-output` for details.\n\nAfter the command, the collection contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"n\" : 2, \"nModified\" : 2, \"ok\" : 1,  <additional fields if run on a replica set/sharded cluster> }\n\nSee :ref:`update-command-output` for details.\n\nAfter the command, the collection contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"n\" : 2, \"nModified\" : 2, \"ok\" : 1, <additional fields if run on a replica set/sharded cluster> }\n\nSee :ref:`update-command-output` for details.\n\nAfter the command, the collection contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"n\" : 3, \"nModified\" : 3, \"ok\" : 1, <additional fields if run on a replica set/sharded cluster> }\n\nAfter the command, the collection contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :emphasize-lines: 2-3\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 100, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6,12-14\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [\n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 }\n      ]\n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 100, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 100, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 }\n      ]\n   }\n\n.. _ex-update-command-hint:\n\nSpecify ``hint`` for Update Operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``members`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/update.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      ok: 1\n   }\n\n.. important::\n\n   The response field ``ok: 1`` indicates that the command was successful.\n   However, there may be a delay between when you receive the response and\n   when the updated index is ready and replaces the original index.\n\n   To see the status of your search indexes, use the\n   :pipeline:`$listSearchIndexes` aggregation stage.\n\nExample\n-------\n\nThe following example updates a search index named ``searchIndex01`` on\nthe ``contacts`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/updateSearchIndex.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.getSiblingDB(\"products\").runCommand ( {\n      usersInfo: \"accountAdmin01\",\n      showCustomData: false \n   } )\n\nExample output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/usersInfo.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      users: [\n         {\n            _id: 'products.accountAdmin01',\n            userId: UUID(\"0955afc1-303c-4683-a029-8e17dd5501f4\"),\n            user: 'accountAdmin01',\n            db: 'products',\n            roles: [ { role: 'readWrite', db: 'products' } ],\n            mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]\n         }\n      ],\n      ok: 1\n   }\n\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/usersInfo.txt"
  },
  {
    "code": "      :copyable: false\n      \n      \"keysPerIndex\" : {\n         \"_id_\" : <num>,\n         \"<index2_name>\" : <num>,\n         ...\n      }\n\n   :data:`~validate.keysPerIndex` identifies the index by its name only. \n\n.. data:: validate.indexDetails\n   \n   A document that contains the status of the index validation for each\n   index.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :copyable: false\n\n      \"indexDetails\" : {\n         \"_id_\" : {\n            \"valid\" : <boolean>\n         },\n         \"<index2_name>\" : {\n            \"valid\" : <boolean>  \n         },\n         ...\n      }\n\n   - :data:`~validate.indexDetails` identifies the specific index (or\n     indexes) that is invalid. Earlier versions of MongoDB would mark\n     all indexes as invalid, if any of the indexes were invalid.\n\n   - :data:`~validate.indexDetails` identifies the index by its name\n     only. Earlier versions of MongoDB displayed the full namespace of\n     the index; i.e. ``<db>.<collection>.$<index_name>``.\n\n.. data:: validate.ns\n\n   The full namespace name of the collection. Namespaces include the\n   database name and the collection name in the form\n   ``database.collection``.\n\n.. data:: validate.valid\n\n   A boolean that is ``true`` if :dbcommand:`validate` determines that\n   all aspects of the collection are valid. When ``false``, see the\n   :data:`~validate.errors` field for more information.\n\n.. data:: validate.repaired\n\n   A boolean that is ``true`` if :dbcommand:`validate` repaired the\n   collection.\n\n.. data:: validate.warnings\n\n   An array that contains warning messages, if any, regarding the\n   validate operation itself. The warning messages do not indicate that\n   the collection is itself invalid. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :copyable: false\n\n      \"warnings\" : [\n         \"Could not complete validation of table:collection-28-6471619540207520785. This is a transient issue as the collection was actively in use by other operations.\"\n      ],\n\n.. data:: validate.errors\n\n   If the collection is not valid (i.e\n   :data:`~validate.valid` is false), this field will contain a message\n   describing the validation error.\n\n.. data:: validate.extraIndexEntries\n\n   An array that contains information for each index entry that points\n   to a document that does not exist in the collection.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :copyable: false\n\n      \"extraIndexEntries\" : [\n         {\n            \"indexName\" : <string>,\n            \"recordId\" : <NumberLong>,  // for the non-existent document\n            \"indexKey\" : {\n               \"<key1>\" : <value>,\n               ...\n            }\n         }\n         ...\n      ]\n\n   .. note::\n\n      For the :data:`~validate.extraIndexEntries` array, the sum of all\n      the ``indexKey`` field sizes has a limit of 1MB where the sizes\n      include both the keys and values for the ``indexKey``. If\n      the sum exceeds this size, the warning field displays a message.\n\n.. data:: validate.missingIndexEntries\n\n   An array that contains information for each document that is missing\n   the corresponding index entry.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :copyable: false\n\n      \"missingIndexEntries\" : [\n         {\n            \"indexName\" : <string>,\n            \"recordId\" : <NumberLong>,\n            \"idKey\" : <_id key value>,     // The _id value of the document. Only present if an ``_id`` index exists.\n            \"indexKey\" : {                 // The missing index entry\n               \"<key1>\" : <value>,\n               ...\n            }\n         }\n         ...\n       ]\n\n   .. note::\n\n      For the :data:`~validate.missingIndexEntries` array, the sum of\n      the ``idKey`` field size and all its ``indexKey`` field sizes has\n      a limit of 1MB where the field sizes include both the keys and\n      values for the ``idKey`` and ``indexKey``. If the sum\n      exceeds this size, the warning field displays a message.\n\n.. data:: validate.corruptRecords\n\n   An array of ``RecordId`` values for documents that are unreadable,\n   possibly because the data is damaged. These documents are reported as\n   corrupt during validation. A ``RecordId`` is a 64-bit integer\n   internal key that uniquely identifies a document in a collection.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :copyable: false\n      \n      \"corruptRecords\" : [\n         NumberLong(1),  // RecordId 1\n         NumberLong(2)   // RecordId 2\n      ]\n  \n   .. versionadded:: 5.0\n\n.. data:: validate.ok\n\n   An integer with the value ``1`` when the command succeeds. If the\n   command fails the :data:`~validate.ok` field has a value of ``0``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/command/validate.txt"
  },
  {
    "code": "      :emphasize-lines: 3\n\n      operationProfiling:\n         mode: all\n         filter: '{ op: \"query\", millis: { $gt: 2000 } }'\n\n.. _replication-options:\n\n``replication`` Options\n~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/configuration-options.txt"
  },
  {
    "code": "          :copyable: false\n\n          $ : / ? # [ ] @\n\n       Alternatively, if the AWS access key ID, secret access key, or\n       session token are defined on your platform using their respective\n       `AWS IAM environment variables\n       <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__\n       :binary:`~bin.mongosh` will use these environment\n       variable values to authenticate; you do not need to specify them\n       in the connection string.\n\n       See :ref:`Connect to an Atlas Cluster\n       <connections-string-example-mongodb-aws>` for example usage of\n       the ``MONGODB-AWS`` authentication mechanism using both a\n       connection string and the environment variables method.\n\n       See :doc:`/core/authentication` for more information about the\n       authentication system in MongoDB. Also consider\n       :doc:`/tutorial/configure-x509-client-authentication` for more\n       information on x509 authentication.\n\n   * - .. urioption:: authMechanismProperties\n\n     - Specify properties for the specified :urioption:`authMechanism`\n       as a comma-separated list of colon-separated key-value pairs.\n\n       Possible key-value pairs are:\n\n       ``SERVICE_NAME:<string>``\n         Set the Kerberos service name when connecting to Kerberized\n         MongoDB instances. This value must match the service name set\n         on MongoDB instances to which you are connecting. Only valid\n         when using the :ref:`GSSAPI<security-auth-kerberos>`\n         authentication mechanism.\n\n         ``SERVICE_NAME`` defaults to ``mongodb`` for all clients and\n         MongoDB instances. If you change the\n         :parameter:`saslServiceName` setting on a MongoDB instance, you\n         must set ``SERVICE_NAME`` to match that setting. Only valid\n         when using the :ref:`GSSAPI<security-auth-kerberos>`\n         authentication mechanism.\n\n       ``CANONICALIZE_HOST_NAME:true|false``\n         Canonicalize the hostname of the client host machine when\n         connecting to the Kerberos server. This may be required when\n         hosts report different hostnames than what is in the Kerberos\n         database. Defaults to ``false``. Only valid when using the\n         :ref:`GSSAPI<security-auth-kerberos>` authentication\n         mechanism.\n\n       ``SERVICE_REALM:<string>``\n         Set the Kerberos realm for the MongoDB service. This may be\n         necessary to support cross-realm authentication where the user\n         exists in one realm and the service in another. Only valid when\n         using the :ref:`GSSAPI<security-auth-kerberos>` authentication\n         mechanism.\n\n       ``AWS_SESSION_TOKEN:<security_token>``\n         Set the AWS session token for authentication with temporary\n         credentials when using an `AssumeRole\n         <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__\n         request, or when working with AWS resources that specify this\n         value such as Lambda. Only valid when using the ``MONGODB-AWS``\n         authentication mechanism. You must have an AWS access key ID\n         and a secret access key as well. See\n         :ref:`Connect to an Atlas Cluster\n         <connections-string-example-mongodb-aws>` for example usage.\n\n       ``ENVIRONMENT:<string>``\n         Set the OpenID Connect (OIDC) environment. For:\n\n         - Microsoft Azure, set ``ENVIRONMENT:azure``\n         - Google Cloud Platform, set ``ENVIRONMENT:gcp``\n\n         You must also set :urioption:`authMechanism` to\n         ``MONGODB-OIDC``.\n\n   * - .. urioption:: gssapiServiceName\n\n     - Set the Kerberos service name when connecting to Kerberized\n       MongoDB instances. This value must match the service name set on\n       MongoDB instances to which you are connecting.\n\n       :urioption:`gssapiServiceName` defaults to ``mongodb`` for all\n       clients and MongoDB instances. If you change\n       :parameter:`saslServiceName` setting on a MongoDB instance, you\n       must set :urioption:`gssapiServiceName` to match that setting.\n\n       :urioption:`gssapiServiceName` is a deprecated aliases for\n       :urioption:`authMechanismProperties=SERVICE_NAME:mongodb\n       <authMechanismProperties>`. For more information on which\n       options your driver supports and their relative priority to each\n       other, reference the documentation for your preferred driver\n       version.\n\n.. _selection-discovery-options:\n\nServer Selection and Discovery Options\n--------------------------------------\n\nMongoDB provides the following options to configure how MongoDB drivers\nand :binary:`~bin.mongos` instances select a server to which to direct read\nor write operations.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Connection Option\n     - Description\n\n   * - .. urioption:: localThresholdMS\n\n     - The size (in milliseconds) of the latency window for selecting\n       among multiple suitable MongoDB instances. *Default*: 15\n       milliseconds.\n\n       All drivers use :urioption:`localThresholdMS`. Use the\n       ``localThreshold`` alias when specifying the latency window size\n       to :binary:`~bin.mongos`.\n\n   * - .. urioption:: serverSelectionTimeoutMS\n\n     - Specifies how long (in milliseconds) to block for server\n       selection before throwing an exception. *Default*: 30,000\n       milliseconds.\n\n   * - .. urioption:: serverSelectionTryOnce\n\n     - **Single-threaded drivers only**. When ``true``, instructs the\n       driver to scan the MongoDB deployment exactly once after server\n       selection fails and then either select a server or raise an\n       error. When ``false``, the driver blocks and searches for a\n       server up to the :urioption:`serverSelectionTimeoutMS` value.\n       *Default*: ``true``.\n\n       Multi-threaded drivers and :binary:`~bin.mongos` do not support\n       :urioption:`serverSelectionTryOnce`.\n\n   * - .. urioption:: heartbeatFrequencyMS\n\n     - :urioption:`heartbeatFrequencyMS` controls when the driver\n       checks the state of the MongoDB deployment. Specify the interval\n       (in milliseconds) between checks, counted from the end of the\n       previous check until the beginning of the next one.\n\n       *Default*:\n\n       - Single-threaded drivers: 60 seconds.\n       - Multi-threaded drivers: 10 seconds.\n\n       :binary:`~bin.mongos` does not support changing the frequency of\n       the heartbeat checks.\n\n   * - .. urioption:: socketCheckIntervalMS\n\n     - **Single-threaded clients only**. Controls how often the client checks the\n       state of the TCP connection to the MongoDB deployment. If you specify a lower\n       value, the client detects network issues faster but uses more CPU.\n       *Default*: 5 seconds.\n\n       This option is not supported by all drivers. Refer to the\n       :driver:`Drivers </>` documentation.\n\nMiscellaneous Configuration\n---------------------------\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Connection Option\n     - Description\n\n   * - .. urioption:: appName\n\n     - Specify a custom app name. The app name appears in:\n\n       - :binary:`~bin.mongod` and :binary:`~bin.mongos` :ref:`logs\n         <log-messages-ref>`\n       - the :data:`currentOp.appName` field in the\n         :dbcommand:`currentOp` command and :method:`db.currentOp()`\n         method output\n       - the :data:`system.profile.appName` field in the\n         :ref:`database profiler <profiler>` output\n\n       The :urioption:`appName` connection option is available for:\n\n       - :driver:`MongoDB Drivers </>` \n       - :binary:`~bin.mongosh` starting in ``mongosh`` 1.1.9\n       - :compass:`MongoDB Compass </>` starting in Compass 1.28.4\n\n   * - .. urioption:: retryReads\n\n     - Enables :ref:`retryable reads <retryable-reads>`.\n\n       Possible values are:\n\n       - ``true``. Enables retryable reads for the connection. \n\n         Official MongoDB drivers default to ``true``.\n\n       - ``false``. Disables retryable reads for the connection.\n       \n       :binary:`~bin.mongosh` does not support retryable reads.\n\n   * - .. urioption:: retryWrites\n\n     - Enable :ref:`retryable writes <retryable-writes>`.\n\n       Possible values are:\n\n       - ``true``. Enables retryable writes for the connection. \n\n         Official MongoDB drivers default to ``true``.\n\n       - ``false``. Disables retryable writes for the connection. \n       \n       MongoDB drivers retry \n       :ref:`transaction commit and abort operations <transactions-retry>`\n       regardless of the value of :urioption:`retryWrites`. For more \n       information on transaction retryability, see\n       :ref:`transactions-retry`. \n\n   * - .. urioption:: uuidRepresentation\n\n     - Possible values are:\n\n       ``standard``\n         The standard binary representation.\n\n       ``csharpLegacy``\n         The default representation for the C# driver.\n\n       ``javaLegacy``\n         The default representation for the Java driver.\n\n       ``pythonLegacy``\n         The default representation for the Python driver.\n\n       For the default, see the :driver:`Drivers </>`\n       documentation for your driver.\n\n       Not all drivers support the :urioption:`uuidRepresentation`\n       option. For information on your driver, see the :driver:`drivers\n       </>` documentation.\n   \n   * - .. urioption:: loadBalanced \n     \n     - Specifies whether the client is connecting to a load balancer. This option is\n       ``false`` by default.\n\n       You can set this option to ``true`` only if you meet the following\n       requirements:\n       \n       - You specify only one host name.\n       - You aren't connecting to a replica set.\n       - The :urioption:`srvMaxHosts` option is unset or has a value of ``0``.\n       - The :urioption:`directConnection` option is unset or has a value of ``false``.\n\n   * - .. urioption:: srvMaxHosts\n\n     - Specifies the number of :binary:`~bin.mongos` connections that can be created for\n       sharded topologies. Set this option to a non-negative integer.\n       ``0`` is the default value and means there is no limit on the number of\n       :binary:`~bin.mongos` connections.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/connection-string-options.txt"
  },
  {
    "code": "   :copyable: false\n\n   # This connection string is missing the <hostname> and raises a connection error\n\n   mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@example.com/       \n\n\nLike the standard connection string, the DNS seed list connection string\nsupports specifying options as a query string. With a DNS seed list\nconnection string, you can *also* specify the following options via a\nTXT record:\n\n- ``replicaSet``\n- ``authSource``\n\nYou may only specify one TXT record per :binary:`~bin.mongod` instance.\nIf multiple TXT records appear in the DNS and/or if the TXT\nrecord contains an option other than ``replicaSet`` or ``authSource``,\nthe client will return an error.\n\nThe TXT record for the ``server.example.com`` DNS entry would resemble:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/connection-string.txt"
  },
  {
    "code": "   :emphasize-lines: 7-12, 16-20\r\n\r\n   storage: \r\n     dbPath: \"/var/lib/mongo\"\r\n   systemLog:\r\n     destination: file\r\n     path: \"/var/log/mongodb/mongod.log\"\r\n   net:\r\n     bindIp:\r\n       __exec: \"python /home/user/getIPAddresses.py\"\r\n       type: \"string\"\r\n       trim: \"whitespace\"\r\n       digest: 85fed8997aac3f558e779625f2e51b4d142dff11184308dc6aca06cff26ee9ad\r\n       digest_key: 68656c6c30303030307365637265746d796f6c64667269656e64\r\n     tls:\r\n       mode: requireTLS\r\n       certificateKeyFile: \"/etc/tls/mongod.pem\"\r\n       certificateKeyFilePassword:\r\n         __rest: \"https://myrestserver.example.net/api/config/myCertKeyFilePassword\"\r\n         type: \"string\"\r\n         digest: b08519162ba332985ac18204851949611ef73835ec99067b85723e10113f5c26\r\n         digest_key: 6d795365637265744b65795374756666\r\n\r\n- .. include:: /includes/extracts/4.2-changes-expansion-configuration-file-permission-rest.rst\r\n\r\n- .. include:: /includes/extracts/4.2-changes-expansion-configuration-file-permission-exec.rst\r\n\r\nTo use expansion directives, you must specify the\r\n:option:`--configExpand <mongod --configExpand>` command-line option\r\nwith the complete list of expansion directives used:\r\n\r\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/expansion-directives.txt"
  },
  {
    "code": "            :emphasize-lines: 11-13\r\n\r\n            storage:\r\n              dbPath: \"/var/lib/mongo\"\r\n            systemLog:\r\n              destination: file\r\n              path: \"/var/log/mongodb/mongod.log\"\r\n            net:\r\n              bindIp: 192.51.100.24,127.0.0.1\r\n              tls:\r\n                mode: requireTLS\r\n                certificateKeyFile: \"/etc/tls/mongod.pem\"\r\n                certificateKeyFilePassword:\r\n                  __rest: \"https://myrestserver.example.net/api/config/myCertKeyFilePassword\"\r\n                  type: \"string\"\r\n\r\n         File Permission\r\n           .. include:: /includes/extracts/4.2-changes-expansion-configuration-file-permission-rest.rst\r\n\r\n         Expansion Parsing\r\n            To parse the ``__rest`` blocks, start the |mongods| with\r\n            the :option:`--configExpand \"rest\" <mongod --configExpand>`\r\n            option.\r\n\r\n            The |mongods| issues a ``GET`` request against specified\r\n            URL. If successful, the |mongods| replaces the value of\r\n            ``certificateKeyFilePassword`` with the returned value. If\r\n            the URL fails to resolve or if the ``REST`` endpoint\r\n            returns an invalid value, the |mongods| throws an error and\r\n            terminates.\r\n\r\n     - id: full-file-rest\r\n       name: Full Configuration File\r\n       content: |\r\n\r\n         The following configuration file uses the\r\n         :configexpansion:`__rest` expansion directive to load the\r\n         configuration file from an external ``REST`` endpoint. The\r\n         expansion directive and its options **must** be the only values\r\n         specified in the configuration file.\r\n\r\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/expansion-directives.txt"
  },
  {
    "code": "            :emphasize-lines: 11-13\r\n\r\n            storage:\r\n              dbPath: \"/var/lib/mongo\"\r\n            systemLog:\r\n              destination: file\r\n              path: \"/var/log/mongodb/mongod.log\"\r\n            net:\r\n              bindIp: 192.51.100.24,127.0.0.1\r\n              tls:\r\n                mode: requireTLS\r\n                certificateKeyFile: \"/etc/tls/mongod.pem\"\r\n                certificateKeyFilePassword:\r\n                  __exec: \"python /home/myUserName/getPEMPassword.py\"\r\n                  type: \"string\"\r\n\r\n         File Permission\r\n           .. include:: /includes/extracts/4.2-changes-expansion-configuration-file-permission-exec.rst\r\n\r\n         Expansion Parsing\r\n            To parse the ``__exec`` blocks, start the |mongods| with\r\n            the :option:`--configExpand \"exec\" <mongod --configExpand>`\r\n            option.\r\n\r\n            The |mongods| attempts to execute the specified operation.\r\n            If the command executes successfully, the |mongods|\r\n            replaces the value of ``certificateKeyFilePassword`` with\r\n            the returned value. If the command fails or returns an\r\n            invalid value for the configuration file setting, the\r\n            |mongods| throws an error and terminates.\r\n\r\n     - id: full-file-yaml\r\n       name: Full Configuration File\r\n       content: |\r\n\r\n         The following example configuration file uses the\r\n         :configexpansion:`__exec` expansion directive to load the\r\n         configuration file from the output of a shell or terminal\r\n         command. The ``__exec`` expansion directive \r\n         and its options **must** be the only values specified in the \r\n         configuration file.  \r\n\r\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/expansion-directives.txt"
  },
  {
    "code": "   :emphasize-lines: 7-9\r\n   \r\n   storage:\r\n     dbPath: \"/var/lib/mongo\"\r\n   systemLog:\r\n     destination: file\r\n     path: \"/var/log/mongodb/mongod.log\"\r\n   net:\r\n     port:\r\n       __rest: \"https://mongoconf.example.net:8080/record/1\"\r\n       type: string\r\n\r\nThe string recorded at the specified URL is ``20128``\r\n\r\n.. include:: /includes/extracts/4.2-changes-expansion-configuration-file-permission-rest.rst\r\n\r\nStart the :binary:`mongod <bin.mongod>` with the\r\n:option:`--configExpand \"rest\" <mongod --configExpand>` and\r\n:option:`--outputConfig <mongod --outputConfig>` options:\r\n\r\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/expansion-directives.txt"
  },
  {
    "code": "               :copyable: false\n\n               winningPlan: {\n                  stage: <STAGE1>,\n                  ...\n                  inputStage: {\n                     stage: <STAGE2>,\n                     ...\n                     inputStage: {\n                        stage: <STAGE3>,\n                        ...\n                     }\n                  }\n               },\n\n      - id: sbe-sample-output\n        name: \"Slot-based Execution Engine\"\n        content: |\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               winningPlan: {\n                  queryPlan: {\n                     stage: <STAGE1>,\n                     ...\n                     inputStage: {\n                        stage: <STAGE2>,\n                        ...\n                        inputStage: {\n                           stage: <STAGE3>,\n                           ...\n                        }\n                     }\n                  }\n                  slotBasedPlan: {\n                     ...  \n                  }\n               },\n\nEach stage passes its resulting documents or index keys to the\nparent node. The leaf nodes access the collection or the indices. The\ninternal nodes use the documents or the index keys that result from the \nchild nodes. The root node indicates the stage that MongoDB ultimately \nderives the result set from.\n\nStages are descriptive of the operation. For example:\n\n- ``COLLSCAN`` for a collection scan\n\n- ``IXSCAN`` for scanning index keys\n\n- ``FETCH`` for retrieving documents\n\n- ``GROUP`` for grouping documents\n\n- ``SHARD_MERGE`` for merging results from shards\n\n- ``SHARDING_FILTER`` for filtering out orphan documents from shards\n\n- ``TS_MODIFY`` for modifying a time series collection\n\n- ``BATCHED_DELETE`` for multiple document deletions that are batched\n  together internally (starting in MongoDB 6.1)\n\n- ``EXPRESS`` stages for a limited set of queries that can bypass\n  regular query planning to use optimized index scan plans *(New in\n  version 8.0.)*\n  \n  ``EXPRESS`` stages can be one of the following:\n  \n  - ``EXPRESS_CLUSTERED_IXSCAN`` \n  - ``EXPRESS_DELETE``\n  - ``EXPRESS_IXSCAN`` \n  - ``EXPRESS_UPDATE``\n\n.. _explain-results-5.1-later:\n\nExplain Output for MongoDB 5.1 and Later\n----------------------------------------\n\nThis section shows the ``explain`` output for MongoDB 5.1 and later. To \nsee the explain output for older versions of MongoDB, refer to the \ndocumentation for that version.\n\n.. data:: explain.explainVersion\n\n   Integer field.\n\n   .. include:: /includes/explainVersion.rst\n\n   .. versionadded:: 5.1\n\n.. _queryPlanner:\n\n``queryPlanner``\n~~~~~~~~~~~~~~~~\n\n:data:`explain.queryPlanner` information details the plan selected by\nthe :ref:`query optimizer <read-operations-query-optimization>`.\n\nThese examples may combine the output structures of MongoDB's classic\nand slot-based execution engines. They are not meant to be \nrepresentative. Your output may differ significantly.\n\n.. tabs::\n\n   tabs:\n\n      - id: unsharded\n        name: \"Unsharded Collections\"\n        content: |\n\n            For unsharded collections, ``explain`` returns the following\n            ``queryPlanner`` information:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               queryPlanner: {\n                  namespace: <string>,                                                                                                                                                                                                   \n                  indexFilterSet: <boolean>,                                                                                                                                                                                                      \n                  parsedQuery: {                                                                                                                                                                                                              \n                     ...                                                                                                                                                  \n                  },\n                  planCacheShapeHash: <hexadecimal string>,                                                                                                                                                                                                      \n                  planCacheKey: <hexadecimal string>,                                                                                                                                                                                                   \n                  maxIndexedOrSolutionsReached: <boolean>,                                                                                                                                                                                        \n                  maxIndexedAndSolutionsReached: <boolean>,                                                                                                                                                                                       \n                  maxScansToExplodeReached: <boolean>,                                                                                                                                                                                            \n                  winningPlan: {  \n                    stage: <STAGE1>,\n                    inputStage: {\n                      stage: <string>,\n                      ...\n                    }\n                  },\n                  rejectedPlans: [\n                    <candidate plan1>,\n                  ]\n               }                                                                                                               \n\n            .. include:: /includes/plan-cache-rename.rst\n\n      - id: sharded\n        name: \"Sharded Collections\"\n        content: |\n            For sharded collections, ``explain`` includes the core\n            query planner and server information for each accessed\n            shard in the ``shards`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               {\n                  queryPlanner: {\n                     mongosPlannerVersion: <int>\n                     winningPlan: {\n                        stage: <STAGE1>,\n                        shards: [\n                        { \n                           shardName: <string>,\n                           connectionString: <string>,\n                           serverInfo: {\n                              ...\n                           },\n                           namespace: <string>,\n                           indexFilterSet: <boolean>,\n                           parsedQuery: {\n                              ...\n                           },\n                           querySettings: {\n                              ...\n                           },\n                           planCacheShapeHash: <hexadecimal string>,\n                           planCacheKey: <hexadecimal string>,\n                           maxIndexedOrSolutionsReached: <boolean>,\n                           maxIndexedAndSolutionsReached: <boolean>,\n                           maxScansToExplodeReached: <boolean>,\n                           winningPlan: {\n                              stage: <STAGE1>,\n                              inputStage: {\n                                 stage: <string>,\n                                 ...\n                              }\n                           },\n                           rejectedPlans: [\n                             <candidate plan1>,\n                           ] \n                        }\n                        ]\n                     }\n                  }\n               }\n\n            .. include:: /includes/plan-cache-rename.rst\n\n.. data:: explain.queryPlanner\n\n   Contains information on the selection of the query plan by the\n   :ref:`query optimizer <read-operations-query-optimization>`.\n\n   .. data:: explain.queryPlanner.namespace\n\n      A string that specifies the :term:`namespace` with the names of\n      the database and the collection accessed by the query. The\n      namespace has the format ``<database>.<collection>``.\n\n   .. data:: explain.queryPlanner.indexFilterSet\n\n      A boolean that specifies whether MongoDB applied an :ref:`index\n      filter <index-filters>` for the :term:`plan cache query shape`.\n\n   .. data:: explain.queryPlanner.querySettings\n\n      If query settings are set, ``querySettings`` contains details\n      about the query settings that are applied to the query shape.\n\n      To add query settings and explore examples, which\n      include ``explain()`` output with ``querySettings``, see\n      :dbcommand:`setQuerySettings`.\n      \n      .. versionadded:: 8.0\n\n   .. data:: explain.queryPlanner.planCacheShapeHash\n\n      .. include:: /includes/plan-cache-rename.rst\n\n      A hexadecimal string that represents the hash of the\n      :term:`plan cache query shape` and is dependent only on the plan cache query shapes.\n      ``planCacheShapeHash`` can help identify slow queries (including the\n      query filter of write operations) with the same plan cache query shape.\n\n      .. note::\n\n         As with any hash function, two different plan cache query shapes may result\n         in the same hash value. However, the occurrence of hash\n         collisions between different plan cache query shapes is unlikely.\n\n      For more information on ``planCacheShapeHash`` and ``planCacheKey``,\n      see :ref:`query-hash-plan-cache-key`.\n\n   .. data:: explain.queryPlanner.planCacheKey\n\n      A hash of the key for the plan cache entry associated with the\n      query.\n\n      Unlike the :data:`explain.queryPlanner.planCacheShapeHash`, the\n      :data:`explain.queryPlanner.planCacheKey` is a function of both\n      the plan cache query shape and the currently available indexes for\n      that shape. Specifically, if indexes that can support the query\n      shape are added or dropped, the ``planCacheKey`` value may change\n      but the ``planCacheShapeHash`` value wouldn't change.\n\n      For more information on ``planCacheShapeHash`` and ``planCacheKey``,\n      see :ref:`query-hash-plan-cache-key`.\n\n   .. data:: explain.queryPlanner.optimizationTimeMillis\n\n      Time in milliseconds the query planner spent on query\n      optimization. This result doesn't include time spent\n      optimizing inner :pipeline:`$lookup` queries.\n\n      .. versionadded:: 8.0\n\n   .. data:: explain.queryPlanner.optimizedPipeline\n\n      A boolean that indicates that the entire aggregation pipeline\n      operation was optimized away, and instead, fulfilled by a tree\n      of query plan execution stages.\n\n      For example, the following aggregation operation can be fulfilled by the \n      tree of query plan execution rather than using the aggregation pipeline.\n      \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               executionStats: {\n                  executionSuccess: <boolean>,\n                  nReturned: <int>,\n                  executionTimeMillis: <int>,\n                  totalKeysExamined: <int>,\n                  totalDocsExamined: <int>,\n                  executionStages: {\n                     stage: <STAGE1>\n                     nReturned: <int>,\n                     executionTimeMillisEstimate: <int>,\n                     opens: <int>, // Starting in MongoDB 5.1\n                     closes: <int>, // Starting in MongoDB 5.1\n                     works: <int>,\n                     advanced: <int>,\n                     needTime: <int>,\n                     needYield: <int>,\n                     saveState: <int>,\n                     restoreState: <int>,\n                     isEOF: <boolean>,\n                     ...\n                     inputStage: {\n                        stage: <STAGE2>,\n                        nReturned: <int>,\n                        ...\n                        numReads: <int>, // Starting in MongoDB 5.1\n                        ...\n                        executionTimeMillisEstimate: <int>,\n                        ...\n                        inputStage: {\n                           ...\n                        }\n                     }\n                  },\n                  allPlansExecution: [\n                     {\n                        nReturned: <int>,\n                        executionTimeMillisEstimate: <int>,\n                        totalKeysExamined: <int>,\n                        totalDocsExamined:<int>,\n                        executionStages: {\n                           stage: <STAGEA>,\n                           nReturned: <int>,\n                           executionTimeMillisEstimate: <int>,\n                           ...\n                           inputStage: {\n                              stage: <STAGEB>,\n                              ...\n                              inputStage: {\n                                ...\n                              }\n                           }\n                        }\n                     },\n                     ...\n                  ]\n                  operationMetrics: {\n                     cpuNanos: <int>,\n                     cursorSeeks: <int>,\n                     docBytesRead: <int>,\n                     docBytesWritten: <int>,\n                     docUnitsRead: <int>,\n                     docUnitsReturned: <int>,\n                     docUnitsWritten: <int>,\n                     idxEntryBytesRead: <int>,\n                     idxEntryBytesWritten: <int>,\n                     idxEntryUnitsRead: <int>,\n                     idxEntryUnitsWritten: <int>,\n                     totalUnitsWritten: <int>,\n                     keysSorted: <int>,\n                     sorterSpills: <int>\n                  }\n               }\n\n      - id: sharded\n        name: \"Sharded Collections\"\n        content: |\n\n            For sharded collections, ``explain`` includes the execution\n            statistics for each accessed shard.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               executionStats: {\n                  nReturned: <int>,\n                  executionTimeMillis: <int>,\n                  totalKeysExamined: <int>,\n                  totalDocsExamined: <int>,\n                  executionStages: {\n                     stage: <STAGE1>\n                     nReturned: <int>,\n                     executionTimeMillis: <int>,\n                     opens: <int>, // Starting in MongoDB 5.1\n                     closes: <int>, // Starting in MongoDB 5.1\n                     totalKeysExamined: <int>,\n                     totalDocsExamined: <int>,\n                     totalChildMillis: <NumberLong>,\n                     shards: [\n                        {\n                           shardName: <string>,\n                           executionSuccess: <boolean>,\n                           executionStages: {\n                              stage: <STAGE2>,\n                              nReturned: <int>,\n                              executionTimeMillisEstimate: <int>,\n                              ...\n                              chunkSkips: <int>,\n                              inputStage: {\n                                 stage: <STAGE3>,\n                                 ...\n                                 numReads: <int>, // Starting in MongoDB 5.1\n                                 ...\n                                 inputStage: {\n                                    ...\n                                 }\n                              }\n                           }\n                        },\n                        ...\n                     ]\n                  }\n                  allPlansExecution: [\n                     {\n                        shardName: <string>,\n                        allPlans: [\n                           {\n                              nReturned: <int>,\n                              executionTimeMillisEstimate: <int>,\n                              totalKeysExamined: <int>,\n                              totalDocsExamined:<int>,\n                              executionStages: {\n                                 stage: <STAGEA>,\n                                 nReturned: <int>,\n                                 executionTimeMillisEstimate: <int>,\n                                 ...\n                                 inputStage: {\n                                    stage: <STAGEB>,\n                                    ...\n                                    inputStage: {\n                                      ...\n                                    }\n                                 }\n                              }\n                           },\n                           ...\n                        ]\n                     },\n                     {\n                        shardName: <string>,\n                        allPlans: [\n                         ...\n                        ]\n                     },\n                     ...\n                  ]\n               }\n\n.. data:: explain.executionStats\n\n   Contains statistics that describe the completed query execution for\n   the winning plan. For write operations, completed query execution\n   refers to the modifications that *would* be performed, but does\n   *not* apply the modifications to the database.\n\n   .. data:: explain.executionStats.nReturned\n\n      Number of documents returned by the winning query plan.\n      :data:`~explain.executionStats.nReturned` corresponds to the ``n`` field\n      returned by ``cursor.explain()`` in earlier versions of MongoDB.\n\n   .. data:: explain.executionStats.executionTimeMillis\n\n      Total time in milliseconds required for query plan selection and\n      query execution. It includes the time it takes to run the trial phase \n      part of the plan selection process, but does not include the network time \n      to transmit the data back to the client.\n\n      The time reported by ``explain.executionStats.executionTimeMillis`` is \n      not necessarily representative of actual query time. During steady \n      state operations (when the query plan is cached), or when using \n      :method:`cursor.hint()` with ``cursor.explain()``, MongoDB bypasses the \n      plan selection process, resulting in a faster actual time, leading to \n      a lower ``explain.executionStats.executionTimeMillis`` value.\n\n\n   .. data:: explain.executionStats.totalKeysExamined\n\n      Number of index entries scanned.\n      :data:`explain.executionStats.totalKeysExamined` corresponds to the\n      ``nscanned`` field returned by ``cursor.explain()`` in\n      earlier versions of MongoDB.\n\n   .. data:: explain.executionStats.totalDocsExamined\n\n      Number of documents examined during query execution. Common\n      query execution stages that examine documents are ``COLLSCAN``\n      and ``FETCH``.\n\n      .. note::\n\n         :data:`explain.executionStats.totalDocsExamined` refers to\n         the total number of documents examined and *not* to the\n         number of documents returned. For example, a stage can\n         examine a document in order to apply a filter. If the\n         document is filtered out, then it has been examined but\n         will not be returned as part of the query result set.\n\n         If a document is examined multiple times during query\n         execution,\n         :data:`explain.executionStats.totalDocsExamined` counts\n         each examination. That is,\n         :data:`explain.executionStats.totalDocsExamined` is *not* a\n         count of the total number of *unique* documents examined.\n\n   .. data:: explain.executionStats.executionStages\n\n      Details the completed execution of the winning plan as a tree of\n      stages; i.e. a stage can have an ``inputStage`` or multiple\n      ``inputStages``.\n\n      Starting in MongoDB 5.1, a stage can have these input stages:\n      \n      - ``thenStage``\n      - ``elseStage``\n      - ``innerStage``\n      - ``outerStage``\n\n      Each stage consists of execution information specific to the\n      stage.\n\n      .. data:: explain.executionStats.executionStages.executionTimeMillisEstimate\n\n         The estimated amount of time in milliseconds for query execution.\n\n      .. data:: explain.executionStats.executionStages.opens\n\n         Starting in MongoDB 5.1, the number of times a stage was\n         opened during query execution.\n\n      .. data:: explain.executionStats.executionStages.closes\n\n         Starting in MongoDB 5.1, the number of times a stage was\n         closed during query execution.\n\n      .. data:: explain.executionStats.executionStages.works\n\n         Specifies the number of \"work units\" performed by the query \n         execution stage. Query execution divides its work into small \n         units. A \"work unit\" might consist of examining a single index \n         key, fetching a single document from the collection, applying \n         a projection to a single document, or doing a piece of internal \n         bookkeeping.\n\n         This field appears if the operation used the classic query\n         execution engine. \n\n      .. data:: explain.executionStats.executionStages.saveState\n\n         The number of times that the query stage suspended processing\n         and saved its current execution state, for example in\n         preparation for yielding its locks.\n\n      .. data:: explain.executionStats.executionStages.restoreState\n\n         The number of times that the query stage restored a saved\n         execution state, for example after recovering locks that it had\n         previously yielded.\n\n      .. data:: explain.executionStats.executionStages.isEOF\n\n         Specifies whether the execution stage has reached end of stream:\n\n         - If ``true`` or ``1``, the execution stage has reached\n           end-of-stream.\n\n         - If ``false`` or ``0``, the stage may still have results to\n           return. For example, consider a query with a limit whose\n           execution stages consists of a ``LIMIT`` stage with an\n           input stage of ``IXSCAN`` for the query. If the query\n           returns more than the specified limit, the ``LIMIT`` stage\n           will report ``isEOF: 1``, but its underlying ``IXSCAN`` stage\n           will report ``isEOF: 0``.\n\n      .. data:: explain.executionStats.executionStages.opType\n\n         For operations on time series collections, the type of operation.\n\n      .. data:: explain.executionStats.executionStages.bucketFilter\n\n         For operations on time series collections, the filter used to reduce\n         the number of buckets queried in the bucket catalog.\n\n      .. data:: explain.executionStats.executionStages.residualFilter\n\n         For operations on time series collections, the filter used to query\n         the bucket catalog.\n\n      .. data:: explain.executionStats.executionStages.nBucketsUnpacked\n\n         For operations on time series collections, the number of buckets\n         unpacked to resolve the operation.\n\n      .. data:: explain.executionStats.executionStages.nMeasurementsDeleted\n\n         For operations on time series collections, the number of\n         documents deleted.\n\n      .. data:: explain.executionStats.executionStages.nMeasurementsInserted\n\n         For operations on time series collections, the number of\n         documents inserted.\n\n      .. data:: explain.executionStats.executionStages.nMeasurementsMatched\n\n         For operations on time series collections, the number of\n         documents matched.\n\n      .. data:: explain.executionStats.executionStages.nMeasurementsModified\n\n         For operations on time series collections, the number of\n         documents modified.\n\n      .. data:: explain.executionStats.executionStages.nMeasurementsUpserted\n\n         For operations on time series collections, the number of\n         documents upserted.\n\n      .. data:: explain.executionStats.executionStages.inputStage\n\n         Each ``inputStage`` can have different fields depending on the\n         value of ``inputStage.stage``. The following table describes \n         possible fields and what stages they can appear in.\n\n         Each ``inputStage`` can have another ``inputStage`` as a field.\n         See :ref:`explain-output-structure`.\n\n         .. list-table::                                    \n            :widths: 30,40,30\n            :header-rows: 1\n\n            * - Field\n              - Description\n              - Applicable Stages\n\n            * - ``docsExamined``\n              - Specifies the number of documents scanned during the\n                query execution stage.\n              - ``COLLSCAN``, ``FETCH``\n\n            * - ``keysExamined``\n              - For query execution stages that scan an index ``keysExamined`` \n                is the total number of in-bounds and out-of-bounds\n                keys that are examined in the process of the index scan. If the\n                index scan consists of a single contiguous range of keys, only\n                in-bounds keys need to be examined. If the index bounds consists of\n                several key ranges, the index scan execution process may examine\n                out-of-bounds keys in order to skip from the end of one range to the\n                beginning of the next.\n              - ``IXSCAN``\n\n            * - ``numReads``\n              - The number of documents scanned or index keys examined during\n                the query execution stage. \n\n                .. versionadded:: 5.1\n              - ``COLLSCAN``, ``IXSCAN``\n\n            * - ``seeks``\n              - The number of times that we had to seek the index cursor to\n                a new position in order to complete the index scan.\n              - ``IXSCAN``\n            \n            * - ``spilledBytesApprox``\n              - The approximate number of in-memory bytes spilled to disk in \n                the stage.\n\n                .. versionadded:: 5.3\n              - ``GROUP``\n\n            * - ``spilledRecords``\n              - The number of produced records spilled to disk in the stage.\n                \n                .. versionadded:: 5.3\n              - ``GROUP``\n\n            * - ``usedDisk``\n              - Whether the stage wrote to disk.\n\n                .. versionadded:: 5.3\n              - ``GROUP``\n\n   .. data:: explain.executionStats.allPlansExecution\n\n      Contains *partial* execution information captured during the\n      :ref:`plan selection phase <query-plans-query-optimization>` for\n      both the winning and rejected plans. The field is present only if\n      ``explain`` runs in ``allPlansExecution`` verbosity mode.\n\n   .. data:: explain.executionStats.operationMetrics\n\n      Contains resource consumption statistics, as long as they \n      are not zero. The field is present only if ``explain`` \n      runs in ``executionStats`` verbosity mode or higher and if \n      :parameter:`profileOperationResourceConsumptionMetrics` is enabled.\n\n.. _serverInfo:\n\n``serverInfo``\n~~~~~~~~~~~~~~\n\n.. tabs::\n\n   tabs:\n\n      - id: unsharded\n        name: \"Unsharded Collections\"\n        content: |\n\n            For unsharded collections, ``explain`` returns the following\n            ``serverInfo`` information for the MongoDB instance:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "               :copyable: false\n\n               serverInfo: {\n                  host: <string>,\n                  port: <int>,\n                  version: <string>,\n                  gitVersion: <string>\n               }\n\n      - id: sharded\n        name: \"Sharded Collections\"\n        content: |\n\n           For sharded collections, ``explain`` returns the\n           ``serverInfo`` for each accessed shard, and a top-level\n           ``serverInfo`` object for the :binary:`bin.mongos`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "              :copyable: false\n\n              queryPlanner: {\n                 ...\n                 winningPlan: {\n                    stage: <STAGE1>,\n                    shards: [\n                       {\n                          shardName: <string>,\n                          connectionString: <string>,\n                          serverInfo: {\n                             host: <string>,\n                             port: <int>,\n                             version: <string>,\n                             gitVersion: <string>\n                          },\n                          ...\n                       }\n                       ...\n                    ]\n                 }\n               },\n               serverInfo: {      // serverInfo for mongos\n                 host: <string>,\n                 port: <int>,\n                 version: <string>,\n                 gitVersion: <string>\n               }\n               ...\n\n.. _explain-results-lookup:\n\nExecution Plan Statistics for Query with ``$lookup`` Pipeline Stage\n-------------------------------------------------------------------\n\n.. versionadded:: 5.0\n\nThe :ref:`explain results <explain-results>` can include execution\nstatistics for queries that use a :pipeline:`$lookup` pipeline stage. To\ninclude those execution statistics, you must run the explain operation\nin one of these execution verbosity modes:\n\n- :ref:`executionStats <explain-method-executionStats>`\n- :ref:`allPlansExecution <explain-method-allPlansExecution>`\n\nThe following fields are included in the explain results for a\n:pipeline:`$lookup` query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   '$lookup': {\n      from: <string>,\n      as: <string>,\n      localField: <string>,\n      foreignField: <string>\n   },\n   totalDocsExamined: <long>,\n   totalKeysExamined: <long>,\n   collectionScans: <long>,\n   indexesUsed: [ <string_1>, <string_2>, ..., <string_n> ],\n   executionTimeMillisEstimate: <long>\n\nTo see the descriptions for the fields in the ``$lookup`` section, see\nthe :pipeline:`$lookup` page.\n\nThe other fields are:\n\n.. data:: explain.totalDocsExamined\n\n   Number of documents examined during the query execution.\n\n.. data:: explain.totalKeysExamined\n\n   Number of index keys examined.\n\n.. data:: explain.collectionScans\n\n   Number of times a collection scan occurred during query execution.\n   During a collection scan, each document in a collection is compared\n   to the query predicate. Collection scans occur if no appropriate\n   :ref:`index <indexes>` exists that :ref:`covers\n   <indexes-covered-queries>` the query.\n\n.. data:: explain.indexesUsed\n\n   Array of strings with the names of the indexes used by the query.\n\n.. data:: explain.executionTimeMillisEstimate\n\n   Estimated time in milliseconds for the query execution.\n\n.. _explain-output-collection-scan:\n\nCollection Scan\n---------------\n\nIf the query planner selects a collection scan, the explain result\nincludes a ``COLLSCAN`` stage.\n\nIf the query planner selects an index, the explain result includes a\n``IXSCAN`` stage. The stage includes information such as the index\nkey pattern, direction of traversal, and index bounds.\n\nStarting in MongoDB 5.3, if the query planner selects a :ref:`clustered\nindex <db.createCollection.clusteredIndex>` for a :ref:`clustered\ncollection <clustered-collections>` and the query contains bounds that\ndefine the portion of the index to search, the explain result includes a\n``CLUSTERED_IXSCAN`` stage. The stage includes information about the\nclustered index key and index bounds.\n\nIf the query planner selects a :ref:`clustered index\n<db.createCollection.clusteredIndex>` for a :ref:`clustered collection\n<clustered-collections>` and the query *does not* contain bounds, the\nquery performs an unbounded collection scan and the explain result\nincludes a ``COLLSCAN`` stage.\n\n.. note::\n\n   The :parameter:`notablescan` parameter does not allow unbounded\n   queries that use a clustered index because the queries require a\n   full collection scan.\n\nFor more information on execution statistics of collection scans, see\n:doc:`/tutorial/analyze-query-plan`.\n\n.. _explain-output-covered-queries:\n\nCovered Queries\n---------------\n\nWhen an index :ref:`covers <indexes-covered-queries>` a query, \nMongoDB can both match the query conditions **and** return the \nresults using only the index keys. MongoDB does not need to \nexamine documents from the collection to perform any part of the \nquery.\n\nWhen an index covers a query, the explain result has an ``IXSCAN``\nstage that is **not** a descendant of a ``FETCH`` stage, and in the\n:ref:`executionStats`, the :data:`explain.executionStats.totalDocsExamined` \nis ``0``.\n\n.. _explain-output-or-expression:\n\n``$or`` Expression\n------------------\n\nIf MongoDB uses indexes for an :query:`$or` expression, the result will\ninclude the ``OR`` stage with an\n:data:`explain.queryPlanner.winningPlan.inputStages` array that\ndetails the indexes; e.g.:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      stage: 'OR',\n      inputStages: [\n         {\n            stage: 'IXSCAN',\n            ...\n         },\n         {\n            stage : 'IXSCAN',\n            ...\n         },\n         ...\n      ]\n   }\n\nIn previous versions of MongoDB, ``cursor.explain()`` returned the\n``clauses`` array that detailed the indexes.\n\n.. _sort-and-group-executionStats-and-above:\n\n``$sort`` and ``$group`` Stages\n-------------------------------\n\nWhen ``explain`` is run in either  \n:ref:`executionStats <explain-method-executionStats>` or \n:ref:`allPlansExecution <explain-method-allPlansExecution>` verbosity \nmode, the :pipeline:`$sort` and :pipeline:`$group` stages have \nadditional output.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 15 15 50\n\n   * - Stage\n\n     - Field\n\n     - Type\n\n     - Description\n\n   * - :pipeline:`$sort` \n\n     - ``totalDataSizeSortedBytesEstimate``\n\n     - long\n\n     - An estimated number of bytes processed in the :pipeline:`$sort` \n       stage.\n      \n   * - :pipeline:`$sort`\n \n     - ``usedDisk``\n\n     - boolean\n\n     - Whether the :pipeline:`$sort` stage wrote to disk. \n\n   * - :pipeline:`$group`\n\n     - ``totalOutputDataSizeBytes``\n     \n     - long\n\n     - An estimate of the total size of all documents output by the \n       :pipeline:`$group` stage in bytes.\n\n   * - :pipeline:`$group`\n \n     - ``usedDisk``\n\n     - boolean\n\n     - Whether the :pipeline:`$group` stage wrote to disk. \n\n   * - :pipeline:`$group`\n   \n     - ``spillFileSizeBytes``\n\n     - long \n\n     - The size of the spill file written to disk in the :pipeline:`$group` \n       stage. Due to compression, the value of ``spillFileSizeBytes`` should be \n       less than or equal to ``numBytesSpilledEstimate``.\n\n   * - :pipeline:`$group` \n   \n     - ``numBytesSpilledEstimate``\n\n     - long \n     \n     - An estimate of the number of bytes written to disk in the \n       :pipeline:`$group` stage before compression.\n\n.. _explain-output-sort:\n\nSort Stage\n----------\n\nIf MongoDB cannot use an index or indexes to obtain the sort order, the\nresults include a ``SORT`` stage indicating a blocking sort operation.\nBlocking sorts do not block concurrent operations on the\ncollection or database. The name refers to the requirement that the\n``SORT`` stage reads all input documents before returning any output\ndocuments, blocking the flow of data for that specific query.\n\nIf MongoDB requires using more than 100 megabytes of system memory for\nthe blocking sort operation, MongoDB returns an error *unless* the query\nspecifies :method:`cursor.allowDiskUse()`. :method:`cursor.allowDiskUse()` \nallows MongoDB to use temporary files on disk to store data exceeding the 100 \nmegabyte system memory limit while processing a blocking sort operation. If the \nexplain plan does not contain an explicit ``SORT`` stage, then MongoDB can use \nan index to obtain the sort order.\n\n.. _explain-output-query-shape-hash:\n\nQuery Shape Hash\n----------------\n\nStarting in MongoDB 8.0, ``explain`` outputs the following field:\n\n.. data:: explain.queryShapeHash\n\n   A hexadecimal string that represents the hash of the :term:`query\n   shape`. For more information, see :ref:`query-shapes`.\n\n   .. versionadded:: 8.0\n\n.. toctree::\n   :titlesonly:\n\n   Interpret Results </tutorial/analyze-query-plan>\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/explain-results.txt"
  },
  {
    "code": "   :emphasize-lines: 6-15\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"CollectionOptionsMismatch\",\n               description: \"Found collection with mismatching options across shards and/or config server\",\n               details: {\n                  namespace: \"test.authors\",\n                  options: [ \n                     { \"options\": { \"capped\": true }, \"shards\": [ \"shard0\" ] },\n                     { \"options\": { \"capped\": false }, \"shards\": [ \"shard1\", \"config\" ] }\n                  ]\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/CollectionOptionsMismatch.txt"
  },
  {
    "code": "   :emphasize-lines: 6-15\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"CollectionUUIIDMismatch\",\n               description: \"Found collection on non primary shard with mismatching UUID\",\n               details: {\n                  namespace: \"test.authors\",\n                  shard: \"shard02\",\n                  localUUID: new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\"),\n                  uuid: new UUID(\"a3153e8a-3544-43ec-928f-37f72b48dee9\")\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/CollectionUUIDMismatch.txt"
  },
  {
    "code": "   :emphasize-lines: 6-35\n   :copyable: false\n\n   { \n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [ \n            {\n               type: \"CorruptedChunkShardKey\",\n               description: \"Found chunk with a shard key pattern violation\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID : new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\"),\n                  chunk: { \n                     _id: ObjectId(\"64ddd81656be208c6685da1b\"),\n                     uuid: new UUID(\"de934e0a-74d2-412b-9bb8-409abe9754e3\"),\n                     min: { \n                        y: 0 \n                     }, \n                     max: { \n                        x: MaxKey \n                     }, \n                     shard: \"shard0000\", \n                     lastmod: Timestamp(1, 0),\n                     onCurrentShardSince: Timestamp(1, 0), \n                     history: [ \n                        { \n                           validAfter: Timestamp(1, 0), \n                           shard: \"shard0000\" \n                        } \n                     ]\n                  },\n                  shardKeyPattern: { \n                     x: 1 \n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/CorruptedChunkShardKey.txt"
  },
  {
    "code": "   :emphasize-lines: 6-28\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [ \n            {\n               type: \"CorruptedZoneShardKey\",\n               description: \"Found zone with a shard key pattern violation\",\n               details: { \n                  namespace: \"test.authors\",\n                  collection: { \n                     collectionUUID : new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\"),\n                     zone : { \n                        ns : \"test.authors\",\n                        tag: \"64ddd81656be208c6685da21\", \n                        min: { \n                           y: 0 \n                        }, \n                        max: { \n                           x: MaxKey \n                        } \n                     }, \n                     shardKeyPattern: { \n                        x: 1 \n                     }\n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/CorruptedZoneShardKey.txt"
  },
  {
    "code": "   :emphasize-lines: 6-24\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"HiddenShardedCollection\",\n               description: \"Found sharded collection but relative database does not exist\",\n               details: {\n                  namespace: \"test.authors\",\n                  collection: {\n                      _id: \"test.authors\",\n                      lastmodEpoch: ObjectId(\"64ddd78de906038182671674\"),\n                      lastmod: ISODate(\"2023-08-17T08:17:17.944Z\"),\n                      timestamp: Timestamp(1692260237, 58),\n                      uuid: new UUID(\"69317741-7bc5-4eca-8877-7858cecf67d6\"),\n                      key: {\n                         \"skey\" : 1\n                      },\n                      unique: false,\n                      noBalance: false\n                   }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/HiddenShardedCollection.txt"
  },
  {
    "code": "   :emphasize-lines: 6-19\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"InconsistentIndex\",\n               description: \"Found an index of a sharded collection that is inconsistent between different shards\",\n               details: {\n                  namespace: \"test.authors\",\n                  info: {\n                      missingFromShards: [\n                         \"shard-rs1\"\n                      ],\n                      inconsistentProperties: [ ],\n                      indexName: \"index1\"\n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/InconsistentIndex.txt"
  },
  {
    "code": "   :emphasize-lines: 6-14\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"MisplacedCollection\",\n               description: \"Found unsharded collection without the appropriate metadata on a shard different from the database primary shard\",\n               details: {\n                  namespace: \"test.authors\",\n                  shard: \"shard02\",\n                  localUUID: new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\")\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/MisplacedCollection.txt"
  },
  {
    "code": "   :emphasize-lines: 6-14\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"MissingLocalCollection\",\n               description: \"Collection registered on the sharding catalog not found on the given shards\",\n               details: {\n                  namespace: \"test.authors\",\n                  uuid: UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\"),\n                  shard: \"shard02\"\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/MissingLocalCollection.txt"
  },
  {
    "code": "   :emphasize-lines: 6-13\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"MissingRoutingTable\",\n               description: \"There is a sharded collection without routing table\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"1ad56770-61e2-48e9-83c6-8ecefe73cfc4\")\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/MissingRoutingTable.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"MissingShardKeyIndex\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         shard: \"<string>\",\n         shardKey: { <document> }\n      }\n   }\n\n|incon-type| inconsistency documents contain the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 15 65 \n\n   * - Field\n     - Type\n     - Description\n\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n\n   * - ``details.shard``\n     - string\n     - .. include:: /includes/inconsistency-type/details.shard\n\n   * - ``details.shardKey``\n     - document\n     - The shard key that requires an index. \n\nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/MissingShardKeyIndex.txt"
  },
  {
    "code": "   :emphasize-lines: 6-16\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"MissingShardKeyIndex\",\n               description: \"Found sharded collection without a shard key index\",\n               details: {\n                  namespace: \"test.authors\",\n                  shard: \"shard-rs0\",\n                  shardKey: { \n                     skey: 1\n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/MissingShardKeyIndex.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"RoutingTableMissingMaxKey\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         collectionUUID: <string>,\n         maxKeyObj: { <document> },\n         globalMax: { <document> }\n      }\n   }\n\n\n|incon-type| inconsistency documents contain the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n   * - ``details.collectionUUID``\n     - UUID\n     - .. include:: /includes/inconsistency-type/details.collectionUUID\n\n   * - ``details.maxKeyObj``\n     - document\n     - The max key used by the collection.\n\n   * - ``details.globalMax``\n     - document\n     - The expected max key of the collection.\n\nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableMissingMaxKey.txt"
  },
  {
    "code": "   :emphasize-lines: 6-19\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"RoutingTableMissingMaxKey\",\n               description: \"Routing table has a gap because last chunk boundary does not reach MaxKey\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  maxKeyObj: { \n                     x: 0 \n                  },\n                  globalMax: { \n                     x: MaxKey \n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableMissingMaxKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"RoutingTableMissingMinKey\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         collectionUUID: <string>,\n         minKeyObj: { <document> },\n         globalMin: { <document> }\n      }\n   }\n\n\n|incon-type| inconsistency documents contain the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60 \n\n   * - Field\n     - Type\n     - Description\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n   * - ``details.collectionUUID``\n     - UUID\n     - .. include:: /includes/inconsistency-type/details.collectionUUID\n\n   * - ``details.minKeyObj``\n     - document\n     - The minimum key used by the collection.\n\n   * - ``details.globalMin``\n     - document\n     - The expected minimum key of the collection.\n\nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableMissingMinKey.txt"
  },
  {
    "code": "   :emphasize-lines: 6-19\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"RoutingTableMissingMinKey\",\n               description: \"Routing table has a gap because first chunk does not start from MinKey\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  minKeyObj: { \n                     x: 0 \n                  },\n                  globalMin: { \n                     x: MinKey \n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableMissingMinKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"RoutingTableRangeGap\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         collectionUUID: <string>,\n         chunkA: {<document>},\n         chunkB: {<document>}\n      }\n   }\n\n|incon-type| inconsistency documents contain the following fields:\n\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n   * - ``details.collectionUUID``\n     - UUID\n     - .. include:: /includes/inconsistency-type/details.collectionUUID\n  \n   * - ``details.chunkA``\n     - document\n     - The first chunk that has a gap with the second chunk.\n\n   * - ``details.chunkB``\n     - document\n     - The second chunk that has a gap with the first chunk.\n\nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableRangeGap.txt"
  },
  {
    "code": "   :emphasize-lines: 6-51\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"RoutingTableRangeGap\",\n               description: \"Found a gap between two consecutive chunks\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  chunkA: { \n                    _id: ObjectId(\"64dde749ac6045c92ef3b9ad\"), \n                    uuid: new UUID(\"8c83ea89-ab6b-4ae4-91ab-813cf781284d\"), \n                    min: { \n                       x: MinKey \n                    }, \n                    max: { \n                       x: 0 \n                    }, \n                    shard: \"shard0000\", \n                    lastmod: Timestamp(1, 0), \n                    onCurrentShardSince: Timestamp(1, 0), \n                     history: [ \n                        { \n                           validAfter: Timestamp(1, 0), \n                           shard: \"shard0000\" \n                        } \n                     ] \n                  },\n                  chunkB: { \n                     _id: ObjectId(\"64dde749ac6045c92ef3b9af\"), \n                     uuid: new UUID(\"8c83ea89-ab6b-4ae4-91ab-813cf781284d\"), \n                     min: { \n                        x: 10\n                     }, \n                     max: { \n                        x: MaxKey\n                     }, \n                     shard: \"shard0000\", \n                     lastmod: Timestamp(1, 0), \n                     onCurrentShardSince: Timestamp(1, 0), \n                     history: [ \n                        { \n                           validAfter: Timestamp(1, 0), \n                           shard: \"shard0000\" \n                        } \n                     ] \n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableRangeGap.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"RoutingTableRangeOverlap\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         collectionUUID: <string>,\n         chunkA: {<document>},\n         chunkB: {<document>}\n      }\n   }\n\n|incon-type| inconsistency documents contain the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n   * - ``details.collectionUUID``\n     - UUID\n     - .. include:: /includes/inconsistency-type/details.collectionUUID\n\n   * - ``details.chunkA``\n     - document\n     - The first chunk that overlaps with the second chunk.\n\n   * - ``details.chunkB``\n     - document\n     - The second chunk that overlaps with the first chunk.\n     \nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableRangeOverlap.txt"
  },
  {
    "code": "   :emphasize-lines: 6-51\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"RoutingTableRangeOverlap\",\n               description: \"Found two overlapping consecutive chunks\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  chunkA: { \n                     _id: ObjectId(\"64dde749ac6045c92ef3b9ad\"), \n                     uuid: new UUID(\"8c83ea89-ab6b-4ae4-91ab-813cf781284d\"), \n                     min: { \n                        x: MinKey \n                     }, \n                     max: { \n                        x: 0 \n                     }, \n                     shard: \"shard0000\", \n                     lastmod: Timestamp(1, 0), \n                     onCurrentShardSince: Timestamp(1, 0), \n                     history: [ \n                        { \n                           validAfter: Timestamp(1, 0), \n                           shard: \"shard0000\" \n                        } \n                     ] \n                  },\n                  chunkB: { \n                     _id: ObjectId(\"64dde749ac6045c92ef3b9af\"), \n                     uuid: new UUID(\"8c83ea89-ab6b-4ae4-91ab-813cf781284d\"), \n                     min: { \n                        x: -10 \n                     }, \n                     max: { \n                        x: MaxKey \n                     }, \n                     shard: \"shard0000\", \n                     lastmod: Timestamp(1, 0), \n                     onCurrentShardSince: Timestamp(1, 0), \n                     history: [ \n                        { \n                           validAfter: Timestamp(1, 0), \n                           shard: \"shard0000\" \n                        }\n                     ]\n                  }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/RoutingTableRangeOverlap.txt"
  },
  {
    "code": "   :emphasize-lines: 6-15\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"ShardMissingCollectionRoutingInfo\",\n               description: \"Shard is missing routing information for the collection\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  shard: \"shard02\"\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/ShardMissingCollectionRoutingInfo.txt"
  },
  {
    "code": "   :emphasize-lines: 6-14\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"TrackedUnshardedCollectionHasInvalidKey\",\n               description: \"Found tracked unsharded collection with invalid shard-key\",\n               details: {\n                  namespace: \"test.authors\",\n                  uuid: UUID(\"ebfba414-b576-4f77-bb0e-0d56f3a53c55\"),\n                  shardKey: { \"name\": 1 }\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/TrackedUnshardedCollectionHasInvalidKey.txt"
  },
  {
    "code": "   :emphasize-lines: 6-14\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"TrackedUnshardedCollectionHasMultipleChunks\",\n               description: \"Found tracked unsharded collection with more than one chunks\",\n               details: {\n                  namespace: \"test.authors\",\n                  uuid: UUID(\"0a5ed8eb-d769-456a-8c8b-c67ee99cfd8a\"),\n                  numChunks: 2\n               }\n            }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/TrackedUnshardedCollectionHasMultipleChunks.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      type: \"ZonesRangeOverlap\",\n      description: \"<string>\",\n      details: {\n         namespace: \"<string>\",\n         collectionUUID: <string>,\n         zoneA: {<document>},\n         zoneB: {<document>}\n      }\n   }\n\n|incon-type| inconsistency documents contain the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``type``\n     - string\n     - .. include:: /includes/inconsistency-type/type\n\n\n   * - ``description``\n     - string\n     - .. include:: /includes/inconsistency-type/descr\n\n\n   * - ``details``\n     - document\n     - .. include:: /includes/inconsistency-type/details\n\n\n   * - ``details.namespace``\n     - string\n     - .. include:: /includes/inconsistency-type/details.namespace\n\n   * - ``details.collectionUUID``\n     - UUID\n     - .. include:: /includes/inconsistency-type/details.collectionUUID\n\n   * - ``details.zoneA``\n     - document\n     - The first zone that overlaps with the second zone.\n\n   * - ``details.zoneB``\n     - document\n     - The second zone that overlaps with the first zone.\n\nExample\n=======\n\n.. include:: /includes/inconsistency-type/example\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/ZonesRangeOverlap.txt"
  },
  {
    "code": "   :emphasize-lines: 6-25\n   :copyable: false\n\n   {\n      cursor: {\n         id: Long(\"0\"),\n         ns: \"test.$cmd.aggregate\",\n         firstBatch: [\n            {\n               type: \"ZonesRangeOverlap\",\n               description: \"Found two overlapping zones\",\n               details: {\n                  namespace: \"test.authors\",\n                  collectionUUID: new UUID(\"62ebdb7e-a7bb-4151-a620-49d44cef097f\"),\n                  zoneA: { \n                     ns: \"test.authors\", \n                     tag: \"64ddec77e0d32b766bb8d5fe\", \n                     min: { x: MinKey }, \n                     max: { x: 0 } \n                  },\n                  zoneB: { \n                     ns: \"test.authors\", \n                     tag: \"64ddec77e0d32b766bb8d5ff\", \n                     min: { x: -10 }, \n                     max: { x: MaxKey }\n                  }\n                }\n             }\n         ],\n      },\n      ok: 1\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/inconsistency-type/ZonesRangeOverlap.txt"
  },
  {
    "code": "      :copyable: false\n\n      {\"t\":{\"$date\":\"2020-05-01T15:16:17.180+00:00\"},\"s\":\"I\", \"c\":\"NETWORK\", \"id\":12345, \"ctx\":\"listener\", \"svc\": \"R\", \"msg\":\"Listening on\", \"attr\":{\"address\":\"127.0.0.1\"}}\n\n   JSON log entries can be :ref:`pretty-printed\n   <log-message-pretty-printing>` for readability. Here is the same log\n   entry pretty-printed:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "      :copyable: false\n\n      {\n        \"t\": {\n          \"$date\": \"2020-05-01T15:16:17.180+00:00\"\n        },\n        \"s\": \"I\",\n        \"c\": \"NETWORK\",\n        \"id\": 12345,\n        \"ctx\": \"listener\",\n        \"svc\": \"R\",\n        \"msg\": \"Listening on\",\n        \"attr\": {\n          \"address\": \"127.0.0.1\"\n        }\n      }\n\n   In this log entry, for example, the key ``s``, representing\n   :ref:`severity <log-severity-levels>`, has a corresponding value of\n   ``I``, representing \"Informational\", and the key ``c``, representing\n   :ref:`component <log-message-components>`, has a corresponding value\n   of ``NETWORK``, indicating that the \"network\" component was\n   responsible for this particular message. The various field types are\n   presented in detail in the :ref:`log-message-field-types` section.\n\nStructured logging with key-value pairs allows for efficient parsing\nby automated tools or log ingestion services, and makes programmatic\nsearch and analysis of log messages easier to perform. Examples of\nanalyzing structured log messages can be found in the\n:ref:`log-message-parsing` section.\n\n.. note:: \n\n   The ``mongod`` quits if it's unable to write to the log file. To\n   ensure that ``mongod`` can write to the log file, verify that the log\n   volume has space on the disk and the logs are rotated. \n\n.. _log-message-json-output-format:\n\nJSON Log Output Format\n~~~~~~~~~~~~~~~~~~~~~~\n\nAll log output is in JSON format including output sent to:\n\n- Log file\n- Syslog\n- Stdout (standard out) :ref:`log destinations\n  <log-message-destinations>`\n\nOutput from the :dbcommand:`getLog` command is also in JSON format.\n\nEach log entry is output as a self-contained JSON object which follows\nthe :ref:`Relaxed Extended JSON v2.0 <mongodb-extended-json-v2>`\nspecification, and has the following layout and field order:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\": <Datetime>, // timestamp\n     \"s\": <String>, // severity\n     \"c\": <String>, // component\n     \"id\": <Integer>, // unique identifier\n     \"ctx\": <String>, // context\n     \"svc\": <String>, // service\n     \"msg\": <String>, // message body\n     \"attr\": <Object>, // additional attributes (optional)\n     \"tags\": <Array of strings>, // tags (optional)\n     \"truncated\": <Object>, // truncation info (if truncated)\n     \"size\": <Object> // original size of entry (if truncated)\n   }\n\nField descriptions:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 10 10 50\n\n   * - Field Name\n     - Type\n     - Description\n\n   * - ``t``\n     - Datetime\n     - Timestamp of the log message in ISO-8601 format. For an example,\n       see :ref:`log-message-timestamp`.\n\n   * - ``s``\n     - String\n     - Short severity code of the log message. For an example, see\n       :ref:`log-severity-levels`.\n\n   * - ``c``\n     - String\n     - Full component string for the log message. For an example, see\n       :ref:`log-message-components`.\n\n   * - ``id``\n     - Integer\n     - Unique identifier for the log statement. For an example, see\n       :ref:`log-message-parsing-example-filter-id`.\n\n   * - ``ctx``\n     - String\n     - Name of the thread that caused the log statement.\n\n   * - ``svc``\n     - String\n     - Name of the service in whose context the log statement was made. Will be \n       ``S`` for \"shard\", ``R`` \"router\", or ``-`` for \"unknown\" or \"none\".\n\n   * - ``msg``\n     - String\n     - Log output message passed from the server or driver. If\n       necessary, the message is :ref:`escaped\n       <log-message-json-escaping>` according to the JSON specification.\n\n   * - ``attr``\n     - Object\n     - | One or more key-value pairs for additional log attributes. If a\n       | log message does not include any additional attributes, the\n       | ``attr`` object is omitted.\n       \n       | Attribute values may be referenced by their key name in the\n       | ``msg`` message body, depending on the message. If necessary, the\n       | attributes are :ref:`escaped <log-message-json-escaping>`\n       | according to the JSON specification.\n\n   * - ``tags``\n     - Array of strings\n     - Strings representing any tags applicable to the log statement.\n       For example, ``[\"startupWarnings\"]``.\n\n   * - ``truncated``\n     - Object\n     - Information about the :ref:`log message truncation\n       <log-message-truncation>`, if applicable. Only included if the\n       log entry contains at least one truncated ``attr`` attribute.\n\n   * - ``size``\n     - Object\n     - Original size of a log entry if it has been :ref:`truncated\n       <log-message-truncation>`. Only included if the log entry\n       contains at least one truncated ``attr`` attribute.\n\n.. _log-message-json-escaping:\n\nEscaping\n````````\n\nThe **message** and **attributes** fields will escape control\ncharacters as necessary according to the\nRelaxed Extended JSON v2.0 specification:\n\n.. include:: /includes/fact-json-escape-sequences.rst\n\nAn example of message escaping is provided in the\n:ref:`examples section <log-message-json-examples>`.\n\n.. _log-message-truncation:\n\nTruncation\n``````````\n\n.. versionchanged:: 7.3\n\nAny **attributes** that exceed the maximum size defined with\n:parameter:`maxLogSizeKB` (default: 10 KB) are truncated. Truncated\nattributes omit log data beyond the configured limit, but retain the\nJSON formatting of the entry to ensure that the entry remains parsable.\n\nFor example, the following JSON object represents a ``command`` attribute\nthat contains 5000 elements in the ``$in`` field without truncation.\n\n.. note:: \n\n   The example log entries are reformatted for readability.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n   :copyable: false \n   \n   { \n     \"command\": { \n       \"find\": \"mycoll\", \n       \"filter\": { \n         \"value1\": {\n           \"$in\": [0, 1, 2, 3, ... 4999]\n         },\n         \"value2\": \"foo\"\n\t\t },\n\t\t \"sort\": { \"value1\": 1 },\n\t\t \"lsid\":{\"id\":{\"$uuid\":\"80a99e49-a850-467b-a26d-aeb2d8b9f42b\"}},\n\t\t \"$db\": \"testdb\"\n\t   }\n   }\n\nIn this example, the ``$in`` array is truncated at the 376th element because the  \nsize of the ``command`` attribute would exceed :parameter:`maxLogSizeKB` if \nit included the subsequent elements. The remainder of the ``command`` \nattribute is omitted. The truncated log entry resembles the following output: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false \n   \n   {\n     \"t\": { \"$date\": \"2021-03-17T20:30:07.212+01:00\" },\n     \"s\": \"I\",\n     \"c\": \"COMMAND\",\n     \"id\": 51803,\n     \"ctx\": \"conn9\",\n     \"msg\": \"Slow query\",\n     \"attr\": {\n       \"command\": {\n         \"find\": \"mycoll\",\n         \"filter\": {\n           \"value1\": {\n             \"$in\": [ 0, 1, ..., 376 ] // Values in array omitted for brevity\n           }\n         }\n       },\n       ... // Other attr fields omitted for brevity\n     },\n     \"truncated\": {\n       \"command\": {\n         \"truncated\": {\n           \"filter\": {\n             \"truncated\": {\n               \"value1\": {\n                 \"truncated\": {\n                   \"$in\": {\n                     \"truncated\": {\n                       \"377\": {\n                         \"type\": \"double\",\n                         \"size\": 8\n                       }\n                     },\n                     \"omitted\": 4623\n                   }\n                 }\n               }\n             },\n             \"omitted\": 1\n           }\n         },\n         \"omitted\": 3\n       }\n     },\n     \"size\": {\n       \"command\": 21692\n     }\n   }\n\nLog entries containing one or more truncated attributes include nested\n``truncated`` objects, which provide the following information for each\ntruncated attribute in the log entry:\n\n- The attribute that was truncated\n- The specific sub-object of that attribute that triggered truncation, if\n  applicable\n- The data ``type`` of the truncated field\n- The ``size``, in bytes, of the element that triggers truncation\n- The number of elements that were ``omitted`` under each sub-object due to \n  truncation\n\nLog entries with truncated attributes may also include an additional\n``size`` field at the end of the entry which indicates the original\nsize of the attribute before truncation, in this case ``21692`` or about\n22KB. This final ``size`` field is only shown if it is different from\nthe ``size`` field in the ``truncated`` object, i.e. if the total object\nsize of the attribute is different from the size of the truncated\nsub-object, as is the case in the example above.\n\nPadding\n```````\n\nWhen output to the *file* or the *syslog* log destinations, padding is\nadded after the **severity**, **context**, and **id** fields to increase\nreadability when viewed with a fixed-width font.\n\nThe following MongoDB log file excerpt demonstrates this padding:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.724+00:00\"},\"s\":\"I\", \"c\":\"CONTROL\", \"id\":23285, \"ctx\":\"main\", \"svc\": \"R\", \"msg\":\"Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'\"}\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.734+00:00\"},\"s\":\"W\", \"c\":\"ASIO\", \"id\":22601, \"ctx\":\"main\", \"svc\": \"R\", \"msg\":\"No TransportLayer configured during NetworkInterface startup\"}\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.734+00:00\"},\"s\":\"I\", \"c\":\"NETWORK\", \"id\":4648601, \"ctx\":\"main\", \"svc\": \"R\", \"msg\":\"Implicit TCP FastOpen unavailable. If TCP FastOpen is required, set tcpFastOpenServer, tcpFastOpenClient, and tcpFastOpenQueueSize.\"}\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.814+00:00\"},\"s\":\"I\", \"c\":\"STORAGE\", \"id\":4615611, \"ctx\":\"initandlisten\", \"svc\": \"R\", \"msg\":\"MongoDB starting\", \"attr\":{\"pid\":10111,\"port\":27001,\"dbPath\":\"/var/lib/mongo\",\"architecture\":\"64-bit\",\"host\":\"centos8\"}}\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.814+00:00\"},\"s\":\"I\", \"c\":\"CONTROL\", \"id\":23403, \"ctx\":\"initandlisten\", \"svc\": \"R\", \"msg\":\"Build Info\", \"attr\":{\"buildInfo\":{\"version\":\"4.4.0\",\"gitVersion\":\"328c35e4b883540675fb4b626c53a08f74e43cf0\",\"openSSLVersion\":\"OpenSSL 1.1.1c FIPS  28 May 2019\",\"modules\":[],\"allocator\":\"tcmalloc\",\"environment\":{\"distmod\":\"rhel80\",\"distarch\":\"x86_64\",\"target_arch\":\"x86_64\"}}}}\n   {\"t\":{\"$date\":\"2020-05-18T20:18:12.814+00:00\"},\"s\":\"I\", \"c\":\"CONTROL\", \"id\":51765, \"ctx\":\"initandlisten\", \"svc\": \"R\", \"msg\":\"Operating System\", \"attr\":{\"os\":{\"name\":\"CentOS Linux release 8.0.1905 (Core) \",\"version\":\"Kernel 4.18.0-80.11.2.el8_0.x86_64\"}}}\n\n.. _log-message-pretty-printing:\n\nPretty Printing\n```````````````\n\n.. include:: /includes/fact-use-jq-with-structured-logging.rst\n\nYou can use ``jq`` to pretty-print log entries as follows:\n\n- Pretty-print the entire log file:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 2-4\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-01T15:16:17.180+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"NETWORK\",\n     \"id\": 12345,\n     \"ctx\": \"listener\",\n     \"svc\": \"R\", \n     \"msg\": \"Listening on\",\n     \"attr\": {\n       \"address\": \"127.0.0.1\"\n     }\n   }\n\nWhen logging to *file* or to *syslog* [#syslog-ts]_, the default\nformat for the timestamp is ``iso8601-local``. To modify the\ntimestamp format, use the :option:`--timeStampFormat <mongod\n--timeStampFormat>` runtime option or the\n:setting:`systemLog.timeStampFormat` setting.\n\nSee :ref:`log-message-parsing-example-filter-timestamp` for log parsing\nexamples that filter on the timestamp field.\n\n.. note::\n\n   The ``ctime`` timestamp format is no longer supported.\n\n.. [#syslog-ts]\n\n   If logging to *syslog*, the ``syslog`` daemon generates timestamps\n   when it logs a message, not when MongoDB issues the message. This\n   can lead to misleading timestamps for log entries, especially when\n   the system is under heavy load.\n\n.. _log-severity-levels:\n\nSeverity\n~~~~~~~~\n\nThe severity field type indicates the severity level associated with the\nlogged event.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 5\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-01T15:16:17.180+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"NETWORK\",\n     \"id\": 12345,\n     \"ctx\": \"listener\",\n     \"svc\": \"R\", \n     \"msg\": \"Listening on\",\n     \"attr\": {\n       \"address\": \"127.0.0.1\"\n     }\n   }\n\nSeverity levels range from \"Fatal\" (most severe) to \"Debug\" (least\nsevere):\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Level\n     - Description\n\n   * - ``F``\n     - Fatal\n\n   * - ``E``\n     - Error\n\n   * - ``W``\n     - Warning\n\n   * - ``I``\n     - Informational, for :ref:`verbosity level\n       <log-messages-configure-verbosity>` ``0``\n\n   * - ``D1`` - ``D5``\n     - Debug, for :ref:`verbosity levels\n       <log-messages-configure-verbosity>` > ``0``\n\n       MongoDB indicates the specific\n       :ref:`debug verbosity level <log-messages-configure-verbosity>`.\n       For example, if verbosity level is 2, MongoDB indicates ``D2``.\n\n       In previous versions, MongoDB log messages specified ``D``\n       for all debug verbosity levels.\n\nYou can specify the verbosity level of various components to determine\nthe amount of **Informational** and **Debug** messages MongoDB outputs.\nSeverity categories above these levels are always shown. [#slow-oplogs]_\nTo set verbosity levels, see :ref:`log-messages-configure-verbosity`.\n\n.. _log-message-components:\n\nComponents\n~~~~~~~~~~\n\nThe component field type indicates the category a logged event is a\nmember of, such as **NETWORK** or **COMMAND**.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 6\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-01T15:16:17.180+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"NETWORK\",\n     \"id\": 12345,\n     \"ctx\": \"listener\",\n     \"svc\": \"R\", \n     \"msg\": \"Listening on\",\n     \"attr\": {\n       \"address\": \"127.0.0.1\"\n     }\n   }\n\nEach component is individually configurable via its own\n:ref:`verbosity filter <log-messages-configure-verbosity>`. The\navailable components are as follows:\n\n.. data:: ACCESS\n\n   Messages related to access control, such as authentication. To\n   specify the log level for :data:`ACCESS` components, use the\n   :setting:`systemLog.component.accessControl.verbosity` setting.\n\n.. data:: COMMAND\n\n   Messages related to :ref:`database commands <database-commands>`,\n   such as :dbcommand:`count`. To specify the log level for\n   :data:`COMMAND` components, use the\n   :setting:`systemLog.component.command.verbosity` setting.\n\n.. data:: CONTROL\n\n   Messages related to control activities, such as initialization. To\n   specify the log level for :data:`CONTROL` components, use the\n   :setting:`systemLog.component.control.verbosity` setting.\n\n.. data:: ELECTION\n\n   Messages related specifically to replica set elections. To specify\n   the log level for :data:`ELECTION` components, set the\n   :setting:`systemLog.component.replication.election.verbosity`\n   parameter.\n\n   :data:`REPL` is the parent component of :data:`ELECTION`. If\n   :setting:`systemLog.component.replication.election.verbosity` is\n   unset, MongoDB uses the :data:`REPL` verbosity level for\n   :data:`ELECTION` components.\n\n.. data:: FTDC\n   \n   Messages related to the diagnostic data collection mechanism, such \n   as server statistics and status messages. To specify the log level\n   for :data:`FTDC` components, use the \n   :setting:`systemLog.component.ftdc.verbosity` setting.\n\n.. data:: GEO\n\n   Messages related to the parsing of geospatial shapes, such as\n   verifying the GeoJSON shapes. To specify the log level for\n   :data:`GEO` components, set the\n   :setting:`systemLog.component.geo.verbosity` parameter.\n\n.. data:: INDEX\n\n   Messages related to indexing operations, such as\n   creating indexes. To specify the log level for\n   :data:`INDEX` components, set the\n   :setting:`systemLog.component.index.verbosity` parameter.\n\n.. data:: INITSYNC\n\n   Messages related to initial sync operation. To specify the log level\n   for :data:`INITSYNC` components, set the\n   :setting:`systemLog.component.replication.initialSync.verbosity`\n   parameter.\n\n   :data:`REPL` is the parent component of :data:`INITSYNC`. If\n   :setting:`systemLog.component.replication.initialSync.verbosity` is\n   unset, MongoDB uses the :data:`REPL` verbosity level for\n   :data:`INITSYNC` components.\n\n.. data:: JOURNAL\n\n   Messages related specifically to storage journaling activities. To\n   specify the log level for :data:`JOURNAL` components, use the\n   :setting:`systemLog.component.storage.journal.verbosity` setting.\n\n   :data:`STORAGE` is the parent component of :data:`JOURNAL`. If\n   :setting:`systemLog.component.storage.journal.verbosity` is\n   unset, MongoDB uses the :data:`STORAGE` verbosity level for\n   :data:`JOURNAL` components.\n\n.. data:: NETWORK\n\n   Messages related to network activities, such as accepting\n   connections. To specify the log level for :data:`NETWORK`\n   components, set the\n   :setting:`systemLog.component.network.verbosity` parameter.\n\n.. data:: QUERY\n\n   Messages related to queries, including query planner activities.\n   To specify the log level for :data:`QUERY` components, set the\n   :setting:`systemLog.component.query.verbosity` parameter.\n\n.. data:: QUERYSTATS\n\n   Messages related to :pipeline:`$queryStats` operations. To specify the log \n   level for ``QUERYSTATS`` components, set the \n   :setting:`systemLog.component.queryStats.verbosity` parameter.\n\n.. data:: RECOVERY\n\n   Messages related to storage recovery activities. To specify the log\n   level for :data:`RECOVERY` components, use the\n   :setting:`systemLog.component.storage.recovery.verbosity` setting.\n\n   :data:`STORAGE` is the parent component of :data:`RECOVERY`. If\n   :setting:`systemLog.component.storage.recovery.verbosity` is\n   unset, MongoDB uses the :data:`STORAGE` verbosity level for\n   :data:`RECOVERY` components.\n\n.. data:: REPL\n\n   Messages related to replica sets, such as initial sync, heartbeats,\n   steady state replication, and rollback. [#slow-oplogs]_ To specify\n   the log level for :data:`REPL` components, set the\n   :setting:`systemLog.component.replication.verbosity` parameter.\n\n   :data:`REPL` is the parent component of the :data:`ELECTION`,\n   :data:`INITSYNC`, :data:`REPL_HB`, and :data:`ROLLBACK` components.\n\n.. data:: REPL_HB\n\n   Messages related specifically to replica set heartbeats. To specify\n   the log level for :data:`REPL_HB` components, set the\n   :setting:`systemLog.component.replication.heartbeats.verbosity`\n   parameter.\n\n   :data:`REPL` is the parent component of :data:`REPL_HB`. If\n   :setting:`systemLog.component.replication.heartbeats.verbosity` is\n   unset, MongoDB uses the :data:`REPL` verbosity level for\n   :data:`REPL_HB` components.\n\n.. data:: ROLLBACK\n\n   Messages related to :ref:`rollback<replica-set-rollbacks>`\n   operations. To specify the log level for :data:`ROLLBACK` components,\n   set the :setting:`systemLog.component.replication.rollback.verbosity`\n   parameter.\n\n   :data:`REPL` is the parent component of :data:`ROLLBACK`. If\n   :setting:`systemLog.component.replication.rollback.verbosity` is\n   unset, MongoDB uses the :data:`REPL` verbosity level for\n   :data:`ROLLBACK` components.\n\n.. data:: SHARDING\n\n   Messages related to sharding activities, such as the startup of\n   the :binary:`~bin.mongos`. To specify the log level for\n   :data:`SHARDING` components, use the\n   :setting:`systemLog.component.sharding.verbosity` setting.\n\n.. data:: STORAGE\n\n   Messages related to storage activities, such as processes involved\n   in the :dbcommand:`fsync` command. To specify the log level for\n   :data:`STORAGE` components, use the\n   :setting:`systemLog.component.storage.verbosity` setting.\n\n   :data:`STORAGE` is the parent component of :data:`JOURNAL` and\n   :data:`RECOVERY`.\n\n.. data:: TXN\n\n   Messages related to :ref:`multi-document transactions\n   <transactions>`. To specify the log level for :data:`TXN`\n   components, use the\n   :setting:`systemLog.component.transaction.verbosity` setting.\n\n.. data:: WRITE\n\n   Messages related to write operations, such as :dbcommand:`update`\n   commands. To specify the log level for :data:`WRITE` components,\n   use the :setting:`systemLog.component.write.verbosity` setting.\n\n.. data:: WT\n\n   .. versionadded:: 5.3\n\n   Messages related to the :ref:`WiredTiger <storage-wiredtiger>` storage\n   engine. To specify the log level for :data:`WT` components, use the\n   :setting:`systemLog.component.storage.wt.verbosity` setting.\n\n.. data:: WTBACKUP\n\n   .. versionadded:: 5.3\n\n   Messages related to backup operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine.\n   To specify the log level for the :data:`WTBACKUP` components, use the\n   :setting:`systemLog.component.storage.wt.wtBackup.verbosity` setting.\n\n.. data:: WTCHKPT\n\n   .. versionadded:: 5.3\n\n   Messages related to checkpoint operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine.\n   To specify the log level for :data:`WTCHKPT` components, use the\n   :setting:`systemLog.component.storage.wt.wtCheckpoint.verbosity` setting.\n\n.. data:: WTCMPCT\n\n   .. versionadded:: 5.3\n\n   Messages related to compaction operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify the log\n   level for :data:`WTCMPCT` components, use the\n   :setting:`systemLog.component.storage.wt.wtCompact.verbosity` setting.\n\n.. data:: WTEVICT\n\n   .. versionadded:: 5.3\n\n   Messages related to eviction operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify the log\n   level for :data:`WTEVICT` components, use the\n   :setting:`systemLog.component.storage.wt.wtEviction.verbosity` setting.\n\n.. data:: WTHS\n\n   .. versionadded:: 5.3\n\n   Messages related to the history store of the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTHS` components, use the\n   :setting:`systemLog.component.storage.wt.wtHS.verbosity` setting.\n\n.. data:: WTRECOV\n\n   .. versionadded:: 5.3\n\n   Messages related to recovery operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTRECOV` components, use the\n   :setting:`systemLog.component.storage.wt.wtRecovery.verbosity` setting.\n\n.. data:: WTRTS\n\n   .. versionadded:: 5.3\n\n   Messages related to rollback to stable (RTS) operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTRTS` components, use the\n   :setting:`systemLog.component.storage.wt.wtRTS.verbosity` setting.\n\n.. data:: WTSLVG\n\n   .. versionadded:: 5.3\n\n   Messages related to salvage operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTSLVG` components, use the\n   :setting:`systemLog.component.storage.wt.wtSalvage.verbosity` setting.\n\n.. data:: WTTS\n\n   .. versionadded:: 5.3\n\n   Messages related to timestamps used by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTTS` components, use the\n   :setting:`systemLog.component.storage.wt.wtTimestamp.verbosity` setting.\n\n.. data:: WTTXN\n\n   .. versionadded:: 5.3\n\n   Messages related to transactions performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTTXN` components, use the\n   :setting:`systemLog.component.storage.wt.wtTransaction.verbosity` setting.\n\n.. data:: WTVRFY\n\n   .. versionadded:: 5.3\n\n   Messages related to verification operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTVRFY` components, use the\n   :setting:`systemLog.component.storage.wt.wtVerify.verbosity` setting.\n\n.. data:: WTWRTLOG\n\n   .. versionadded:: 5.3\n\n   Messages related to log write operations performed by the\n   :ref:`WiredTiger <storage-wiredtiger>` storage engine. To specify\n   the log level for :data:`WTWRTLOG` components, use the\n   :setting:`systemLog.component.storage.wt.wtWriteLog.verbosity` setting.\n\n.. data:: -\n\n   Messages not associated with a named component. Unnamed components\n   have the default log level specified in the\n   :setting:`systemLog.verbosity` setting. The\n   :setting:`systemLog.verbosity` setting is the default setting for\n   both named and unnamed components.\n\nSee :ref:`log-message-parsing-example-filter-component` for log parsing\nexamples that filter on the component field.\n\n.. _log-messages-client-data:\n\nClient Data\n~~~~~~~~~~~\n\n:driver:`MongoDB Drivers </>` and client applications (including \n:binary:`~bin.mongosh`) have the ability to send identifying information at the \ntime of connection to the server. After the connection is established, the \nclient does not send the identifying information again unless the connection is \ndropped and reestablished.\n\nThis identifying information is contained in the **attributes**\nfield of the log entry. The exact information included varies by client. \n\nBelow is a sample log message containing the client data document as\ntransmitted from a :binary:`~bin.mongosh` connection. The client\ndata is contained in the ``doc`` object in the **attributes** field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"t\":{\"$date\":\"2020-05-20T16:21:31.561+00:00\"},\"s\":\"I\", \"c\":\"NETWORK\", \"id\":51800, \"ctx\":\"conn202\", \"svc\": \"R\", \"msg\":\"client metadata\", \"attr\":{\"remote\":\"127.0.0.1:37106\",\"client\":\"conn202\",\"doc\":{\"application\":{\"name\":\"MongoDB Shell\"},\"driver\":{\"name\":\"MongoDB Internal Client\",\"version\":\"4.4.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"CentOS Linux release 8.0.1905 (Core) \",\"architecture\":\"x86_64\",\"version\":\"Kernel 4.18.0-80.11.2.el8_0.x86_64\"}}}}\n\nWhen secondary members of a\n:ref:`replica set <replica-set-members>` initiate\na connection to a primary, they send similar data. A sample log message\ncontaining this initiation connection might appear as follows. The\nclient data is contained in the ``doc`` object in the **attributes**\nfield:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"t\":{\"$date\":\"2020-05-20T16:33:40.595+00:00\"},\"s\":\"I\", \"c\":\"NETWORK\", \"id\":51800, \"ctx\":\"conn214\", \"svc\": \"R\", \"msg\":\"client metadata\", \"attr\":{\"remote\":\"127.0.0.1:37176\",\"client\":\"conn214\",\"doc\":{\"driver\":{\"name\":\"NetworkInterfaceTL\",\"version\":\"4.4.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"CentOS Linux release 8.0.1905 (Core) \",\"architecture\":\"x86_64\",\"version\":\"Kernel 4.18.0-80.11.2.el8_0.x86_64\"}}}}\n\nSee the :ref:`examples section <log-message-json-examples>` for a\n:ref:`pretty-printed <log-message-pretty-printing>` example showing\nclient data.\n\nFor a complete description of client information and required fields,\nsee the `MongoDB Handshake specification\n<https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst>`_.\n\n.. _log-message-verbosity-levels:\n\nVerbosity Levels\n----------------\n\nYou can specify the logging verbosity level to increase or decrease\nthe amount of log messages MongoDB outputs. Verbosity levels can be\nadjusted for all components together, or for specific\n:ref:`named components <log-message-components>` individually.\n\nVerbosity affects log entries in the :ref:`severity\n<log-severity-levels>` categories **Informational** and **Debug** only.\nSeverity categories above these levels are always shown.\n\nYou might set verbosity levels to a high value to show detailed logging\nfor debugging or development, or to a low value to minimize writes to\nthe log on a vetted production deployment. [#slow-oplogs]_\n\nView Current Log Verbosity Level\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo view the current verbosity levels, use the\n:method:`db.getLogComponents()` method:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n    \"verbosity\" : 0,\n    \"accessControl\" : {\n       \"verbosity\" : -1\n    },\n    \"command\" : {\n       \"verbosity\" : -1\n    },\n    ...\n    \"storage\" : {\n       \"verbosity\" : -1,\n       \"recovery\" : {\n          \"verbosity\" : -1\n       },\n       \"journal\" : {\n           \"verbosity\" : -1\n       }\n    },\n    ...\n\nThe initial ``verbosity`` entry is the parent verbosity level for all\ncomponents, while the individual :ref:`named components\n<log-message-components>` that follow, such as ``accessControl``,\nindicate the specific verbosity level for that component, overriding the\nglobal verbosity level for that particular component if set.\n\nA value of ``-1``, indicates that the component inherits the verbosity\nlevel of their parent, if they have one (as with ``recovery`` above,\ninheriting from ``storage``), or the global verbosity level if they do\nnot (as with ``command``). Inheritance relationships for verbosity\nlevels are indicated in the :ref:`components section\n<log-message-components>`.\n\n.. _log-messages-configure-verbosity:\n\nConfigure Log Verbosity Levels\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can configure the verbosity level using: the\n:setting:`systemLog.verbosity` and\n``systemLog.component.<name>.verbosity`` settings, the\n:parameter:`logComponentVerbosity` parameter, or the\n:method:`db.setLogLevel()` method. [#slow-oplogs]_\n\n``systemLog`` Verbosity Settings\n````````````````````````````````\n\nTo configure the default log level for all :ref:`components\n<log-message-components>`, use the :setting:`systemLog.verbosity`\nsetting. To configure the level of specific components, use the\n``systemLog.component.<name>.verbosity`` settings.\n\nFor example, the following configuration sets the\n:setting:`systemLog.verbosity` to ``1``, the\n:setting:`systemLog.component.query.verbosity` to ``2``, the\n:setting:`systemLog.component.storage.verbosity` to ``2``, and the\n:setting:`systemLog.component.storage.journal.verbosity` to ``1``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-20T19:17:06.188+00:00\"\n     },\n     \"s\": \"W\",\n     \"c\": \"CONTROL\",\n     \"id\": 22120,\n     \"ctx\": \"initandlisten\",\n     \"svc\": \"R\", \n     \"msg\": \"Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\",\n     \"tags\": [\n       \"startupWarnings\"\n     ]\n   }\n\nClient Connection\n~~~~~~~~~~~~~~~~~\n\nThis example shows a client connection that includes\n:ref:`client data <log-messages-client-data>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-20T19:18:40.604+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"NETWORK\",\n     \"id\": 51800,\n     \"ctx\": \"conn281\",\n     \"svc\": \"R\", \n     \"msg\": \"client metadata\",\n     \"attr\": {\n       \"remote\": \"192.168.14.15:37666\",\n       \"client\": \"conn281\",\n       \"doc\": {\n         \"application\": {\n           \"name\": \"MongoDB Shell\"\n         },\n         \"driver\": {\n           \"name\": \"MongoDB Internal Client\",\n           \"version\": \"4.4.0\"\n         },\n         \"os\": {\n           \"type\": \"Linux\",\n           \"name\": \"CentOS Linux release 8.0.1905 (Core) \",\n           \"architecture\": \"x86_64\",\n           \"version\": \"Kernel 4.18.0-80.11.2.el8_0.x86_64\"\n         }\n       }\n     }\n   }\n\n.. _log-message-json-examples-slow-op:\n\nSlow Operation\n~~~~~~~~~~~~~~\n\nStarting in MongoDB 8.0, slow operations are logged based on the time\nthat MongoDB spends working on that operation, rather than the total\nlatency for the operation.\n\nYou can use the metrics in the slow operation log to identify where an\noperation spends time in its lifecycle, which helps identify possible\nperformance improvements.\n\nIn the following example log message:\n\n- The amount of time spent waiting for resources while executing the\n  query is shown in these metrics:\n  \n  - ``queues.execution.totalTimeQueuedMicros``\n  - ``timeAcquiringMicros``\n\n- ``workingMillis`` is the amount of time that MongoDB spends working on\n  the operation.\n   \n- ``durationMillis`` is the operation's total latency.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :emphasize-lines: 59-61,72,89,92,93\n   :copyable: false\n\n   {\n      \"t\":{\n         \"$date\":\"2024-06-01T13:24:10.034+00:00\"\n      },\n      \"s\":\"I\",\n      \"c\":\"COMMAND\",\n      \"id\":51803,\n      \"ctx\":\"conn3\",\n      \"msg\":\"Slow query\",\n      \"attr\":{\n         \"type\":\"command\",\n         \"isFromUserConnection\":true,\n         \"ns\":\"db.coll\",\n         \"collectionType\":\"normal\",\n         \"appName\":\"MongoDB Shell\",\n         \"command\":{\n            \"find\":\"coll\",\n            \"filter\":{\n               \"b\":-1\n            },\n            \"sort\":{\n               \"splitPoint\":1\n            },\n            \"readConcern\":{ },\n            \"$db\":\"db\"\n         },\n         \"planSummary\":\"COLLSCAN\",\n         \"planningTimeMicros\":87,\n         \"keysExamined\":0,\n         \"docsExamined\":20889,\n         \"hasSortStage\":true,\n         \"nBatches\":1,\n         \"cursorExhausted\":true,\n         \"numYields\":164,\n         \"nreturned\":99,\n         \"planCacheShapeHash\":\"9C05019A\",\n         \"planCacheKey\":\"C41063D6\",\n         \"queryFramework\":\"classic\",\n         \"reslen\":96,\n         \"locks\":{\n            \"ReplicationStateTransition\":{\n               \"acquireCount\":{\n                  \"w\":3\n               }\n            },\n            \"Global\":{\n               \"acquireCount\":{\n                  \"r\":327,\n                  \"w\":1\n               }\n            },\n            \"Database\":{\n               \"acquireCount\":{\n                  \"r\":1\n               },\n               \"acquireWaitCount\":{\n                  \"r\":1\n               },\n               \"timeAcquiringMicros\":{\n                  \"r\":2814\n               }\n            },\n            \"Collection\":{\n               \"acquireCount\":{\n                  \"w\":1\n               }\n            }\n         },\n         \"flowControl\":{\n            \"acquireCount\":1,\n            \"acquireWaitCount\":1,\n            \"timeAcquiringMicros\":8387\n         },\n         \"readConcern\":{\n            \"level\":\"local\",\n            \"provenance\":\"implicitDefault\"\n         },\n         \"storage\":{ },\n         \"cpuNanos\":20987385,\n         \"remote\":\"127.0.0.1:47150\",\n         \"protocol\":\"op_msg\",\n         \"queues\":{\n            \"ingress\":{\n               \"admissions\":7,\n               \"totalTimeQueuedMicros\":0\n            },\n            \"execution\":{\n               \"admissions\":328,\n               \"totalTimeQueuedMicros\":2109\n            }\n         },\n         \"workingMillis\":89,\n         \"durationMillis\":101\n      }\n   }\n\n.. include:: /includes/plan-cache-rename.rst\n\nEscaping\n~~~~~~~~\n\nThis example demonstrates :ref:`character escaping\n<log-message-json-escaping>`, as shown in the ``setName`` field of the \nattribute object:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\": {\n       \"$date\": \"2020-05-20T19:11:09.268+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"REPL\",\n     \"id\": 21752,\n     \"ctx\": \"ReplCoord-0\",\n     \"svc\": \"R\",\n     \"msg\": \"Scheduling remote command request\",\n     \"attr\": {\n       \"context\": \"vote request\",\n       \"request\": \"RemoteCommand 229 -- target:localhost:27003 db:admin cmd:{ replSetRequestVotes: 1, setName: \\\"my-replica-name\\\", dryRun: true, term: 3, candidateIndex: 0, configVersion: 2, configTerm: 3, lastAppliedOpTime: { ts: Timestamp(1589915409, 1), t: 3 } }\"\n     }\n   }\n\n.. _log-message-view-example:\n\nView\n~~~~\n\nStarting in MongoDB 5.0, :ref:`log messages for slow queries\n<log-message-slow-ops>` on :ref:`views <views-landing-page>` include a\n``resolvedViews`` field that contains the view details:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   \"resolvedViews\": [ {\n      \"viewNamespace\": <String>,  // namespace and view name\n      \"dependencyChain\": <Array of strings>,  // view name and collection\n      \"resolvedPipeline\": <Array of documents>  // aggregation pipeline for view\n   } ]\n\nThe following example uses the ``test`` database and creates a view\nnamed ``myView`` that sorts the documents in ``myCollection`` by the\n``firstName`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"t\": {\n         \"$date\": \"2021-09-30T17:53:54.646+00:00\"\n      },\n      \"s\": \"I\",\n      \"c\": \"COMMAND\",\n      \"id\": 51803,\n      \"ctx\": \"conn249\",\n      \"svc\": \"R\",\n      \"msg\": \"Slow query\",\n      \"attr\": {\n         \"type\": \"command\",\n         \"ns\": \"test.myView\",\n         \"appName\": \"MongoDB Shell\",\n         \"command\": {\n            \"find\": \"myView\",\n            \"filter\": {},\n            \"lsid\": {\n               \"id\": { \"$uuid\": \"ad176471-60e5-4e82-b977-156a9970d30f\" }\n            },\n            \"$db\": \"test\"\n         },\n         \"planSummary\":\"COLLSCAN\",\n            \"resolvedViews\": [ {\n               \"viewNamespace\": \"test.myView\",\n               \"dependencyChain\": [ \"myView\", \"myCollection\" ],\n               \"resolvedPipeline\": [ { \"$sort\": { \"firstName\": 1 } } ]\n            } ],\n            \"keysExamined\": 0,\n            \"docsExamined\": 1,\n            \"hasSortStage\": true,\n            \"cursorExhausted\": true,\n            \"numYields\": 0,\n            \"nreturned\": 1,\n            \"planCacheShapeHash\": \"3344645B\",\n            \"planCacheKey\": \"1D3DE690\",\n            \"queryFramework\": \"classic\"\n            \"reslen\": 134,\n            \"locks\": { \"ParallelBatchWriterMode\": { \"acquireCount\": { \"r\": 1 } },\n            \"ReplicationStateTransition\": { \"acquireCount\": { \"w\": 1 } },\n            \"Global\": { \"acquireCount\": { \"r\": 4 } },\n            \"Database\": { \"acquireCount\": {\"r\": 1 } },\n            \"Collection\": { \"acquireCount\": { \"r\": 1 } },\n            \"Mutex\": { \"acquireCount\": { \"r\": 4 } } },\n            \"storage\": {},\n            \"remote\": \"127.0.0.1:34868\",\n            \"protocol\": \"op_msg\",\n            \"workingMillis\": 0,\n            \"durationMillis\": 0\n         }\n      }\n   }\n\n.. include:: /includes/plan-cache-rename.rst\n\nAuthorization\n~~~~~~~~~~~~~\n\nStarting in MongoDB 5.0, :ref:`log messages for slow queries\n<log-message-slow-ops>` include a\n:data:`system.profile.authorization` section. These metrics help\ndetermine if a request is delayed because of contention for the user\nauthorization cache. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   \"authorization\": {\n      \"startedUserCacheAcquisitionAttempts\": 1,\n      \"completedUserCacheAcquisitionAttempts\": 1,\n      \"userCacheWaitTimeMicros\": 508\n    },\n\n.. _log-messages-session-workflow-example:\n\nSession Workflow Log Message\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.3, a message is added to the log if the time to\nsend an operation response exceeds the :ref:`slowms threshold option\n<slowms-threshold-option>`.\n\nThe message is known as a session workflow log message and contains\nvarious times to perform an operation in a database session.\n\nExample session workflow log message:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"t\": {\n        \"$date\": \"2022-12-14T17:22:44.233+00:00\"\n      },\n      \"s\": \"I\",\n      \"c\": \"EXECUTOR\",\n      \"id\": 6983000,\n      \"ctx\": \"conn1\",\n      \"svc\": \"R\",\n      \"msg\": \"Slow network response send time\",\n      \"attr\": {\n         \"elapsed\": {\n            \"totalMillis\": 109,\n            \"activeMillis\": 30,\n            \"receiveWorkMillis\": 2,\n            \"processWorkMillis\": 10,\n            \"sendResponseMillis\": 22,\n            \"yieldMillis\": 15,\n            \"finalizeMillis\": 30\n         }\n      }\n   }\n\nThe times are in milliseconds.\n\nA session workflow message is added to the log if ``sendResponseMillis``\nexceeds the :ref:`slowms threshold option <slowms-threshold-option>`.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - ``totalMillis``\n     - Total time to perform the operation in the session, which\n       includes the time spent waiting for a message to be received.\n\n   * - ``activeMillis``\n     - Time between receiving a message and completing the operation\n       associated with that message. Time includes sending a response\n       and performing any clean up.\n\n   * - ``receivedWorkMillis``\n     - Time to receive the operation information over the network.\n\n   * - ``processWorkMillis``\n     - Time to process the operation and create the response.\n\n   * - ``sendResponseMillis``\n     - Time to send the response.\n\n   * - ``yieldMillis``\n     - Time between releasing the worker thread and the thread being\n       used again.\n\n   * - ``finalize``\n     - Time to end and close the session workflow.\n\n.. _log-messages-connection-acquisition-to-wire:\n\nConnection Acquisition To Wire Log Message\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.3, a message is added to the log if the time that\nan operation waited between acquisition of a server connection and\nwriting the bytes to send to the server over the network exceeds 1\nmillisecond.\n\nBy default, the message is logged at the ``\"I\"`` information level, and\nat most once every second to avoid too many log messages. If you must\nobtain every log message, change your log level to debug.\n\nIf the operation wait time exceeds 1 millisecond and the message is\nlogged at the information level within the last second, then the next\nmessage is logged at the debug level. Otherwise, the next message is\nlogged at the information level.\n\nExample log message:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"t\": {\n         \"$date\":\"2023-01-31T15:22:29.473+00:00\"\n      },\n      \"s\": \"I\",\n      \"c\": \"NETWORK\",\n      \"id\": 6496702,\n      \"ctx\": \"ReplicaSetMonitor-TaskExecutor\",\n      \"svc\": \"R\",\n      \"msg\": \"Acquired connection for remote operation and completed writing to wire\",\n      \"attr\": {\n         \"durationMicros\": 1683\n      }\n   }\n \nThe following table describes the ``durationMicros`` field in ``attr``.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - ``durationMicros``\n     - Time in microseconds that the operation waited between\n       acquisition of a server connection and writing the bytes to send\n       to the server over the network.\n\n.. _log-messages-cache-refresh-times:\n\nCache Refresh Times\n~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.1, :ref:`log messages for slow queries\n<log-message-slow-ops>` include the following cache refresh time fields:\n\n- ``catalogCacheDatabaseLookupDurationMillis``\n- ``catalogCacheCollectionLookupDurationMillis``\n- ``databaseVersionRefreshDurationMillis``\n- ``shardVersionRefreshMillis``\n\nStarting in MongoDB 7.0, :ref:`log messages for slow queries\n<log-message-slow-ops>` also include the \n``catalogCacheIndexLookupDurationMillis`` field that indicates the \ntime that the operation spent fetching information from the index \ncache. This release also renames the ``shardVersionRefreshMillis`` \nfield to ``placementVersionRefreshMillis``.\n\nThe following example includes:\n\n- ``catalogCacheDatabaseLookupDurationMillis``\n- ``catalogCacheCollectionLookupDurationMillis``\n- ``catalogCacheIndexLookupDurationMillis``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 41-43\n\n   {\n     \"t\": {\n       \"$date\": \"2023-03-17T09:47:55.929+00:00\"\n     },\n     \"s\": \"I\",\n     \"c\": \"COMMAND\",\n     \"id\": 51803,\n     \"ctx\": \"conn14\",\n     \"svc\": \"R\",\n     \"msg\": \"Slow query\",\n     \"attr\": {\n       \"type\": \"command\",\n       \"ns\": \"db.coll\",\n       \"appName\": \"MongoDB Shell\",\n       \"command\": {\n         \"insert\": \"coll\",\n         \"ordered\": true,\n         \"lsid\": {\n           \"id\": {\n             \"$uuid\": \"5d50b19c-8559-420a-a122-8834e012274a\"\n           }\n         },\n         \"$clusterTime\": {\n           \"clusterTime\": {\n             \"$timestamp\": {\n               \"t\": 1679046398,\n               \"i\": 8\n             }\n           },\n           \"signature\": {\n             \"hash\": {  \n               \"$binary\": {\n                 \"base64\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n                 \"subType\": \"0\"\n               }\n             },\n             \"keyId\": 0\n           }\n         },\n         \"$db\": \"db\"\n       },\n       \"catalogCacheDatabaseLookupDurationMillis\": 19,\n       \"catalogCacheCollectionLookupDurationMillis\": 68,\n       \"catalogCacheIndexLookupDurationMillis\": 16026,\n       \"nShards\": 1,\n       \"ninserted\": 1,\n       \"numYields\": 232,\n       \"reslen\": 96,\n       \"readConcern\": {\n         \"level\": \"local\",\n         \"provenance\": \"implicitDefault\",\n       },\n       \"cpuNanos\": 29640339,\n       \"remote\": \"127.0.0.1:48510\",\n       \"protocol\": \"op_msg\",\n       \"remoteOpWaitMillis\": 4078,\n       \"workingMillis\": 20334,\n       \"durationMillis\": 20334\n     }\n   }\n\nLinux Syslog Limitations\n------------------------\n\n.. include:: /includes/linux-syslog-limitations.rst\n\n.. _log-messages-atlas:\n\nDownload Your Logs\n------------------\n\nYou can use {+atlas+} to download a zipped file containing \nthe logs for a selected hostname or process in your database \ndeployment. To learn more, see \n:atlas:`View and Download MongoDB Logs </mongodb-logs>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/log-messages.txt"
  },
  {
    "code": "     :copyable: false\n\n     function() {\n        this.items.forEach(function(item){ emit(item.sku, 1); });\n     }\n\n  Then, the aggregation pipeline includes an :pipeline:`$unwind` and a\n  :pipeline:`$project`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $unwind: \"$items \"},\n     { $project: { emits: { key: { \"$items.sku\" }, value: 1 } } },\n\n- The ``emits`` field in :pipeline:`$project` may be named something\n  else. For visual comparison, the field name ``emits`` was chosen.\n\n.. list-table::\n   :class: border-table\n   :widths: 45 55\n   :header-rows: 1\n   \n   * - Map-Reduce\n     - Aggregation Pipeline\n   \n   * - | db.collection.mapReduce(\n       |   :highlight-red:`<mapFunction>`,\n       |   :highlight-yellow:`<reduceFunction>`,\n       |   {\n       |     query: <queryFilter>,\n       |     sort: <sortOrder>,\n       |     limit: <number>,\n       |     finalize: :highlight-green:`<finalizeFunction>`,\n       |     out: :highlight-blue:`<collection>`\n       |   }\n       | )\n\n     - | db.collection.aggregate( [\n       |   { $match: <queryFilter> },\n       |   { $sort: <sortOrder> },\n       |   { $limit: <number> },\n       |   { :highlight-red:`$project: { emits: { k: <expression>, v: <expression> } }` },\n       |   { :highlight-red:`$unwind: \"$emits\"` },\n       |   { :highlight-yellow:`$group`: { \n       |        _id: \"$emits.k\"}, \n       |        value: { :highlight-yellow:`$accumulator`: { \n       |           init: <initCode>, \n       |           accumulate: :highlight-yellow:`<reduceFunction>`, \n       |           accumulateArgs: [ \"$emit.v\"],\n       |           merge: :highlight-yellow:`<reduceFunction>`,\n       |           finalize: :highlight-green:`<finalizeFunction>`,\n       |           lang: \"js\" }}\n       |   } },\n       |   { $out: :highlight-blue:`<collection>` }\n       | ] )\n\n   * - | db.collection.mapReduce(\n       |   :highlight-red:`<mapFunction>`,\n       |   :highlight-yellow:`<reduceFunction>`,\n       |   {\n       |     query: <queryFilter>,\n       |     sort: <sortOrder>,\n       |     limit: <number>,\n       |     finalize: :highlight-green:`<finalizeFunction>`,\n       |     out: { :highlight-blue:`replace: <collection>, db:<db>` }\n       |   }\n       | )\n\n     - | db.collection.aggregate( [\n       |   { $match: <queryFilter> },\n       |   { $sort: <sortOrder> },\n       |   { $limit: <number> },\n       |   { :highlight-red:`$project: { emits: { k: <expression>, v: <expression> } }` },\n       |   { :highlight-red:`$unwind: \"$emits\"` },\n       |   { :highlight-yellow:`$group`: { \n       |        _id: \"$emits.k\"}, \n       |        value: { :highlight-yellow:`$accumulator`: { \n       |           init: <initCode>, \n       |           accumulate: :highlight-yellow:`<reduceFunction>`, \n       |           accumulateArgs: [ \"$emit.v\"],\n       |           merge: :highlight-yellow:`<reduceFunction>`,\n       |           finalize: :highlight-green:`<finalizeFunction>`,\n       |           lang: \"js\" }}\n       |   } },\n       |   { $out: { :highlight-blue:`db: <db>, coll: <collection>` } }\n       | ] )\n\n   * - | db.collection.mapReduce(\n       |   :highlight-red:`<mapFunction>`,\n       |   :highlight-yellow:`<reduceFunction>`,\n       |   {\n       |     query: <queryFilter>,\n       |     sort: <sortOrder>,\n       |     limit: <number>,\n       |     finalize: :highlight-green:`<finalizeFunction>`,\n       |     out: { :highlight-blue:`merge: <collection>, db: <db>` }\n       |   }\n       | )\n\n     - | db.collection.aggregate( [\n       |   { $match: <queryFilter> },\n       |   { $sort: <sortOrder> },\n       |   { $limit: <number> },\n       |   { :highlight-red:`$project: { emits: { k: <expression>, v: <expression> } }` },\n       |   { :highlight-red:`$unwind: \"$emits\"` }, \n       |   { :highlight-yellow:`$group`: { \n       |        _id: \"$emits.k\"}, \n       |        value: { :highlight-yellow:`$accumulator`: { \n       |           init: <initCode>, \n       |           accumulate: :highlight-yellow:`<reduceFunction>`, \n       |           accumulateArgs: [ \"$emit.v\"],\n       |           merge: :highlight-yellow:`<reduceFunction>`,\n       |           finalize: :highlight-green:`<finalizeFunction>`,\n       |           lang: \"js\" }}\n       |   } },\n       |   { :highlight-blue:`$merge`: {\n       |        into: { :highlight-blue:`db: <db>, coll: <collection>`},\n       |        on: \"_id\"\n       |        whenMatched: \"replace\",\n       |        whenNotMatched: \"insert\"\n       |   } },\n       | ] )\n       \n   * - | db.collection.mapReduce(\n       |   :highlight-red:`<mapFunction>`,\n       |   :highlight-yellow:`<reduceFunction>`,\n       |   {\n       |     query: <queryFilter>,\n       |     sort: <sortOrder>,\n       |     limit: <number>,\n       |     finalize: :highlight-green:`<finalizeFunction>`,\n       |     out: { :highlight-blue:`reduce: <collection>, db: <db>` }\n       |   }\n       | )\n\n     - | db.collection.aggregate( [\n       |   { $match: <queryFilter> },\n       |   { $sort: <sortOrder> },\n       |   { $limit: <number> },\n       |   { :highlight-red:`$project: { emits: { k: <expression>, v: <expression> } }` },\n       |   { :highlight-red:`$unwind: \"$emits\"` },\n       |   { :highlight-yellow:`$group`: { \n       |        _id: \"$emits.k\"}, \n       |        value: { :highlight-yellow:`$accumulator`: { \n       |           init: <initCode>, \n       |           accumulate: :highlight-yellow:`<reduceFunction>`, \n       |           accumulateArgs: [ \"$emit.v\"],\n       |           merge: :highlight-yellow:`<reduceFunction>`,\n       |           finalize: :highlight-green:`<finalizeFunction>`,\n       |           lang: \"js\" }}\n       |   } },\n       |   { :highlight-blue:`$merge`: {\n       |        into: { :highlight-blue:`db: <db>, coll: <collection>` },\n       |        on: \"_id\"\n       |        whenMatched: [\n       |           { $project: {\n       |                value: { $function: { \n       |                  body: :highlight-yellow:`<reduceFunction>`, \n       |                  args: [\n       |                     \"$_id\", \n       |                     [ \"$value\", \"$$new.value\" ]\n       |                  ],\n       |                  lang: \"js\" \n       |                } }\n       |           } }\n       |        ]\n       |        whenNotMatched: \"insert\"\n       |   } },\n       | ] )\n\n   * - | db.collection.mapReduce(\n       |   :highlight-red:`<mapFunction>`,\n       |   :highlight-yellow:`<reduceFunction>`,\n       |   {\n       |     query: <queryFilter>,\n       |     sort: <sortOrder>,\n       |     limit: <number>,\n       |     finalize: :highlight-green:`<finalizeFunction>`,\n       |     out: { inline: 1 }\n       |   }\n       | )\n\n     - | db.collection.aggregate( [\n       |   { $match: <queryFilter> },\n       |   { $sort: <sortOrder> },\n       |   { $limit: <number> },\n       |   { :highlight-red:`$project: { emits: { k: <expression>, v: <expression> } }` },\n       |   { :highlight-red:`$unwind: \"$emits\"` },\n       |   { :highlight-yellow:`$group`: { \n       |        _id: \"$emits.k\"}, \n       |        value: { :highlight-yellow:`$accumulator`: { \n       |           init: <initCode>, \n       |           accumulate: :highlight-yellow:`<reduceFunction>`, \n       |           accumulateArgs: [ \"$emit.v\"],\n       |           merge: :highlight-yellow:`<reduceFunction>`,\n       |           finalize: :highlight-green:`<finalizeFunction>`,\n       |           lang: \"js\" }}\n       |   } }\n       | ] )\n\n.. _mr-to-agg-examples:\n\nExamples\n--------\n\nVarious map-reduce expressions can be rewritten using aggregation\npipeline operators, such as :pipeline:`$group`, :pipeline:`$merge`, and \nothers, without requiring custom functions. However, for illustrative \npurposes, the following examples provide both alternatives.\n\n.. _mr-to-agg-examples1:\n\nExample 1\n~~~~~~~~~\n\nThe  following map-reduce operation on the ``orders`` collection groups\nby the ``cust_id``, and calculates the sum of the ``price`` for each\n``cust_id``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"emit\" : { \"key\" : \"Ant O. Knee\", \"value\" : 25 } }\n      { \"_id\" : 2, \"emit\" : { \"key\" : \"Ant O. Knee\", \"value\" : 70 } }\n      { \"_id\" : 3, \"emit\" : { \"key\" : \"Busby Bee\", \"value\" : 50 } }\n      { \"_id\" : 4, \"emit\" : { \"key\" : \"Busby Bee\", \"value\" : 25 } }\n      { \"_id\" : 5, \"emit\" : { \"key\" : \"Busby Bee\", \"value\" : 50 } }\n      { \"_id\" : 6, \"emit\" : { \"key\" : \"Cam Elot\", \"value\" : 35 } }\n      { \"_id\" : 7, \"emit\" : { \"key\" : \"Cam Elot\", \"value\" : 25 } }\n      { \"_id\" : 8, \"emit\" : { \"key\" : \"Don Quis\", \"value\" : 75 } }\n      { \"_id\" : 9, \"emit\" : { \"key\" : \"Don Quis\", \"value\" : 55 } }\n      { \"_id\" : 10, \"emit\" : { \"key\" : \"Don Quis\", \"value\" : 25 } }\n      \n#. Then, the :pipeline:`$group` uses the :group:`$accumulator`\n   operator to add the emitted values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Don Quis\", \"valuesPrices\" : 155 }\n      { \"_id\" : \"Cam Elot\", \"valuesPrices\" : 60 }\n      { \"_id\" : \"Ant O. Knee\", \"valuesPrices\" : 95 }\n      { \"_id\" : \"Busby Bee\", \"valuesPrices\" : 125 }\n\n#. Finally, the :pipeline:`$out` writes the output to the collection\n   ``agg_alternative_2``. Alternatively, you could use\n   :pipeline:`$merge` instead of :pipeline:`$out`.\n\n.. _mr-to-agg-examples2:\n\nExample 2\n~~~~~~~~~\n\nThe following map-reduce operation on the ``orders`` collection\ngroups by the ``item.sku`` field and calculates the number of\norders and the total quantity ordered for each sku. The operation\nthen calculates the average quantity per order for each sku value\nand merges the results into the output collection.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 1, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-01T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"apples\", \"qty\" : 5, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 8, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 2, \"cust_id\" : \"Ant O. Knee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 70, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 3, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-08T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"pears\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 4, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-18T00:00:00Z\"), \"price\" : 25, \"items\" : { \"sku\" : \"oranges\", \"qty\" : 10, \"price\" : 2.5 }, \"status\" : \"A\" }\n      { \"_id\" : 5, \"cust_id\" : \"Busby Bee\", \"ord_date\" : ISODate(\"2020-03-19T00:00:00Z\"), \"price\" : 50, \"items\" : { \"sku\" : \"chocolates\", \"qty\" : 5, \"price\" : 10 }, \"status\" : \"A\" }\n      ...\n\n#. The :pipeline:`$project` stage outputs documents with an ``emit``\n   field. The ``emit`` field is a document with the fields:\n\n   - ``key`` that contains the ``items.sku`` value \n   - ``value`` that contains a document with the ``qty`` value and a ``count`` value\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"emit\" : { \"key\" : \"oranges\", \"value\" : { \"count\" : 1, \"qty\" : 5 } } }\n      { \"_id\" : 1, \"emit\" : { \"key\" : \"apples\", \"value\" : { \"count\" : 1, \"qty\" : 5 } } }\n      { \"_id\" : 2, \"emit\" : { \"key\" : \"oranges\", \"value\" : { \"count\" : 1, \"qty\" : 8 } } }\n      { \"_id\" : 2, \"emit\" : { \"key\" : \"chocolates\", \"value\" : { \"count\" : 1, \"qty\" : 5 } } }\n      { \"_id\" : 3, \"emit\" : { \"key\" : \"oranges\", \"value\" : { \"count\" : 1, \"qty\" : 10 } } }\n      { \"_id\" : 3, \"emit\" : { \"key\" : \"pears\", \"value\" : { \"count\" : 1, \"qty\" : 10 } } }\n      { \"_id\" : 4, \"emit\" : { \"key\" : \"oranges\", \"value\" : { \"count\" : 1, \"qty\" : 10 } } }\n      { \"_id\" : 5, \"emit\" : { \"key\" : \"chocolates\", \"value\" : { \"count\" : 1, \"qty\" : 5 } } }\n      ...\n\n#. The :pipeline:`$group` uses the :group:`$accumulator`\n   operator to add the emitted ``count`` and ``qty`` and calculate the\n   ``avg`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"chocolates\", \"value\" : { \"count\" : 3, \"qty\" : 15, \"avg\" : 5 } }\n      { \"_id\" : \"oranges\", \"value\" : { \"count\" : 7, \"qty\" : 63, \"avg\" : 9 } }\n      { \"_id\" : \"carrots\", \"value\" : { \"count\" : 2, \"qty\" : 15, \"avg\" : 7.5 } }\n      { \"_id\" : \"apples\", \"value\" : { \"count\" : 4, \"qty\" : 35, \"avg\" : 8.75 } }\n      { \"_id\" : \"pears\", \"value\" : { \"count\" : 1, \"qty\" : 10, \"avg\" : 10 } }\n\n#. Finally, the :pipeline:`$merge` writes the output to the\n   collection ``agg_alternative_4``. If an existing document has the same\n   key ``_id`` as the new result, the operation overwrites the existing\n   document. If there is no existing document with the same key, the\n   operation inserts the document.\n\n.. seealso::\n\n   :doc:`/reference/aggregation-commands-comparison`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/map-reduce-to-aggregation-pipeline.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId('65e8ba8a4b3c33a76e6cacca'),\n       foo: BSONRegExp('(?-i)AA_', 'i')\n     }\n   ]\n\nIf you set ``bsonRegExp`` to ``false``, ``mongosh`` returns an error:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/BSONRegExp.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: javascript\n\n      db.testbson.find( {}, {}, { bsonRegExp: false })\n\n   .. output:: \n      :language: javascript\n\n      Uncaught:\n      SyntaxError: Invalid regular expression: /(?-i)AA_/i: Invalid group\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/BSONRegExp.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 1,\n     bin_data: Binary(Buffer.from(\"81fd547317474c9d8743f10642b3bb99\", \"hex\"), 0) \n   }\n\nGet the Length of ``BinData()`` Object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the ``BinData()`` constructor to create the ``bdata`` variable.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/BinData.txt"
  },
  {
    "code": "   :copyable: false\n\n   16\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/BinData.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.binaryObjectsFromBase64.insertOne( {\n      _id: 0,\n      binaryObject: Binary.createFromBase64( \"SGVsbG8gV29ybGQhCg==\" )\n   } )\n\nThe ``binaryObject`` field contains the binary object created from the\nstring specified in ``Binary.createFromBase64()``.\n\nRetrieve Document from Collection with Binary Object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Binary.createFromBase64.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   {\n      _id: 0,\n      binaryObject: Binary.createFromBase64(\"SGVsbG8gV29ybGQhCg==\")\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Binary.createFromBase64.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.binaryObjectsFromHexString.insertOne( {\n      _id: 0,\n      binaryObject: Binary.createFromHexString( \"64c13ab08edf48a008793cac\" )\n   } )\n\nThe ``binaryObject`` field contains the binary object created from the\nstring specified in ``Binary.createFromHexString()``.\n\nRetrieve Document from Collection with Binary Object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Binary.createFromHexString.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   {\n      _id: 0,\n      binaryObject: Binary.createFromBase64(\"ZME6sI7fSKAIeTys\")\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Binary.createFromHexString.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\" : ObjectId(\"5e28cf1e500153bc2872d49f\"),\n      \"qty\" : 0,\n      \"inStock\" : true,\n      \"item\" : \"Not Found\",\n      \"status\" : \"P\",\n      \"points\" : 0,\n      \"lastModified\" : ISODate(\"2020-01-22T22:39:26.789Z\")\n   }\n\nInsert for ``Bulk.find.update()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen using :method:`~Bulk.find.upsert()` with the multiple document\nupdate method :method:`Bulk.find.update()`, if no documents match the\nquery condition, the update operation inserts a *single* document.\n\nThe :method:`Bulk.find.update()` method accepts as its parameter either:\n\n- an update document that contains only :ref:`update operator\n  <update-operators>` expressions, or\n\n- an aggregation pipeline.\n\n\nUpdate Operator Expressions\n```````````````````````````\n\nIf the :ref:`parameter <bulk-find-update-parameter>` is an update\ndocument that contains only :ref:`update operator <update-operators>`\nexpressions: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Bulk.find.upsert.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\" : ObjectId(\"5e2920a5b4c550aad59d18a1\"),\n      \"qty\" : 0,\n      \"inStock\" : true,\n      \"item\" : \"New Item\",\n      \"status\" : \"P\",\n      \"points\" : 0,\n      \"lastModified\" : ISODate(\"2020-01-23T04:27:17.780Z\")\n   }\n\n.. seealso::\n\n   - :method:`db.collection.initializeUnorderedBulkOp()`\n   - :method:`db.collection.initializeOrderedBulkOp()`\n   - :method:`Bulk.find()`\n   - :method:`Bulk.execute()`\n   - :ref:`All Bulk Methods <bulk-methods>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Bulk.find.upsert.txt"
  },
  {
    "code": "         :copyable: false\n\n         enc> result.collection\n         enc.users\n\nLearn More\n----------\n\n- For complete documentation on initiating MongoDB connections with\n  client-side field level encryption enabled, see :method:`Mongo()`.\n\n- For a complete example of how to create and query an encrypted \n  collection, see :ref:`qe-quick-start`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ClientEncryption.createEncryptedCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   \"123-45-6789\" \n\nLearn More\n----------\n\nFor complete documentation on initiating MongoDB connections with\nclient-side field level encryption enabled, see :method:`Mongo()`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ClientEncryption.decrypt.txt"
  },
  {
    "code": "   :copyable: false\n\n   BinData(6,\"AmTi2H3xaEk8u9+jlFNaLLkC3Q/+kmwDbbWrq+h9nuv9W+u7A5a0UnpULBNZH+Q21fAztPpU09wpKPrju9dKfpN1Afpj1/ZhFcH6LYZOWSBBOAuUNjPLxMNSYOOuITuuYWo=\")\n\nFor complete documentation on initiating MongoDB connections with\nclient-side field level encryption enabled, see :method:`Mongo()`.\n\n.. _set-qe-algorithm:\n\nQueryable Encryption\n~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses a locally managed KMS for the \nQueryable Encryption configuration.\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create Your Encrypted Connection\n\n      .. include:: /includes/qe-connection-boilerplate.rst\n\n   .. step:: Encrypt Your Data\n\n      Retrieve the :method:`ClientEncryption <getClientEncryption()>` object\n      and use the :method:`ClientEncryption.encrypt()` method to encrypt\n      a value using a specific data encryption key ``UUID`` and \n      :ref:`encryption algorithm <field-level-encryption-algorithms>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ClientEncryption.encrypt.txt"
  },
  {
    "code": "   :copyable: false\n\n   Binary(Buffer.from(\"05b100000005640020000000005ab3581a43e39a8e855b1ac87013e841735c09d19ae86535eea718dd56122ba50573002000000000703d2cba9832d90436c6c92eb232aa5b968cdcd7a3138570bc87ef0a9eb3a0e905630020000000009cb61df010b1bb54670a5ad979f25f4c48889059dfd8920782cf03dd27d1a50b05650020000000003f5acea703ea357d3eea4c6a5b19139a580089341424a247839fd4d5cf0d312a12636d00040000000000000000\", \"hex\"), 6)\n\nLearn More\n----------\n\nFor complete documentation on initiating MongoDB connections with\nclient-side field level encryption enabled, see :method:`Mongo()`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ClientEncryption.encrypt.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 0,\n         type: 'chocolate',\n         orderDate: ISODate(\"2020-05-18T14:10:30.000Z\")\n      },\n      {\n         _id: 2,\n         type: 'vanilla',\n         orderDate: ISODate(\"2021-01-15T06:31:15.000Z\")\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Date.txt"
  },
  {
    "code": "         :copyable: false\n\n         [ { _id: 0, hexField: Binary.createFromBase64('EjRWq83v', 0) } ]\n\nLearn More\n----------\n\n- :method:`BinData()`\n- :method:`Binary.createFromBase64()`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/HexData.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     bulkWriteResult: BulkWriteResult {\n       result: {\n         ok: 1,\n         writeErrors: [],\n         writeConcernErrors: [],\n         insertedIds: [],\n         nInserted: 0,\n         nUpserted: 0,\n         nMatched: 3,\n         nModified: 3,\n         nRemoved: 0,\n         upserted: [],\n         opTime: { ts: Timestamp({ t: 1655840760, i: 3 }), t: 23 }\n       }\n     }\n   }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/KeyVault.rewrapManyDataKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ 'admin', 'config', 'local', 'test' ]\n\nMap Database List to Another Method\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse :method:`Mongo.getDBNames()` to get a list of collections:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.getDBNames.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      [ 'system.users', 'system.keys', 'system.version' ],\n      [\n        'settings',\n        'tenantMigrationRecipients',\n        'system.sessions',\n        'transactions',\n        'external_validation_keys',\n        'image_collection',\n        'tenantMigrationDonors',\n        'system.indexBuilds'\n      ],\n      [\n        'replset.minvalid',\n        'system.views',\n        'oplog.rs',\n        'replset.initialSyncId',\n        'startup_log',\n        'system.replset',\n        'system.rollback.id',\n        'replset.oplogTruncateAfterPoint',\n        'replset.election',\n        'system.tenantMigration.oplogView'\n      ],\n      [\n        'feedback',\n        'inventory',\n        'engineers',\n        'clothes'\n      ]\n   ]\n\n- :method:`Mongo.getDBNames()` returns a list of databases.\n- ``map`` defines a function that iterates over the list of databases.\n  Each iteration of ``map``:\n\n  - assigns a database to the ``name`` variable,\n  - connects to the database currently stored in ``name`` using\n    :method:`db.getSiblingDB()`,\n  - returns the collections in the current database using\n    :method:`db.getCollectionNames()`.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.getDBNames.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 2-7\n\n   {\n    databases: [\n      { name: 'admin', sizeOnDisk: Long(\"225280\"), empty: false },\n      { name: 'config', sizeOnDisk: Long(\"212992\"), empty: false },\n      { name: 'local', sizeOnDisk: Long(\"2400256\"), empty: false },\n      { name: 'test', sizeOnDisk: Long(\"303104\"), empty: false }\n    ],\n    totalSize: Long(\"3141632\"),\n    totalSizeMb: Long(\"2\"),\n    ok: 1,\n    '$clusterTime': {\n      clusterTime: Timestamp({ t: 1640186473, i: 1 }),\n      signature: {\n        hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n        keyId: Long(\"0\")\n      }\n    },\n    operationTime: Timestamp({ t: 1640186473, i: 1 })\n    } \n\nThe databases are listed in the highlighted lines. \n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.getDBs.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: js \n      \n      db.getMongo().getURI()\n\n   .. output:: \n      :language: js \n      \n      mongodb://127.0.0.1:27019/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.4\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.getURI.txt"
  },
  {
    "code": "   :copyable: false\n\n   { w: <value>, wtimeout: <number>, j: <boolean> }\n\nThe fields are: \n\n.. list-table::\n   :header-rows: 1\n\n   * - Field\n     - Description\n\n   * - ``w``\n     - The number of :binary:`~bin.mongod` or :binary:`~bin.mongod`\n       instances that must acknowledge a write. Possible values are:\n\n       - \"majority\". A majority of the target instances must\n         acknowledge the write.\n       - <number>. The specified number of target instances must\n         acknowledge the write.\n       - <custom write concern name>. A user defined write concern, the\n         tagged instances must acknowledge the write.\n\n       See :ref:`write concern specification <wc-w>` for details.\n\n   * -  ``j``\n     - A boolean value. ``j: true`` requests acknowledgment that the\n       write operation has been written to the :ref:`on-disk journal\n       <journaling-internals>`.\n     \n   * - ``wtimeout``\n     - The number of milliseconds to wait for acknowledgment of the\n       write concern. ``wtimeout`` is only applicable when ``w`` has a\n       value greater than ``1``.\n\nExample\n-------\n\nTo return the current write concern, enter the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.getWriteConcern.txt"
  },
  {
    "code": "   :emphasize-lines: 1\n\n   export TEST_LOCAL_KEY=$(echo \"$(head -c 96 /dev/urandom | base64 | tr -d '\\n')\")\n\n   mongosh --nodb\n\nThe following operation creates a new connection object from within a\n:binary:`~bin.mongosh` session. The\n:ref:`{+auto-encrypt-options+}` option specifies\nthe required options for enabling :ref:`automatic client-side encryption\n<field-level-encryption-automatic>` on the ``hr.employees`` collection:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.txt"
  },
  {
    "code": "   :emphasize-lines: 4-6, 8-21, 24-27\n\n   var autoEncryptionOpts = {\n     \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n     \"kmsProviders\" : {\n       \"local\" : {\n         \"key\" : BinData(0, process.env[\"TEST_LOCAL_KEY\"])\n       }\n     },\n     schemaMap : {\n       \"hr.employees\" : {\n         \"bsonType\": \"object\",\n         \"properties\" : {\n           \"taxid\" : {\n             \"encrypt\" : {\n               \"keyId\" : [UUID(\"bffb361b-30d3-42c0-b7a4-d24a272b72e3\")],\n               \"bsonType\" : \"string\",\n               \"algorithm\" : \"AEAD_AES_256_CBC_HMAC_SHA_512-Random\"\n             }\n           },\n           \"taxid-short\": {\n             \"encrypt\": {\n               \"keyId\": [UUID(\"33408ee9-e499-43f9-89fe-5f8533870617\")],\n               \"algorithm\": \"AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic\",\n               \"bsonType\": \"string\"\n             }\n           }\n         }\n       }\n     }\n   }\n\n   cluster = Mongo(\n     \"mongodb://mymongo.example.net:27017/?replicaSet=myMongoCluster\",\n     autoEncryptionOpts\n   )\n\nIssue operations against the ``cluster`` object to interact with the\n``mymongo.example.net:27017`` cluster and utilize automatic encryption:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Mongo.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.objectIdentifierValuesFromBase64.insertOne( {\n      _id: 0,\n      objectIdentifierValue: ObjectId.createFromBase64( \"SGVsbG8gV29ybGQh\" )\n   } )\n\nThe ``objectIdentifierValue`` field contains the object identifier\ncreated from the base64 string specified in\n``ObjectId.createFromBase64()``.\n\nRetrieve Document from Collection with Object Identifier\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.createFromBase64.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   {\n      _id: 0,\n      objectIdentifierValue: ObjectId(\"48656c6c6f20576f726c6421\")\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.createFromBase64.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.objectIdentifierValuesFromHex.insertOne( {\n      _id: 0,\n      objectIdentifierValue: ObjectId.createFromHexString( \"64c13ab08edf48a008793cac\" )\n   } )\n\nThe ``objectIdentifierValue`` field contains the object identifier\ncreated from the hexadecimal string specified in\n``ObjectId.createFromHexString()``.\n\nRetrieve Document from Collection with Object Identifier\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.createFromHexString.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 3\n\n   {\n      _id: 0,\n      objectIdentifierValue: ObjectId(\"64c13ab08edf48a008793cac\")\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.createFromHexString.txt"
  },
  {
    "code": "   :copyable: false\n\n   507c7f79bcf86cd7994f6c0e\n\nTo confirm the type of ``myObjectIdString``, use the ``typeof`` JavaScript operator:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.toString.txt"
  },
  {
    "code": "   :copyable: false\n\n   string\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.toString.txt"
  },
  {
    "code": "         :copyable: true\n         \n         myDate = new Date( \"2024-01-01\" )\n\n   .. step:: Convert your Date object to seconds\n      \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.txt"
  },
  {
    "code": "         :copyable: true\n         \n         timestamp = Math.floor( myDate / 1000 )\n\n   .. step:: Set your new ObjectId with ``timestamp`` as the argument \n\n      You can verify the Date by using :method:`ObjectId.getTimestamp()`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.txt"
  },
  {
    "code": "         :copyable: true\n         \n         .. input::\n            :language: javascript\n\n            newObjectId = ObjectId(timestamp) \n            \n         .. output::\n            :language: javascript\n\n            ObjectId(\"6592008029c8c3e4dc76256c\")\n\nSpecify an Integer String\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to adjust the ObjectId timestamp, use an integer to generate\na new ObjectId.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/ObjectId.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         \"createdFromQuery\" : {\n            \"query\" : { \"quantity\" : { \"$gte\" : 5 }, \"type\" : \"apparel\" },\n            \"sort\" : { },\n            \"projection\" : { }\n         },\n         \"planCacheShapeHash\" : \"4D151C4C\",\n         \"planCacheKey\" : \"DD67E353\",\n         \"isActive\" : false,\n         \"works\" : NumberLong(4),\n         \"cachedPlan\" : {\n            \"stage\" : \"FETCH\",\n            \"filter\" : { \"type\" : { \"$eq\" : \"apparel\" } },\n            \"inputStage\" : {\n               \"stage\" : \"IXSCAN\",\n               \"keyPattern\" : { \"quantity\" : 1 },\n               \"indexName\" : \"quantity_1\",\n               \"isMultiKey\" : false,\n               \"multiKeyPaths\" : { \"quantity\" : [ ] },\n               \"isUnique\" : false,\n               \"isSparse\" : false,\n               \"isPartial\" : false,\n               \"indexVersion\" : 2,\n               \"direction\" : \"forward\",\n               \"indexBounds\" : { \"quantity\" : [ \"[5.0, inf.0]\" ] }\n            }\n         },\n         \"timeOfCreation\" : ISODate(\"2020-02-06T15:57:18.219Z\"),\n         \"creationExecStats\" : [\n            {\n               \"nReturned\" : 2,\n               \"executionTimeMillisEstimate\" : 0,\n               \"totalKeysExamined\" : 3,\n               \"totalDocsExamined\" : 3,\n               \"executionStages\" : {\n                  \"stage\" : \"FETCH\",\n                  \"filter\" : { \"type\" : { \"$eq\" : \"apparel\" } },\n                  \"nReturned\" : 2,\n                  \"executionTimeMillisEstimate\" : 0,\n                  \"works\" : 4,\n                  ...\n               }\n            },\n            {\n               \"nReturned\" : 2,\n               \"executionTimeMillisEstimate\" : 0,\n               \"totalKeysExamined\" : 3,\n               \"totalDocsExamined\" : 2,\n               \"executionStages\" : {\n                  \"stage\" : \"FETCH\",\n                  \"nReturned\" : 2,\n                  \"executionTimeMillisEstimate\" : 0,\n                  \"works\" : 4,\n                  ...\n               }\n            }\n         ],\n         \"candidatePlanScores\" : [\n            1.5002,\n            1.5002\n         ],\n         \"indexFilterSet\" : false,\n         \"estimatedSizeBytes\" : NumberLong(3160),   // Available starting in MongoDB 5.0\n         \"host\" : \"mongodb1.example.net:27018\",\n         \"shard\" : \"shardA\"                         // Available if run on sharded cluster\n      },\n\n      {\n         \"createdFromQuery\" : {\n            \"query\" : { \"quantity\" : { \"$gte\" : 20 } },\n            \"sort\" : { },\n            \"projection\" : { }\n         },\n         \"planCacheShapeHash\" : \"23B19B75\",\n         \"planCacheKey\" : \"6F23F858\",\n         \"isActive\" : false,\n         \"works\" : NumberLong(1),\n         ...\n      },\n      {\n         \"createdFromQuery\" : {\n            \"query\" : { \"item\" : \"abc\", \"price\" : { \"$gte\" : NumberDecimal(\"5\") } },\n            \"sort\" : { },\n            \"projection\" : { }\n         },\n         \"planCacheShapeHash\" : \"117A6B10\",\n         \"planCacheKey\" : \"A1824628\",\n         \"isActive\" : false,\n         \"works\" : NumberLong(4),\n         ...\n      },\n      {\n         \"createdFromQuery\" : {\n            \"query\" : { \"item\" : \"abc\", \"price\" : { \"$gte\" : NumberDecimal(\"10\") } },\n            \"sort\" : { },\n            \"projection\" : { }\n         },\n         \"planCacheShapeHash\" : \"117A6B10\",\n         \"planCacheKey\" : \"2E6E536B\",\n         \"isActive\" : false,\n         \"works\" : NumberLong(3),\n         ...\n      }\n   ]\n\n.. warning::\n\n   .. include:: /includes/plan-cache-rename.rst\n\nFor details on the output, see :ref:`$planCacheStats output\n<planCacheStats-output>`.\n\n.. planCache-list-query-shapes:\n\nList Plan Cache Query Shapes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo obtain a list of all of the query shapes for which there is a cached plan, \nyou can use the :method:`PlanCache.list()`. For example, the following operation \npasses in a pipeline with a :pipeline:`$project` stage to only output the \n:ref:`createdFromQuery <plancachestats-createdFromQuery>` field and the \n:ref:`planCacheShapeHash <plancachestats-planCacheShapeHash>` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/PlanCache.list.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { \"createdFromQuery\" : { \"query\" : { \"quantity\" : { \"$gte\" : 5 }, \"type\" : \"apparel\" }, \"sort\" : { }, \"projection\" : { } }, \"planCacheShapeHash\" : \"4D151C4C\" },\n      { \"createdFromQuery\" : { \"query\" : { \"quantity\" : { \"$gte\" : 20 } }, \"sort\" : { }, \"projection\" : { } }, \"planCacheShapeHash\" : \"23B19B75\" },\n      { \"createdFromQuery\" : { \"query\" : { \"item\" : \"abc\", \"price\" : { \"$gte\" : NumberDecimal(\"5\") } }, \"sort\" : { }, \"projection\" : { } }, \"planCacheShapeHash\" : \"117A6B10\" },\n      { \"createdFromQuery\" : { \"query\" : { \"item\" : \"abc\", \"price\" : { \"$gte\" : NumberDecimal(\"10\") } }, \"sort\" : { }, \"projection\" : { } }, \"planCacheShapeHash\" : \"117A6B10\" }\n   ]\n\nFor details on the output, see :ref:`$planCacheStats output\n<planCacheStats-output>`.\n\n.. _planCache-list-cache-entry-for-query-shape:\n\nFind Cache Entry Details for a Plan Cache Query Shape\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo return plan cache information for a particular query shape, pass in\na pipeline with a :pipeline:`$match` on the :ref:`planCacheKey\n<plancachestats-planCacheKey>` field.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/PlanCache.list.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         \"createdFromQuery\" : {\n            \"query\" : {\n               \"quantity\" : {\n                  \"$gte\" : 5\n               },\n               \"type\" : \"apparel\"\n            },\n            \"sort\" : {\n            \n            },\n            \"projection\" : {\n            \n            }\n         },\n         \"planCacheShapeHash\" : \"4D151C4C\",\n         \"planCacheKey\" : \"DD67E353\",\n         \"isActive\" : false,\n         \"works\" : NumberLong(4),\n         \"cachedPlan\" : {\n            \"stage\" : \"FETCH\",\n            \"filter\" : {\n               \"type\" : {\n                  \"$eq\" : \"apparel\"\n               }\n            },\n            \"inputStage\" : {\n               \"stage\" : \"IXSCAN\",\n               \"keyPattern\" : {\n                  \"quantity\" : 1\n               },\n               \"indexName\" : \"quantity_1\",\n               \"isMultiKey\" : false,\n               \"multiKeyPaths\" : {\n                  \"quantity\" : [ ]\n               },\n               \"isUnique\" : false,\n               \"isSparse\" : false,\n               \"isPartial\" : false,\n               \"indexVersion\" : 2,\n               \"direction\" : \"forward\",\n               \"indexBounds\" : {\n                  \"quantity\" : [\n                     \"[5.0, inf.0]\"\n                  ]\n               }\n            }\n         },\n         \"timeOfCreation\" : ISODate(\"2020-02-11T17:14:33.873Z\"),\n         \"creationExecStats\" : [\n            {\n               \"nReturned\" : 2,\n               \"executionTimeMillisEstimate\" : 0,\n               \"totalKeysExamined\" : 3,\n               \"totalDocsExamined\" : 3,\n               \"executionStages\" : {\n                  \"stage\" : \"FETCH\",\n                  \"filter\" : {\n                     \"type\" : {\n                        \"$eq\" : \"apparel\"\n                     }\n                  },\n                  \"nReturned\" : 2,\n                  \"executionTimeMillisEstimate\" : 0,\n                  \"works\" : 4,\n                  \"advanced\" : 2,\n                  \"needTime\" : 1,\n                  \"needYield\" : 0,\n                  \"saveState\" : 0,\n                  \"restoreState\" : 0,\n                  \"isEOF\" : 1,\n                  \"docsExamined\" : 3,\n                  \"alreadyHasObj\" : 0,\n                  \"inputStage\" : {\n                     \"stage\" : \"IXSCAN\",\n                     \"nReturned\" : 3,\n                     \"executionTimeMillisEstimate\" : 0,\n                     \"works\" : 4,\n                     \"advanced\" : 3,\n                     \"needTime\" : 0,\n                     \"needYield\" : 0,\n                     \"saveState\" : 0,\n                     \"restoreState\" : 0,\n                     \"isEOF\" : 1,\n                     \"keyPattern\" : {\n                        \"quantity\" : 1\n                     },\n                     \"indexName\" : \"quantity_1\",\n                     \"isMultiKey\" : false,\n                     \"multiKeyPaths\" : {\n                        \"quantity\" : [ ]\n                     },\n                     \"isUnique\" : false,\n                     \"isSparse\" : false,\n                     \"isPartial\" : false,\n                     \"indexVersion\" : 2,\n                     \"direction\" : \"forward\",\n                     \"indexBounds\" : {\n                        \"quantity\" : [\n                           \"[5.0, inf.0]\"\n                        ]\n                     },\n                     \"keysExamined\" : 3,\n                     \"seeks\" : 1,\n                     \"dupsTested\" : 0,\n                     \"dupsDropped\" : 0\n                  }\n               }\n            },\n            {\n               \"nReturned\" : 2,\n               \"executionTimeMillisEstimate\" : 0,\n               \"totalKeysExamined\" : 3,\n               \"totalDocsExamined\" : 2,\n               \"executionStages\" : {\n                  \"stage\" : \"FETCH\",\n                  \"nReturned\" : 2,\n                  \"executionTimeMillisEstimate\" : 0,\n                  \"works\" : 4,\n                  \"advanced\" : 2,\n                  \"needTime\" : 1,\n                  \"needYield\" : 0,\n                  \"saveState\" : 0,\n                  \"restoreState\" : 0,\n                  \"isEOF\" : 1,\n                  \"docsExamined\" : 2,\n                  \"alreadyHasObj\" : 0,\n                  \"inputStage\" : {\n                     \"stage\" : \"IXSCAN\",\n                     \"nReturned\" : 2,\n                     \"executionTimeMillisEstimate\" : 0,\n                     \"works\" : 4,\n                     \"advanced\" : 2,\n                     \"needTime\" : 1,\n                     \"needYield\" : 0,\n                     \"saveState\" : 0,\n                     \"restoreState\" : 0,\n                     \"isEOF\" : 1,\n                     \"keyPattern\" : {\n                        \"quantity\" : 1,\n                        \"type\" : 1\n                     },\n                     \"indexName\" : \"quantity_1_type_1\",\n                     \"isMultiKey\" : false,\n                     \"multiKeyPaths\" : {\n                        \"quantity\" : [ ],\n                        \"type\" : [ ]\n                     },\n                     \"isUnique\" : false,\n                     \"isSparse\" : false,\n                     \"isPartial\" : false,\n                     \"indexVersion\" : 2,\n                     \"direction\" : \"forward\",\n                     \"indexBounds\" : {\n                        \"quantity\" : [\n                           \"[5.0, inf.0]\"\n                        ],\n                        \"type\" : [\n                           \"[\\\"apparel\\\", \\\"apparel\\\"]\"\n                        ]\n                     },\n                     \"keysExamined\" : 3,\n                     \"seeks\" : 2,\n                     \"dupsTested\" : 0,\n                     \"dupsDropped\" : 0\n                  }\n               }\n            }\n         ],\n         \"candidatePlanScores\" : [\n            1.5002,\n            1.5002\n         ],\n         \"indexFilterSet\" : false,\n         \"estimatedSizeBytes\" : NumberLong(3160),   // Available starting in MongoDB 5.0\n         \"host\" : \"mongodb1.example.net:27018\",\n         \"shard\" : \"shardA\"                         // Available if run on sharded cluster\n      }\n   ]\n\n.. warning::\n\n   .. include:: /includes/plan-cache-rename.rst\n\nFor details on the output, see :ref:`$planCacheStats output\n<planCacheStats-output>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/PlanCache.list.txt"
  },
  {
    "code": "             :copyable: false\n\n             Session.advanceClusterTime( { \n                clusterTime: <timestamp>,\n                signature: \n                   { hash: <BinData>, keyId: <NumberLong> } \n             } )\n\n      * - .. method:: Session.advanceOperationTime(<timestamp>)\n        - Updates the operation time.\n\n      * - .. method:: Session.endSession()\n        - Ends the session.\n\n      * - .. method:: Session.getClusterTime()\n        - Returns the most recent cluster time as seen by the session.\n          Applicable for replica sets and sharded clusters only.\n\n      * - .. method:: Session.getDatabase(<database>)\n        - Access the specified database from the session in :binary:`~bin.mongosh`.\n\n      * - .. method:: Session.getOptions()\n        - Access the options for the session. For the available\n          options, see :method:`SessionOptions`.\n\n      * - .. method:: Session.getOperationTime()\n        - Returns the timestamp of the last acknowledged operation for\n          the session.\n\n      * - .. method:: Session.hasEnded()\n        - Returns a boolean that specifies whether the session has\n          ended.\n\n   Session Methods for Transactions\n   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n   .. list-table::\n\n      * - Method\n        - Description\n\n      * - :method:`Session.abortTransaction()`\n        - Aborts the session's transaction. For details, see\n          :method:`Session.abortTransaction()`.\n\n      * - :method:`Session.commitTransaction()`\n        - Commits the session's transaction. For details, see\n          :method:`Session.commitTransaction()`.\n\n      * - :method:`Session.startTransaction()`\n        - Starts a multi-document transaction for the session. For\n          details, see :method:`Session.startTransaction()`.\n\n      * - :method:`Session.withTransaction()`\n        - Runs a specified lambda function within a transaction. For\n          details, see :method:`Session.withTransaction()`.\n\nExample\n-------\n\nThe following example starts a session on the :method:`Mongo`\nconnection object associated with :binary:`~bin.mongosh`'s global\n``db`` variable, and then uses the :method:`Session.getDatabase()`\nmethod to retrieve the database object associated with the session.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/Session.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"sensor-name\" : \"TEMP-21425\",\n     \"sensor-location\" : \"Unit 12\",\n     \"reading\" : {\n       \"timestamp\" : Timestamp(1580247215, 1),\n       \"value\" : 212,\n       \"unit\" : \"Fahrenheit\"\n     }\n   }\n\n\n\nThe following operation includes a :method:`cursor.sort()` on the\nfield ``reading.timestamp``. The operation also includes\n:method:`cursor.allowDiskUse()` to support the sort operation.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.allowDiskUse.txt"
  },
  {
    "code": "   :emphasize-lines: 9\n\n   {\n      \"op\" : \"query\",\n      \"ns\" : \"guidebook.restaurant\",\n      \"query\" : {\n         \"find\" : \"restaurant\",\n         \"filter\" : {\n            \"borough\" : \"Manhattan\"\n         },\n         \"comment\" : \"Find all Manhattan restaurants\"\n      },\n      ...\n   }\n\n\n:binary:`~bin.mongod` :ref:`log <log-messages-ref>`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following is an excerpt from the :binary:`~bin.mongod` log. It has been\nformatted for readability.\n\n.. important::\n\n   The verbosity level for :data:`QUERY` must be greater than ``0``.\n   See :ref:`log-messages-configure-verbosity`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.comment.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   2015-11-23T13:09:16.202-05:00 I COMMAND  [conn1]\n      command guidebook.restaurant command: find {\n         find: \"restaurant\",\n         filter: { \"borough\" : \"Manhattan\" },\n         comment: \"Find all Manhattan restaurants\"\n      }\n      ...\n\n\n:method:`db.currentOp()`\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nSuppose the following operation is currently running on a :binary:`~bin.mongod`\ninstance:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.comment.txt"
  },
  {
    "code": "   :emphasize-lines: 17\n\n   {\n      \"inprog\" : [\n         {\n            \"host\" : \"198.51.100.1:27017\",\n            \"desc\" : \"conn3\",\n            \"connectionId\" : 3,\n            ...\n\n            \"op\" : \"query\",\n            \"ns\" : \"test.$cmd\",\n            \"command\" : {\n               \"find\" : \"restaurants\",\n               \"filter\" : {\n                  \"borough\" : \"Manhattan\"\n               },\n               \"comment\" : \"Find all Manhattan restaurants\",\n               \"$db\" : \"test\"\n            },\n            \"numYields\" : 0,\n            ...\n         }\n      ],\n      \"ok\" : 1\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.comment.txt"
  },
  {
    "code": "   :copyable: false\n\n   db.collection.find().forEach( <function> )\n\nMethod Fields\n-------------\n\nThe method accepts the following field:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 80\n\n   * - Field\n     - Type\n     - Description\n\n   * - ``function``\n     - JavaScript code\n     - Function to apply to each document returned from the cursor. The\n       function signature includes one field that stores the current\n       document that is read from the cursor.\n\nExamples\n--------\n\nCreate the ``users`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.forEach.txt"
  },
  {
    "code": "   :copyable: false\n\n   User name: John\n   User name: Jane\n\nStarting in :binary:`~bin.mongosh` 2.1.0, you can also use ``for-of``\nloops. The following example returns the same results as the previous\nexample:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.forEach.txt"
  },
  {
    "code": "         :copyable: false\n\n         { _id: 0, temperature: 12 }\n\n   .. step:: Examine the ``isExhausted()`` value\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.isExhausted.txt"
  },
  {
    "code": "         :copyable: false\n\n         { _id: 1, temperature: 23 }\n\n   .. step:: Attempt to return the next document from the cursor\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.isExhausted.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   db.sales.find( \n      { agent: \"Mary Kay\" },\n      { _id: 0, agent: 1, weeklyTotal: 1  }\n   ).tailable( { awaitData: true } ).maxAwaitTimeMS( 1000 )\n\nThe highlighted line creates a :ref:`tailable cursor\n<tailable-cursors-landing-page>` on the ``sales`` collection. The\n:method:`~cursor.maxAwaitTimeMS()` sets a one second maximum wait time\nfor the next cursor update.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.maxAwaitTimeMS.txt"
  },
  {
    "code": "      :copyable: false\n\n      '$recordId': Long(<int>)\n\n   :returns: A modified cursor object that contains the document fields\n             and the appended ``$recordId`` field.\n\nCompatibility\n-------------\n\nThis method is available in deployments hosted in the following environments: \n\n.. include:: /includes/fact-environments-atlas-only.rst\n\n.. include:: /includes/fact-environments-atlas-support-all.rst\n\n.. include:: /includes/fact-environments-onprem-only.rst\n\nExample\n-------\n\n.. include:: /includes/example-showRecordId.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.showRecordId.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 3, \"name\" : \"Empire State Pub\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 5, \"name\" : \"Jane's Deli\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 1, \"name\" : \"Central Park Cafe\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 4, \"name\" : \"Stan's Pizzaria\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 2, \"name\" : \"Rock A Feller Bar and Grill\", \"borough\" : \"Queens\" }\n\n   { \"_id\" : 5, \"name\" : \"Jane's Deli\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 3, \"name\" : \"Empire State Pub\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 4, \"name\" : \"Stan's Pizzaria\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 1, \"name\" : \"Central Park Cafe\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 2, \"name\" : \"Rock A Feller Bar and Grill\", \"borough\" : \"Queens\" }\n\nWhile the values for ``borough`` are still sorted in alphabetical order,\nthe order of the documents containing duplicate values for ``borough``\n(i.e. ``Manhattan`` and ``Brooklyn``) is not the same.\n\nTo achieve a *consistent sort*, add a field which contains exclusively\nunique values to the sort. The following command uses the\n:method:`~cursor.sort()` method to sort on both the ``borough`` field\nand the ``_id`` field:\n\n",
    "language": "js",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/cursor.sort.txt"
  },
  {
    "code": "   :copyable: false\n\n   writeErrors: [\n      WriteError {\n         err: {\n            index: 1,\n            code: 11000,\n            errmsg: 'E11000 duplicate key error collection: test.pizzas index: _id_ dup key: { _id: 4 }',\n            op: { _id: 4, type: 'sausage', size: 'large', price: 10 }\n         }\n      }\n   ],\n   result: BulkWriteResult {\n      result: {\n         ok: 1,\n         writeErrors: [\n            WriteError {\n               err: {\n                  index: 1,\n                  code: 11000,\n                  errmsg: 'E11000 duplicate key error collection: test.pizzas index: _id_ dup key: { _id: 4 }',\n                  op: { _id: 4, type: 'sausage', size: 'large', price: 10 }\n               }\n            }\n         ],\n         writeConcernErrors: [],\n         insertedIds: [ { index: 0, _id: 3 }, { index: 1, _id: 4 } ],\n         nInserted: 1,\n         nUpserted: 0,\n         nMatched: 0,\n         nModified: 0,\n         nRemoved: 0,\n         upserted: []\n      }\n   }\n\nBecause the :method:`~db.collection.bulkWrite()` example is ordered,\nonly the first ``insertOne`` operation is completed.\n\nTo complete all operations that do not have errors, run\n:method:`~db.collection.bulkWrite()` with ``ordered`` set to ``false``.\nFor an example, see the following section.\n\n.. _bulkwrite-example-unordered-bulk-write:\n\nUnordered Bulk Write Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo specify an unordered :method:`~db.collection.bulkWrite()`, set\n``ordered`` to ``false``.\n\nIn an unordered :method:`~db.collection.bulkWrite()` list of operations:\n\n- Operations can run in parallel (not guaranteed). For details. See\n  :ref:`bulk-write-operations-ordered-vs-unordered`.\n- Operations with errors are not completed.\n- All operations without errors are completed.\n\nContinuing the ``pizzas`` collection example, drop and recreate the\ncollection:\n\n.. include:: /includes/pizza-example-collection.rst\n\nIn the following example:\n\n- :method:`~db.collection.bulkWrite()` runs unordered operations on\n  the ``pizzas`` collection.\n- The second ``insertOne`` operation has the same ``_id`` as the first\n  ``insertOne``, which causes a duplicate key error.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.bulkWrite.txt"
  },
  {
    "code": "   :copyable: false\n\n   writeErrors: [\n      WriteError {\n         err: {\n            index: 1,\n            code: 11000,\n            errmsg: 'E11000 duplicate key error collection: test.pizzas index: _id_ dup key: { _id: 3 }',\n            op: { _id: 3, type: 'sausage', size: 'large', price: 10 }\n         }\n      }\n   ],\n   result: BulkWriteResult {\n      result: {\n         ok: 1,\n         writeErrors: [\n            WriteError {\n               err: {\n                  index: 1,\n                  code: 11000,\n                  errmsg: 'E11000 duplicate key error collection: test.pizzas index: _id_ dup key: { _id: 3 }',\n                  op: { _id: 3, type: 'sausage', size: 'large', price: 10 }\n               }\n            }\n         ],\n         writeConcernErrors: [],\n         insertedIds: [ { index: 0, _id: 3 }, { index: 1, _id: 3 } ],\n         nInserted: 1,\n         nUpserted: 0,\n         nMatched: 2,\n         nModified: 2,\n         nRemoved: 1,\n         upserted: []\n      }\n   }\n\nThe second ``insertOne`` operation fails because of the duplicate key\nerror. In an unordered :method:`~db.collection.bulkWrite()`, any\noperation without an error is completed.\n\n.. _bulkwrite-example-bulk-write-with-write-concern:\n\nBulk Write with Write Concern Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nContinuing the ``pizzas`` collection example, drop and recreate the\ncollection:\n\n.. include:: /includes/pizza-example-collection.rst\n\nThe following :method:`~db.collection.bulkWrite()` example runs\noperations on the ``pizzas`` collection and sets a ``\"majority\"``\n:ref:`write concern <wc-w>` with a 100 millisecond :ref:`timeout\n<wc-wtimeout>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.bulkWrite.txt"
  },
  {
    "code": "   :copyable: false\n\n   result: BulkWriteResult {\n      result: {\n         ok: 1,\n         writeErrors: [],\n         writeConcernErrors: [\n            WriteConcernError {\n               err: {\n                  code: 64,\n                  codeName: 'WriteConcernFailed',\n                  errmsg: 'waiting for replication timed out',\n                  errInfo: { wtimeout: true, writeConcern: [Object] }\n               }\n            }\n         ],\n         insertedIds: [ { index: 3, _id: 4 } ],\n         nInserted: 0,\n         nUpserted: 0,\n         nMatched: 2,\n         nModified: 2,\n         nRemoved: 0,\n         upserted: [],\n         opTime: { ts: Timestamp({ t: 1660329086, i: 2 }), t: Long(\"1\") }\n      }\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.bulkWrite.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $geoWithin: { $center: [ [ <x>, <y> ], <radius> ] } }\n\n   * - :query:`$nearSphere`\n\n     - As an alternative, use :query:`$geoWithin` with :query:`$centerSphere`; i.e.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.countDocuments.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $geoWithin: { $centerSphere: [ [ <x>, <y> ], <radius> ] } }\n\nTransactions\n~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-supported-operation.rst\n\n.. include:: /includes/fact-uncommitted-transactions.rst\n\n.. |countMethod| replace:: :method:`db.collection.countDocuments()`\n\n.. include:: /includes/extracts/transactions-usage.rst\n\n.. |operation| replace:: :method:`db.collection.countDocuments()`\n\nClient Disconnection\n~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/4.2-changes-disconnect.rst\n\nExamples\n--------\n\nCount all Documents in a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo count the number of documents in the ``orders`` collection, use the\nfollowing operation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.countDocuments.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: javascript\n\n      db.testbson.find( {}, {}, { bsonRegExp: true } )\n\n   .. output:: \n      :language: javascript\n\n      [\n        {\n          _id: ObjectId('65e8ba8a4b3c33a76e6cacca'),\n          foo: BSONRegExp('(?-i)AA_', 'i')\n        }\n      ]\n\n.. _find-projection-examples:\n\nProjections\n~~~~~~~~~~~\n\nThe :ref:`projection <find-projection>` parameter specifies which fields\nto return. The parameter contains either include or exclude\nspecifications, not both, unless the exclude is for the ``_id`` field.\n\n.. note::\n\n   Unless the ``_id`` field is explicitly excluded in the projection\n   document ``_id: 0``, the ``_id`` field is returned.\n\nSpecify the Fields to Return\n````````````````````````````\n\nThe following operation finds all documents in the :doc:`bios collection\n</reference/bios-example-collection>` and returns only the ``name``\nfield, ``contribs`` field and ``_id`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"birth\" : ISODate(\"1924-12-03T05:00:00Z\"), \"contribs\" : [ \"Fortran\", \"ALGOL\", \"Backus-Naur Form\", \"FP\" ], \"name\" : \"John Backus\", \"awards\" : 4, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1927-09-04T04:00:00Z\"), \"contribs\" : [ \"Lisp\", \"Artificial Intelligence\", \"ALGOL\" ], \"name\" : \"John McCarthy\", \"awards\" : 3, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1906-12-09T05:00:00Z\"), \"contribs\" : [ \"UNIVAC\", \"compiler\", \"FLOW-MATIC\", \"COBOL\" ], \"name\" : \"Grace Hopper\", \"awards\" : 4, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1926-08-27T04:00:00Z\"), \"contribs\" : [ \"OOP\", \"Simula\" ], \"name\" : \"Kristen Nygaard\", \"awards\" : 3, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1931-10-12T04:00:00Z\"), \"contribs\" : [ \"OOP\", \"Simula\" ], \"name\" : \"Ole-Johan Dahl\", \"awards\" : 3, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1956-01-31T05:00:00Z\"), \"contribs\" : [ \"Python\" ], \"name\" : \"Guido van Rossum\", \"awards\" : 2, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1941-09-09T04:00:00Z\"), \"contribs\" : [ \"UNIX\", \"C\" ], \"name\" : \"Dennis Ritchie\", \"awards\" : 3, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1965-04-14T04:00:00Z\"), \"contribs\" : [ \"Ruby\" ], \"name\" : \"Matz Matsumoto\", \"awards\" : 1, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"birth\" : ISODate(\"1955-05-19T04:00:00Z\"), \"contribs\" : [ \"Java\" ], \"name\" : \"James Gosling\", \"awards\" : 2, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n   { \"contribs\" : [ \"Scala\" ], \"name\" : \"Martin Odersky\", \"awards\" : 0, \"reportDate\" : \"2020-06-05\", \"reportBy\" : \"hellouser123\", \"reportNumber\" : 1 }\n\n.. seealso::\n\n   :doc:`/tutorial/project-fields-from-query-results`\n\n.. _crud-read-cursor:\n\nIterate the Returned Cursor\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`~db.collection.find()` method returns a\n:ref:`cursor <read-operations-cursors>` to the results.\n\nIn :binary:`~bin.mongosh`, if the returned cursor is not assigned to a\nvariable using the ``var`` keyword, the cursor is automatically iterated to\naccess up to the first 20 documents that match the query. You can update the\n``displayBatchSize`` variable to change the number of automatically\niterated documents.\n\nThe following example sets the batch size to 3. Future ``db.collection.find()``\noperations will only return 3 documents per cursor iteration.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.users.insertMany( [\n      { username: \"david\", age: 27 },\n      { username: \"amanda\", age: 25 },\n      { username: \"rajiv\", age: 32 },\n      { username: \"rajiv\", age: 90 }\n   ] )\n\nlimit with options\n``````````````````\n\nThe following query limits the number of documents in the result set \nwith the ``limit`` options parameter:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4\n\n   db.users.find(\n      { username : \"rajiv\"}, // query\n      { age : 1 }, // projection\n      { limit : 1 } // options\n   )\n\nallowDiskUse with options\n`````````````````````````\n\nThe following query uses the ``options`` parameter to enable \n``allowDiskUse``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4\n\n   db.users.find(\n      { username : \"david\" },\n      { age : 1 },\n      { allowDiskUse : true }\n   )\n\nexplain with options\n````````````````````\n\nThe following query uses the ``options`` parameter to get the \n``executionStats`` explain output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: true \n   :emphasize-lines: 4\n\n   var cursor = db.users.find(\n      { username: \"amanda\" },\n      { age : 1 },\n      { explain : \"executionStats\" }\n   )\n   cursor.next()\n\nSpecify Multiple options in a query\n```````````````````````````````````\n\nThe following query uses multiple ``options`` in a single query. This \nquery uses ``limit`` set to ``2`` to return only two documents, and\n``showRecordId`` set to ``true`` to return the position of the document\nin the result set:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4-7\n\n   db.users.find(\n      {},\n      { username: 1, age: 1 },\n      {\n        limit: 2, \n        showRecordId: true\n      }\n   )\n\nLearn More\n----------\n\n- :method:`~db.collection.findOne()`\n- :method:`~db.collection.findAndModify()`\n- :method:`~db.collection.findOneAndDelete()`\n- :method:`~db.collection.findOneAndReplace()`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.find.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 110, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\n.. note::\n\n   .. include:: /includes/extracts/arrayFilters-update-aggregation-restriction.rst\n\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findAndModify.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [ \n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 }, \n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 }, \n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 }\n      ] \n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 90, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 85, \"std\" : 4 }\n      ]\n   }\n\n.. _findAndModify-agg-pipeline:\n\nUse an Aggregation Pipeline for Updates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:method:`db.collection.findAndModify()` can accept an aggregation pipeline for \nthe update. The pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example, create a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findAndModify.txt"
  },
  {
    "code": "   :emphasize-lines: 3-9\n\n   db.scores.findOneAndDelete(\n      { name: \"A. MacDyver\" },\n      { \n         writeConcern: {  \n            w : 1,\n            j : true,\n            wtimeout : 1000\n         } \n      }\n   )\n\nThe operation returns the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findOneAndDelete.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id: 6305, name: 'A. MacDyver', assignment: 5, points: 24 }\n\nThe document is deleted with the writeConcern options specified.\n\n.. _findOneAndDelete-example-sort-and-replace-document:\n\nSort And Delete A Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``scores`` collection contains documents similar to the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findOneAndDelete.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 110, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\n.. note::\n\n   .. include:: /includes/extracts/arrayFilters-update-aggregation-restriction.rst\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findOneAndUpdate.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [\n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 }\n       ]\n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 90, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 85, \"std\" : 4 }\n      ]\n   }\n\n.. _findOneAndUpdate-agg-pipeline:\n\nUse an Aggregation Pipeline for Updates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:method:`db.collection.findOneAndUpdate()` can accept an aggregation pipeline \nfor the update. The pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example, create a collection ``students2`` with the following\ndocuments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.findOneAndUpdate.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"status\" : 1\n         },\n         \"name\" : \"status_1\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"points\" : 1\n         },\n         \"name\" : \"points_1\"\n      }\n   ]\n\n\nIndex information includes the keys and options used to create the\nindex. The index option ``hidden`` is only available if the value is ``true``.\n\nFor information on the keys and index options, see\n:method:`db.collection.createIndex()`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.getIndexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   Shard shard01 at shard01/localhost:27018\n   {\n     data: '38.14MB',\n     docs: 1000003,\n     chunks: 2,\n     'estimated data per chunk': '19.07B',\n     'estimated docs per chunk': 500001\n   }\n   ---\n   Shard shard02 at shard02/localhost:27019\n   {\n     data: '38.14B',\n     docs: 999999,\n     chunks: 3,\n     'estimated data per chunk': '12.71B',\n     'estimated docs per chunk': 333333\n   }\n   ---\n   Totals\n   {\n     data: '76.29B',\n     docs: 2000002,\n     chunks: 5,\n     'Shard shard01': [ '50 % data', '50 % docs in cluster', '40B avg obj size on shard' ],\n     'Shard shard02': [ '49.99 % data', '49.99 % docs in cluster', '40B avg obj size on shard' ]\n   }\n\nOutput Fields\n~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.getShardDistribution.txt"
  },
  {
    "code": "   :copyable: false\n\n   Shard shard01 at <host-a>   {\n     data: <size-a>,\n     docs: <count-a>,\n     chunks: <number of chunks-a>,\n     'estimated data per chunk': <size-a>/<number of chunks-a>,\n     'estimated docs per chunk': <count-a>/<number of chunks-a>\n   }\n   ---\n   Shard shard02 at <host-b>\n   {\n     data: <size-b>,\n     docs: <count-b>,\n     chunks: <number of chunks-b>,\n     'estimated data per chunk': <size-b>/<number of chunks-b>,\n     'estimated docs per chunk': <count-b>/<number of chunks-b>\n   }\n   ---\n   Totals\n   {\n     data: <stats.size>,\n     docs: <stats.count>,\n     chunks: <calc total chunks>,\n     Shard shard01: [ <estDataPercent-a> % data, <estDocPercent-a> % docs in cluster, stats.shards[ <shard-a> ].avgObjSize avg obj size on shard ],\n     Shard shard02: [ <estDataPercent-b> % data, <estDocPercent-b> % docs in cluster, stats.shards[ <shard-b> ].avgObjSize avg obj size on shard ]\n   }\n\nThe output information displays:\n\n- ``<shard-x>`` is a string that holds the shard name.\n\n- ``<host-x>`` is a string that holds the host name(s).\n\n- ``<size-x>`` is a number that includes the size of the data,\n  including the unit of measure (e.g. ``b``, ``Mb``).\n\n- ``<count-x>`` is a number that reports the number of\n  documents in the shard.\n\n- ``<number of chunks-x>`` is a number that reports the\n  number of chunks in the shard.\n\n- ``<size-x>/<number of chunks-x>`` is a calculated value\n  that reflects the estimated data size per chunk for the shard,\n  including the unit of measure (e.g. ``b``, ``Mb``).\n\n- ``<count-x>/<number of chunks-x>`` is a calculated value\n  that reflects the estimated number of documents per chunk for the\n  shard.\n\n- ``<stats.size>`` is a value that reports the total size of\n  the data in the sharded collection, including the unit of measure.\n\n- ``<stats.count>`` is a value that reports the total number\n  of documents in the sharded collection.\n\n- ``<calc total chunks>`` is a calculated number that reports the\n  number of chunks from all shards, for example:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.getShardDistribution.txt"
  },
  {
    "code": "   :emphasize-lines: 16\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"borough\" : 1,\n            \"ratings\" : 1\n         },\n         \"name\" : \"borough_1_ratings_1\",\n         \"hidden\" : true\n      }\n   ]\n\nThe ``hidden`` index option is only returned if the value is ``true``.\n\n.. seealso::\n\n   - :method:`db.collection.unhideIndex()`\n   - :ref:`db.collection.createIndex() <method-createIndex-hidden>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.hideIndex.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   [\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"_id\" : 1\n         },\n         \"name\" : \"_id_\"\n      },\n      {\n         \"v\" : 2,\n         \"key\" : {\n            \"borough\" : 1,\n            \"ratings\" : 1\n         },\n         \"name\" : \"borough_1_ratings_1\",\n         \"hidden\" : true\n      }\n   ]\n\nThe index option ``hidden`` is only returned if the value is ``true``.\n\nTo unhide the index, you can specify either the index key specification\ndocument or the index name to the :method:`db.collection.unhideIndex()`\nmethod. The following specifies the index name:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.unhideIndex.txt"
  },
  {
    "code": "         :emphasize-lines: 2,4-6\n\n         {\n           \"_id\" : 1,\n           \"item\" : \"ABC123\",\n           \"stock\" : 5,\n           \"info\" : { \"publisher\" : \"2222\", \"pages\" : 430 },\n           \"tags\" : [ \"software\" ],\n           \"ratings\" : [ { \"by\" : \"ijk\", \"rating\" : 4 }, { \"by\" : \"xyz\", \"rating\" : 3 } ],\n           \"reorder\" : false\n         }\n\n      This operation corresponds to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "         :emphasize-lines: 12\n\n         {\n           \"_id\" : 2,\n           \"item\" : \"XYZ123\",\n           \"stock\" : 15,\n           \"info\" : {\n            \"publisher\" : \"5555\",\n            \"pages\" : 150\n           },\n           \"tags\" : [ ],\n           \"ratings\" : [\n            { \"by\" : \"xyz\", \"rating\" : 5 },\n            { \"by\" : \"jkl\", \"rating\" : 2 }\n           ],\n           \"reorder\" : false\n          }\n\n      .. seealso::\n\n         :update:`$push`\n\n   .. tab:: Unset\n      :tabid: remove-fields\n\n      Remove Fields (``$unset``)\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n      The following operation uses the :update:`$unset` operator to remove\n      the ``tags`` field from the document with ``{ _id: 1 }``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "         :emphasize-lines: 11,19\n\n         [\n           {\n             \"_id\" : 1,\n             \"item\" : \"ABC123\",\n             \"stock\" : 5,\n             \"info\" : {\n              \"publisher\" : \"2222\",\n              \"pages\" : 430\n             },\n             \"ratings\" : [ { \"by\" : \"ijk\", \"rating\" : 4 }, { \"by\" : \"xyz\", \"rating\" : 3 } ],\n             \"reorder\" : true\n            }\n            {\n              \"_id\" : 2,\n              \"item\" : \"XYZ123\",\n              \"stock\" : 10,\n              \"info\" : { \"publisher\" : \"2255\", \"pages\" : 150 },\n              \"tags\" : [ \"baking\", \"cooking\" ],\n              \"reorder\" : true\n            }\n         ]\n\n      This operation corresponds to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "         :emphasize-lines: 8\n\n         db.books.update(\n            { item: \"ZZZ135\" },  // Query parameter\n            { $set:\n               {\n                  item: \"ZZZ135\", stock: 5, tags: [ \"database\" ]  // Replacement document\n               }\n            },\n            { upsert: true }  // Options\n         )\n\n      If no document matches the ``<query>`` parameter, the update\n      operation inserts a document with *only* the replacement\n      document. Because no ``_id`` field was specified in the\n      replacement document or query document, the operation creates a\n      new unique ``ObjectId`` for the new document's ``_id`` field.\n      You can see the ``upsert`` reflected in the :ref:`WriteResult\n      <writeresults-update>` of the operation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "         :copyable: false\n\n         WriteResult({\n           \"nMatched\" : 0,\n           \"nUpserted\" : 1,\n           \"nModified\" : 0,\n           \"_id\" : ObjectId(\"5da78973835b2f1c75347a83\")\n          })\n\n      The operation inserts the following document into the ``books``\n      collection (your :ref:`objectid` value will differ):\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "         :copyable: false\n\n         WriteResult({\n           \"nMatched\" : 0,\n           \"nUpserted\" : 0,\n           \"nModified\" : 0,\n           \"writeError\" : {\n             \"code\" : 111,\n             \"errmsg\" : \"field at '_id' must be exactly specified, field at sub-path '_id.name'found\"\n           }\n         })\n\n      .. seealso::\n\n         :method:`WriteResult()`\n\n.. _update-with-unique-indexes:\n.. _retryable-update-upsert:\n.. _upsert-duplicate-key-error:\n\nUpsert with Duplicate Values\n````````````````````````````\n\n.. include:: /includes/extracts/upsert-unique-index-update-method.rst\n\n.. seealso::\n\n   :update:`$setOnInsert`\n\n.. _update-behavior-agg-pipeline:\n.. _update-example-agg:\n\nUpdate with Aggregation Pipeline\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`db.collection.update()` method can accept an \n:ref:`aggregation pipeline <aggregation-pipeline>` \n``[ <stage1>, <stage2>, ... ]`` that specifies the modifications to \nperform. The pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nModify a Field Using the Values of the Other Fields in the Document\n```````````````````````````````````````````````````````````````````\n\nCreate a ``students`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "   :copyable: false\n\n   WriteResult({ \"nMatched\" : 3, \"nUpserted\" : 0, \"nModified\" : 3 })\n\nAfter the operation, the collection contains the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.update.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n   :copyable: false\n\n   db.collection.updateMany( \n      <query>,\n      { $set: { status: \"D\" }, $inc: { quantity: 2 } },\n      ...\n   )\n\n.. _updateMany-behavior-aggregation-pipeline:\n\nUpdate with an Aggregation Pipeline\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`db.collection.updateMany()` method can accept an \n:ref:`aggregation pipeline <aggregation-pipeline>` \n``[ <stage1>, <stage2>, ... ]`` that specifies the modifications to \nperform. The pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateMany.txt"
  },
  {
    "code": "   :emphasize-lines: 3-6\n   :copyable: false\n\n   db.collection.updateMany( \n      <query>,\n      [ \n         { $set: { status: \"Modified\", comments: [ \"$misc1\", \"$misc2\" ] } }, \n         { $unset: [ \"misc1\", \"misc2\" ] } \n      ]\n      ...\n   )\n\n.. note::\n\n   .. include:: /includes/set-aggregation-versus-update.rst\n\nFor examples, see :ref:`updateMany-example-agg`.\n\n\n.. _updateMany-capped-collections:\n\nCapped Collections\n~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/capped-collection-immutable-document-size-update.rst\n\n.. _updateMany-timeseries-collection:\n\nTime Series Collections\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`~db.collection.updateMany()` method is available for\n:term:`time series collections <time series collection>` starting in\nMongoDB 5.1. \n\nUpdate commands must meet the following requirements:\n\n.. include:: /includes/time-series/fact-update-limitations.rst\n\n.. _updateMany-sharded-collection:\n\nSharded Collections\n~~~~~~~~~~~~~~~~~~~\n\n``updateMany()`` exhibits the following behaviors when used with \nsharded collections:\n\n- ``updateMany()`` operations that include ``upsert: true`` must \n  include the full shard key in the ``filter``.\n\n- If you attempt to run ``updateMany()`` during a \n  :ref:`<sharding-chunk-migration>` or a \n  :ref:`shard key value update <update-shard-key>`, the operation can \n  miss documents in some scenarios. To ensure all documents are updated, \n  use idempotent updates and rerun the command until no further updates \n  are applied. For more information on idempotent updates with \n  ``updateMany()``, see :ref:`<updateMany-example-idempotent>`.\n\n.. |method| replace:: ``updateMany()``\n\n.. include:: /includes/method-targets-all-shards-if-no-txn.rst\n\nExplainability\n~~~~~~~~~~~~~~\n\n:method:`~db.collection.updateMany()` is not compatible with\n:method:`db.collection.explain()`.\n\nTransactions\n~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-supported-operation.rst\n\n.. include:: /includes/extracts/transactions-usage.rst\n\nUpsert within Transactions\n``````````````````````````\n\n.. include:: /includes/extracts/transactions-upsert-availability.rst\n\nWrite Concerns and Transactions\n````````````````````````````````\n\n.. include:: /includes/extracts/transactions-operations-write-concern.rst\n\n\n.. |operation| replace:: :method:`db.collection.updateMany()`\n\nOplog Entries\n~~~~~~~~~~~~~\n\n``updateMany()`` adds an entry to the :term:`oplog` (operations log) \nfor each successfully updated document. If no documents are updated,\n``updateMany()`` does not add entries to the oplog.\n\n.. _updateMany-method-examples:\n\nExamples\n--------\n\n.. _updateMany-example-idempotent:\n\nIdempotent Updates\n~~~~~~~~~~~~~~~~~~\n\nThe following example demonstrates an :term:`idempotent` update with\n``updateMany()``:\n\nA company is giving a $1,000 raise to all employees earning less than \n$100,000.\n\nConsider an ``employees`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateMany.txt"
  },
  {
    "code": "   :emphasize-lines: 2-3\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 100, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateMany.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6,12-14\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [\n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 }\n      ]\n   }\n   { \n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 100, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 100, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 }\n      ]\n   }\n\n.. _ex-update-many-hint:\n\nSpecify ``hint`` for Update Operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``students`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateMany.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n   :copyable: false\n\n   db.collection.updateOne( \n      <query>,\n      { $set: { status: \"D\" }, $inc: { quantity: 2 } },\n      ...\n   )\n\n.. _updateOne-behavior-aggregation-pipeline:\n\nUpdate with an Aggregation Pipeline\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :method:`db.collection.updateOne()` method can accept an \n:ref:`aggregation pipeline <aggregation-pipeline>` \n``[ <stage1>, <stage2>, ... ]`` that specifies the modifications to perform. \nThe pipeline can consist of the following stages:\n\n.. include:: /includes/list-update-agg-stages.rst\n\nUsing the aggregation pipeline allows for a more expressive update\nstatement, such as expressing conditional updates based on current\nfield values or updating one field using the value of another field(s).\n\nFor example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateOne.txt"
  },
  {
    "code": "   :emphasize-lines: 3-6\n   :copyable: false\n\n   db.collection.updateOne( \n      <query>,\n      [ \n         { $set: { status: \"Modified\", comments: [ \"$misc1\", \"$misc2\" ] } }, \n         { $unset: [ \"misc1\", \"misc2\" ] } \n      ]\n      ...\n   )\n\n.. note::\n\n   The ``$set`` and ``$unset`` used in the pipeline refers to the\n   aggregation stages :pipeline:`$set` and :pipeline:`$unset`\n   respectively, and not the update operators :update:`$set` and :update:`$unset`.\n\nFor examples, see :ref:`updateOne-example-agg`.\n\nUpsert\n~~~~~~\n\n- .. include:: /includes/fact-7-1-sharded-upsert.rst\n\n- If ``upsert: true`` and no documents match the ``filter``, \n  :method:`db.collection.updateOne()` creates a new \n  document based on the ``filter`` criteria and ``update`` \n  modifications. See :ref:`updateOne-example-update-with-upsert`.\n  \n- For additional :method:`db.collection.updateOne()` behavior on a \n  sharded collection, see :ref:`updateOne-sharded-collection`.\n\n.. _updateOne-capped-collection:\n\nCapped Collection\n~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/capped-collection-immutable-document-size-update.rst\n\n.. _updateOne-sharded-collection:\n\nSharded Collections\n~~~~~~~~~~~~~~~~~~~\n\n.. _updateOne-sharded-upsert:\n\n``upsert`` on a Sharded Collection\n``````````````````````````````````\n\nTo use :method:`db.collection.updateOne()` on a sharded collection:\n\n- .. include:: /includes/fact-7-1-sharded-upsert.rst\n\n- If you don't specify ``upsert: true``, you must include an exact\n  match on the ``_id`` field or target a single shard (such as by\n  including the shard key in the :ref:`filter <update-one-filter>`).\n\n.. include:: /includes/extracts/missing-shard-key-equality-condition-update.rst\n\n.. _updateOne-shard-key-modification:\n\nShard Key Modification\n``````````````````````\n\n.. include:: /includes/limits-sharding-shardkey-document-immutable.rst\n\n.. include:: /includes/shard-key-modification-warning.rst\n\nTo modify the **existing** shard key value with\n:method:`db.collection.updateOne()`:\n\n- You :red:`must` run on a :binary:`~bin.mongos`. Do :red:`not`\n  issue the operation directly on the shard.\n\n- You :red:`must` run either in a :doc:`transaction\n  </core/transactions>` or as a :doc:`retryable write\n  </core/retryable-writes>`. \n\n- You :red:`must` include an equality :ref:`filter\n  <update-one-filter>` on the full shard key.\n\nSee also :ref:`updateOne-sharded-upsert`.\n\n.. _updateOne-missing-shard-key:\n\nMissing Shard Key\n`````````````````\n\n- Starting in version 7.1, you do not need to provide the :term:`shard key` \n  or ``_id`` field in the query specification. \n\n- Documents in a sharded collection can be\n  :ref:`missing the shard key fields <shard-key-missing>`. To use\n  :method:`db.collection.updateOne()` to set a **missing** shard key, \n  you :red:`must` run on a :binary:`~bin.mongos`. Do :red:`not` issue \n  the operation directly on the shard.\n\n  In addition, the following requirements also apply:\n\n  .. list-table::\n     :header-rows: 1\n     :widths: 30 70\n\n     * - Task\n\n       - Requirements\n\n     * - To set to ``null``\n\n       - Requires equality filter on the full shard key if\n         ``upsert: true``.\n\n     * - To set to a non-``null`` value\n\n       - :red:`Must` be performed either inside a\n         :ref:`transaction <transactions>` or as a\n         :ref:`retryable write <retryable-writes>`.\n\n         Requires equality filter on the full shard key if ``upsert: true``.\n\n  .. tip::\n\n     .. include:: /includes/extracts/missing-shard-key-equality-condition-abridged.rst\n\nSee also:\n\n- :ref:`updateOne-sharded-upsert`\n\n- :ref:`shard-key-missing`\n\nExplainability\n~~~~~~~~~~~~~~\n\n:method:`~db.collection.updateOne()` is not compatible with\n:method:`db.collection.explain()`.\n\nTransactions\n~~~~~~~~~~~~\n\n.. include:: /includes/extracts/transactions-supported-operation.rst\n\n.. include:: /includes/extracts/transactions-usage.rst\n\nUpsert within Transactions\n``````````````````````````\n\n.. include:: /includes/extracts/transactions-upsert-availability.rst\n\nWrite Concerns and Transactions\n````````````````````````````````\n\n.. include:: /includes/extracts/transactions-operations-write-concern.rst\n\n.. |operation| replace:: :method:`db.collection.updateOne()`\n\nOplog Entries\n~~~~~~~~~~~~~\n\nIf a ``db.collection.updateOne()`` operation successfully updates a\ndocument, the operation adds an entry on the :term:`oplog` (operations\nlog). If the operation fails or does not find a document to update, the\noperation does not add an entry on the oplog. \n\n.. _updateOne-method-examples:\n\nExamples\n--------\n\n.. _updateOne-example-update:\n\nUpdate using Update Operator Expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``restaurant`` collection contains the  following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 2, \"student\" : \"Elizabeth\", \"status\" : \"Modified\", \"points\" : 60, \"lastUpdate\" : ISODate(\"2020-01-23T05:11:45.784Z\"), \"comments\" : [ \"well behaved\", \"needs improvement\" ] }\n   { _id: 1, student: 'Skye', points: 75, commentsSemester1: 'great at math', commentsSemester2: 'loses temper', lastUpdate: ISODate(\"2019-01-01T00:00:00.000Z\") }\n\nNote that after introducing a sort, only the first document encountered in the \nsort order is modified and the remaining documents are left untouched. \n\nExample 2\n`````````\n\nThe aggregation pipeline allows the update to perform conditional\nupdates based on the current field values as well as use current field\nvalues to calculate a separate field value.\n\nFor example, create a ``students3`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateOne.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   { \"_id\" : 1, \"grades\" : [ 95, 92, 90 ] }\n   { \"_id\" : 2, \"grades\" : [ 98, 100, 100 ] }\n   { \"_id\" : 3, \"grades\" : [ 95, 110, 100 ] }\n\nUpdate Specific Elements of an Array of Documents\n`````````````````````````````````````````````````\n\nCreate a collection ``students2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateOne.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6\n\n   {\n      \"_id\" : 1,\n      \"grades\" : [\n         { \"grade\" : 80, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 4 },\n         { \"grade\" : 85, \"mean\" : 100, \"std\" : 6 } \n       ]\n   }\n   {\n      \"_id\" : 2,\n      \"grades\" : [\n         { \"grade\" : 90, \"mean\" : 75, \"std\" : 6 },\n         { \"grade\" : 87, \"mean\" : 90, \"std\" : 3 },\n         { \"grade\" : 85, \"mean\" : 85, \"std\" : 4 }\n      ]\n   }\n\n.. _ex-update-one-hint:\n\nSpecify ``hint`` for Update Operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``students`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.updateOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : {\n         \"_data\" : \"82624B21...\",\n         \"_typeBits\" : BinData(0,\"QA==\")\n      },\n      \"operationType\" : \"update\",\n      \"clusterTime\" : Timestamp(1649090957, 1),\n      \"ns\" : {\n         \"db\" : \"test\",\n         \"coll\" : \"temperatureSensor\"\n      },\n      \"documentKey\" : {\n         \"_id\" : 2\n      },\n      \"updateDescription\" : {\n         \"updatedFields\" : {\n            \"reading\" : 22.1\n         },\n         \"removedFields\" : [ ],\n         \"truncatedArrays\" : [ ]\n      },\n      \"fullDocumentBeforeChange\" : {\n         \"_id\" : 2,\n         \"reading\" : 24.3\n      }\n   }\n\n.. include:: /includes/change-stream-pre-and-post-images-output.rst\n\nChange Stream with Document Post-Image\n``````````````````````````````````````\n\nYou use the ``fullDocument: \"whenAvailable\"`` setting to output the\ndocument post-image, if available. The post-image is the document after\nit was inserted, replaced, or updated. There is no post-image for a\ndeleted document.\n\nThe following example creates a change stream cursor for the\n``temperatureSensor`` collection using ``fullDocument:\n\"whenAvailable\"``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.watch.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : {\n         \"_data\" : \"8262474D...\",\n         \"_typeBits\" : BinData(0,\"QA==\")\n      },\n      \"operationType\" : \"update\",\n      \"clusterTime\" : Timestamp(1648840090, 1),\n      \"fullDocument\" : {\n         \"_id\" : 1,\n         \"reading\" : 29.5\n      },\n      \"ns\" : {\n         \"db\" : \"test\",\n         \"coll\" : \"temperatureSensor\"\n      },\n      \"documentKey\" : {\n         \"_id\" : 1\n      },\n      \"updateDescription\" : {\n         \"updatedFields\" : {\n            \"reading\" : 29.5\n         },\n         \"removedFields\" : [ ],\n         \"truncatedArrays\" : [ ]\n      }\n   }\n\n.. include:: /includes/change-stream-pre-and-post-images-output.rst\n\nChange Stream with Aggregation Pipeline Filter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   .. include:: /includes/extracts/4.2-changes-change-stream-modification-error.rst\n\nThe following operation opens a change stream cursor against the \n``data.sensors`` collection using an aggregation pipeline to\nfilter only ``insert`` events:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.collection.watch.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 'products.associate',\n     role: 'associate',\n     db: 'products',\n     roles: [ { role: 'readWrite', db: 'products' } ],\n     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n     isBuiltin: false\n   }\n\n.. _db-getRole-example-privileges:\n\nShow Role Privileges\n~~~~~~~~~~~~~~~~~~~~\n\nThe following operation returns role inheritance information *and privileges*\nfor the role ``associate`` defined on the ``products`` database:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getRole.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 'products.associate',\n     role: 'associate',\n     db: 'products',\n     privileges: [\n       {\n         resource: { db: 'products', collection: '' },\n         actions: [ 'bypassDocumentValidation' ]\n       }\n     ],\n     roles: [ { role: 'readWrite', db: 'products' } ],\n     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n     inheritedPrivileges: [\n       {\n         resource: { db: 'products', collection: '' },\n         actions: [ 'bypassDocumentValidation' ]\n       },\n       {\n         resource: { db: 'products', collection: '' },\n         actions: [\n           'changeStream',\n           'collStats',\n           'compactStructuredEncryptionData',\n           'convertToCapped',\n           'createCollection',\n           'createIndex',\n           'dbHash',\n           'dbStats',\n           'dropCollection',\n           'dropIndex',\n           'find',\n           'insert',\n           'killCursors',\n           'listCollections',\n           'listIndexes',\n           'planCacheRead',\n           'remove',\n           'renameCollectionSameDB',\n           'update'\n         ]\n       }\n     ],\n     isBuiltin: false\n   }\n\n.. _db-getRole-example-auth-restrictions:\n\nShow Authentication Restrictions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation returns role inheritance information and\nauthentication restrictions for the role ``associate`` defined on the\n``products`` database:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getRole.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 'products.associate',\n     role: 'associate',\n     db: 'products',\n     roles: [ { role: 'readWrite', db: 'products' } ],\n     authenticationRestrictions: [\n       [ { clientSource: [ '198.51.100.0' ] } ]\n     ],\n     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n     inheritedAuthenticationRestrictions: [\n       [ { clientSource: [ '198.51.100.0' ] } ]\n     ],\n     isBuiltin: false\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getRole.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     roles: [\n       {\n         role: 'dbOwner',\n         db: 'products',\n         isBuiltin: true,\n         roles: [],\n         inheritedRoles: [],\n         privileges: [\n           {\n             resource: { db: 'products', collection: '' },\n             actions: [\n               'analyze',\n               'bypassDocumentValidation',\n               'changeCustomData',\n               ...\n             ]\n           },\n           {\n             resource: { db: 'products', collection: 'system.profile' },\n             actions: [\n               'changeStream',\n               'collStats',\n               'convertToCapped',\n               ...\n             ]\n           }\n         ],\n         inheritedPrivileges: [\n           {\n             resource: { db: 'products', collection: '' },\n             actions: [\n               'analyze',\n               'bypassDocumentValidation',\n               'changeCustomData',\n               ...\n             ]\n           }\n         ]\n       },\n       ...\n     ]\n   }\n\n.. _db-getRoles-example-auth-restrictions:\n  \nShow Authentication Restrictions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation returns role inheritance information and\nauthentication restrictions for all :ref:`user-defined roles\n<user-defined-roles>` on the ``product`` database:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getRoles.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     roles: [\n       {\n         _id: 'products.associate',\n         role: 'associate',\n         db: 'products',\n         roles: [ { role: 'readWrite', db: 'products' } ],\n         authenticationRestrictions: [\n           [ { clientSource: [ '198.51.100.0' ] } ]\n         ],\n         isBuiltin: false,\n         inheritedRoles: [ { role: 'readWrite', db: 'products' } ],\n         inheritedAuthenticationRestrictions: [\n           [ { clientSource: [ '198.51.100.0' ] } ]\n         ]\n       }\n     ],\n     ok: 1\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getRoles.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: 'accounts.appClient',\n      userId: UUID(\"1c2fc1bf-c4dc-4a22-8b04-3971349ce0dc\"),\n      user: 'appClient',\n      db: 'accounts',\n      roles: [],\n      mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]\n   }\n\nOmit Custom Data from Output\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.2\n\n   To omit a user's custom data from the :method:`db.getUser()` output,\n   set the ``showCustomData`` option to ``false``.\n\n.. include:: /includes/fact-omit-custom-data-example-setup.rst\n\nTo retrieve the user but omit the custom data from the output, run\n:method:`db.getUser()` with ``showCustomData`` set to ``false``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getUser.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: 'products.accountAdmin01',\n      userId: UUID(\"0955afc1-303c-4683-a029-8e17dd5501f4\"),\n      user: 'accountAdmin01',\n      db: 'products',\n      roles: [ { role: 'readWrite', db: 'products' } ],\n      mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getUser.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      users: [\n        {\n          _id: 'products.accountAdmin01',\n          userId: UUID(\"0955afc1-303c-4683-a029-8e17dd5501f4\"),\n          user: 'accountAdmin01',\n          db: 'products',\n          roles: [ { role: 'readWrite', db: 'products' } ],\n          mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]\n        }\n      ],\n      ok: 1\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.getUsers.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"arrayFilters\" : NumberLong(0),\n      \"failed\" : NumberLong(0),\n      \"pipeline\" : NumberLong(0),\n      \"total\" : NumberLong(1)\n   }\n\n.. note::\n\n   The ``db.serverStatus()`` method returns an error if a specific\n   object is queried before the counters have begun to increment. \n\n   If there haven't been any document updates yet:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.serverStatus.txt"
  },
  {
    "code": "      :copyable: false\n      \n      TypeError: db.serverStatus(...).metrics.commands.update is undefined :\n      @(shell):1:1\n\nInclude ``mirroredReads``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the :serverstatus:`mirroredReads` information is not included in \nthe output. To return :serverstatus:`mirroredReads` information, you must \nexplicitly specify the inclusion:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.serverStatus.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n      \n      db.setLogLevel(1)\n\n   .. output::\n      :language: javascript\n      :visible: false\n\n      {\n         was: {\n            verbosity: 1,\n            accessControl: { verbosity: -1 },\n            assert: { verbosity: -1 },\n            command: { verbosity: -1 },\n            control: { verbosity: -1 },\n            executor: { verbosity: -1 },\n            geo: { verbosity: -1 },\n            globalIndex: { verbosity: -1 },\n            index: { verbosity: -1 },\n            network: {\n               verbosity: -1,\n               asio: { verbosity: -1 },\n               bridge: { verbosity: -1 },\n               connectionPool: { verbosity: -1 }\n            },\n            processHealth: { verbosity: -1 },\n            query: {\n               verbosity: -1,\n               optimizer: { verbosity: -1 },\n               ce: { verbosity: -1 }\n            },\n            queryStats: { verbosity: -1 },\n            replication: {\n               verbosity: -1,\n               election: { verbosity: -1 },\n               heartbeats: { verbosity: -1 },\n               initialSync: { verbosity: -1 },\n               rollback: { verbosity: -1 }\n            },\n            sharding: {\n               verbosity: -1,\n               rangeDeleter: { verbosity: -1 },\n               shardingCatalogRefresh: { verbosity: -1 },\n               migration: { verbosity: -1 },\n               reshard: { verbosity: -1 },\n               migrationPerf: { verbosity: -1 }\n            },\n            storage: {\n               verbosity: -1,\n               recovery: { verbosity: -1 },\n               journal: { verbosity: 2 },\n               wt: {\n               verbosity: -1,\n               wtBackup: { verbosity: -1 },\n               wtCheckpoint: { verbosity: -1 },\n               wtCompact: { verbosity: -1 },\n               wtEviction: { verbosity: -1 },\n               wtHS: { verbosity: -1 },\n               wtRecovery: { verbosity: -1 },\n               wtRTS: { verbosity: -1 },\n               wtSalvage: { verbosity: -1 },\n               wtTiered: { verbosity: -1 },\n               wtTimestamp: { verbosity: -1 },\n               wtTransaction: { verbosity: -1 },\n               wtVerify: { verbosity: -1 },\n               wtWriteLog: { verbosity: -1 }\n               }\n            },\n            write: { verbosity: -1 },\n            ftdc: { verbosity: -1 },\n            tracking: { verbosity: -1 },\n            transaction: { verbosity: -1 },\n            tenantMigration: { verbosity: -1 },\n            test: { verbosity: -1 },\n            resourceConsumption: { verbosity: -1 },\n            streams: { verbosity: -1 }\n         },\n         ok: 1\n      }\n\nSet Verbosity Level for a Component\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSpecify the ``<component>`` parameter to set the verbosity for the\ncomponent. The following operation updates the\n:setting:`systemLog.component.storage.journal.verbosity` to ``2``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.setLogLevel.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.setLogLevel(2, \"storage.journal\" )\n\n   .. output::\n      :language: javascript\n      :visible: false\n\n      {\n         was: {\n            verbosity: 1,\n            accessControl: { verbosity: -1 },\n            assert: { verbosity: -1 },\n            command: { verbosity: -1 },\n            control: { verbosity: -1 },\n            executor: { verbosity: -1 },\n            geo: { verbosity: -1 },\n            globalIndex: { verbosity: -1 },\n            index: { verbosity: -1 },\n            network: {\n               verbosity: -1,\n               asio: { verbosity: -1 },\n               bridge: { verbosity: -1 },\n               connectionPool: { verbosity: -1 }\n            },\n            processHealth: { verbosity: -1 },\n            query: {\n               verbosity: -1,\n               optimizer: { verbosity: -1 },\n               ce: { verbosity: -1 }\n            },\n            queryStats: { verbosity: -1 },\n            replication: {\n               verbosity: -1,\n               election: { verbosity: -1 },\n               heartbeats: { verbosity: -1 },\n               initialSync: { verbosity: -1 },\n               rollback: { verbosity: -1 }\n            },\n            sharding: {\n               verbosity: -1,\n               rangeDeleter: { verbosity: -1 },\n               shardingCatalogRefresh: { verbosity: -1 },\n               migration: { verbosity: -1 },\n               reshard: { verbosity: -1 },\n               migrationPerf: { verbosity: -1 }\n            },\n            storage: {\n               verbosity: -1,\n               recovery: { verbosity: -1 },\n               journal: { verbosity: -1 },\n               wt: {\n               verbosity: -1,\n               wtBackup: { verbosity: -1 },\n               wtCheckpoint: { verbosity: -1 },\n               wtCompact: { verbosity: -1 },\n               wtEviction: { verbosity: -1 },\n               wtHS: { verbosity: -1 },\n               wtRecovery: { verbosity: -1 },\n               wtRTS: { verbosity: -1 },\n               wtSalvage: { verbosity: -1 },\n               wtTiered: { verbosity: -1 },\n               wtTimestamp: { verbosity: -1 },\n               wtTransaction: { verbosity: -1 },\n               wtVerify: { verbosity: -1 },\n               wtWriteLog: { verbosity: -1 }\n               }\n            },\n            write: { verbosity: -1 },\n            ftdc: { verbosity: -1 },\n            tracking: { verbosity: -1 },\n            transaction: { verbosity: -1 },\n            tenantMigration: { verbosity: -1 },\n            test: { verbosity: -1 },\n            resourceConsumption: { verbosity: -1 },\n            streams: { verbosity: -1 }\n         },\n         ok: 1\n      }\n\nGet Global Log Level For a Deployment\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following operation gets the default logging level verbosity for a \ndeployment:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.setLogLevel.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.adminCommand({getParameter: 1, logLevel: 1});\n\n   .. output::\n      :language: javascript\n      :emphasize-lines: 2\n      :visible: false\n      \n      { \n      logLevel: 0, \n      ok: 1 \n      }\n\n.. note::\n\n   You can also get log verbosity levels for MongoDB components. \n   For details, see :method:`db.getLogComponents()`.\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.setLogLevel.txt"
  },
  {
    "code": "   :copyable: false\n\n   118784\n   116\n\nReturn Information on Free Space Allocated to Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo return information on free space allocated to collections, pass the\n:ref:`freeStorage <dbStats-freeStorage>` parameter to ``db.stats()``.\n\nThe following example returns the :data:`~dbStats.indexFreeStorageSize`\nin kilobytes:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/db.stats.txt"
  },
  {
    "code": "      :copyable: false\n\n      // process.chdir( <path> )\n\n      process.chdir( \"./data/incoming\" )\n\n.. list-table::\n   :widths: 30,70\n   :header-rows: 1\n\n   * - Legacy Method Name\n     - Replacement\n\n   * - ``cat()``\n     - Returns the contents of the specified file\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/js-native.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"balancerCompliant\" : true,\n      \"ok\" : 1,\n      \"operationTime\" : Timestamp(1583193238, 1),\n      \"$clusterTime\" : {\n         \"clusterTime\" : Timestamp(1583193238, 1),\n         \"signature\" : {\n            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n            \"keyId\" : NumberLong(0)\n         }\n      }\n   }\n\n.. _balancer-collection-status-defrag-output-method:\n\nOngoing Defragmentation Process\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. |balancer-command| replace:: ``sh.balancerCollectionStatus`` method\n\n.. include:: /includes/sharding/balancer-status-defrag-example.rst\n\nFor the description of the output, see :ref:`balancerCollectionStatus\nOutput <cmd-balancer-CollectionStatus-output>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.balancerCollectionStatus.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     mode: 'full',\n     inBalancerRound: false,\n     numBalancerRounds: Long(\"1143\"),\n     ok: 1,\n     '$clusterTime': {\n        clusterTime: Timestamp({ t: 1639753724, i: 3 }),\n        signature: {\n           hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n           keyId: Long(\"0\")\n        }\n     },\n     operationTime: Timestamp({ t: 1639753724, i: 3 })\n   }\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Field\n     - Description\n\n   * - ``mode``\n\n     - String that specifies whether the balancer thread is running\n       or stopped. Possible values are:\n\n       - \"full\"\n           Balancer thread is running but not necessarily in a\n           balancing round.\n\n       - \"off\"\n           Balancer thread is stopped. Chunk balancing cannot occur in\n           this mode.\n   \n   * - ``inBalancerRound``\n\n     - Boolean that specifies if the balancer is currently in a\n       balancing round.\n\n   * - ``numBalancerRounds``\n\n     - Number of balancer rounds which have occurred since the\n       config servers were started. This value is reset to 0 when \n       the config servers are restarted.\n\n   * - ``ok``\n\n     - See :ref:`Command Response <command-response>`.\n\n   * - ``$clusterTime``\n\n     - See :ref:`Command Response <command-response>`.\n\n   * - ``operationTime``\n\n     - See :ref:`Command Response <command-response>`.\n\n.. seealso::\n\n   - :method:`sh.enableBalancing()`\n   - :method:`sh.disableBalancing()`\n   - :method:`sh.getBalancerState()`\n   - :method:`sh.setBalancerState()`\n   - :method:`sh.startBalancer()`\n   - :method:`sh.stopBalancer()`\n   - :method:`sh.waitForBalancer()`\n   - :method:`sh.waitForBalancerOff()`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.isBalancerRunning.txt"
  },
  {
    "code": "          :copyable: false\n\n          [\n             {\n                 min: <document with same shape as shardkey>,\n                 max: <document with same shape as shardkey>,\n                 zone: <string> | null\n             },\n             ...\n          ]\n\n   * - ``forceRedistribution``\n     - boolean\n     - .. _forceRedistribution-option:\n       \n       .. include:: /includes/fact-forceRedistribution-desc.rst\n\nCompatibility\n-------------\n\nThis method is available in deployments hosted in the following environments: \n\n.. include:: /includes/fact-environments-atlas-only.rst\n\n.. include:: /includes/fact-environments-atlas-support-no-free.rst\n\n.. include:: /includes/fact-environments-onprem-only.rst\n\nConsiderations\n--------------\n\n.. include:: /includes/sharding/reshard-build-indexes-consideration.rst\n\n.. _resharding-process-details:\n\nResharding Process\n------------------\n\n.. include:: /includes/reshard-collection-introduction.rst\n\nInitialization Phase\n~~~~~~~~~~~~~~~~~~~~\n\nDuring the initialization phase, the resharding coordinator determines\nthe new data distribution for the sharded collection.\n\nIndex Phase\n~~~~~~~~~~~\n\nDuring the index phase:\n\n- Each shard recipient creates a new, empty sharded collection with the\n  same collection options as the existing sharded collection. This new\n  sharded collection is the target for where recipient shards write the\n  new data.\n- Each shard recipient builds the necessary new indexes. These include\n  all existing indexes on the sharded collection and an index compatible\n  with the new shard key pattern if such an index doesn't already exist on\n  the sharded collection.\n\nClone, Apply, and Catch-up Phase\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDuring the clone, apply, and catch-up phase:\n\n- Each shard recipient clones an initial copy of the documents it would\n  own under the new shard key.\n- Each shard recipient begins applying oplog entries from operations\n  that happened after the recipient cloned the data.\n- When the estimate for the time remaining to complete the resharding\n  operation is under **two seconds**, the resharding coordinator blocks\n  writes for the collection.\n\n  .. note::\n\n     If required, you can manually force the resharding operation to\n     complete by issuing the :method:`sh.commitReshardCollection()`\n     method. This is useful if the current time estimate to complete the\n     resharding operation is an acceptable duration for your collection\n     to block writes. The :method:`sh.commitReshardCollection()` method\n     blocks writes early and forces the resharding operation to\n     complete. During the time period where writes are blocked your\n     application experiences an increase in latency.\n\n.. _resharding-commit-phase-method:\n\nCommit Phase\n~~~~~~~~~~~~\n\n- After the resharding process reaches the commit phase, the process\n  cannot be ended with :method:`sh.abortReshardCollection()`.\n- When all shards have reached strict consistency, the resharding\n  coordinator commits the resharding operation and installs the new\n  routing table.\n- The resharding coordinator instructs each donor and recipient shard\n  primary, independently, to rename the temporary sharded collection.\n  The temporary collection becomes the new resharded collection.\n- Each donor shard drops the old sharded collection.\n\n  .. seealso::\n\n     :ref:`sharding-resharding`\n\nExample\n-------\n\nReshard a Collection\n~~~~~~~~~~~~~~~~~~~~\n\nThe following example reshards the ``sales.orders`` collection with the\nnew shard key ``{ order_id: 1 }``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.reshardCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     ok: 1,\n     '$clusterTime': {\n       clusterTime: Timestamp(1, 1624887954),\n       signature: {\n         hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n         keyId: 0\n       }\n     },\n     operationTime: Timestamp(1, 1624887947)\n   }\n\n.. _reshardCollection-to-same-key:\n\nReshard a Collection to the Same Shard Key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to reshard to the same shard key, set :ref:`forceRedistribution \n<forceRedistribution-option>` to ``true``. The following example \nreshards the ``sales.orders`` collection to the same shard key\n``{ order_id: 1 }`` and redistributes data. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.reshardCollection.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     ok: 1,\n     '$clusterTime': {\n       clusterTime: Timestamp({ t: 1733502241, i: 20 }),\n       signature: {\n         hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),\n         keyId: Long('0')\n       }\n     },\n     operationTime: Timestamp({ t: 1733502241, i: 20 })\n   }\n\nReshard a Collection with Zones\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReshard a collection with zones when you need to adjust the distribution \nof data across the shards in your cluster to meet changing requirements or \nto improve performance. \n\nIn the following example, the ``test.scores`` collection resides on ``shard0`` \nand ``shard1``. The current shard key is ``{ _id: 1}``. \n\n.. procedure::\n   :style: normal\n\n   .. step:: Add shards to a new zone\n\n      In this example, this zone is called ``NewZone``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.reshardCollection.txt"
  },
  {
    "code": "         :copyable: false \n\n         {\n            ok: 1,\n            '$clusterTime': {\n            clusterTime: Timestamp( { t: 1699484530, i: 54 } ),\n            signature: {\n            hash: Binary.createFromBase64( \"90ApBDrSSi4XnCpV3OWIH4OGO0Y=\", 0 ),\n            keyId: Long( \"7296989036055363606\" )\n            } },\n            operationTime: Timestamp( { t: 1699484530, i: 54 } )\n         }\n\n\nLearn More\n----------\n\n- :ref:`<sharding-resharding>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sh.reshardCollection.txt"
  },
  {
    "code": "   :copyable: true\n\n   sp.createStreamProcessor(\n     'solarDemo',\n     [\n       {\n         $source: {\n\t   connectionName: 'sample_stream_solar',\n\t   timeField: {\n\t     $dateFromString: {\n\t       dateString: '$timestamp'\n\t     }\n\t   }\n\t }\n       },\n       {\n         $match: {\n\t   $expr: {\n\t     $ne: [\n\t       \"$device_id\",\n\t       \"device_8\"\n\t     ]\n\t   }\n\t }\n       },\n       {\n         $tumblingWindow: {\n\t   interval: {\n\t     size: NumberInt(10),\n\t     unit: \"second\"\n\t   },\n\t   \"pipeline\": [\n\t     {\n\t       $group: {\n\t         \"_id\": {  \"device_id\": \"$device_id\" },\n\t\t \"max_temp\": { $max: \"$obs.temp\" },\n\t\t \"max_watts\": { $max: \"$obs.watts\" },\n\t\t \"min_watts\": { $min: \"$obs.watts\" },\n\t\t \"avg_watts\": { $avg: \"$obs.watts\" },\n\t\t \"median_watts\": {\n\t\t                   $median: {\n\t\t                     input: \"$obs.watts\",\n\t                             method: \"approximate\"\n\t                           }\n\t                         }\n\t       }\n\t     }\n\t   ]\n\t }\n       },\n       {\n         $merge: {\n\t   into: {\n\t     connectionName: \"mongodb1\",\n\t     db: \"solar_db\",\n\t     coll: \"solar_coll\"\n\t   },\n\t   on: [\"_id\"]\n\t }\n       }\n     ]\n   )\n\nLearn More\n------------------\n\n- :atlas:`Stream Aggregation </atlas-sp/stream-aggregation>`\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.createStreamProcessor.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: sh\n\n      sp.listStreamProcessors()\n\n   .. output:: \n      :language: json\n      :linenos:\n\n      {\n\tid: '0135',\n\tname: \"proc01\",\n\tlast_modified: ISODate(\"2023-03-20T20:15:54.601Z\"),\n\tstate: \"RUNNING\",\n\terror_msg: '',\n\tpipeline: [\n\t  {\n\t    $source: {\n\t      connectionName: \"myKafka\", \n\t      topic: \"stuff\"\n\t    }\n\t  },\n\t  {\n\t    $match: { \n\t      temperature: 46 \n\t    }\n\t  },\n\t  {\n\t    $emit: {\n\t      connectionName: \"mySink\",\n\t      topic: \"output\",\n\t    }  \n\t  }\n\t],\n\tlastStateChange: ISODate(\"2023-03-20T20:15:59.442Z\")\n      },\n      {   \n\tid: '0218',\n\tname: \"proc02\",\n\tlast_modified: ISODate(\"2023-03-21T20:17:33.601Z\"),\n\tstate: \"STOPPED\",\n\terror_msg: '',\n\tpipeline: [\n\t  {\n\t    $source: {\n\t      connectionName: \"myKafka\", \n\t      topic: \"things\"\n\t    }\n\t  },\n\t  {\n\t    $match: { \n\t      temperature: 41 \n\t    }\n\t  },\n\t  {\n\t    $emit: {\n\t      connectionName: \"mySink\",\n\t      topic: \"results\",\n\t    }  \n\t  }\n\t],\n\tlastStateChange: ISODate(\"2023-03-21T20:18:26.139Z\")\n      }\n\nThe following example shows an expected response if you invoke\n``sp.listStreamProcessors()`` filtering for only those stream\nprocessors with a ``state`` of ``running``.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.listStreamProcessors.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: sh\n\n      sp.listStreamProcessors({\"state\": \"running\"})\n\n   .. output:: \n      :language: json\n      :linenos:\n\n      {\n\tid: '0135',\n\tname: \"proc01\",\n\tlast_modified: ISODate(\"2023-03-20T20:15:54.601Z\"),\n\tstate: \"RUNNING\",\n\terror_msg: '',\n\tpipeline: [\n\t  {\n\t    $source: {\n\t      connectionName: \"myKafka\", \n\t      topic: \"stuff\"\n\t    }\n\t  },\n\t  {\n\t    $match: { \n\t      temperature: 46 \n\t    }\n\t  },\n\t  {\n\t    $emit: {\n\t      connectionName: \"mySink\",\n\t      topic: \"output\",\n\t    }  \n\t  }\n\t],\n\tlastStateChange: ISODate(\"2023-03-20T20:15:59.442Z\")\n      }\n\nLearn More\n------------------\n\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.listStreamProcessors.txt"
  },
  {
    "code": "   :copyable: true\n\n   sp.process(\n     [\n       {\n         $source: {\n\t   connectionName: 'sample_stream_solar',\n\t   timeField: {\n\t     $dateFromString: {\n\t       dateString: '$timestamp'\n\t     }\n\t   }\n\t }\n       },\n       {\n         $match: {\n\t   $expr: {\n\t     $ne: [\n\t       \"$device_id\",\n\t       \"device_8\"\n\t     ]\n\t   }\n\t }\n       },\n       {\n         $tumblingWindow: {\n\t   interval: {\n\t     size: NumberInt(10),\n\t     unit: \"second\"\n\t   },\n\t   \"pipeline\": [\n\t     {\n\t       $group: {\n\t         \"_id\": {  \"device_id\": \"$device_id\" },\n\t\t \"max_temp\": { $max: \"$obs.temp\" },\n\t\t \"max_watts\": { $max: \"$obs.watts\" },\n\t\t \"min_watts\": { $min: \"$obs.watts\" },\n\t\t \"avg_watts\": { $avg: \"$obs.watts\" },\n\t\t \"median_watts\": {\n\t\t                   $median: {\n\t\t                     input: \"$obs.watts\",\n\t                             method: \"approximate\"\n\t                           }\n\t                         }\n\t       }\n\t     }\n\t   ]\n\t }\n       },\n       {\n         $merge: {\n\t   into: {\n\t     connectionName: \"mongodb1\",\n\t     db: \"solar_db\",\n\t     coll: \"solar_coll\"\n\t   },\n\t   on: [\"_id\"]\n\t }\n       }\n     ]\n   )\n\nLearn More\n------------------\n\n- :atlas:`Stream Aggregation </atlas-sp/stream-aggregation>`\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.process.txt"
  },
  {
    "code": "   :copyable: true\n\n   sp.solarDemo.drop()\n\n\nLearn More\n------------------\n\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.processor.drop.txt"
  },
  {
    "code": "   :copyable: true\n   \n   .. input::\n      :language: sh\n\n      sp.solarDemo.sample()\n\n   .. output::\n      :language: json\n   \n      {\n\t_id: {\n\t  device_id: 'device_5'\n\t},\n\tmax_temp: 8,\n\tmax_watts: 66,\n\tmin_watts: 66,\n\tavg_watts: 66,\n\tmedian_watts: 66,\n\t_stream_meta: {\n          window: {\n            start: ISODate('2024-03-19T22:09:10.000Z'),\n            end: ISODate('2024-03-19T22:09:20.000Z')\n          }\n\t}\n      }\n      {\n\t_id: {\n\t  device_id: 'device_0'\n\t},\n\tmax_temp: 18,\n\tmax_watts: 210,\n\tmin_watts: 68,\n\tavg_watts: 157,\n\tmedian_watts: 193,\n\t_stream_meta: {\n          window: {\n            start: ISODate('2024-03-19T22:09:10.000Z'),\n            end: ISODate('2024-03-19T22:09:20.000Z')\n          }\n\t}\n      }\n      {\n\t_id: {\n\t  device_id: 'device_10'\n\t},\n\tmax_temp: 21,\n\tmax_watts: 128,\n\tmin_watts: 4,\n\tavg_watts: 66,\n\tmedian_watts: 4,\n\t_stream_meta: {\n          window: {\n            start: ISODate('2024-03-19T22:09:10.000Z'),\n            end: ISODate('2024-03-19T22:09:20.000Z')\n          }\n\t}\n      }\n      {\n\t_id: {\n\t  device_id: 'device_9'\n\t},\n\tmax_temp: 10,\n\tmax_watts: 227,\n\tmin_watts: 66,\n\tavg_watts: 131.4,\n\tmedian_watts: 108,\n\t_stream_meta: {\n          window: {\n            start: ISODate('2024-03-19T22:09:10.000Z'),\n            end: ISODate('2024-03-19T22:09:20.000Z')\n          }\n\t}\n      }\n\nLearn More\n------------------\n\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.processor.sample.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: sh\n\n      sp.solarDemo.stats()\n\n   .. output::\n      :language: json\n\n      {\n\tok: 1,\n\tns: '6500aa277fdbdb6e443a992e.63c1928d768e39423386aa16.solarDemo',\n\tstats: {\n\t  name: 'solarDemo',\n\t  processorId: '65f9fea5c5154385174af71e',\n\t  status: 'running',\n\t  scaleFactor: Long('1'),\n\t  inputMessageCount: Long('926'),\n\t  inputMessageSize: 410310,\n\t  outputMessageCount: Long('383'),\n\t  outputMessageSize: 425513,\n\t  dlqMessageCount: Long('0'),\n\t  dlqMessageSize: Long('0'),\n\t  stateSize: Long('4504'),\n\t  watermark: ISODate('2024-03-19T22:16:49.523Z'),\n\t  ok: 1\n\t},\n\tpipeline: [\n\t  {\n\t    '$source': {\n\t      connectionName: 'sample_stream_solar',\n\t      timeField: { '$dateFromString': { dateString: '$timestamp' } }\n\t    }\n\t  },\n\t  {\n\t    '$match': { '$expr': { '$ne': [ '$device_id', 'device_8' ] } }\n\t  },\n\t  {\n\t    '$tumblingWindow': {\n\t      interval: { size: 10, unit: 'second' },\n\t      pipeline: [\n\t\t{\n\t\t  '$group': {\n\t\t    _id: [Object],\n\t\t    max_temp: [Object],\n\t\t    max_watts: [Object],\n\t\t    min_watts: [Object],\n\t\t    avg_watts: [Object],\n\t\t    median_watts: [Object]\n\t\t  }\n\t\t}\n\t      ]\n\t    }\n\t  },\n\t  {\n\t    '$merge': {\n\t      into: {\n\t\tconnectionName: 'mongodb1',\n\t\tdb: 'solar_db',\n\t\tcoll: 'solar_coll'\n\t      },\n\t      on: [ '_id' ]\n\t    }\n\t  }\n\t]\n      }\n\nLearn More\n------------------\n\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.processor.stats.txt"
  },
  {
    "code": "   :copyable: true\n\n   sp.solarDemo.stop()\n\nLearn More\n------------------\n\n- :atlas:`Manage Stream Processors </atlas-sp/manage-stream-processor>`\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/method/sp.processor.stop.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$binary\": \"<bindata>\", \"$type\": \"<t>\" }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             BinData ( <t>, <bindata> )\n\nWhere the values are as follows:\n\n- ``<bindata>`` is the base64 representation of a binary string.\n\n- ``<t>`` is a representation of a single byte indicating the data type. In\n  *Strict mode* it is a hexadecimal string, and in *Shell mode* it is an integer.\n  See the extended bson documentation. http://bsonspec.org/spec.html\n\nDate\n~~~~\n\n.. bsontype:: data_date\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$date\": \"<date>\" }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             new Date ( <date> )\n\n   In *Strict mode*, ``<date>`` is an ISO-8601 date format with a mandatory time\n   zone field following the template ``YYYY-MM-DDTHH:mm:ss.mmm<+/-Offset>``.\n\n   In *Shell mode*, ``<date>`` is the JSON representation of a 64-bit signed\n   integer giving the number of milliseconds since epoch UTC.\n\nTimestamp\n~~~~~~~~~\n\n.. bsontype:: data_timestamp\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$timestamp\": { \"t\": <t>, \"i\": <i> } }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             Timestamp( <t>, <i> )\n\nWhere the values are as follows:\n\n- ``<t>`` is the JSON representation of a 32-bit unsigned integer for\n  seconds since epoch.\n\n- ``<i>`` is a 32-bit unsigned integer for the increment.\n\nRegular Expression\n~~~~~~~~~~~~~~~~~~\n\n.. bsontype:: data_regex\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$regex\": \"<sRegex>\", \"$options\": \"<sOptions>\" }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             /<jRegex>/<jOptions>\n\nWhere the values are as follows:\n\n- ``<sRegex>`` is a string of valid JSON characters.\n\n- ``<jRegex>`` is a string that may contain valid JSON characters and\n  unescaped double quote (``\"``) characters, but may not contain\n  unescaped forward slash (``/``) characters.\n\n- ``<sOptions>`` is a string containing the regex options represented\n  by the letters of the alphabet.\n\n- ``<jOptions>`` is a string that may contain only the characters 'g',\n  'i', 'm' and 's' (added in v1.9). Because the ``JavaScript`` and\n  ``mongo Shell`` representations support a limited range of options,\n  any nonconforming options will be dropped when converting to this\n  representation.\n\nOID\n~~~\n\n.. bsontype:: data_oid\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$oid\": \"<id>\" }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             ObjectId( \"<id>\" )\n\nWhere the values are as follows:\n\n- ``<id>`` is a 24-character hexadecimal string.\n\nDB Reference\n~~~~~~~~~~~~\n\n.. bsontype:: data_ref\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$ref\": \"<name>\", \"$id\": \"<id>\" }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             DBRef(\"<name>\", \"<id>\")\n\nWhere the values are as follows:\n\n- ``<name>`` is a string of valid JSON characters.\n\n- ``<id>`` is any valid extended JSON type.\n\nUndefined Type\n~~~~~~~~~~~~~~\n\n.. bsontype:: data_undefined\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$undefined\": true }\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             undefined\n\n   The representation for the JavaScript/BSON undefined type.\n\n   You *cannot* use ``undefined`` in query documents.\n   Consider the following document inserted into the ``people``\n   collection using the legacy :binary:`~bin.mongo` shell:\n   \n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "         \"copyable: false\n\n         { \"name\" : \"Sally\", \"age\" : null }\n         { \"name\" : \"Sally\", \"age\" : undefined }\n\n\nMinKey\n~~~~~~\n\n.. bsontype:: data_minkey\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$minKey\": 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             MinKey\n\n   The representation of the MinKey BSON data type that compares lower\n   than all other types. See\n   :ref:`faq-dev-compare-order-for-BSON-types` for more information on\n   comparison order for BSON types.\n\nMaxKey\n~~~~~~\n\n.. bsontype:: data_maxkey\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$maxKey\": 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             MaxKey\n\n   The representation of the MaxKey BSON data type that compares higher\n   than all other types. See\n   :ref:`faq-dev-compare-order-for-BSON-types` for more information on\n   comparison order for BSON types.\n\nNumberLong\n~~~~~~~~~~\n\n.. bsontype:: data_numberlong\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$numberLong\": \"<number>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             NumberLong( \"<number>\" )\n\n   ``NumberLong`` is a 64 bit signed integer. In the legacy\n   :binary:`~bin.mongo` shell, you must use quotation marks to insert a\n   ``NumberLong`` or the operation will produce an error. \n\n   For example, the following commands attempt to insert\n   ``9223372036854775807`` as a ``NumberLong`` with and without\n   quotation marks around the integer value:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "      :emphasize-lines: 2\n\n      db.json.insertOne( { longQuoted : NumberLong(\"9223372036854775807\") } )\n      db.json.insertOne( { longUnQuoted : NumberLong(9223372036854775807) } )\n\n   The highlighted line produces an error in the legacy\n   :binary:`~bin.mongo` shell. The insert succeeds in\n   :binary:`~bin.mongosh`.\n\nNumberDecimal\n~~~~~~~~~~~~~\n\n.. bsontype:: data_numberdecimal\n\n   .. list-table::\n      :header-rows: 1\n\n      * - Strict Mode\n\n        - :binary:`~bin.mongo` Shell Mode\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             { \"$numberDecimal\": \"<number>\" }\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "             :copyable: false\n\n             NumberDecimal( \"<number>\" )\n\n   ``NumberDecimal`` is a `high-precision decimal\n   <https://github.com/mongodb/specifications/blob/master/source/bson-de\n   cimal128/decimal128.rst>`_. You must include quotation marks, or the\n   input number will be treated as a double, resulting in data loss. \n\n   For example, the following commands insert ``123.40`` as a\n   ``NumberDecimal`` with and without quotation marks around the value:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json-v1.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ <elements> ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the array elements are as follows:\n\n- ``<elements>``\n\n  - Array elements use Extended JSON.\n  - To specify an empty array, omit the content ``[ ]``.\n\n.. _extended-json-binary:\n\n.. bsontype:: Binary\n\n---------------------------------------------------\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$binary\": \n             {\n                \"base64\": \"<payload>\",\n                \"subType\": \"<t>\" \n             }\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n     \n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<payload>\"``\n\n  - Base64 encoded (with padding as \"=\") payload string.\n\n- ``\"<t>\"``\n\n  - A one- or two-character hex string that corresponds to a BSON binary\n    subtype. See the extended bson documentation\n    http://bsonspec.org/spec.html for subtypes available.\n\n.. _extended-json-date:\n\n.. bsontype:: Date\n\n---------------------------------------------------\n\n*For dates between years 1970 and 9999, inclusive*:\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n \n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\"$date\": {\"$numberLong\": \"<millis>\"}}\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n     \n          {\"$date\": \"<ISO-8601 Date/Time Format>\"}\n\n*For dates before year 1970 or after year 9999*:\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n \n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\"$date\": {\"$numberLong\": \"<millis>\"}}\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n     \n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<millis>\"``\n\n  - A 64-bit signed integer as string. The value represents milliseconds\n    relative to the epoch.\n\n- ``\"<ISO-8601 Date/Time Format>\"``\n\n  - A date in `ISO-8601 Internet Date/Time Format\n    <https://tools.ietf.org/html/rfc3339#section-5.6>`__ as string.\n\n  - The date/time has a maximum time precision of milliseconds:\n\n    - Fractional seconds have exactly 3 decimal places if the fractional\n      part is non-zero.\n\n    - Otherwise, fractional seconds SHOULD be omitted if zero.\n\n.. bsontype:: Decimal128\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$numberDecimal\": \"<number>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<number>\"``\n\n  - A `high-precision decimal\n    <https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst>`_ \n    as a string.\n\n.. bsontype:: Document\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { <content> }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the document contents are as follows:\n\n- ``<content>``\n\n  - Name:value pairs that use Extended JSON.\n\n  - To specify an empty document, omit the content ``{ }``.\n\n.. bsontype:: Double\n\n---------------------------------------------------\n\n*For finite numbers*:\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n \n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\"$numberDouble\": \"<decimal string>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <non-integer number>\n\n*For infinite numbers or NAN*:\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n \n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\"$numberDouble\": <\"Infinity\"|\"-Infinity\"|\"NaN\"> }\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n     \n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<decimal string>\"``\n\n  - A 64-bit signed floating point as a string.\n\n- ``<non-integer number>``\n\n  - A non-integer number. Integer numbers are parsed as an integer\n    instead of a double.\n\n.. bsontype:: Int64\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$numberLong\": \"<number>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <integer>\n\nWhere the values are as follows:\n\n- ``\"<number>\"``\n\n  - A 64-bit signed integer as string.\n\n- ``<integer>``\n\n  - A 64-bit signed integer.\n\n.. bsontype:: Int32\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$numberInt\": \"<number>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <integer>\n\nWhere the values are as follows:\n\n- ``\"<number>\"``\n\n  - A 32-bit signed integer as a string.\n\n- ``<integer>``\n\n  - A 32-bit signed integer.\n\n.. bsontype:: MaxKey\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$maxKey\": 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nThe MaxKey BSON data type compares higher than all other types. See\n:ref:`faq-dev-compare-order-for-BSON-types` for more information on\ncomparison order for BSON types.\n\n.. bsontype:: MinKey\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$minKey\": 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nThe MinKey BSON data type compares lower than all other types. See\n:ref:`faq-dev-compare-order-for-BSON-types` for more information on\ncomparison order for BSON types.\n\n.. bsontype:: ObjectId\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$oid\": \"<ObjectId bytes>\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<ObjectId bytes>\"``\n\n  - A 24-character, big-endian hexadecimal string that represents the\n    ObjectId bytes.\n\n.. bsontype:: Regular Expression\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"$regularExpression\": \n             {\n                \"pattern\": \"<regexPattern>\", \n                \"options\": \"<options>\"\n            }\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``\"<regexPattern>\"``\n\n  - A string that corresponds to the regular expression pattern. The\n    string can contain valid JSON characters and unescaped double quote\n    (``\"``) characters, but may not contain unescaped forward slash\n    (``/``) characters.\n\n- ``\"<options>\"``\n\n  - A string that specifies BSON regular expression options. You must specify \n    the options in alphabetical order. For information on the supported options, \n    see :query:`$options`.\n\n.. bsontype:: Timestamp\n\n--------------------------------------------------- \n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - Canonical\n\n     - Relaxed\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\"$timestamp\": {\"t\": <t>, \"i\": <i>}}\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "          :copyable: false\n\n          <Same as Canonical>\n\nWhere the values are as follows:\n\n- ``<t>``\n\n  - A positive integer for the seconds since epoch.\n\n- ``<i>``\n\n  - A positive integer for the increment.\n\n\nExamples\n--------\n\nThe following examples illustrate Extended JSON usage. \n\n.. _type-representations:\n\nType Representations\n~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 20 40 40\n   :header-rows: 1\n   \n   * - Example Field Name\n     - Canonical Format\n     - Relaxed Format\n\n   * - \"_id:\"\n   \n     - {\"$oid\":\"5d505646cf6d4fe581014ab2\"}\n     - {\"$oid\":\"5d505646cf6d4fe581014ab2\"}\n\n   * - \"arrayField\":\n     - [\"hello\",{\"$numberInt\":\"10\"}]\n     - [\"hello\",10]\n\n   * - \"dateField\":\n     - {\"$date\":{\"$numberLong\":\"1565546054692\"}}\n     - {\"$date\":\"2019-08-11T17:54:14.692Z\"}\n\n   * - \"dateBefore1970\":\n     - {\"$date\":{\"$numberLong\":\"-1577923200000\"}}\n     - {\"$date\":{\"$numberLong\":\"-1577923200000\"}}\n     \n   * - \"decimal128Field\":\n     - {\"$numberDecimal\":\"10.99\"}\n     - {\"$numberDecimal\":\"10.99\"}\n\n   * - \"documentField\":\n     - {\"a\":\"hello\"}\n     - {\"a\":\"hello\"}\n\n   * - \"doubleField\":\n     - {\"$numberDouble\":\"10.5\"}\n     - 10.5\n\n   * - \"infiniteNumber\"\n     - {\"$numberDouble\":\"Infinity\"}\n     - {\"$numberDouble\":\"Infinity\"}\n    \n   * - \"int32field\":\n     - {\"$numberInt\":\"10\"}\n     - 10\n\n   * - \"int64Field\":\n     - {\"$numberLong\":\"50\"}\n     - 50\n\n   * - \"minKeyField\":\n     - {\"$minKey\":1}\n     - {\"$minKey\":1}\n\n   * - \"maxKeyField\":\n     - {\"$maxKey\":1}\n     - {\"$maxKey\":1}\n\n   * - \"regexField\":\n     - {\"$regularExpression\":{\"pattern\":\"^H\",\"options\":\"i\"}}\n     - {\"$regularExpression\":{\"pattern\":\"^H\",\"options\":\"i\"}}\n\n   * - \"timestampField\":\n     - {\"$timestamp\":{\"t\":1565545664,\"i\":1}}\n     - {\"$timestamp\":{\"t\":1565545664,\"i\":1}}\n\n   * - \"uuid\":\n     - {\"$uuid\":\"3b241101-e2bb-4255-8caf-4136c566a962\"}\n     - {\"$uuid\":\"3b241101-e2bb-4255-8caf-4136c566a962\"}\n\n.. _ex-obj-conversions:\n\nExtended JSON Object Conversions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following short examples create a document object and then convert\nthe object to different forms using Extended JSON object conversion\nmethods.\n\nSetup\n`````\n\nCreate a document in the ``conversions`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/mongodb-extended-json.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"delta\" : 30 }\n   { \"_id\" : 2, \"delta\" : 0 }\n   { \"_id\" : 3, \"delta\" : 20 }\n   { \"_id\" : 4, \"delta\" : 10 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/abs.txt"
  },
  {
    "code": "          :copyable: false\n\n          function (<initArg1>, <initArg2>, ...) {\n            ...\n            return <initialState>\n          }\n\n       Spilling to disk or running a query on a sharded cluster can cause the \n       accumulator to be computed as a merge of multiple sub-accumulations, each \n       of which begins by calling ``init()``. Ensure that your ``init()``, \n       ``accumulate()``, and ``merge()`` functions are compatible with this \n       execution model.\n\n   * - :ref:`initArgs <accumulator-initArgs>`\n\n     - Array\n\n     - .. _accumulator-initArgs:\n     \n       Optional. Arguments passed to the ``init`` function.\n\n       ``initArgs`` has the following form:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ <initArg1>, <initArg2>, ... ]\n\n       :gold:`IMPORTANT:` When used in a :pipeline:`$bucketAuto` stage, \n       ``initArgs`` cannot refer to the group key (i.e., you cannot use the \n       ``$<fieldName>`` syntax). Instead, in a :pipeline:`$bucketAuto` stage, \n       you can only specify constant values in ``initArgs``.\n\n   * - :ref:`accumulate <accumulator-accumulate>`\n\n     - String or Code\n\n     - .. _accumulator-accumulate:\n     \n       Function used to accumulate documents. The ``accumulate``\n       function receives its arguments from the current state and\n       :ref:`accumulateArgs <accumulator-accumulateArgs>` array\n       expression. The result of the ``accumulate`` function becomes\n       the new state. You can specify the function definition as\n       either BSON type Code or String.\n\n       The ``accumulate`` function has the following form:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\n\n          function(state, <accumArg1>, <accumArg2>, ...) {\n            ... \n            return <newState>\n          }\n\n   * - :ref:`accumulateArgs <accumulator-accumulateArgs>`\n\n     - Array\n\n     - .. _accumulator-accumulateArgs:\n     \n       Arguments passed to the ``accumulate`` function. You can use\n       ``accumulateArgs`` to specify what field value(s) to pass to\n       the ``accumulate`` function.\n\n       ``accumulateArgs`` has the following form:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ <accumArg1>, <accumArg2>, ... ]\n\n   * - :ref:`merge <accumulator-merge>`\n\n     - String or Code\n\n     - .. _accumulator-merge:\n     \n       Function used to merge two internal states. ``merge`` must be\n       either a String or Code BSON type. ``merge`` returns the\n       combined result of the two merged states. For information on\n       when the merge function is called, see\n       :ref:`merge-multiple-states`.\n\n       The ``merge`` function has the following form:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\n\n          function (<state1>, <state2>) {\n            <logic to merge state1 and state2>\n            return <newState>\n          }\n\n   * - :ref:`finalize <accumulator-finalize>`\n\n     - String or Code\n\n     - .. _accumulator-finalize:\n     \n       Optional. Function used to update the result of the accumulation.\n\n       The ``finalize`` function has the following form:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\n\n          function (state) {\n            ...\n            return <finalState>\n          }\n\n   * - :ref:`lang <accumulator-lang>`\n\n     - String\n\n     - .. _accumulator-lang:\n\n       The language used in the :group:`$accumulator` code.\n\n       :gold:`IMPORTANT:` Currently, the only supported value for ``lang`` is \n       ``js``.\n\nBehavior\n--------\n\nThe following steps outline how the :group:`$accumulator` operator\nprocesses documents:\n\n1. The operator begins at an initial state, defined by the\n   :ref:`init <accumulator-init>` function. \n   \n#. For each document, the operator updates\n   the state based on the :ref:`accumulate <accumulator-accumulate>`\n   function. The :ref:`accumulate <accumulator-accumulate>` function's\n   first argument is the current state, and additional arguments are be\n   specified in the :ref:`accumulateArgs <accumulator-accumulateArgs>`\n   array.\n\n#. When the operator needs to merge multiple intermediate states, it\n   executes the :ref:`merge <accumulator-merge>` function. For more\n   information on when the :ref:`merge <accumulator-merge>` function is\n   called, see :ref:`merge-multiple-states`.\n   \n#. If a :ref:`finalize <accumulator-finalize>` function has been\n   defined, once all documents have been processed and the state has\n   been updated accordingly, :ref:`finalize <accumulator-finalize>`\n   converts the state to a final output.\n\n.. _merge-multiple-states:\n\nMerge Two States with ``$merge``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs part of its internal operations, the :group:`$accumulator` operator\nmay need to merge two separate, intermediate states. The :ref:`merge\n<accumulator-merge>` function specifies how the operator should merge\ntwo states.\n\nThe :ref:`merge <accumulator-merge>` function always merges two\nstates at a time. In the event that more than two states must be merged,\nthe resulting merge of two states is merged with a single state. This\nprocess repeats until all states are merged.\n\nFor example, :group:`$accumulator` may need to combine two states in the\nfollowing scenarios:\n\n- :group:`$accumulator` is run on a sharded cluster. The operator\n  needs to merge the results from each shard to obtain the final\n  result.\n\n- A single :group:`$accumulator` operation exceeds its specified\n  memory limit. If you specify the :method:`allowDiskUse\n  <db.collection.aggregate()>` option, the operator stores the\n  in-progress operation on disk and finishes the operation in memory.\n  Once the operation finishes, the results from disk and memory are\n  merged together using the :ref:`merge <accumulator-merge>` function.\n\nDocument Processing Order\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe order that MongoDB processes documents for the ``init()``,\n``accumulate()``, and ``merge()`` functions can vary, and might differ\nfrom the order that those documents are specified to the\n``$accumulator`` function.\n\nFor example, consider a series of documents where the ``_id`` fields are\nthe letters of the alphabet:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n  { _id: 'a' },\n  { _id: 'b' },\n  { _id: 'c' }\n  ...\n  { _id: 'z' }\n\nNext, consider an aggregation pipeline that sorts the documents by the\n``_id`` field and then uses an ``$accumulator`` function to concatenate\nthe ``_id`` field values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :linenos:\n   :emphasize-lines: 12\n\n   db.restaurants.aggregate([\n   { \n     $group : \n     { \n       _id : { city: \"$city\" }, \n       restaurants: \n       { \n         $accumulator: \n         {\n           init: function(city, userProfileCity) {        // Set the initial state\n             return {\n               max: city === userProfileCity ? 3 : 1,     // If the group matches the user's city, return 3 restaurants\n               restaurants: []                            // else, return 1 restaurant\n             } \n           },\n           \n           initArgs: [\"$city\", <userProfileCity>],        // Argument to pass to the init function\n\n           accumulate: function(state, restaurantName) {  // Define how to update the state\n             if (state.restaurants.length < state.max) {\n               state.restaurants.push(restaurantName);\n             }\n             return state;\n           },\n\n           accumulateArgs: [\"$name\"],                     // Argument required by the accumulate function\n\n           merge: function(state1, state2) {              \n             return {\n               max: state1.max,\n               restaurants: state1.restaurants.concat(state2.restaurants).slice(0, state1.max)\n             } \n           },\n\n           finalize: function(state) {                   // Adjust the state to only return field we need\n             return state.restaurants\n           }\n\n           lang: \"js\"\n         }\n       }\n     }\n   }\n   ])\n\nResults\n```````\n\nIf the value of ``userProfileCity`` is ``Bettles``, this operation\nreturns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"city\" : \"Bettles\" }, \"restaurants\" : { \"restaurants\" : [ \"Food Fury\", \"Meal Macro\", \"Big Crisp\" ] } }\n   { \"_id\" : { \"city\" : \"Onida\" }, \"restaurants\" : { \"restaurants\" : [ \"The Wrap\" ] } }\n   { \"_id\" : { \"city\" : \"Pyote\" }, \"restaurants\" : { \"restaurants\" : [ \"Crave\" ] } }\n\nIf the value of ``userProfileCity`` is ``Onida``, this operation\nreturns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"city\" : \"Bettles\" }, \"restaurants\" : { \"restaurants\" : [ \"Food Fury\" ] } }\n   { \"_id\" : { \"city\" : \"Onida\" }, \"restaurants\" : { \"restaurants\" : [ \"The Wrap\", \"Spice Attack\", \"Soup City\" ] } }\n   { \"_id\" : { \"city\" : \"Pyote\" }, \"restaurants\" : { \"restaurants\" : [ \"Crave\" ] } }\n\nIf the value of ``userProfileCity`` is ``Pyote``, this operation\nreturns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"city\" : \"Bettles\" }, \"restaurants\" : { \"restaurants\" : [ \"Food Fury\" ] } }\n   { \"_id\" : { \"city\" : \"Onida\" }, \"restaurants\" : { \"restaurants\" : [ \"The Wrap\" ] } }\n   { \"_id\" : { \"city\" : \"Pyote\" }, \"restaurants\" : { \"restaurants\" : [ \"Crave\", \"The Gala\" ] } }\n\nIf the value of ``userProfileCity`` is any other value, this operation\nreturns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"city\" : \"Bettles\" }, \"restaurants\" : { \"restaurants\" : [ \"Food Fury\" ] } }\n   { \"_id\" : { \"city\" : \"Onida\" }, \"restaurants\" : { \"restaurants\" : [ \"The Wrap\" ] } }\n   { \"_id\" : { \"city\" : \"Pyote\" }, \"restaurants\" : { \"restaurants\" : [ \"Crave\" ] } }\n\nBehavior\n````````\n\nThe :ref:`init <accumulator-init>` function defines an initial state\ncontaining ``max`` and ``restaurants`` fields. The ``max`` field sets\nthe maximum number of restaurants for that particular group. If the\ndocument's ``city`` field matches ``userProfileCity``, that group\ncontains a maximum of 3 restaurants. Otherwise, if the document ``_id``\ndoes not match ``userProfileCity``, the group contains at most a single\nrestaurant. The :ref:`init <accumulator-init>` function receives both\nthe ``city`` ``userProfileCity`` arguments from the :ref:`initArgs\n<accumulator-initArgs>` array.\n\nFor each document that the :group:`$accumulator` processes, it pushes\nthe ``name`` of the restaurant to the ``restaurants`` array, provided\nthat name would not put the length of ``restaurants`` over the ``max``\nvalue. With each document that is processed, the :ref:`accumulate\n<accumulator-accumulate>` function returns the updated state.\n\nThe :ref:`merge <accumulator-merge>` function defines how to merge two\nstates. The function concatenates the ``restaurant`` arrays from each\nstate together, and the length of the resulting array is limited using\nthe `slice()\n<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice>`__\nmethod to ensure that it does not exceed the ``max`` value.\n\nOnce all documents have been processed, the :ref:`finalize\n<accumulator-finalize>` function modifies the resulting state to only\nreturn the names of the restaurants.  Without this function, the ``max``\nfield would also be included in the output, which does not fulfill any\nneeds for the application. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/accumulator.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $acos to -inf, value must in [-1,1]\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Inverse Cosine of Value in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acos.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"36.86989764584402129685561255909341\")\r\n            }\r\n\r\n         Since ``side_b`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$acos` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Cosine of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acos.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"0.6435011087932843868028092287173226\")\r\n            }\r\n\r\n         Since ``side_b`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$acos` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acos.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $acosh to -inf, value must in (1,inf)\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Inverse Hyperbolic Cosine in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores a value along the ``x`` axis of a 2-D graph:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acosh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"3\"),\r\n              \"y-coordinate\" : NumberDecimal(\"100.9979734210524228844295260083432\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$acosh` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Hyperbolic Cosine in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores a value along the ``x`` axis of a 2-D graph:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acosh.txt"
  },
  {
    "code": "            :copyable: false\r\n\r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"3\"),\r\n              \"y-coordinate\" : NumberDecimal(\"1.762747174039086050465218649959585\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$acosh` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/acosh.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { \n         _id: 1,\n         student: \"Maya\",\n         homework: [ 10, 5, 10 ],\n         quiz: [ 10, 8 ],\n         extraCredit: 0, \n         totalHomework: 25,\n         totalQuiz: 18,\n         totalScore: 43\n      },\n      { \n         _id: 2,\n         student: \"Ryan\",\n         homework: [ 5, 6, 5 ],\n         quiz: [ 8, 8 ],\n         extraCredit: 8,\n         totalHomework: 16,\n         totalQuiz: 16,\n         totalScore: 40\n      }\n   ]\n\nAdding Fields to an Embedded Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. _add-field-to-embedded:\n\nUse dot notation to add new fields to embedded documents.\n\nFor example, create a collection called ``vehicles`` with\nthe following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, type: \"car\",\n         specs: { doors: 4, wheels: 4, fuel_type: \"unleaded\" } },\n      { _id: 2, type: \"motorcycle\",\n         specs: { doors: 0, wheels: 2, fuel_type: \"unleaded\" } },\n      { _id: 3, type: \"jet ski\",\n         specs: { fuel_type: \"unleaded\" } }\n   ]\n\nOverwriting an existing field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSpecifying an existing field name in an ``$addFields`` operation\ncauses the original field to be replaced.\n\nA collection called ``animals`` contains the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, dogs: 10, cats: 20 } ]\n\nIt is possible to replace one field with another. In the following\nexample the ``item`` field substitutes for the ``_id`` field.\n\nA collection called ``fruit`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: \"tangerine\", item: \"fruit\", type: \"citrus\" },\n      { _id: \"lemon\", item: \"fruit\", type: \"citrus\" },\n      { _id: \"grapefruit\", item: \"fruit\", type: \"citrus\" }\n   ]\n\n.. _addFields-add-element-to-array:\n\nAdd Element to an Array\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``scores`` collection with the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, student: \"Maya\", homework: [ 10, 5, 10, 7 ], quiz: [ 10, 8 ], extraCredit: 0 } ]\n\n.. _addFields-remove-example:\n\nRemove Fields\n~~~~~~~~~~~~~\n\nYou can use ``$addFields`` with the :variable:`$$REMOVE <REMOVE>`\nvariable to remove document fields.\n\nFor example, create a ``labReadings`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: ObjectId('671285306fd2c3b24f2e7eaa'), temperature: 80 },\n      { _id: ObjectId('671285306fd2c3b24f2e7eab'), temperature: 83 },\n      { _id: ObjectId('671285306fd2c3b24f2e7eac'), temperature: 85 }\n   ]\n\nYou can also use ``$$REMOVE`` to conditionally remove fields. For\nexample, the following aggregation removes the ``date`` field from\ndocuments where ``date`` is ``null``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 7\n\n   [\n      {\n         _id: ObjectId('671285306fd2c3b24f2e7eaa'),\n         date: ISODate('2024-10-09T00:00:00.000Z'),\n         temperature: 80\n      },\n      { _id: ObjectId('671285306fd2c3b24f2e7eab'), temperature: 83 },\n      {\n         _id: ObjectId('671285306fd2c3b24f2e7eac'),\n         date: ISODate('2024-12-09T00:00:00.000Z'),\n         temperature: 85\n      }\n   ]\n\n.. tip:: Comparison with $project\n\n   .. include:: /includes/aggregation/agg-project-remove-fields-compare.rst\n\n   For an example using ``$$REMOVE`` in a ``$project`` stage, see\n   :ref:`remove-example`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $addToSet: <expression> }\n\nFor more information on expressions, see :ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nIf the value of the expression is an array, :group:`$addToSet` appends\nthe whole array as a *single* element.\n\nIf the value of the expression is a document, MongoDB determines that\nthe document is a duplicate if another document in the array matches the\nto-be-added document exactly. Specifically, the existing document has\nthe exact same fields and values in the exact same order.\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addToSet.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"day\" : 46, \"year\" : 2014 }, \"itemsSold\" : [ \"xyz\", \"abc\" ] }\n   { \"_id\" : { \"day\" : 34, \"year\" : 2014 }, \"itemsSold\" : [ \"xyz\", \"jkl\" ] }\n   { \"_id\" : { \"day\" : 1, \"year\" : 2014 }, \"itemsSold\" : [ \"abc\" ] }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$addToSet` in the :pipeline:`$setWindowFields`\nstage to output the unique cake ``type`` sales for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addToSet.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162,\n     \"cakeTypesForState\" : [ \"strawberry\" ] }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120,\n     \"cakeTypesForState\" : [ \"strawberry\", \"chocolate\" ] }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145,\n     \"cakeTypesForState\" : [ \"strawberry\", \"vanilla\", \"chocolate\" ] }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134,\n     \"cakeTypesForState\" : [ \"strawberry\" ] }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104,\n     \"cakeTypesForState\" : [ \"vanilla\", \"strawberry\" ] }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140,\n     \"cakeTypesForState\" : [ \"vanilla\", \"chocolate\", \"strawberry\" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/addToSet.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: \n      :language: javascript\n\n      db.survey.aggregate(\n        [\n          { $project: { responses: 1, isAnyTrue: { $anyElementTrue: [ \"$responses\" ] }, _id: 1 } }\n        ]\n      )\n\n   .. output:: \n      :language: javascript\n\n      [\n        { _id: 1, responses: [ true ], isAnyTrue: true },\n        { _id: 2, responses: [ true, false ], isAnyTrue: true },\n        { _id: 3, responses: [], isAnyTrue: false },\n        { _id: 4, responses: [ 1, true, 'seven' ], isAnyTrue: true },\n        { _id: 5, responses: [ 0 ], isAnyTrue: false },\n        { _id: 6, responses: [ [] ], isAnyTrue: true },\n        { _id: 7, responses: [ [ 0 ] ], isAnyTrue: true },\n        { _id: 8, responses: [ [ false ] ], isAnyTrue: true },\n        { _id: 9, responses: [ null ], isAnyTrue: false },\n        { _id: 10, responses: [ null ], isAnyTrue: false }\n      ]\n\nIn the results: \n\n- Document with ``_id: 1`` is ``true`` because the element inside the\n  ``responses`` array evaluates as ``true``.  \n- Documents with ``_id: 2`` and ``_id: 4`` are ``true`` because at least\n  one element inside the ``responses`` array evaluates as ``true``. \n- Documents with ``_id: 6``, ``_id: 7``, and ``_id: 8`` are ``true``\n  because the ``responses`` array, which is the array that\n  ``$anyElementTrue`` evaluated for the operation, contains a nested\n  array, which ``$anyElementTrue`` always evaluates as ``true``. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/anyElementTrue.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $arrayToObject: [\n             [ { \"k\": \"item\", \"v\": \"abc123\" },\n               { \"k\": \"qty\", \"v\": \"$qty\" } ]\n          ] }\n\n     - Given a document with the field ``qty`` and value ``25``,     \n       :expression:`$arrayToObject` returns:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\n     \n          { \"item\" : \"abc123\", \"qty\" : 25 }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $arrayToObject: { $literal:  [ \n             [ \"item\", \"abc123\" ], [ \"qty\", 25 ] \n          ] } }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"item\" : \"abc123\", \"qty\" : 25 }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $arrayToObject: { $literal: [ \n             { \"k\": \"item\", \"v\": \"123abc\" }, \n             { \"k\": \"item\", \"v\": \"abc123\" } \n          ] } }\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\n\n          { \"item\" : \"abc123\" }\n          \n       \n       Starting in versions 4.0.5+ (3.6.10+ and 3.4.19+), if the name\n       of a field repeats in the array, :expression:`$arrayToObject`\n       uses the last value for that field.\n\n\nExamples\n--------\n\n\n``$arrayToObject``  Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``inventory`` collection with the following documents:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/arrayToObject.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $asin to -inf, value must in [-1,1]\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Inverse Sine of Value in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/asin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"36.86989764584402129685561255909341\")\r\n            }\r\n\r\n         Since ``side_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$asin` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Sine of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/asin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"0.6435011087932843868028092287173226\")\r\n            }\r\n\r\n         Since ``side_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$asin` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/asin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"1\"),\r\n              \"y-coordinate\" : NumberDecimal(\"50.49898671052621144221476300417157\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$asinh` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Hyperbolic Sine in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores a value along the ``x`` axis of a 2-D graph:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/asinh.txt"
  },
  {
    "code": "            :copyable: false\r\n\r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"1\"),\r\n              \"y-coordinate\" : NumberDecimal(\"1.818446459232066823483698963560709\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$asinh` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/asinh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090658\")\r\n            }\r\n\r\n         Since ``side_b`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$atan` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Tangent of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atan.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224287\")\r\n            }\r\n\r\n         Since ``side_b`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$atan` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atan.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090658\")\r\n            }\r\n\r\n         Since ``side_b`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$atan2` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Tangent of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores three sides of a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atan2.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"side_a\" : NumberDecimal(\"3\"),\r\n              \"side_b\" : NumberDecimal(\"4\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n              \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224287\")\r\n            }\r\n\r\n         Since ``side_b`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$atan2` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atan2.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $atanh to -inf, value must in (-inf,inf)\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Inverse Hyperbolic Tangent in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores a value along the ``x`` axis of a 2-D graph:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atanh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"0.5\"),\r\n              \"y-coordinate\" : NumberDecimal(\"31.47292373094538001977241539068589\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$atanh` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Inverse Hyperbolic Tangent in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores a value along the ``x`` axis of a 2-D graph:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atanh.txt"
  },
  {
    "code": "            :copyable: false\r\n\r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"x-coordinate\" : NumberDecimal(\"0.5\"),\r\n              \"y-coordinate\" : NumberDecimal(\"0.5493061443340548456976226184612628\")\r\n            }\r\n\r\n         Since ``x-coordinate`` is stored as a\r\n         :ref:`128-bit decimal <shell-type-decimal>`, the output of \r\n         :expression:`$asin` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/atanh.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $avg: <expression> }\n   \nWhen used in other supported stages, :group:`$avg` has one of two\nsyntaxes:\n\n- :group:`$avg` has one specified expression as its operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $avg: <expression> }\n\n- :group:`$avg` has a list of specified expressions as its\n  operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $avg: [ <expression1>, <expression2> ... ]  }\n\nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-double-unless-decimal-behavior.rst\n\nNon-numeric or Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:group:`$avg` ignores non-numeric values, including missing values. If all of the\noperands for the average are non-numeric, :group:`$avg` returns\n``null`` since the average of zero values is undefined.\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` stage, if the expression resolves to an\narray, :group:`$avg` treats the operand as a non-numerical value.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-avg.rst\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"xyz\", \"avgAmount\" : 37.5, \"avgQuantity\" : 7.5 }\n   { \"_id\" : \"jkl\", \"avgAmount\" : 20, \"avgQuantity\" : 1 }\n   { \"_id\" : \"abc\", \"avgAmount\" : 60, \"avgQuantity\" : 6 }\n\nUse in ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection ``students`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"quizAvg\" : 7.666666666666667, \"labAvg\" : 6.5, \"examAvg\" : 77.5 }\n   { \"_id\" : 2, \"quizAvg\" : 9.5, \"labAvg\" : 8, \"examAvg\" : 87.5 }\n   { \"_id\" : 3, \"quizAvg\" : 4.666666666666667, \"labAvg\" : 5.5, \"examAvg\" : 74 }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$avg` in the :pipeline:`$setWindowFields`\nstage to output the moving average for the cake sales ``quantity`` for\neach ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"averageQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"averageQuantityForState\" : 141 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"averageQuantityForState\" : 142.33333333333334 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"averageQuantityForState\" : 134 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"averageQuantityForState\" : 119 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"averageQuantityForState\" : 126 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/avg.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"abcde\" }\n     - ``5``\n     - Each character is encoded using one byte.\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"Hello World!\" }\n     - ``12``\n     - Each character is encoded using one byte.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"cafeteria\" }\n     - ``9``\n     - Each character is encoded using one byte.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"cafétéria\" }\n     - ``11``\n     - ``é`` is encoded using two bytes.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"\" }\n     - ``0``\n     - Empty strings return 0.\n \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"$€λG\" }\n     - ``7``\n     - ``€`` is encoded using three bytes.\n       ``λ`` is encoded using two bytes.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $binarySize: \"寿司\" }\n     - ``6``\n     - Each character is encoded using three bytes.\n\nExample\n-------\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``images`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"cat.jpg\", \"imageSize\" : 16 }\n   { \"_id\" : 2, \"name\" : \"big_ben.jpg\", \"imageSize\" : 41 }\n   { \"_id\" : 3, \"name\" : \"teaset.jpg\", \"imageSize\" : 16 }\n   { \"_id\" : 4, \"name\" : \"concert.jpg\", \"imageSize\" : 269 }\n   { \"_id\" : 5, \"name\" : \"empty.jpg\", \"imageSize\" : 0 }\n\nFind Largest Binary Data\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following pipeline returns the image with the largest \nbinary data size:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 1, \"name\" : \"cat.jpg\", \"imageSize\" : 16 }\n     { \"_id\" : 2, \"name\" : \"big_ben.jpg\", \"imageSize\" : 41 }\n     { \"_id\" : 3, \"name\" : \"teaset.jpg\", \"imageSize\" : 16 }\n     { \"_id\" : 4, \"name\" : \"concert.jpg\", \"imageSize\" : 269 }\n     { \"_id\" : 5, \"name\" : \"empty.jpg\", \"imageSize\" : 0 }\n\nSecond Stage\n  The second stage :pipeline:`sorts <$sort>` the documents by\n  ``imageSize`` in descending order.\n\n  This stage outputs the following documents to the next stage:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 4, \"name\" : \"concert.jpg\", \"imageSize\" : 269 }\n     { \"_id\" : 2, \"name\" : \"big_ben.jpg\", \"imageSize\" : 41 }\n     { \"_id\" : 1, \"name\" : \"cat.jpg\", \"imageSize\" : 16 }\n     { \"_id\" : 3, \"name\" : \"teaset.jpg\", \"imageSize\" : 16 }\n     { \"_id\" : 5, \"name\" : \"empty.jpg\", \"imageSize\" : 0 }\n\nThird Stage\n  The third stage :pipeline:`limits <$limit>` the output documents to\n  only return the document appearing first in the sort order:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 4, \"name\" : \"concert.jpg\", \"imageSize\" : 269 }\n\n.. seealso::\n\n   - :pipeline:`$project`\n   - :pipeline:`$sort`\n   - :pipeline:`$limit`\n   - :expression:`$strLenBytes`\n   - :expression:`$bsonSize`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/binarySize.txt"
  },
  {
    "code": "  :copyable: false\n\n    [\n      { _id: 0, result: 0 }\n      { _id: 1, result: 2 }\n      { _id: 2, result: 1 }\n    ]\n\nBitwise ``AND`` with a Long and Integer \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following aggregation uses the :expression:`$bitAnd` operator in the \n:pipeline:`$project` stage:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitAnd.txt"
  },
  {
    "code": "  :copyable: false\n    \n    [\n      { _id: 0, result: NumberLong(\"0\") }\n      { _id: 1, result: NumberLong(\"2\") }\n      { _id: 2, result: NumberLong(\"3\") }\n    ]\n\nLearn More \n----------\n\n- :ref:`aggregation-pipeline-operators`\n\n- :ref:`update-bit`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitAnd.txt"
  },
  {
    "code": "  :copyable: false\n\n    [\n      { _id: 0, result: -1 },\n      { _id: 1, result: -3 },\n      { _id: 2, result: -4 }\n    ]\n\nLearn More \n----------\n\n- :ref:`aggregation-pipeline-operators`\n\n- :ref:`update-bit`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitNot.txt"
  },
  {
    "code": "  :copyable: false\n\n    [\n      { _id: 0, result: 127 },\n      { _id: 1, result: 3 },\n      { _id: 2, result: 7 }\n    ]\n\nBitwise ``OR`` with a Long and Integer \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following aggregation uses the ``$bitOr`` operator in the \n:pipeline:`$project` stage:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitOr.txt"
  },
  {
    "code": "  :copyable: false\n    \n    [\n      { _id: 0, result: Long(\"0\") },\n      { _id: 1, result: Long(\"2\") },\n      { _id: 2, result: Long(\"3\") }\n    ]\n\nLearn More \n----------\n\n- :ref:`aggregation-pipeline-operators`\n\n- :ref:`update-bit`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitOr.txt"
  },
  {
    "code": "  :copyable: false\n\n    [\n      { _id: 0, result: 127 },\n      { _id: 1, result: 1 },\n      { _id: 2, result: 6 }\n    ]\n\nLearn More \n----------\n\n- :ref:`aggregation-pipeline-operators`\n\n- :ref:`update-bit`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bitXor.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $bottom:\n         {\n            sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },\n            output: <expression>\n         }\n   }\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 15 70\n\n   * - Field\n     - Necessity\n     - Description\n\n   * - sortBy\n\n     - Required\n\n     - Specifies the order of results, with syntax similar to \n       :pipeline:`$sort`.\n\n   * - output\n\n     - Required\n\n     - Represents the output for each element in the group \n       and can be any expression.\n\nBehavior\n--------\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the following aggregation that returns the bottom \ndocument from a group of scores:\n\n- ``$bottom`` does not filter out null values.\n- ``$bottom`` converts missing values to null.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottom.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            playerId:\n               { \n                  $bottom:\n                     {    \n                        output: [ \"$playerId\", \"$score\" ],\n                        sortBy: { \"score\": -1 }\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``playerId`` and ``score`` fields are specified as \n  ``output : [\"$playerId\",\" $score\"]`` and returned as array values.\n- Specify the sort order with ``sortBy: { \"score\": -1 }``.\n- ``PlayerD`` and ``PlayerE`` tied for the bottom element. ``PlayerD`` \n  is returned as the bottom ``score``.\n- To have more deterministic tie breaking behavior for multiple null \n  values, add more fields to ``sortBy``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottom.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ 'PlayerD', null ]\n      }\n   ]\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``$bottom`` is not supported as a \n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$bottom`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAggregation pipelines which call ``$bottom`` are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>`. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottom.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 'G1', playerId: [ 'PlayerD', 1 ] } ]\n\nFinding the Bottom ``Score`` Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$bottom`` accumulator to find the bottom ``score``\nin each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottom.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 'G2', playerId: [ 'PlayerA', 10 ] },\n      { _id: 'G1', playerId: [ 'PlayerD', 1 ] }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottom.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $bottomN:\n         {\n            n: <expression>,\n            sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },\n            output: <expression>\n         }\n   }\n\n- ``n`` limits the number of results per group and has to be a positive\n  integral expression that is either a constant or depends on the ``_id``\n  value for :pipeline:`$group`.\n- sortBy specifies the order of results, with syntax similar to \n  :pipeline:`$sort`.\n- ``output`` represents the output for each element in the group and can \n  be any expression.\n\nBehavior\n--------\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- ``$bottomN`` does not filter out null values.\n- ``$bottomN`` converts missing values to null which are preserved in\n  the output.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n               _id: \"$gameId\",\n               playerId:\n                  { \n                     $bottomN:\n                        {    \n                           output: [ \"$playerId\", \"$score\" ],\n                           sortBy: { \"score\": -1 },\n                           n: 3\n                        }\n                  }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``playerId`` and ``score`` fields are specified as \n  ``output : [\"$playerId\",\" $score\"]`` and returned as array values. \n- Because of the ``sortBy: { \"score\" : -1 }``, the null values are sorted\n  to the end of the returned ``playerId`` array.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         playerId: [ [ \"PlayerA\", 1 ], [ \"PlayerD\", null ], [ \"PlayerE\", null ] ]\n      }\n   ]\n\nBSON Data Type Sort Ordering\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen sorting different types, the order of :ref:`BSON data types \n<bson_sort_order>` is used to determine ordering. As an example, \nconsider a collection whose values consist of strings and numbers.\n\n- In an ascending sort, string values are sorted after numeric values.\n- In a descending sort, string values are sorted before numeric values.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :emphasize-lines: 5,6\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: \"2\" },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: \"\" }\n         ]\n      },\n      {\n         $group:\n            {\n               _id: \"$gameId\",\n               playerId: {\n                  $bottomN:\n                  {\n                     output: [\"$playerId\",\"$score\"],\n                     sortBy: {\"score\": -1},\n                     n: 3\n                  }\n               }\n            }\n      }\n   ] )\n\nIn this example:\n\n- ``PlayerA`` has an integer score.\n- ``PlayerB`` has a string ``\"2\"`` score. \n- ``PlayerC`` has an empty string score.\n\nBecause the sort is in descending ``{ \"score\" : -1 }``, the string\nliteral values are sorted before ``PlayerA``'s numeric score:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         playerId: [ [ \"PlayerB\", \"2\" ], [ \"PlayerC\", \"\" ], [ \"PlayerA\", 1 ] ]\n      }\n   ]\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``$bottomN`` is not supported as a \n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$bottomN`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGroups within the ``$bottomN`` aggregation pipeline are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>` pipeline limit. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         playerId: [ [ \"PlayerB\", 33 ], [ \"PlayerA\", 31 ], [ \"PlayerD\", 1 ] ]\n      }\n   ]\n\nThe SQL equivalent to this query is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT T3.GAMEID,T3.PLAYERID,T3.SCORE\n   FROM GAMESCORES AS GS\n   JOIN (SELECT TOP 3\n            GAMEID,PLAYERID,SCORE\n            FROM GAMESCORES\n            WHERE GAMEID = \"G1\"\n            ORDER BY SCORE) AS T3\n               ON GS.GAMEID = T3.GAMEID\n   GROUP BY T3.GAMEID,T3.PLAYERID,T3.SCORE\n      ORDER BY T3.SCORE DESC\n\nFinding the Three Lowest Score Documents Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$bottomN`` accumulator to find the lowest scoring\nplayers in each game.\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         playerId: [ [ \"PlayerB\", 33 ], [ \"PlayerA\", 31 ], [ \"PlayerD\", 1 ] ]\n      },\n      {\n         _id: \"G2\",\n         playerId: [ [ \"PlayerC\", 66 ], [ \"PlayerB\", 14 ], [ \"PlayerA\", 10 ] ]\n      }\n   ]\n\nThe SQL equivalent to this query is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT PLAYERID,GAMEID,SCORE\n   FROM(\n      SELECT ROW_NUMBER() OVER (PARTITION BY GAMEID ORDER BY SCORE DESC) AS GAMERANK,\n      GAMEID,PLAYERID,SCORE\n      FROM GAMESCORES\n   ) AS T\n   WHERE GAMERANK >= 2\n   ORDER BY GAMEID\n\nComputing ``n`` Based on the Group Key for ``$group``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $bottomN:\n                     {\n                        output: \"$score\",\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } },\n                        sortBy: { \"score\": -1 }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Use ``$group`` to group the results by ``gameId``.\n- Specifies the fields that are output from ``$bottomN`` with\n  ``output : \"$score\"``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n- Uses sort by ``{ \"score\": -1 }`` to sort the results in descending\n  order.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: \"G2\" }, gamescores: [ 10 ] },\n      { _id: { gameId: \"G1\" }, gamescores: [ 33, 31, 1 ] }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bottomN.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : null, \"combined_object_size\" : 789 }\n\n.. seealso::\n\n   - :pipeline:`$group`\n   - :group:`$sum`\n\nReturn Document with Largest Specified Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following pipeline returns the document with the largest\n``current_task`` field in bytes:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bsonSize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 1, \"name\" : \"Alice\", \"task_object_size\" : 109 }\n     { \"_id\" : 2, \"name\" : \"Bob\", \"task_object_size\" : 152 }\n     { \"_id\" : 3, \"name\" : \"Charlie\", \"task_object_size\" : null }\n     { \"_id\" : 4, \"name\" : \"Dianne\", \"task_object_size\" : 99 }\n\nSecond Stage\n  The second stage :pipeline:`sorts <$sort>` the documents by\n  ``task_object_size`` in descending order.\n\n  This stage outputs the following documents to the next stage:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bsonSize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 2, \"name\" : \"Bob\", \"task_object_size\" : 152 }\n     { \"_id\" : 1, \"name\" : \"Alice\", \"task_object_size\" : 109 }\n     { \"_id\" : 4, \"name\" : \"Dianne\", \"task_object_size\" : 99 }\n     { \"_id\" : 3, \"name\" : \"Charlie\", \"task_object_size\" : null }\n\nThird Stage\n  The third stage :pipeline:`limits <$limit>` the output documents to\n  only return the document appearing first in the sort order:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bsonSize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 2, \"name\" : \"Bob\", \"task_object_size\" : 152 }\n\n.. seealso::\n\n   - :pipeline:`$project`\n   - :pipeline:`$sort`\n   - :pipeline:`$limit`\n   - :expression:`$strLenBytes`\n   - :expression:`$binarySize`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bsonSize.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 1840, \"count\" : 1, \"artists\" : [ { \"name\" : \"Odilon Redon\", \"year_born\" : 1840 } ] }\n\n     { \"_id\" : 1850, \"count\" : 2, \"artists\" : [ { \"name\" : \"Vincent Van Gogh\", \"year_born\" : 1853 }, \n                                                { \"name\" : \"Edvard Diriks\", \"year_born\" : 1855 } ] }\n\n     { \"_id\" : 1860, \"count\" : 4, \"artists\" : [ { \"name\" : \"Emil Bernard\", \"year_born\" : 1868 }, \n                                                { \"name\" : \"Joszef Rippl-Ronai\", \"year_born\" : 1861 }, \n                                                { \"name\" : \"Alfred Maurer\", \"year_born\" : 1868 }, \n                                                { \"name\" : \"Edvard Munch\", \"year_born\" : 1863 } ] }\n\n     { \"_id\" : 1870, \"count\" : 1, \"artists\" : [ { \"name\" : \"Anna Ostroumova\", \"year_born\" : 1871 } ] }\n  \nSecond Stage\n  The :pipeline:`$match` stage filters the output from the previous \n  stage to only return buckets which contain more than 3 documents.\n\n  The operation returns the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bucket.txt"
  },
  {
    "code": "     :copyable: false\n\n     \n     { \"_id\" : 1860, \"count\" : 4, \"artists\" :\n       [ \n         { \"name\" : \"Emil Bernard\", \"year_born\" : 1868 }, \n         { \"name\" : \"Joszef Rippl-Ronai\", \"year_born\" : 1861 }, \n         { \"name\" : \"Alfred Maurer\", \"year_born\" : 1868 }, \n         { \"name\" : \"Edvard Munch\", \"year_born\" : 1863 } \n       ]\n     }\n\nUse $bucket with $facet to Bucket by Multiple Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the :pipeline:`$facet` stage to perform multiple\n:pipeline:`$bucket` aggregations in a single stage.\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``artwork`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/bucket.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\": {\n         _data: \"8262E2EE54000000022B022C0100296E5A100448E5E3DD01364019AE8FE8C6859527E046645F6964006462E2EE54C8756C0D5CF6F0720004\"\n      },\n      \"operationType\": \"insert\",\n      \"clusterTime\": Timestamp({ t: 1659039316, i: 2 }),\n      \"wallTime\": ISODate(\"2022-07-28T20:15:16.148Z\"),\n      \"fullDocument\": { \n         \"_id\": ObjectId(\"62e2ee54c8756c0d5cf6f072\"), \n         \"name\": \"Walker Percy\" \n      },\n      \"ns\": { \n         \"db\": \"test\", \n         \"coll\": \"names\" \n      },\n      \"documentKey\": { _id: ObjectId(\"62e2ee54c8756c0d5cf6f072\") }\n   }\n\nFor more information on change stream notifications, see :ref:`Change Events\n<change-events>`. \n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStream.txt"
  },
  {
    "code": "   :copyable: false\n\n   splitEvent: { fragment: 1, of: 3 }\n\nSimilarly, ``secondFragment.splitEvent`` and\n``thirdFragment.splitEvent`` return:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   splitEvent: { fragment: 2, of: 3 }\n   splitEvent: { fragment: 3, of: 3 }\n\nTo examine the object keys for ``firstFragment``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      '_id',\n      'splitEvent',\n      'wallTime',\n      'clusterTime',\n      'operationType',\n      'documentKey',\n      'ns',\n      'fullDocument'\n   ]\n\nTo examine the size in bytes for ``firstFragment.fullDocument``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   16776223\n\n``secondFragment`` contains the ``fullDocumentBeforeChange`` pre-image,\nwhich is approximately 16 MB in size. The following example shows the\nobject keys for ``secondFragment``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ '_id', 'splitEvent', 'fullDocumentBeforeChange' ]\n\n``thirdFragment`` contains the ``updateDescription`` field, which is\napproximately 16 MB in size. The following example shows the object keys\nfor ``thirdFragment``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ '_id', 'splitEvent', 'updateDescription' ]\n\nFor more information about change streams and events, see :ref:`Change\nEvents <change-events>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/changeStreamSplitLargeEvent.txt"
  },
  {
    "code": "   :copyable: false\n\n   { item : \"abc1\", qty : 300, cmpTo250 : 1 }\n   { item : \"abc2\", qty : 200, cmpTo250 : -1 }\n   { item : \"xyz1\", qty : 250, cmpTo250 : 0 }\n   { item : \"VWZ1\", qty : 300, cmpTo250 : 1 }\n   { item : \"VWZ2\", qty : 180, cmpTo250 : -1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cmp.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, itemDescription : \"ABC1 - product 1\" }\n   { _id : 2, itemDescription : \"ABC2 - product 2\" }\n   { _id : 3, itemDescription : null }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concat.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $concatArrays: [ \n             [ \"hello\", \" \"], [ \"world\" ]\n          ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concatArrays.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"hello\", \" \", \"world\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concatArrays.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $concatArrays: [ \n             [ \"hello\", \" \"], \n             [ [ \"world\" ], \"again\"] \n          ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concatArrays.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"hello\", \" \", [ \"world\" ], \"again\" ]\n\nExample\n-------\n\nCreate a collection named ``warehouses`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concatArrays.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, items : [ \"chocolate\", \"butter\", \"apples\" ] }\n   { _id : 2, items : null }\n   { _id : 3, items : [ \"pears\", \"pecans\", \"cherries\" ] }\n   { _id : 4, items : [ \"ice cream\" ] }\n\n.. seealso::\n\n   :group:`$push`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/concatArrays.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"hn3uUsMxSE6S0cVkebjmfg==\",\n             to: {\n                type: \"binData\",\n                subtype: 0\n             },\n             format: \"base64\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Binary.createFromBase64('hn3uUsMxSE6S0cVkebjmfg==', 0)\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"hn3uUsMxSE6S0cVkebjmfg==\",\n             to: \"binData\",\n             format: \"base64\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Binary.createFromBase64('hn3uUsMxSE6S0cVkebjmfg==', 0)\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"867dee52-c331-484e-92d1-c56479b8e67e\",\n             to: {\n                type: \"binData\",\n                subtype: 0\n             },\n             format: \"base64\",\n             \n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Failed to parse BinData '867dee52-c331-484e-92d1-c56479b8e67e'\n          in $convert with no onError value: Input is not a valid base64\n          string.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"hn3uUsMxSE6S0cVkebjmfg==\",\n             to: {\n                type: \"binData\",\n                subtype: 4\n             },\n             format: \"base64\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Failed to parse BinData 'hn3uUsMxSE6S0cVkebjmfg==' in $convert\n          with no onError value: Input is not a valid base64 string.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"867dee52-c331-484e-92d1-c56479b8e67e\",\n             to: {\n                type: \"binData\",\n                subtype: 4\n             },\n             format: \"uuid\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          UUID('867dee52-c331-484e-92d1-c56479b8e67e')\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"äöäöä\",\n             to: {\n                type: \"binData\",\n                subtype: 4\n             },\n             format: \"uuid\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Failed to parse BinData 'äöäöä' in $convert with no onError\n          value: Input is not a valid UUID string.\n          \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"867dee52-c331-484e-92d1-c56479b8e67e\",\n             to: { type: \"binData\" },\n             format: \"uuid\"\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Failed to parse BinData '867dee52-c331-484e-92d1-c56479b8e67e'\n          in $convert with no onError value: Only the UUID subtype (4)\n          is allowed with the 'uuid' format.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: 123,\n             to: { type: \"binData\", subtype: 0 }\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          Unsupported conversion from int to binData in $convert with no onError value\n\n.. _convert-to-bool:\n\nConvert to Boolean\n~~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\nboolean:\n\n.. |null-description| replace:: Returns the value specified for the ``onNull`` option. By default, returns null.\n\n.. include:: /includes/aggregation/convert-to-bool-table.rst\n\nThe following table lists some conversion to boolean examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 70 30\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"bool\" }\n     - false\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 1.99999, to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Decimal128( \"5\" ), to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Decimal128( \"0\" ), to: \"bool\" }\n     - false\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 100, to: \"bool\" }\n\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ISODate( \"2018-03-26T04:38:28.044Z\" ),\n             to: \"bool\"\n          }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"hello\", to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"false\", to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"\", to: \"bool\" }\n     - true\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: null, to: \"bool\" }\n     - null\n\n.. seealso::\n\n   :expression:`$toBool`\n\n.. _convert-to-int:\n\nConvert to Integer\n~~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to an\ninteger:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - Boolean\n     - | Returns ``0`` for  ``false``.\n       | Returns ``1`` for ``true``.\n\n   * - Double\n     - Returns truncated value.\n\n       The truncated double value must fall within the minimum and\n       maximum value for an integer.\n\n       You cannot convert a double value whose truncated value is less\n       than the minimum integer value or is greater than the maximum\n       integer value.\n\n   * - Decimal\n     - Returns truncated value.\n\n       The truncated decimal value must fall within the minimum and\n       maximum value for an integer.\n\n       You cannot convert a decimal value whose truncated value is less\n       than the minimum integer value or is greater than the maximum\n       integer value.\n\n   * - Integer\n     - No-op. Returns the integer value.\n\n   * - Long\n     - Returns the long value as an integer.\n\n       The long value must fall within the minimum and maximum value\n       for an integer.\n\n       You cannot convert a long value that is less than the minimum\n       integer value or is greater than the maximum integer value.\n\n   * - String\n     - Returns the numerical value of the string as an integer.\n\n       The string value must be a base\\ :sub:`10` integer (e.g.\n       ``\"-5\"``, ``\"123456\"``) and fall within the minimum and maximum\n       value for an integer.\n\n       You cannot convert a string value of a float or decimal or\n       non-base\\ :sub:`10` number (e.g. ``\"-5.0\"``, ``\"0x6400\"``) or a\n       value that falls outside the minimum and maximum value for an\n       integer.\n\nThe following table lists some conversion to integer examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"int\" }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"int\" }\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 1.99999, to: \"int\" }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Decimal128( \"5.5000\" ), to: \"int\" }\n\n     - 5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: Decimal128( \"9223372036000.000\" ),\n             to: \"int\"\n          }\n\n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Long( \"5000\" ), to: \"int\" }\n\n     - 5000\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Long( \"922337203600\" ), to: \"int\" }\n \n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"-2\", to: \"int\" }\n\n     - -2\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"2.5\", to: \"int\" }\n\n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: null, to: \"int\" }\n\n     - null\n\n.. seealso::\n\n   :expression:`$toInt` operator.\n\n.. _convert-to-decimal:\n\nConvert to Decimal\n~~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\ndecimal:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - Boolean\n     - | Returns ``Decimal128( \"0\" )`` for  ``false``.\n       | Returns ``Decimal128( \"1\" )`` for ``true``.\n\n\n   * - Double\n     - Returns double value as a decimal.\n\n   * - Decimal\n     - No-op. Returns the decimal.\n\n   * - Integer\n\n     - Returns the int value as a decimal.\n\n   * - Long\n\n     - Returns the long value as a decimal.\n\n   * - String\n     - Returns the numerical value of the string as a decimal.\n\n       The string value must be of a base\\ :sub:`10` numeric value (e.g.\n       ``\"-5.5\"``, ``\"123456\"``).\n\n       You cannot convert a string value of a non-base\\ :sub:`10`\n       number (e.g. ``\"0x6400\"``)\n\n   * - Date\n\n     - Returns the number of milliseconds since the epoch that\n       corresponds to the date value.\n\nThe following table lists some conversion to decimal examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 60 40\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"decimal\" }\n\n     - Decimal128(\"1\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"decimal\" }\n\n     - Decimal128(\"0\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 2.5, to: \"decimal\" }\n\n     -  Decimal128( \"2.50000000000000\" )\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Int32( 5 ), to: \"decimal\" }\n\n     - Decimal128(\"5\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Long( 10000 ), to: \"decimal\" }\n\n     -  Decimal128(\"10000\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"-5.5\", to: \"decimal\" }\n\n     - Decimal128(\"-5.5\") \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ISODate( \"2018-03-26T04:38:28.044Z\" ),\n             to: \"decimal\"\n          }\n\n     -  Decimal128(\"1522039108044\")\n\n.. seealso::\n\n   :expression:`$toDecimal`\n\n.. _convert-to-double:\n\nConvert to Double\n~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\ndouble:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - Boolean\n\n     - | Returns NumberDouble(0) for  ``false``.\n       | Returns NumberDouble(1) for ``true``.\n\n   * - Double\n     - No-op. Returns the double.\n\n   * - Decimal\n     - Returns the decimal value as a double.\n\n       The decimal value must fall within the minimum and\n       maximum value for a double.\n\n       You cannot convert a decimal value whose value is less\n       than the minimum double value or is greater than the maximum\n       double value.\n\n   * - Integer\n     - Returns the int value as a double.\n\n   * - Long\n     - Returns the long value as a double.\n\n   * - String\n     - Returns the numerical value of the string as a double.\n\n       The string value must be of a base\\ :sub:`10` numeric value (e.g.\n       ``\"-5.5\"``, ``\"123456\"``) and fall within the minimum and\n       maximum value for a double.\n\n       You cannot convert a string value of a non-base\\ :sub:`10`\n       number (e.g. ``\"0x6400\"``) or a value that falls\n       outside the minimum and maximum value for a double.\n\n   * - Date\n     - Returns the number of milliseconds since the epoch that\n       corresponds to the date value.\n\nThe following table lists some conversion to double examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"double\" }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"double\" }\n \n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 2.5, to: \"double\" }\n\n     -  2.5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Int32( 5 ), to: \"double\" }\n\n     - 5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Long( \"10000\" ), to: \"double\" }\n\n     - 10000\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"-5.5\", to: \"double\" }\n\n     - -5.5 \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"5e10\", to: \"double\" }\n\n     - 50000000000\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ISODate( \"2018-03-26T04:38:28.044Z\" ), \n             to: \"double\"\n          }\n\n     -  1522039108044\n\n.. seealso::\n\n   :expression:`$toDouble`\n\n.. _convert-to-long:\n\nConvert to Long\n~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\nlong:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - Boolean\n\n     - | Returns ``0`` for  ``false``.\n       | Returns ``1`` for ``true``.\n\n\n   * - Double\n     - Returns truncated value.\n\n       The truncated double value must fall within the minimum and\n       maximum value for a long.\n\n       You cannot convert a double value whose truncated value is less\n       than the minimum long value or is greater than the maximum\n       long value.\n\n   * - Decimal\n     - Returns truncated value.\n\n       The truncated decimal value must fall within the minimum and\n       maximum value for a long.\n\n       You cannot convert a decimal value whose truncated value is less\n       than the minimum long value or is greater than the maximum\n       long value.\n\n   * - Integer\n     - Returns the int value as a long.\n\n   * - Long\n     - No-op. Returns the long value.\n\n   * - String\n     - Returns the numerical value of the string.\n\n       The string value must be of a base\\ :sub:`10` long (e.g.\n       ``\"-5\"``, ``\"123456\"``) and fall within the minimum and maximum\n       value for a long.\n\n       You cannot convert a string value of a float or decimal or\n       non-base\\ :sub:`10` number (e.g. ``\"-5.0\"``, ``\"0x6400\"``) or a\n       value that falls outside the minimum and maximum value\n       for a long.\n\n   * - Date\n     - Converts the Date into the number of milliseconds since the\n       epoch.\n\nThe following table lists some conversion to long examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"long\" }\n\n     - Long(\"1\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"long\"  }\n\n     - Long(\"0\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 2.5, to: \"long\"  }\n\n     -  Long(\"2\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Decimal128( \"5.5000\" ), to: \"long\" }\n\n     - Long(\"5\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: Decimal128( \"9223372036854775808.0\" ),\n             to: \"long\"\n          }\n\n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Int32( 8 ), to: \"long\" }\n\n     - Long(\"8\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ISODate( \"2018-03-26T04:38:28.044Z\" ), \n             to: \"long\"\n          }\n\n     -  Long(\"1522039108044\")\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"-2\", to: \"long\" }\n\n     - Long(\"-2\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"2.5\", to: \"long\" }\n\n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: null, to: \"long\" }\n\n     - null\n\n.. seealso::\n\n   :expression:`$toLong`\n\n.. _convert-to-date:\n\nConvert to Date\n~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\ndate:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - Double\n     - Returns a date that corresponds to the number of milliseconds\n       represented by the truncated double value.\n\n       Positive number corresponds to the number of milliseconds since\n       Jan 1, 1970.\n\n       Negative number corresponds to the number of milliseconds before\n       Jan 1, 1970.\n\n   * - Decimal\n     - Returns a date that corresponds to the number of milliseconds\n       represented by the truncated decimal value.\n\n       Positive number corresponds to the number of milliseconds since\n       Jan 1, 1970.\n\n       Negative number corresponds to the number of milliseconds before\n       Jan 1, 1970.\n\n   * - Long\n     - Returns a date that corresponds to the number of milliseconds\n       represented by the long value.\n\n       Positive number corresponds to the number of milliseconds since\n       Jan 1, 1970.\n\n       Negative number corresponds to the number of milliseconds before\n       Jan 1, 1970.\n\n   * - String\n     - Returns a date that corresponds to the date string.\n\n       The string must be a valid date string, such as:\n\n       - \"2018-03-03\"\n       - \"2018-03-03T12:00:00Z\"\n       - \"2018-03-03T12:00:00+0500\"\n\n   * - ObjectId\n     - Returns a date that corresponds to the timestamp of the\n       ObjectId.\n\n   * - Timestamp\n     - Returns a date that corresponds to the timestamp. \n\nThe following table lists some conversion to date examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: 120000000000.5,\n             to: \"date\"\n          }\n \n     - ISODate(\"1973-10-20T21:20:00.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: Decimal128( \"1253372036000.50\" ),\n             to: \"date\"\n          }\n\n     - ISODate(\"2009-09-19T14:53:56.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: Long( \"1100000000000\" ),\n             to: \"date\n          }\n\n     - ISODate(\"2004-11-09T11:33:20.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input:  Long( \"-1100000000000\" ),\n             to: \"date\"\n          }\n\n     - ISODate(\"1935-02-22T12:26:40.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ObjectId( \"5ab9c3da31c2ab715d421285\" ),\n             to: \"date\"\n          }\n\n     - ISODate(\"2018-03-27T04:08:58.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input:  \"2018-03-03\", to: \"date\" }\n\n     - ISODate(\"2018-03-03T00:00:00.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"2018-03-20 11:00:06 +0500\",\n             to: \"date\"\n          }\n\n     - ISODate(\"2018-03-20T06:00:06.000Z\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: \"Friday\", to: \"date\" }\n\n     - Error\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: Timestamp( { t: 1637688118, i: 1 } ),\n             to: \"date\"\n          }\n\n     - ISODate(\"2021-11-23T17:21:58.000Z\")\n\n\n.. seealso::\n\n   - :expression:`$toDate` operator\n   - :expression:`$dateFromString`\n\n.. _convert-to-objectId:\n\nConvert to ObjectId\n~~~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to an\nObjectId:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Input Type\n     - Behavior\n\n   * - String\n     - Returns an ObjectId for the hexadecimal string of length 24.\n\n       You cannot convert a string value that is not a hexadecimal\n       string of length 24.\n\nThe following table lists some conversion to date examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"5ab9cbfa31c2ab715d42129e\",\n             to: \"objectId\"\n          }\n\n     - ObjectId(\"5ab9cbfa31c2ab715d42129e\")\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: \"5ab9cbfa31c2ab715d42129\",\n             to: \"objectId\"\n          }\n\n     - Error\n\n.. seealso::\n\n   :expression:`$toObjectId` operator.\n\n.. _convert-to-string:\n\nConvert to String\n~~~~~~~~~~~~~~~~~\n\nThe following table lists the input types that can be converted to a\nstring:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 55 50\n\n   * - Input Type\n     - Behavior\n\n   * - BinData\n     - Returns the binary data value as a string.\n   \n   * - Boolean\n     - Returns the boolean value as a string.\n\n   * - Double\n     - Returns the double value as a string.\n\n   * - Decimal\n     - Returns the decimal value as a string.\n\n   * - Integer\n     - Returns the integer value as a string.\n\n   * - Long\n     - Returns the long value as a string.\n\n   * - ObjectId\n     - Returns the ObjectId value as a hexadecimal string..\n\n   * - String\n     - No-op. Returns the string value.\n\n   * - Date\n     - Returns the date as a string.\n\nThe following table lists some conversion to string examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 80 20\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: true, to: \"string\" }\n\n     - \"true\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: false, to: \"string\" }\n\n     - \"false\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: 2.5, to: \"string\" }\n\n     - \"2.5\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input: Int32( 2 ), to: \"string\" }\n\n     - \"2\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          { input:  Long( 1000 ), to: \"string\" }\n\n     - \"1000\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: ObjectId( \"5ab9c3da31c2ab715d421285\" ),\n             to: \"string\"\n          }\n\n     - \"5ab9c3da31c2ab715d421285\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input:  ISODate( \"2018-03-27T16:58:51.538Z\" ),\n             to: \"string\"\n          }\n\n     - \"2018-03-27T16:58:51.538Z\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             input: BinData(4, \"hn3f\"),\n             to: \"string\",\n             format: \"base64\"\n          }\n\n     - 'hn3f'\n\n.. seealso::\n\n   - :expression:`$toString` operator\n   - :expression:`$dateToString`\n\nExample\n-------\n\nCreate a collection ``orders`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "   :copyable: false\n\n  { _id: 1, totalPrice: Decimal128(\"50\") },\n  { _id: 2, totalPrice: Decimal128(\"200.0\") },\n  { _id: 3, totalPrice: Decimal128(\"9.98\") },\n  { _id: 4, totalPrice: Decimal128(\"0\") },\n  { _id: 5, totalPrice: 'NaN' }\n\n.. note::\n\n   These examples use :binary:`mongosh`. The default types are\n   different in the legacy :binary:`mongo` shell.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/convert.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $cos to -inf, value must in (-inf,inf)\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Cosine of Value in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores the hypotenuse and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cos.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090659\"),\r\n              \"side_a\" : NumberDecimal(\"2.999999999999999999999999999999999\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n            }\r\n\r\n         Since ``angle_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$cos` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Cosine of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores the hypotenuse and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cos.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224288\"),\r\n              \"side_b\" : NumberDecimal(\"3.000000000000000000000000000000000\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n            }\r\n\r\n         Since ``angle_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$cos` is a 128-bit decimal.\r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cos.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n               \"angle\" : NumberDecimal(\"53.1301023541559787031443874490659\"),\r\n               \"cosh_output\" : NumberDecimal(\"1.461642741099671277595921778079396\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$cosh` output is also a\r\n         128-bit decimal.\r\n\r\n     - id: radians\r\n       name: Hyperbolic Cosine in Radians\r\n       content: |\r\n\r\n         The following ``trigonometry`` collection contains a document\r\n         that stores an ``angle`` value measured in radians:\r\n\r\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cosh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d15\"),\r\n               \"angle\" : NumberDecimal(\"1.6301023541559787031443874490659\"),\r\n               \"cosh_output\" : NumberDecimal(\"2.650153334504361016712328539738000\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$cosh` output is also\r\n         a 128-bit decimal.\r\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/cosh.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $count: { } }\n\n:group:`$count` does not accept any parameters.\n\nBehavior\n--------\n\n:group:`$count` is functionally equivalent to using ``{ $sum : 1 }``\nwithin the :pipeline:`$group` stage.\n\n.. seealso::\n\n   :group:`$sum`\n\nExamples\n--------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n \nThe ``cakeSales`` collection is used in the following examples.\n\n.. _count-accumulator-group-example:\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$count` in the :pipeline:`$group` stage to\ncount the number of documents in the ``cakeSales`` collection for each\n``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/count-accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"CA\", \"countNumberOfDocumentsForState\" : 3 }\n   { \"_id\" : \"WA\", \"countNumberOfDocumentsForState\" : 3 }\n\n.. _count-accumulator-window-example:\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$count` in the :pipeline:`$setWindowFields`\nstage to count the number of documents in the ``cakeSales`` collection\nfor each ``state`` defined in the :ref:`window\n<setWindowFields-window>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/count-accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"countNumberOfDocumentsForState\" : 1 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"countNumberOfDocumentsForState\" : 2 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"countNumberOfDocumentsForState\" : 3 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"countNumberOfDocumentsForState\" : 1 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"countNumberOfDocumentsForState\" : 2 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"countNumberOfDocumentsForState\" : 3 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/count-accumulator.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"passing_scores\" : 4 }\n\nIf the input dataset is empty, ``$count`` doesn't return a result. The\nfollowing example doesn't return a result because there are no documents\nwith scores greater than ``99``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/count.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   db.scores.aggregate( [\n      { $match: { score: { $gt: 99 } } },\n      { $count: \"high_scores\" }\n   ] )\n\nLearn More\n----------\n\n- :method:`db.collection.countDocuments()`\n- :pipeline:`$collStats`\n- :method:`db.collection.estimatedDocumentCount()`\n- :dbcommand:`count`\n- :method:`db.collection.count()`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/count.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $covariancePop: \n      [\n         <numeric expression 1>,\n         <numeric expression 2>\n      ]\n   } \n\nBehavior\n--------\n\n:group:`$covariancePop` behavior:\n\n.. |covariance-method| replace:: :group:`$covarianceSamp`\n.. |covariance-value| replace:: ``null``\n\n.. include:: /includes/covariance-behavior.rst\n\nExample\n-------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$covariancePop` in the\n:pipeline:`$setWindowFields` stage to output the population covariance\nvalues for the cake sales ``orderDate`` year and ``quantity`` values:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/covariancePop.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"covariancePopForState\" : 0 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"covariancePopForState\" : -10.5 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"covariancePopForState\" : -5.666666666666671 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"covariancePopForState\" : 0 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"covariancePopForState\" : -7.5 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"covariancePopForState\" : 2 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/covariancePop.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $covarianceSamp:\n      [\n         <numeric expression 1>,\n         <numeric expression 2>\n      ]\n   } \n\nBehavior\n--------\n\n:group:`$covarianceSamp` behavior:\n\n.. |covariance-method| replace:: :group:`$covariancePop`\n.. |covariance-value| replace:: ``0``\n\n.. include:: /includes/covariance-behavior.rst\n\nExample\n-------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$covarianceSamp` in the\n:pipeline:`$setWindowFields` stage to output the sample covariance\nvalues for the cake sales ``orderDate`` year and ``quantity`` values:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/covarianceSamp.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"covarianceSampForState\" : null }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"covarianceSampForState\" : -21 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"covarianceSampForState\" : -8.500000000000007 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"covarianceSampForState\" : null }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"covarianceSampForState\" : -15 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"covarianceSampForState\" : 3 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/covarianceSamp.txt"
  },
  {
    "code": "            :copyable: false\n         \n            {\n               \"name\" : \"shardA\",\n               \"coordinator\" : false,\n               \"readOnly\" : false\n            }\n\n         Only present if the operation is part of a transaction on a\n         sharded cluster and ``$currentOp`` is run with\n         :ref:`localOps: true <currentOp-stage-localOps>`\n\n      .. data:: $currentOp.transaction.numReadOnlyParticipants\n      \n         Number of shards only affected by read operations in this\n         transaction.\n\n         Only present if the operation is part of a transaction on a\n         sharded cluster and ``$currentOp`` is run with\n         :ref:`localOps: true <currentOp-stage-localOps>`\n\n\n      .. data:: $currentOp.transaction.numNonReadOnlyParticipants\n      \n         Number of shards affected by operations other than reads in\n         this transaction.\n\n         Only present if the operation is part of a transaction on a\n         sharded cluster and ``$currentOp`` is run with\n         :ref:`localOps: true <currentOp-stage-localOps>`\n\n      .. data:: $currentOp.transaction.expiryTime\n\n         The date and time (with time zone) when the transaction will\n         time out and abort.\n\n         The :data:`$currentOp.transaction.expiryTime` equals the\n         :data:`$currentOp.transaction.startWallClockTime` + the\n         :parameter:`transactionLifetimeLimitSeconds`.\n\n         For more information, see :ref:`transaction-limit` for\n         transactions.\n\n         Only present if the operation is part of a multi-document\n         transaction.\n\n      \n.. data:: $currentOp.op\n\n   A string that identifies the specific operation type. Only present if\n   :data:`$currentOp.type` is ``op``.\n\n   The possible values are:\n\n   - ``\"none\"``\n   - ``\"update\"``\n   - ``\"insert\"``\n   - ``\"query\"``\n   - ``\"command\"``\n   - ``\"getmore\"``\n   - ``\"remove\"``\n   - ``\"killcursors\"``\n\n   ``\"command\"`` operations include most\n   :ref:`commands <database-commands>` such as the\n   :dbcommand:`createIndexes`, :dbcommand:`aggregate`, and :dbcommand:`findAndModify`.\n\n   ``\"query\"`` operations include :dbcommand:`find` operations and OP_QUERY operations.\n\n.. data:: $currentOp.ns\n\n   The :term:`namespace` the operation targets. A namespace consists of\n   the :term:`database` name and the :term:`collection` name\n   concatenated with a dot (``.``); that is,\n   ``\"<database>.<collection>\"``.\n\n.. data:: $currentOp.command\n\n   .. include:: /includes/extracts/command-field-currentOp.rst\n\n.. data:: $currentOp.cursor\n\n   A document that contains the cursor information for ``idleCursor``\n   and ``getmore`` operations; i.e. where :data:`~currentOp.type` is\n   ``idleCursor`` or :data:`~currentOp.op` is ``getmore``.\n\n   If reporting on a ``getmore`` operation before the ``getmore`` has\n   accessed its cursor information, the :data:`~currentOp.cursor` field\n   is not available.\n\n   .. data:: $currentOp.cursor.cursorId\n\n      The ID of the cursor.\n\n   .. data:: $currentOp.cursor.createdDate\n\n      The date and time when the cursor was created.\n\n   .. data:: $currentOp.cursor.lastAccessDate\n\n      The date and time when the cursor was last used.\n      \n      If the cursor is actively in use (i.e. :data:`~currentOp.op` is\n      ``getmore`` and the :data:`~currentOp.type` is not\n      ``idleCursor``), then :data:`~$currentOp.cursor.lastAccessDate`\n      reports either the time the previous ``getmore`` ended\n      or the time the cursor was created if this is the first\n      ``getmore``.\n\n   .. data:: $currentOp.cursor.nDocsReturned\n\n      The cumulative number of documents returned by the cursor.\n\n   .. data:: $currentOp.cursor.nBatchesReturned\n\n      The cumulative number of batches returned by the cursor.\n\n   .. data:: $currentOp.cursor.noCursorTimeout\n\n      The flag that indicates that the cursor doesn't timeout when idle;\n      i.e. if the cursor has the ``noTimeout`` option set.\n\n      - If true, the cursor does not time out when idle.\n\n      - If false, the cursor times out when idle.\n\n      .. seealso::\n\n         :method:`cursor.addOption()`\n\n   .. data:: $currentOp.cursor.tailable\n\n      The flag that indicates if the cursor is a :ref:`tailable cursor\n      <tailable-cursors-landing-page>` for a capped collection. Tailable cursors\n      remain open after the client exhausts the results in the initial\n      cursor.\n\n      .. seealso::\n\n         - :dbcommand:`find`\n         - :method:`cursor.tailable()`\n         - :method:`cursor.addOption()`\n\n   .. data:: $currentOp.cursor.awaitData\n\n      The flag that indicates whether the :ref:`tailable cursor\n      <tailable-cursors-landing-page>` should temporarily block a\n      :dbcommand:`getMore` command on the cursor while waiting for new\n      data rather than returning no data.\n\n      For non-tailable cursors, the value is always false.\n\n      .. seealso::\n\n         - :dbcommand:`find`\n         - :method:`cursor.tailable()`\n         - :method:`cursor.addOption()`\n\n   .. data:: $currentOp.cursor.originatingCommand\n\n      The ``originatingCommand`` field contains the full command object\n      (e.g. ``find`` or ``aggregate``) which originally created the\n      cursor.\n\n   .. data:: $currentOp.cursor.planSummary\n\n      A string that specifies whether the cursor uses a collection scan\n      (``COLLSCAN``) or an index scan (``IXSCAN { ... }``).\n\n      The ``IXSCAN`` also includes the specification document of the index\n      used.\n\n      Not available when running with ``localOps: true`` on\n      :binary:`~bin.mongos` or when reporting on ``idleCursors``.\n\n   .. data:: $currentOp.cursor.operationUsingCursorId\n\n      The ``opid`` of the operation using the cursor.\n\n      Only present if the cursor is not idle.\n\n.. data:: $currentOp.cursor.queryFramework \n\n   .. versionadded:: 6.2\n\n   A string that specifies the :term:`query framework` used to process an \n   operation.\n\n.. data:: $currentOp.planSummary\n\n   A string that specifies whether the cursor uses a collection scan\n   (``COLLSCAN``) or an index scan (``IXSCAN { ... }``).\n\n   Not available when running with ``localOps: true`` on\n   :binary:`~bin.mongos`.\n\n.. data:: $currentOp.prepareReadConflicts\n\n   The number of times the current operation had to wait for a\n   prepared transaction with a write to commit or abort.\n\n   While waiting, the operation continues to hold any necessary locks\n   and storage engine resources.\n\n.. data:: $currentOp.writeConflicts\n\n   The number of times the current operation conflicted with\n   another write operation on the same document.\n\n.. data:: $currentOp.numYields\n\n   :data:`~$currentOp.numYields` is a counter that reports the number of times the\n   operation has yielded to allow other operations to complete.\n\n   Typically, operations yield when they need access to data that\n   MongoDB has not yet fully read into memory. This allows\n   other operations that have data in memory to complete quickly\n   while MongoDB reads in data for the yielding operation.\n\n.. data:: $currentOp.queryShapeHash\n\n   .. include:: /includes/query-shape-hash-field.rst\n\n.. data:: $currentOp.dataThroughputLastSecond\n\n   Amount of data (in MiB) processed by the :dbcommand:`validate`\n   operation in the last second. Only available for a\n   :dbcommand:`validate` operation that is currently scanning\n   documents. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/currentOp.txt"
  },
  {
    "code": "      :emphasize-lines: 7\n\n      \"msg\" : \"Validate: scanning documents Validate: scanning documents: 7258/24000 30%\",\n      \"progress\" : {\n         \"done\" : 7258,\n         \"total\" : 24000\n      },\n      \"numYields\" : 0,\n      \"dataThroughputLastSecond\" : 15.576952934265137,\n      \"dataThroughputAverage\" : 15.375944137573242,\n\n.. data:: $currentOp.dataThroughputAverage\n\n   The average amount of data (in MiB) processed by the\n   :dbcommand:`validate` operation. Only available for a\n   :dbcommand:`validate` operation that is currently scanning\n   documents. For example:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/currentOp.txt"
  },
  {
    "code": "      :emphasize-lines: 8\n\n      \"msg\" : \"Validate: scanning documents Validate: scanning documents: 7258/24000 30%\",\n      \"progress\" : {\n         \"done\" : 7258,\n         \"total\" : 24000\n      },\n      \"numYields\" : 0,\n      \"dataThroughputLastSecond\" : 15.576952934265137,\n      \"dataThroughputAverage\" : 15.375944137573242,\n\n.. data:: $currentOp.locks\n\n   The :data:`~$currentOp.locks` document reports the type and mode of\n   locks the operation currently holds. The possible lock types are as\n   follows:\n\n   .. include:: /includes/fact-lock-types.rst\n\n   The possible modes are as follows:\n\n   .. include:: /includes/fact-lock-modes.rst\n\n.. data:: $currentOp.lockStats\n\n   For each lock type and mode (see :data:`~$currentOp.locks` for\n   descriptions of lock types and modes), returns the following\n   information:\n\n   .. data:: $currentOp.lockStats.acquireCount\n\n      Number of times the operation acquired the lock in the specified\n      mode.\n\n   .. data:: $currentOp.lockStats.acquireWaitCount\n\n      Number of times the operation had to wait for the\n      :data:`~$currentOp.lockStats.acquireCount` lock acquisitions\n      because the locks were held in a conflicting mode.\n      :data:`~$currentOp.lockStats.acquireWaitCount` is less than or\n      equal to :data:`~$currentOp.lockStats.acquireCount`.\n\n   .. data:: $currentOp.lockStats.timeAcquiringMicros\n\n      Cumulative time in microseconds that the operation had to wait to\n      acquire the locks.\n\n      :data:`~$currentOp.lockStats.timeAcquiringMicros` divided by\n      :data:`~$currentOp.lockStats.acquireWaitCount` gives an\n      approximate average wait time for the particular lock mode.\n\n   .. data:: $currentOp.lockStats.deadlockCount\n\n      Number of times the operation encountered deadlocks while waiting\n      for lock acquisitions.\n\n.. data:: $currentOp.waitingForLock\n\n   Returns a boolean value. :data:`~$currentOp.waitingForLock` is ``true`` if the\n   operation is waiting for a lock and ``false`` if the operation has\n   the required lock.\n\n.. data:: $currentOp.msg\n\n   The :data:`~$currentOp.msg` provides a message that describes the status and\n   progress of the operation. In the case of indexing or mapReduce\n   operations, the field reports the completion percentage.\n\n.. data:: $currentOp.progress\n\n   Reports on the progress of mapReduce or indexing operations. The\n   :data:`~$currentOp.progress` fields corresponds to the completion percentage in\n   the :data:`~$currentOp.msg` field. The :data:`~$currentOp.progress` specifies the following\n   information:\n\n   .. data:: $currentOp.progress.done\n\n      Reports the number of work items completed.\n\n   .. data:: $currentOp.progress.total\n\n      Reports the total number of work items.\n\n.. data:: $currentOp.killPending\n\n   Returns ``true`` if the operation is currently flagged for\n   termination.  When the operation encounters its next safe termination point, the\n   operation terminates.\n\n\n.. data:: $currentOp.waitingForFlowControl\n\n   A boolean that indicates if the operation had to wait because\n   of :ref:`flow control <replication-flow-control>`.\n\n.. data:: $currentOp.flowControlStats\n\n   The flow control statistics for this operation.\n\n   .. data:: $currentOp.flowControlStats.acquireCount\n   \n      The number of times this operation acquired a ticket.\n\n   .. data:: $currentOp.flowControlStats.acquireWaitCount\n\n      The number of times this operation waited to acquire a ticket.\n\n   .. data:: $currentOp.flowControlStats.timeAcquiringMicros\n\n      The total time this operation has waited to acquire a ticket.\n\n.. data:: $currentOp.totalOperationTimeElapsed\n\n   The total time elapsed, in seconds, for the current :ref:`resharding\n   operation <sharding-resharding>`. The time is set to 0 when a new\n   resharding operation starts.\n\n   Only present if a resharding operation is taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.remainingOperationTimeEstimated\n\n   The estimated time remaining in seconds for the current\n   :ref:`resharding operation <sharding-resharding>`. The time is set to\n   -1 when a new resharding operation starts.\n\n   Only present when a resharding operation is taking place. This \n   field may not be present if an estimate cannot not be computed.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.approxDocumentsToCopy\n\n   The approximate number of documents to be copied from the donor\n   shards to the recipient shards during the :ref:`resharding operation\n   <sharding-resharding>`. This number is an estimate that is set at the\n   beginning of the resharding operation and does not change after it\n   has been set. The number is set to 0 when a new resharding operation\n   starts. It is possible for ``$currentOp.documentsCopied`` and\n   ``$currentOp.bytesCopied`` to end up exceeding\n   ``$currentOp.approxDocumentsToCopy`` and\n   ``$currentOp.approxBytesToCopy``, respectively, if the\n   post-resharding data distribution is not perfectly uniform.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.documentsCopied\n\n   The number of documents copied form donor shards to recipient shards\n   during the :ref:`resharding operation <sharding-resharding>`. The\n   number is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.approxBytesToCopy\n\n   The approximate number of bytes to be copied from the donor shards to\n   the recipient shards during the :ref:`resharding operation\n   <sharding-resharding>`. This number is an estimate that is set at the\n   beginning of the resharding operation and does not change after it\n   has been set. The number is set to 0 when a new resharding operation\n   starts. It is possible for ``$currentOp.documentsCopied`` and\n   ``$currentOp.bytesCopied`` to end up exceeding\n   ``$currentOp.approxDocumentsToCopy`` and\n   ``$currentOp.approxBytesToCopy``, respectively, if the\n   post-resharding data distribution is not perfectly uniform.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.bytesCopied\n\n   The number of bytes copied from donor shards to recipient shards\n   during the :ref:`resharding operation <sharding-resharding>`. The\n   number is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.totalCopyTimeElapsed\n\n   The total elapsed time, in seconds, for ongoing data copy tasks from\n   donor shards to recipient shards for the current resharding\n   operation. The time is set to 0 when a new :ref:`resharding operation\n   <sharding-resharding>` starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.oplogEntriesFetched\n\n   The number of entries fetched from the :term:`oplog` for the current\n   :ref:`resharding operation <sharding-resharding>`. The number is set\n   to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.oplogEntriesApplied\n\n   The number of entries applied to the :term:`oplog` for the current\n   :ref:`resharding operation <sharding-resharding>`. The number is set\n   to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.totalApplyTimeElapsed\n\n   The total elapsed time, in seconds, for the apply step of the\n   current :ref:`resharding operation <sharding-resharding>`. In the\n   apply step, recipient shards apply :term:`oplog` entries to modify\n   their data based on new incoming writes from donor shards. The time\n   is set to 0 when a new resharding operation starts.\n\n   Only present on a recipient shard when a resharding operation is\n   taking place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.countWritesDuringCriticalSection\n\n   The number of writes performed in the critical section for the current\n   :ref:`resharding operation <sharding-resharding>`. The critical\n   section prevents new incoming writes to the collection currently\n   being resharded. The number is set to 0 when a new resharding\n   operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.totalCriticalSectionTimeElapsed\n\n   The total elapsed time, in seconds, for the critical section of the\n   current :ref:`resharding operation <sharding-resharding>`. The\n   critical section prevents new incoming writes to the collection\n   currently being resharded. The time is set to 0 when a new\n   resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.donorState\n\n   The current state of a donor shard for the :ref:`resharding operation\n   <sharding-resharding>`. The state is set to ``unused`` when a new\n   resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking place.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``preparing-to-donate``\n        - The donor shard is preparing to donate data to the recipient\n          shards.\n\n      * - ``donating-initial-data``\n        - The donor shard is donating data to the recipient shards.\n\n      * - ``donating-oplog-entries``\n        - The donor shard is donating :term:`oplog` entries to the\n          recipient shards.\n\n      * - ``preparing-to-block-writes``\n        - The donor shard is about to prevent new incoming write\n          operations to the collection that is being resharded.\n\n      * - ``error``\n        - An error occurred during the resharding operation.\n\n      * - ``blocking-writes``\n        - The donor shard is preventing new incoming write operations\n          and the donor shard has notified all recipient shards that new\n          incoming writes are prevented.\n\n      * - ``done``\n        - The donor shard has dropped the old sharded collection and the\n          resharding operation is complete.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.recipientState\n\n   The current state of a recipient shard for a :ref:`resharding\n   operation <sharding-resharding>`. The state is set to ``unused`` when\n   a new resharding operation starts.\n\n   Only present on a donor shard when a resharding operation is taking\n   place.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``awaiting-fetch-timestamp``\n        - The recipient shard is waiting for the donor shards to be\n          prepared to donate their data.\n\n      * - ``creating-collection``\n        - The recipient shard is creating the new sharded collection.\n\n      * - ``cloning``\n        - The recipient shard is receiving data from the donor shards.\n\n      * - ``applying``\n        - The recipient shard is applying :term:`oplog` entries to\n          modify its copy of the data based on the new incoming writes\n          from donor shards.\n\n      * - ``error``\n        - An error occurred during the :ref:`resharding operation\n          <sharding-resharding>`.\n\n      * - ``strict-consistency``\n        - The recipient shard has all data changes stored in a temporary\n          collection.\n\n      * - ``done``\n        - The resharding operation is complete.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.coordinatorState\n\n   The state of the resharding coordinator for the current\n   :ref:`resharding operation <sharding-resharding>`. The resharding\n   coordinator is an operation that runs on the :ref:`config server\n   <sharding-config-server>` primary. The state is set to\n   ``unused`` when a new resharding operation starts.\n\n   Only present on the coordinating config server.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``unused``\n        - The resharding operation is about to start or recovering from\n          a primary failover.\n\n      * - ``initializing``\n        - The resharding coordinator has inserted the coordinator\n          document into ``config.reshardingOperations`` and has added\n          the ``reshardingFields`` to the ``config.collections`` entry\n          for the original collection.\n\n      * - ``preparing-to-donate``\n        - The resharding coordinator\n\n          - has created a ``config.collections`` entry for the temporary\n            resharding collection.\n          - has inserted entries into ``config.chunks`` for ranges based\n            on the new shard key.\n          - has inserted entries into ``config.tags`` for any zones\n            associated with the new shard key.\n\n          The coordinator informs participant shards to begin the\n          resharding operation. The coordinator then waits until all\n          donor shards have picked a ``minFetchTimestamp`` and are ready\n          to donate.\n\n      * - ``cloning``\n        - The resharding coordinator informs donor shards to donate data\n          to recipient shards. The coordinator waits for all recipients\n          to finish cloning the data from the donor.\n\n      * - ``applying``\n        - The resharding coordinator informs recipient shards to modify\n          their copies of data based on new incoming writes from donor\n          shards. The coordinator waits for all recipients to finish\n          applying :term:`oplog` entries.\n\n      * - ``blocking-writes``\n        - The resharding coordinator informs donor shards to prevent new\n          incoming write operations to the collection being resharded.\n          The coordinator then waits for all recipients to have all data\n          changes.\n\n      * - ``aborting``\n        - An unrecoverable error occurred during the resharding\n          operation or the :dbcommand:`abortReshardCollection` command\n          (or the :method:`sh.abortReshardCollection()` method) was run.\n\n      * - ``committing``\n        - The resharding coordinator removes the ``config.collections``\n          entry for the temporary resharding collection. The coordinator\n          then adds the ``recipientFields`` to the source collection's\n          entry.\n\n   .. versionadded:: 5.0\n\n.. data:: $currentOp.opStatus\n\n   The current state of a :ref:`resharding operation\n   <sharding-resharding>`.\n\n   Only present if a resharding operation is taking place. Once the\n   operation has completed, the operation is removed from ``currentOp``\n   output.\n\n   .. list-table::\n      :widths: 20 80\n      :header-rows: 1\n\n      * - State\n        - Description\n\n      * - ``actively running``\n        - The resharding operation is actively running.\n\n      * - ``success``\n        - The resharding operation has succeeded.\n\n      * - ``failure``\n        - The resharding operation has failed.\n\n      * - ``canceled``\n        - The resharding operation was canceled.\n\n   .. versionadded:: 5.0\n\n.. _currentOp-agg-query-sampling-fields:\n\n.. data:: $currentOp.collUuid\n\n   The UUID of the :ref:`sampled collection <configureQueryAnalyzer>`.\n\n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: $currentOp.startTime\n\n   The time at which query sampling began.\n\n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n\n   .. versionadded:: 7.0\n\n.. data:: $currentOp.samplesPerSecond\n\n   The maximum number of queries to sample per second.\n   \n   Only reported when running ``$currentOp`` on ``mongos``.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n   \n.. data:: $currentOp.sampledReadsCount\n\n   The number of sampled read queries.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n\n   .. versionadded:: 7.0\n\n.. data:: $currentOp.sampledWritesCount\n\n   The number of sampled write queries.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: $currentOp.sampledReadsBytes\n\n   The size of the sampled read queries, in bytes.\n   \n   On a replica set, this is reported on every ``mongod``.\n\n   On a sharded cluster, this only reported on ``mongod`` with \n   ``--shardsvr``.\n   \n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n.. data:: $currentOp.sampledWritesBytes\n   \n   The size of the sampled write queries, in bytes.\n   \n   On a replica set, this is reported on every ``mongod``.\n\n   On a sharded cluster, this only reported on ``mongod`` with \n   ``--shardsvr``.\n\n   This field only appears on documents related to query sampling.\n   For details, see :ref:`<sampled-queries-currentOp-stage>`.\n   \n   .. versionadded:: 7.0\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/currentOp.txt"
  },
  {
    "code": "   :emphasize-lines: 8-13\n\n   db.shipping.aggregate(\n      [\n         {\n            $project:\n               {\n                  expectedDeliveryDate:\n                     {\n                        $dateAdd:\n                           {\n                              startDate: \"$purchaseDate\",\n                              unit: \"day\",\n                              amount: 3\n                           }\n                     }\n               }\n          },\n          { \n             $merge: \"shipping\" \n          }\n       ]\n    )\n\nAfter adding 3 days to the ``purchaseDate`` with ``$dateAdd`` in the\n:pipeline:`$project` stage, the :pipeline:`$merge` stage updates the\noriginal documents with the ``expectedDeliveryDate``.\n\nThe resulting documents look like this:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateAdd.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : ObjectId(\"603dd4b2044b995ad331c0b2\"),\n      \"custId\" : 456,\n      \"purchaseDate\" : ISODate(\"2020-12-31T00:00:00Z\"),\n      \"expectedDeliveryDate\" : ISODate(\"2021-01-03T00:00:00Z\")\n   }\n   {\n      \"_id\" : ObjectId(\"603dd4b2044b995ad331c0b3\"),\n      \"custId\" : 457,\n      \"purchaseDate\" : ISODate(\"2021-02-28T00:00:00Z\"),\n      \"expectedDeliveryDate\" : ISODate(\"2021-03-03T00:00:00Z\")\n   }\n   {\n       \"_id\" : ObjectId(\"603dd4b2044b995ad331c0b4\"),\n      \"custId\" : 458,\n      \"purchaseDate\" : ISODate(\"2021-02-26T00:00:00Z\"),\n      \"expectedDeliveryDate\" : ISODate(\"2021-03-01T00:00:00Z\")\n   }\n\nFilter on a Date Range\n~~~~~~~~~~~~~~~~~~~~~~\n\nUpdate the ``shipping`` collection from the last example with this code\nto add delivery dates to the documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateAdd.txt"
  },
  {
    "code": "   :emphasize-lines: 11-16\n\n   db.shipping.aggregate(\n      [\n         {\n            $match: \n               {\n                  $expr:\n                     {\n                        $gt:\n                           [ \"$deliveryDate\",\n                             { \n                                $dateAdd:\n                                   { \n                                      startDate: \"$purchaseDate\",\n                                      unit: \"day\",\n                                      amount: 5\n                                   } \n                              }\n                           ]\n                     }\n               }\n          },\n          { \n             $project: \n                {\n                   _id: 0,\n                   custId: 1,\n                   purchased:\n                      {\n                          $dateToString: \n                             {\n                                format: \"%Y-%m-%d\",\n                                date: \"$purchaseDate\"\n                             }\n                      },\n                   delivery:\n                      {\n                         $dateToString:\n                            {\n                               format: \"%Y-%m-%d\",\n                               date: \"$deliveryDate\"\n                            }\n                      }\n                }\n          } \n      ]\n   ) \n\nThe :pipeline:`$match` stage uses :expression:`$gt` and ``$dateAdd`` in\nan expression (:query:`$expr`) to compare the actual ``deliveryDate``\nwith an expected date. Documents with delivery dates more than 5 days\nafter the ``purchaseDate`` are passed on to the :pipeline:`$project`\nstage.\n\nThe :pipeline:`$project` stage uses the :expression:`$dateToString`\nexpression to convert the dates to a more readable format. Without the\nconversion, MongoDB returns the date in :term:`ISODate` format and\nassumes a UTC timezone.\n\nIn this example only one record is returned:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateAdd.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"custId\" : 456, \"purchased\" : \"2020-12-31\", \"delivery\" : \"2021-01-10\" }\n\nAdjust for Daylight Savings Time\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAll dates are stored internally in UTC time. When a ``timezone`` is\nspecified, ``$dateAdd`` uses local time to carry out the calculations.\nThe results are displayed in UTC.\n\nYou have customers in several timezones and you want to see what effect\ndaylight savings time might have on your billing periods if you bill by\n``day`` or by ``hour``.\n\nCreate this collection of connection times:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateAdd.txt"
  },
  {
    "code": "   :emphasize-lines: 11-16\n\n    db.orders.aggregate(\n       [\n          { \n             $group: \n                { \n                    _id: null, \n                    averageTime: \n                       { \n                          $avg:\n                             { \n                                $dateDiff: \n                                   { \n                                       startDate: \"$purchased\",\n                                       endDate: \"$delivered\",\n                                       unit: \"day\"\n                                   } \n                              }\n                       }\n                }\n          },\n          {\n             $project:\n                { \n                   _id: 0,\n                   numDays: \n                      { \n                         $trunc: \n                            [ \"$averageTime\", 1 ]\n                      }\n                }\n           }\n       ]\n   )\n\nThe :group:`$avg` accumulator in the :pipeline:`$group` stage uses\n``$dateDiff`` on each document to get the time between the\n``purchased`` and ``delivered`` dates. The resulting value is returned\nas ``averageTime``.\n\nThe decimal portion of the ``averageTime`` is truncated\n(:expression:`$trunc`) in the :pipeline:`$project` stage to produce\noutput like this:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateDiff.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"numDays\" : 4.6 }\n\nResult Precision\n~~~~~~~~~~~~~~~~\n\nCreate this collection with starting and ending dates for a\nsubscription. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateDiff.txt"
  },
  {
    "code": "   :emphasize-lines: 10-14, 19-23, 28-33\n\n   db.subscriptions.aggregate(\n      [\n         {\n            $project:\n               { \n                  Start: \"$start\",\n                  End: \"$end\", \n                  years:\n                     {\n                        $dateDiff:\n                           {\n                              startDate: \"$start\",\n                              endDate: \"$end\",\n                              unit: \"year\"\n                           }\n                     }, \n                  months:\n                     {\n                        $dateDiff:\n                           {\n                              startDate: \"$start\",\n                              endDate: \"$end\",\n                              unit: \"month\"\n                           }\n                     },\n                  days:\n                     {\n                        $dateDiff:\n                           {\n                              startDate: \"$start\",\n                              endDate: \"$end\",\n                              unit: \"day\"\n                           }\n                     },\n                  _id: 0 \n               }\n          }\n      ]\n    )\n\nThe results are summarized in this table:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 23 23 18 18 18\n\n   * - Start\n     - End\n     - Years\n     - Months\n     - Days \n\n   * - 2010-01-01\n     - 2011-01-01\n     - 1\n     - 12\n     - 365\n\n   * - 2010-01-01\n     - 2011-07-01\n     - 1\n     - 18\n     - 546\n\n   * - 2010-03-01\n     - 2010-04-30\n     - 0\n     - 1\n     - 60\n \nThe count only increments when a new ``unit`` starts, so 18 months are\nreported as 1 year in the second row and 60 days are reported as one\nmonth in the third row.\n\nWeeks Per Month\n~~~~~~~~~~~~~~~\n\nCreate a collection of months:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateDiff.txt"
  },
  {
    "code": "   :emphasize-lines: 8-13, 17-23, 27-33\n\n   db.months.aggregate(\n      [\n         {\n            $project:\n               { \n                  wks_default:\n                     {\n                        $dateDiff:\n                           { \n                              startDate: \"$start\",  \n                              endDate: \"$end\", \n                              unit: \"week\"\n                           }\n                     }, \n                  wks_monday:\n                     {\n                        $dateDiff:\n                           { \n                              startDate: \"$start\",\n                              endDate: \"$end\", \n                              unit: \"week\", \n                              startOfWeek: \"Monday\"\n                           }\n                     },\n                  wks_friday:\n                     {\n                        $dateDiff:\n                           { \n                              startDate: \"$start\",\n                              endDate: \"$end\",\n                              unit: \"week\",\n                              startOfWeek: \"fri\" \n                           }\n                     },\n                  _id: 0 \n               }\n          }\n      ]\n    )\n\nThe results are summarized in this table:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 40 20 20 20 \n\n   * - Month\n     - Sunday\n     - Monday\n     - Friday\n\n   * - January\n     - 5\n     - 4\n     - 4\n\n   * - February\n     - 4\n     - 3\n     - 4\n\n   * - March\n     - 4\n     - 4\n     - 4\n\nFrom the results:\n\n- When the ``startOfWeek`` is Sunday, the 5th ``week`` in January, 2021\n  begins on the 31st.\n- Because the 31st is a Sunday and it is between ``startDate`` and\n  ``endDate``, one ``week`` is added to the count.\n- The ``week`` count is incremented even when a calendar week finishes\n  after ``endDate`` or in the next calendar period.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateDiff.txt"
  },
  {
    "code": "          :copyable: false\n\n\n          { $dateFromString: {\n              dateString: \"2017-02-08T12:10:40.787\"\n          } }\n\n     - ``ISODate(\"2017-02-08T12:10:40.787Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"2017-02-08T12:10:40.787\",\n               timezone: \"America/New_York\"\n          } }\n\n     - ``ISODate(\"2017-02-08T17:10:40.787Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"2017-02-08\"\n          } }\n\n     - ``ISODate(\"2017-02-08T00:00:00Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"oct 20 2020\"\n          } }\n\n     - ``ISODate(\"2020-10-20T00:00:00.000Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"06-15-2018\",\n               format: \"%m-%d-%Y\"\n          } }\n\n     - ``ISODate(\"2018-06-15T00:00:00Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"15-06-2018\",\n               format: \"%d-%m-%Y\"\n          } }\n\n     - ``ISODate(\"2018-06-15T00:00:00Z\")``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dateFromString: {\n               dateString: \"WED jan 31 12:05:28 +03:30 1996\"\n          } }\n\n     - ``ISODate(\"1996-01-31T08:35:28.000Z\")``\n\n.. _dateFromString-format-specifiers:\n\nFormat Specifiers\n-----------------\n\n.. include:: /includes/extracts/date-format-specifiers-dateFromString.rst\n\nExamples\n--------\n\nConverting Dates\n~~~~~~~~~~~~~~~~\n\nConsider a collection ``logmessages`` that contains the following\ndocuments with dates.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateFromString.txt"
  },
  {
    "code": "   :emphasize-lines: 29-34\n\n   db.connectionTime.aggregate(\n      [\n         {\n            $match: \n               {\n                  $expr:\n                     {\n                        $eq:\n                           [\n                               { $year: \"$logout\" },\n                                 2021 \n                           ]\n                     },  \n                  $expr:\n                     { \n                        $eq:\n                           [\n                               { $month: \"$logout\" },\n                                 1\n                           ]\n                      }\n                }\n          },\n          {\n             $project:\n                {\n                   logoutTime: \n                      {\n                         $dateSubtract: \n                            {\n                               startDate: \"$logout\",\n                               unit: \"hour\",\n                               amount: 3 \n                            }\n                      }\n                 }\n           },\n           {\n              $merge: \"connectionTime\"\n           }\n      ]\n   )\n\nTwo similar comparisons are made in the :pipeline:`$match` stage. First\nthe :expression:`$year` and :expression:`$month` operators extract the\nyear and month, respectively, from the ``logoutTime`` Date object. Then\nthe month and year are checked to see if they match the selection\ntargets. Since \"January\" is encoded as \"1\", :query:`$expr` is true when\nthe year and month are equal (:expression:`$eq`) to \"2021\" and \"1\".\n\nThe :pipeline:`$project` stage uses ``$dateSubtract`` to subtract 3\nhours from the ``logoutTime`` of each selected dcoument. \n\nFinaly, the :pipeline:`$merge` stage updates the collection, writing\nthe new ``logoutTime`` for the modified documents.\n\n.. note::\n\n   Unlike :pipeline:`$out`, the ``$merge`` stage only updates the\n   matched documents and preserves the rest of the collection. For more\n   details see: :ref:`$out compared with $merge <out-merge-comparison>`. \n\nThe resulting documents look like this:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateSubtract.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n    \"_id\" : ObjectId(\"603dd94b044b995ad331c0b5\"),\n    \"custId\" : 457,\n    \"login\" : ISODate(\"2020-12-25T19:04:00Z\"),\n    \"logout\" : ISODate(\"2020-12-28T09:04:00Z\")\n   }\n   {\n    \"_id\" : ObjectId(\"603dd94b044b995ad331c0b6\"),\n    \"custId\" : 457,\n    \"login\" : ISODate(\"2021-01-27T05:12:00Z\"),\n    \"logout\" : ISODate(\"2021-01-28T13:05:00Z\"),\n    \"logoutTime\" : ISODate(\"2021-01-28T10:05:00Z\")\n   }\n   {\n    \"_id\" : ObjectId(\"603dd94b044b995ad331c0b7\"),\n    \"custId\" : 458,\n    \"login\" : ISODate(\"2021-01-22T06:27:00Z\"),\n    \"logout\" : ISODate(\"2021-01-31T11:00:00Z\"),\n    \"logoutTime\" : ISODate(\"2021-01-31T08:00:00Z\")\n   }\n   {\n    \"_id\" : ObjectId(\"603dd94b044b995ad331c0b8\"),\n    \"custId\" : 459,\n    \"login\" : ISODate(\"2021-02-14T20:14:00Z\"),\n    \"logout\" : ISODate(\"2021-02-17T16:05:00Z\")\n   }\n   {\n    \"_id\" : ObjectId(\"603dd94b044b995ad331c0b9\"),\n    \"custId\" : 460,\n    \"login\" : ISODate(\"2021-02-26T02:44:00Z\"),\n    \"logout\" : ISODate(\"2021-02-18T14:13:00Z\")\n   }\n\nFilter by Relative Dates\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou want to send a survey to clients who have used your service in the\npast week. The ``$dateSubtract`` expression can create a range filter\nrelative to the time the query is executed. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateSubtract.txt"
  },
  {
    "code": "   :emphasize-lines: 12-17\n\n   db.connectionTime.aggregate(\n      [\n         {\n            $match: \n               {\n                  $expr:\n                     { \n                        $gt:\n                           [\n                              \"$logoutTime\", \n                               {\n                                  $dateSubtract: \n                                     {\n                                        startDate: \"$$NOW\",\n                                        unit: \"week\",\n                                        amount: 1\n                                     } \n                               }\n                           ] \n                     } \n                }\n         },\n         {\n            $project: \n               {\n                  _id: 0,\n                  custId: 1, \n                  loggedOut: \n                     {\n                        $dateToString:\n                           {\n                              format: \"%Y-%m-%d\",\n                              date: \"$logoutTime\"\n                           }\n                     }\n               }\n         } \n      ]\n   ) \n\nThe built in aggregation variable :variable:`$$NOW <NOW>` returns the\ncurrent datetime in :term:`ISODate` format. The :pipeline:`$match`\nstage uses the value in :variable:`$$NOW <NOW>` to get today's date.\nThen the comparison expression (:query:`$expr`) filters the collection\nusing greater than (:expression:`$gt`) and ``$dateSubtract`` to match\ndocuments that have a ``logoutTime`` in the past week.\n\nThe :pipeline:`$project` stage uses the :expression:`$dateToString`\nexpression to convert the dates to a more readable format. Without the\nconversion, MongoDB returns the date in :term:`ISODate` format and\nassumes a UTC timezone.\n\nThe output shows two customers have logged out in the last week.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateSubtract.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"custId\" : 459, \"loggedOut\" : \"2021-02-17\" }\n   { \"custId\" : 460, \"loggedOut\" : \"2021-02-18\" }\n\nAdjust for Daylight Savings Time\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAll dates are stored internally in UTC time. When a ``timezone`` is\nspecified, ``$dateSubtract`` uses local time to carry out the\ncalculations. The results are displayed in UTC. \n\nYou have customers in several timezones and you want to see what effect\ndaylight savings time might have on your billing periods if you bill by\n``day`` or by ``hour``.\n\nCreate this collection of connection times:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateSubtract.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $dateTrunc: {\n         date: <Expression>,\n         unit: <Expression>,\n         binSize: <Expression>,\n         timezone: <tzExpression>,\n         startOfWeek: <Expression>\n      }\n   }\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 20 60\n\n   * - Field\n\n     - Required / Optional\n\n     - Description\n\n   * - :ref:`date <dateTrunc-date>`\n\n     - Required\n\n     - .. _dateTrunc-date:\n     \n       The date to truncate, specified in UTC. The :ref:`date\n       <dateTrunc-date>` can be any :ref:`expression\n       <aggregation-expressions>` that resolves to a :ref:`Date\n       <document-bson-type-date>`, a :ref:`Timestamp\n       <document-bson-type-timestamp>`, or an :ref:`ObjectID\n       <document-bson-type-object-id>`.\n\n   * - :ref:`unit <dateTrunc-unit>`\n\n     - Required\n\n     - .. _dateTrunc-unit:\n     \n       The unit of time, specified as an :ref:`expression\n       <aggregation-expressions>` that must resolve to one of these\n       strings:\n\n       - ``year``\n       - ``quarter``\n       - ``week``\n       - ``month``\n       - ``day``\n       - ``hour``\n       - ``minute``\n       - ``second``\n\n       .. include:: /includes/dateTrunc-binSize-unit.rst\n\n   * - :ref:`binSize <dateTrunc-binSize>`\n\n     - Optional\n\n     - .. _dateTrunc-binSize:\n       \n       The numeric time value, specified as an :ref:`expression\n       <aggregation-expressions>` that must resolve to a positive\n       non-zero number. Defaults to 1.\n\n       .. include:: /includes/dateTrunc-binSize-unit.rst\n\n   * - :ref:`timezone <dateTrunc-timezone>`\n\n     - Optional\n\n     - .. _dateTrunc-timezone:\n     \n       The timezone for the :expression:`$dateTrunc` calculation,\n       specified as an :ref:`expression <aggregation-expressions>` that\n       must resolve to a string that contains one of these values:\n       \n       - `Olson Timezone Identifier\n         <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>`_\n       \n       - `UTC Offset\n         <https://en.wikipedia.org/wiki/List_of_UTC_time_offsets>`_\n\n       If no :ref:`timezone <dateTrunc-timezone>` is provided, the\n       :expression:`$dateTrunc` calculation is performed in UTC.\n\n       .. list-table::\n          :header-rows: 1\n          :widths: 20 80\n\n          * - Format\n\n            - Examples\n\n          * - Olson Timezone Identifier\n\n            - - ``America/New_York``\n              - ``Europe/London``\n              - ``GMT``\n\n          * - UTC Offset\n\n            - - ``+/-[hh]:[mm]`` (example, ``+04:45``)\n              - ``+/-[hh][mm]`` (example, ``-0530``)\n              - ``+/-[hh]`` (example, ``+03``)\n\n   * - :ref:`startOfWeek <dateTrunc-startOfWeek>`\n\n     - Optional\n\n     - .. _dateTrunc-startOfWeek:\n     \n       The start of the week. Used when :ref:`unit <dateTrunc-unit>` is\n       ``week``. Defaults to ``Sunday``.\n       \n       :ref:`startOfWeek <dateTrunc-startOfWeek>` is an :ref:`expression\n       <aggregation-expressions>` that must resolve to one of these case\n       insensitive strings:\n\n       - ``monday`` (or ``mon``)\n       - ``tuesday`` (or ``tue``)\n       - ``wednesday`` (or ``wed``)\n       - ``thursday`` (or ``thu``)\n       - ``friday`` (or ``fri``)\n       - ``saturday`` (or ``sat``)\n       - ``sunday`` (or ``sun``)\n\n.. seealso::\n\n   - :ref:`aggregation-expressions`\n   - :ref:`bson-types`\n\nBehavior\n--------\n\n:expression:`$dateTrunc`:\n\n- Returns ``null`` if:\n\n  - any of the input fields except :ref:`startOfWeek\n    <dateTrunc-startOfWeek>` is missing or set to ``null``, or\n\n  - if :ref:`unit <dateTrunc-unit>` is ``week`` and :ref:`startOfWeek\n    <dateTrunc-startOfWeek>` is missing or set to ``null``.\n\n- Uses the :wikipedia:`proleptic Gregorian calendar\n  <Proleptic_Gregorian_calendar>` for dates preceding the year 1583.\n\n- Accounts for Daylight Savings Time, but does not account for\n  :wikipedia:`leap seconds <Leap_second>`.\n\n``binSize`` and ``unit`` Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/dateTrunc-binSize-unit.rst\n\nFor example:\n\n- If :ref:`binSize <dateTrunc-binSize>` is ``1`` and :ref:`unit\n  <dateTrunc-unit>` is ``hour``, the time period is one hour. For the\n  :ref:`date <dateTrunc-date>` ``2021-03-20T11:30:05Z``,\n  :expression:`$dateTrunc` returns ``2021-03-20T11:00:00Z``.\n\n- If :ref:`binSize <dateTrunc-binSize>` is ``2`` and :ref:`unit\n  <dateTrunc-unit>` is ``hour``, the time period is two hours. For the\n  :ref:`date <dateTrunc-date>` ``2021-03-20T11:30:05Z``,\n  :expression:`$dateTrunc` returns ``2021-03-20T10:00:00Z``.\n\n:expression:`$dateTrunc`:\n\n- Divides the time for the :expression:`$dateTrunc` calculation into\n  :ref:`binSize <dateTrunc-binSize>` time periods in the specified time\n  :ref:`unit <dateTrunc-unit>`.\n  \n  The time periods start at a reference date, which is determined by\n  :ref:`unit <dateTrunc-unit>`. If :ref:`unit <dateTrunc-unit>` is:\n\n  - A string other than ``week``, :expression:`$dateTrunc` uses\n    a reference date of ``2000-01-01T00:00:00.00Z``. For example, if\n    :ref:`binSize <dateTrunc-binSize>` is ``10`` and :ref:`unit\n    <dateTrunc-unit>` is ``year``, example time periods are:\n    \n    - ``2000-01-01T00:00:00.00Z``\n    - ``2010-01-01T00:00:00.00Z``\n    - ``2020-01-01T00:00:00.00Z``\n\n  - Equal to ``week``, :expression:`$dateTrunc` uses a reference\n    date that is set to the earliest first day of the week that is\n    greater than or equal to ``2000-01-01``. The first day is set using\n    :ref:`startOfWeek <dateTrunc-startOfWeek>` (the default is Sunday).\n\n- Returns the lower boundary of the time period that the :ref:`date\n  <dateTrunc-date>` is in. The boundary is returned as an\n  :term:`ISODate`. If the :ref:`binSize <dateTrunc-binSize>` field is\n  ``1``, :expression:`$dateTrunc` sets the least significant parts (as\n  determined by :ref:`unit <dateTrunc-unit>`) of the returned\n  :term:`ISODate` to ``0`` and keeps the rest of the :term:`ISODate` the\n  same.\n\nIf :ref:`unit <dateTrunc-unit>` is:\n\n- ``year``: :expression:`$dateTrunc` returns the :term:`ISODate` for the\n  start of January 1 for the year in :ref:`date <dateTrunc-date>`.\n\n- ``quarter``: :expression:`$dateTrunc` returns the :term:`ISODate` for\n  the start of the first day of the calendar quarter in :ref:`date\n  <dateTrunc-date>`.\n\n  The quarters are:\n    \n  - January to March\n  - April to June\n  - July to September\n  - October to December\n\n- ``month``: :expression:`$dateTrunc` returns the :term:`ISODate` for\n  the start of the first day of the month in :ref:`date\n  <dateTrunc-date>`.\n    \n- ``week``: :expression:`$dateTrunc` returns the :term:`ISODate` for the\n  start of the :ref:`startOfWeek <dateTrunc-startOfWeek>` day in\n  :ref:`date <dateTrunc-date>`. The default for :ref:`startOfWeek\n  <dateTrunc-startOfWeek>` is Sunday.\n\n- ``day``: :expression:`$dateTrunc` returns the :term:`ISODate` for the\n  start of the day in :ref:`date <dateTrunc-date>`.\n  \n- ``hour``: :expression:`$dateTrunc` returns the :term:`ISODate` for the\n  start of the hour in :ref:`date <dateTrunc-date>`.\n\n- ``minute``: :expression:`$dateTrunc` returns the :term:`ISODate` for\n  the start of the minute in :ref:`date <dateTrunc-date>`.\n\n- ``second``: :expression:`$dateTrunc` returns the :term:`ISODate`\n  for start of the second in :ref:`date <dateTrunc-date>`.\n\n``unit`` and ``startOfWeek`` Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf :ref:`unit <dateTrunc-unit>` is:\n\n- A string other than ``week``, :ref:`startOfWeek\n  <dateTrunc-startOfWeek>` is ignored.\n\n- Equal to ``week`` and :ref:`startOfWeek <dateTrunc-startOfWeek>` is:\n\n  - Specified: :expression:`$dateTrunc` uses :ref:`startOfWeek\n    <dateTrunc-startOfWeek>` as the first day of the week for the\n    calculation.\n\n  - Omitted: :expression:`$dateTrunc` uses Sunday as the start of the\n    week for the calculation.\n\nExamples\n--------\n\n.. include:: /includes/cakeSales-example-collection.rst\n\nThe ``cakeSales`` collection is used in the following examples.\n\nTruncate Order Dates in a ``$project`` Pipeline Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :expression:`$dateTrunc` in a :pipeline:`$project`\nstage to truncate the cake sales ``orderDate`` values to two weeks:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateTrunc.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 0,\n         orderDate: ISODate(\"2020-05-18T14:10:30.000Z\"),\n         truncatedOrderDate: ISODate(\"2020-05-11T07:00:00.000Z\")\n      },\n      {\n         _id: 1,\n         orderDate: ISODate(\"2021-03-20T11:30:05.000Z\"),\n         truncatedOrderDate: ISODate(\"2021-03-15T07:00:00.000Z\")\n      },\n      {\n         _id: 2,\n         orderDate: ISODate(\"2021-01-11T06:31:15.000Z\"),\n         truncatedOrderDate: ISODate(\"2021-01-04T08:00:00.000Z\")\n      },\n      {\n         _id: 3,\n         orderDate: ISODate(\"2020-02-08T13:13:23.000Z\"),\n         truncatedOrderDate: ISODate(\"2020-02-03T08:00:00.000Z\")\n      },\n      {\n         _id: 4,\n         orderDate: ISODate(\"2019-05-18T16:09:01.000Z\"),\n         truncatedOrderDate: ISODate(\"2019-05-13T07:00:00.000Z\")\n      },\n      {\n         _id: 5,\n         orderDate: ISODate(\"2019-01-08T06:12:03.000Z\"),\n         truncatedOrderDate: ISODate(\"2019-01-07T08:00:00.000Z\")\n      }\n   ]\n\nTruncate Order Dates and Obtain Quantity Sum in a ``$group`` Pipeline Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :expression:`$dateTrunc` in a :pipeline:`$group` stage\nto truncate the cake sales ``orderDate`` values to six months and\nreturn the sum of the ``quantity`` values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateTrunc.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: { truncatedOrderDate: ISODate(\"2020-01-01T00:00:00.000Z\") },\n         sumQuantity: 224\n      },\n      {\n         _id: { truncatedOrderDate: ISODate(\"2021-01-01T00:00:00.000Z\") },\n         sumQuantity: 285\n      },\n      {\n         _id: { truncatedOrderDate: ISODate(\"2019-01-01T00:00:00.000Z\") },\n         sumQuantity: 296\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dateTrunc.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: new Date(\"2016-01-01\") }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 7\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 14\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 7\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 6\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfMonth: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$dayOfMonth`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfMonth.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: new Date(\"2016-01-01\") }\n\n     - 6\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 3\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 7\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 6\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfWeek: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$dayOfWeek`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "   :emphasize-lines: 14\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: new Date(\"2016-01-01\") }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 7\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 226\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 311\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 310\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $dayOfYear: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$dayOfYear`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "   :emphasize-lines: 13\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/dayOfYear.txt"
  },
  {
    "code": "   :copyable: false\r\n\r\n   {\r\n     \"_id\" : ObjectId(\"5c50aec71c75c59232b3ede4\"),\r\n     \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090660\"),\r\n     \"angle_b\" : NumberDecimal(\"36.86989764584402129685561255909341\"),\r\n     \"angle_c\" : NumberDecimal(\"90\"),\r\n     \"angle_a_rad\" : NumberDecimal(\"0.9272952180016122324285124629224290\"),\r\n     \"angle_b_rad\" : NumberDecimal(\"0.6435011087932843868028092287173227\"),\r\n     \"angle_c_rad\" : NumberDecimal(\"1.570796326794896619231321691639752\")\r\n   }\r\n\r\nSince ``angle_a``, ``angle_b``, and ``angle_c`` are stored as \r\n:ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n:expression:`$degreesToRadians` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/degreesToRadians.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $denseRank: { } }\n\n:group:`$denseRank` does not accept any parameters.\n\n.. seealso::\n\n   :group:`$rank`\n\n.. _denseRank-behavior:\n\nBehavior\n--------\n\n.. include:: /includes/rank-and-denseRank-behavior.rst\n\nSee the example in\n:ref:`denseRank-duplicate-null-missing-values-example`.\n\nExamples\n--------\n\nDense Rank Partitions by an Integer Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$denseRank` in the\n:pipeline:`$setWindowFields` stage to output the ``quantity`` dense rank\nof the cake sales for each ``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/denseRank.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"denseRankQuantityForState\" : 1 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"denseRankQuantityForState\" : 3 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"denseRankQuantityForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"denseRankQuantityForState\" : 3 }\n\nDense Rank Partitions by a Date Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example shows how to use dates with :group:`$denseRank` in the\n:pipeline:`$setWindowFields` stage to output the ``orderDate`` dense\nrank of the cake sales for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/denseRank.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"denseRankOrderDateForState\" : 1 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"denseRankOrderDateForState\" : 2 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"denseRankOrderDateForState\" : 3 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"denseRankOrderDateForState\" : 1 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"denseRankOrderDateForState\" : 2 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"denseRankOrderDateForState\" : 3 }\n\n.. _denseRank-duplicate-null-missing-values-example:\n\nDense Rank for Duplicate, Null, and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/setWindowFields-duplicates-example-collection.rst\n\nThis example uses :group:`$denseRank` in the\n:pipeline:`$setWindowFields` stage to output the ``quantity`` dense rank\nfrom the ``cakeSalesWithDuplicates`` collection for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/denseRank.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"denseRankQuantityForState\" : 1 }\n   { \"_id\" : 9, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : 162, \"denseRankQuantityForState\" : 1 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"denseRankQuantityForState\" : 3 }\n   { \"_id\" : 10, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : null, \"denseRankQuantityForState\" : 4 }\n   { \"_id\" : 11, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"denseRankQuantityForState\" : 5 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"denseRankQuantityForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 6, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 41, \"quantity\" : 134, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 7, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-01T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 34, \"quantity\" : 134, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 8, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-02T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 40, \"quantity\" : 134, \"denseRankQuantityForState\" : 2 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"denseRankQuantityForState\" : 3 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/denseRank.txt"
  },
  {
    "code": "  :emphasize-lines: 8-10, 17-19\n  :copyable: false\n\n  [\n    {\n      _id: ObjectId(\"618c207c63056cfad0ca4309\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      timestamp: ISODate(\"2021-05-18T00:00:00.000Z\"),\n      temp: 12\n    },\n    { timestamp: ISODate(\"2021-05-18T01:00:00.000Z\") },\n    { timestamp: ISODate(\"2021-05-18T02:00:00.000Z\") },\n    { timestamp: ISODate(\"2021-05-18T03:00:00.000Z\") },\n    {\n      _id: ObjectId(\"618c207c63056cfad0ca430a\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      timestamp: ISODate(\"2021-05-18T04:00:00.000Z\"),\n      temp: 11\n    },\n    { timestamp: ISODate(\"2021-05-18T05:00:00.000Z\") },\n    { timestamp: ISODate(\"2021-05-18T06:00:00.000Z\") },\n    { timestamp: ISODate(\"2021-05-18T07:00:00.000Z\") },\n    {\n      _id: ObjectId(\"618c207c63056cfad0ca430b\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      timestamp: ISODate(\"2021-05-18T08:00:00.000Z\"),\n      temp: 11\n    }\n    {\n      _id: ObjectId(\"618c207c63056cfad0ca430c\"),\n      metadata: { sensorId: 5578, type: 'temperature' },\n      timestamp: ISODate(\"2021-05-18T12:00:00.000Z\"),\n      temp: 12\n    }\n  ]\n\n.. _densify-examples-partitions:\n\nDensifiction with Partitions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a ``coffee`` collection that contains data for two\nvarieties of coffee beans:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/densify.txt"
  },
  {
    "code": "   :emphasize-lines: 7\n\n   db.coffee.aggregate( [\n      {\n         $densify: {\n            field: \"altitude\",\n            partitionByFields: [ \"variety\" ],\n            range: {\n               bounds: \"full\",\n               step: 200\n            }\n         }\n      }\n   ] )\n\nThe example aggregation:\n\n- Partitions the documents by ``variety`` to create one grouping for\n  ``Arabica Typica`` and one for ``Gesha`` coffee.\n\n- Specifies a ``full`` range, meaning that the data is densified\n  across the full range of existing documents *for each partition*.\n\n- Specifies a ``step`` of ``200``, meaning new documents are created\n  at ``altitude`` intervals of ``200``.\n\nThe aggregation outputs the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/densify.txt"
  },
  {
    "code": "   :emphasize-lines: 14,21-24,31-32,40-43\n   :copyable: false\n\n   [\n      {\n        _id: ObjectId(\"618c031814fbe03334480475\"),\n        altitude: 600,\n        variety: 'Arabica Typica',\n        score: 68.3\n      },\n      {\n        _id: ObjectId(\"618c031814fbe03334480476\"),\n        altitude: 750,\n        variety: 'Arabica Typica',\n        score: 69.5\n      },\n      { variety: 'Arabica Typica', altitude: 800 },\n      {\n        _id: ObjectId(\"618c031814fbe03334480477\"),\n        altitude: 950,\n        variety: 'Arabica Typica',\n        score: 70.5\n      },\n      { variety: 'Gesha', altitude: 600 },\n      { variety: 'Gesha', altitude: 800 },\n      { variety: 'Gesha', altitude: 1000 },\n      { variety: 'Gesha', altitude: 1200 },\n      {\n        _id: ObjectId(\"618c031814fbe03334480478\"),\n        altitude: 1250,\n        variety: 'Gesha',\n        score: 88.15\n      },\n      { variety: 'Gesha', altitude: 1400 },\n      { variety: 'Gesha', altitude: 1600 },\n      {\n        _id: ObjectId(\"618c031814fbe03334480479\"),\n        altitude: 1700,\n        variety: 'Gesha',\n        score: 95.5,\n        price: 1029\n      },\n      { variety: 'Arabica Typica', altitude: 1000 },\n      { variety: 'Arabica Typica', altitude: 1200 },\n      { variety: 'Arabica Typica', altitude: 1400 },\n      { variety: 'Arabica Typica', altitude: 1600 }\n    ]\n\nThis image visualizes the documents created with :pipeline:`$densify`:\n\n.. figure:: /images/densification-full-range.png\n   :alt: State of the coffee collection after full-range densifiction\n   :figwidth: 700px\n\n.. include:: /includes/fact-densify-image-explanation.rst\n\nDensify Values within Each Partition\n````````````````````````````````````\n\nThis example uses :pipeline:`$densify` to only densify gaps in the\n``altitude`` field within each ``variety``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/densify.txt"
  },
  {
    "code": "   :emphasize-lines: 7\n\n   db.coffee.aggregate( [\n      {\n         $densify: {\n            field: \"altitude\",\n            partitionByFields: [ \"variety\" ],\n            range: {\n               bounds: \"partition\",\n               step: 200\n            }\n         }\n      }\n   ] )\n\nThe example aggregation:\n\n- Partitions the documents by ``variety`` to create one grouping for\n  ``Arabica Typica`` and one for ``Gesha`` coffee.\n\n- Specifies a ``partition`` range, meaning that the data is densified\n  within each partition.\n\n  - For the ``Arabica Typica`` partition, the range is ``600``-``950``.\n\n  - For the ``Gesha`` partition, the range is ``1250``-``1700``.\n\n- Specifies a ``step`` of ``200``, meaning new documents are created\n  at ``altitude`` intervals of ``200``.\n\nThe aggregation outputs the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/densify.txt"
  },
  {
    "code": "   :emphasize-lines: 14,27-28\n   :copyable: false\n\n   [\n      {\n        _id: ObjectId(\"618c031814fbe03334480475\"),\n        altitude: 600,\n        variety: 'Arabica Typica',\n        score: 68.3\n      },\n      {\n        _id: ObjectId(\"618c031814fbe03334480476\"),\n        altitude: 750,\n        variety: 'Arabica Typica',\n        score: 69.5\n      },\n      { variety: 'Arabica Typica', altitude: 800 },\n      {\n        _id: ObjectId(\"618c031814fbe03334480477\"),\n        altitude: 950,\n        variety: 'Arabica Typica',\n        score: 70.5\n      },\n      {\n        _id: ObjectId(\"618c031814fbe03334480478\"),\n        altitude: 1250,\n        variety: 'Gesha',\n        score: 88.15\n      },\n      { variety: 'Gesha', altitude: 1450 },\n      { variety: 'Gesha', altitude: 1650 },\n      {\n        _id: ObjectId(\"618c031814fbe03334480479\"),\n        altitude: 1700,\n        variety: 'Gesha',\n        score: 95.5,\n        price: 1029\n      }\n    ]\n\nThis image visualizes the documents created with :pipeline:`$densify`:\n\n.. figure:: /images/densification-by-partition.png\n   :alt: State of the coffee collection after partition range densification\n   :figwidth: 700px\n\n.. include:: /includes/fact-densify-image-explanation.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/densify.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $derivative: {\n         input: <expression>,\n         unit: <time unit>\n      }\n   } \n\n:group:`$derivative` takes a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - :ref:`input <derivative-input>`\n\n     - .. _derivative-input:\n     \n       Specifies the :ref:`expression <aggregation-expressions>` to\n       evaluate. The expression must evaluate to a number.\n\n   * - :ref:`unit <derivative-unit>`\n\n     - .. _derivative-unit:\n       \n       .. include:: /includes/outputUnit-behavior.rst\n\nBehavior\n--------\n\nYou must specify a :ref:`window <setWindowFields-window>` in the\n:pipeline:`$setWindowFields` stage when using :group:`$derivative`.\n\nExample\n-------\n\nCreate a ``deliveryFleet`` collection that contains odometer\nreadings for delivery trucks recorded at 30 second intervals:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/derivative.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : ObjectId(\"60cb8a7e833dfeadc8e6285c\"), \"truckID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:00Z\"), \"miles\" : 1295.63,\n     \"truckAverageSpeed\" : 63.60000000002401 }\n   { \"_id\" : ObjectId(\"60cb8a7e833dfeadc8e6285d\"), \"truckID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:30Z\"), \"miles\" : 1296.25,\n     \"truckAverageSpeed\" : 74.3999999999869 }\n   { \"_id\" : ObjectId(\"60cb8a7e833dfeadc8e6285e\"), \"truckID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:12:00Z\"), \"miles\" : 1296.76,\n     \"truckAverageSpeed\" : 61.199999999998916 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/derivative.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"city\" : \"New York\", \"workdays\" : 10 }\n   { \"_id\" : 2, \"city\" : \"Singapore\", \"workdays\" : 5 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/divide.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $documentNumber: { } }\n\n:group:`$documentNumber` does not accept any parameters.\n\nBehavior\n--------\n\n:group:`$documentNumber` includes documents that have a :ref:`sortBy\n<setWindowFields-sortBy>` field that is ``null`` or missing.\n\n:group:`$documentNumber`, :group:`$rank`, and :group:`$denseRank` return\nthe position of the documents based on the :ref:`sortBy\n<setWindowFields-sortBy>` field values.\n\n:group:`$documentNumber` differs from :group:`$rank` and\n:group:`$denseRank` in how documents with identical :ref:`sortBy\n<setWindowFields-sortBy>` field values in a :ref:`partition\n<setWindowFields-partitionBy>` are treated:\n\n- :group:`$rank` and :group:`$denseRank` return the same position (known\n  as the rank) for those documents.\n\n- :group:`$documentNumber` returns a unique position (known as the\n  document number) for those documents.\n\nSee the example in\n:ref:`documentNumber-duplicate-null-missing-values-example`.\n\nExamples\n--------\n\nDocument Number for Each State\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$documentNumber` in the\n:pipeline:`$setWindowFields` stage to output the cake sales document\nnumber for each ``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documentNumber.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"documentNumberForState\" : 1 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"documentNumberForState\" : 2 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"documentNumberForState\" : 3 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"documentNumberForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"documentNumberForState\" : 2 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"documentNumberForState\" : 3 }\n\n.. _documentNumber-duplicate-null-missing-values-example:\n\nDocument Number for Duplicate, Null, and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/setWindowFields-duplicates-example-collection.rst\n\nThis example uses :group:`$documentNumber` in the\n:pipeline:`$setWindowFields` stage to output the\n``cakeSalesWithDuplicates`` document number for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documentNumber.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"documentNumberForState\" : 1 }\n   { \"_id\" : 9, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : 162, \"documentNumberForState\" : 2 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"documentNumberForState\" : 3 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"documentNumberForState\" : 4 }\n   { \"_id\" : 10, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : null, \"documentNumberForState\" : 5 }\n   { \"_id\" : 11, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"documentNumberForState\" : 6 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"documentNumberForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"documentNumberForState\" : 2 }\n   { \"_id\" : 6, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 41, \"quantity\" : 134, \"documentNumberForState\" : 3 }\n   { \"_id\" : 7, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-01T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 34, \"quantity\" : 134, \"documentNumberForState\" : 4 }\n   { \"_id\" : 8, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-02T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 40, \"quantity\" : 134, \"documentNumberForState\" : 5 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"documentNumberForState\" : 6 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documentNumber.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.aggregate( \n      [\n         { $documents: [ { x: 10 }, { x: 2 }, { x: 5 } ] }, \n         { $bucketAuto: { groupBy: \"$x\", buckets: 4 } }\n      ]\n   )\n\nThe :ref:`aggregation expression <aggregation-expressions>` does not\nspecify a collection. It uses the input data in the highlighted\n:pipeline:`$documents` stage as input to the :pipeline:`$bucketAuto`\nstage.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documents.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: { min: 2, max: 5 }, count: 1 },\n     { _id: { min: 5, max: 10 }, count: 1 },\n     { _id: { min: 10, max: 10 }, count: 1 }\n   ]\n\n.. _documents-lookup-example:\n\nUse a ``$documents`` Stage in a ``$lookup`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCorrelate documents in a collection with other data using\n:pipeline:`$documents` to modify :pipeline:`$lookup` output.\n\nCreate the ``locations`` collection.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documents.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"618949d60f7bfd5f5689490d\"),\n         zip: 94301,\n         name: 'Palo Alto',\n         city_state: [ { zip_id: 94301, name: 'Palo Alto, CA' } ]\n      },\n      {\n         _id: ObjectId(\"618949d60f7bfd5f5689490e\"),\n         zip: 10019,\n         name: 'New York',\n         city_state: [ { zip_id: 10019, name: 'New York, NY' } ]\n      }\n   ]\n\n- The ``zip`` field corresponds to the ``zip_id`` field\n- The ``as`` parameter creates a new output field\n\nFor details on subqueries using this :pipeline:`$lookup` syntax, see\n:ref:`lookup-syntax-concise-correlated-subquery`.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/documents.txt"
  },
  {
    "code": "   :copyable: false\n\n   { item : \"abc1\", qty : 300, qtyEq250 : false }\n   { item : \"abc2\", qty : 200, qtyEq250 : false }\n   { item : \"xyz1\", qty : 250, qtyEq250 : true }\n   { item : \"VWZ1\", qty : 300, qtyEq250 : false }\n   { item : \"VWZ2\", qty : 180, qtyEq250 : false }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/eq.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"effectiveRate\" : 0.08328706767495864 }\n   { \"_id\" : 2, \"effectiveRate\" : 0.08599867343905654 }\n   { \"_id\" : 3, \"effectiveRate\" : 0.04341605637367807 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/exp.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $expMovingAvg: {\n         input: <input expression>,\n         N: <integer>,\n         alpha: <float>\n      }\n   } \n\n:group:`$expMovingAvg` takes a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - :ref:`input <expMovingAvg-input>`\n\n     - .. _expMovingAvg-input:\n     \n       Specifies the :ref:`expression <aggregation-expressions>` to\n       evaluate. Non-numeric expressions are ignored.\n\n   * - :ref:`N <expMovingAvg-N>`\n\n     - .. _expMovingAvg-N:\n       \n       An ``integer`` that specifies the number of historical documents\n       that have a significant mathematical weight in the exponential\n       moving average calculation, with the most recent documents\n       contributing the most weight.\n       \n       .. include:: /includes/expMovingAvg-N-or-alpha.rst\n\n       The ``N`` value is used in this formula to calculate the current\n       result based on the :ref:`expression <aggregation-expressions>`\n       value from the current document being read and the previous\n       result of the calculation:\n       \n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/expMovingAvg.txt"
  },
  {
    "code": "          :copyable: false\n\n          current result = current value * ( 2 / ( N + 1 ) ) +\n                           previous result * ( 1 - ( 2 / ( N + 1 ) ) )\n\n   * - :ref:`alpha <expMovingAvg-alpha>`\n\n     - .. _expMovingAvg-alpha:\n     \n       A ``double`` that specifies the exponential decay value to use in\n       the exponential moving average calculation. A higher ``alpha``\n       value assigns a lower mathematical significance to previous\n       results from the calculation.\n       \n       .. include:: /includes/expMovingAvg-N-or-alpha.rst\n\n       The ``alpha`` value is used in this formula to calculate the\n       current result based on the :ref:`expression\n       <aggregation-expressions>` value from the current document being\n       read and the previous result of the calculation:\n       \n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/expMovingAvg.txt"
  },
  {
    "code": "          :copyable: false\n\n          current result = current value * alpha +\n                           previous result * ( 1 - alpha )\n\nBehavior\n--------\n\n.. include:: /includes/expMovingAvg-N-or-alpha.rst\n\n:group:`$expMovingAvg` ignores non-numeric values, ``null`` values, and\nmissing fields.\n\nExamples\n--------\n\nCreate a ``stockPrices`` collection that contains prices for stocks\nnamed ``\"MDB\"`` and ``\"MSFT\"``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/expMovingAvg.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286b\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-18T20:00:00Z\"), \"price\" : 13,\n     \"expMovingAvgForStock\" : 13 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286c\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-19T20:00:00Z\"), \"price\" : 15.4,\n     \"expMovingAvgForStock\" : 14.6 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286d\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-20T20:00:00Z\"), \"price\" : 12,\n     \"expMovingAvgForStock\" : 12.866666666666667 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286e\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-21T20:00:00Z\"), \"price\" : 11.7,\n     \"expMovingAvgForStock\" : 12.088888888888889 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286f\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-18T20:00:00Z\"), \"price\" : 82,\n     \"expMovingAvgForStock\" : 82 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62870\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-19T20:00:00Z\"), \"price\" : 94,\n     \"expMovingAvgForStock\" : 90 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62871\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-20T20:00:00Z\"), \"price\" : 112,\n     \"expMovingAvgForStock\" : 104.66666666666667 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62872\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-21T20:00:00Z\"), \"price\" : 97.3,\n     \"expMovingAvgForStock\" : 99.75555555555556 }\n\nExponential Moving Average Using ``alpha``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$expMovingAvg` in the\n:pipeline:`$setWindowFields` stage to output the exponential moving\naverage for the stock prices using :ref:`alpha <expMovingAvg-alpha>` set\nto ``0.75``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/expMovingAvg.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286b\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-18T20:00:00Z\"), \"price\" : 13,\n     \"expMovingAvgForStock\" : 13 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286c\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-19T20:00:00Z\"), \"price\" : 15.4,\n     \"expMovingAvgForStock\" : 14.8 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286d\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-20T20:00:00Z\"), \"price\" : 12,\n     \"expMovingAvgForStock\" : 12.7 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286e\"), \"stock\" : \"MDB\",\n     \"date\" : ISODate(\"2020-05-21T20:00:00Z\"), \"price\" : 11.7,\n     \"expMovingAvgForStock\" : 11.95 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e6286f\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-18T20:00:00Z\"), \"price\" : 82,\n     \"expMovingAvgForStock\" : 82 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62870\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-19T20:00:00Z\"), \"price\" : 94,\n     \"expMovingAvgForStock\" : 91 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62871\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-20T20:00:00Z\"), \"price\" : 112,\n     \"expMovingAvgForStock\" : 106.75 }\n   { \"_id\" : ObjectId(\"60d11fef833dfeadc8e62872\"), \"stock\" : \"MSFT\",\n     \"date\" : ISODate(\"2020-05-21T20:00:00Z\"), \"price\" : 97.3,\n     \"expMovingAvgForStock\" : 99.6625 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/expMovingAvg.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 14,20,21\n\n   [\n      {\n        _id: ObjectId(\"6202df9f394d47411658b51e\"),\n        date: ISODate(\"2022-02-02T00:00:00.000Z\"),\n        bootsSold: 10,\n        sandalsSold: 20,\n        sneakersSold: 12\n      },\n      {\n        _id: ObjectId(\"6202df9f394d47411658b51f\"),\n        date: ISODate(\"2022-02-03T00:00:00.000Z\"),\n        bootsSold: 7,\n        sneakersSold: 18,\n        sandalsSold: 0\n      },\n      {\n        _id: ObjectId(\"6202df9f394d47411658b520\"),\n        date: ISODate(\"2022-02-04T00:00:00.000Z\"),\n        sneakersSold: 5,\n        bootsSold: 0,\n        sandalsSold: 0\n      }\n   ]\n\n.. _fill-example-linear:\n\nFill Missing Field Values with Linear Interpolation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a ``stock`` collection that contains tracks a single company's\nstock price at hourly intervals:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/fill.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 10,20,25\n\n   [\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5e9\"),\n         time: ISODate(\"2021-03-08T09:00:00.000Z\"),\n         price: 500\n      },\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5ea\"),\n         time: ISODate(\"2021-03-08T10:00:00.000Z\"),\n         price: 507.5\n      },\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5eb\"),\n         time: ISODate(\"2021-03-08T11:00:00.000Z\"),\n         price: 515\n      },\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5ec\"),\n         time: ISODate(\"2021-03-08T12:00:00.000Z\"),\n         price: 505\n      },\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5ed\"),\n         time: ISODate(\"2021-03-08T13:00:00.000Z\"),\n         price: 495\n      },\n      {\n         _id: ObjectId(\"620ad41c394d47411658b5ee\"),\n         time: ISODate(\"2021-03-08T14:00:00.000Z\"),\n         price: 485\n      }\n   ]\n\n.. _fill-example-locf:\n\nFill Missing Field Values Based on the Last Observed Value\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a ``restaurantReviews`` collection that contains review scores\nfor a single restaurant over time:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/fill.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 15,20,30\n\n   [\n      {\n        _id: ObjectId(\"62040bc9394d47411658b553\"),\n        date: ISODate(\"2021-03-08T00:00:00.000Z\"),\n        score: 90\n      },\n      {\n        _id: ObjectId(\"62040bc9394d47411658b554\"),\n        date: ISODate(\"2021-03-09T00:00:00.000Z\"),\n        score: 92\n      },\n      {\n        _id: ObjectId(\"62040bc9394d47411658b555\"),\n        date: ISODate(\"2021-03-10T00:00:00.000Z\"),\n        score: 92\n      },\n      {\n        _id: ObjectId(\"62040bc9394d47411658b556\"),\n        date: ISODate(\"2021-03-11T00:00:00.000Z\"),\n        score: 92\n      },\n      {\n        _id: ObjectId(\"62040bc9394d47411658b557\"),\n        date: ISODate(\"2021-03-12T00:00:00.000Z\"),\n        score: 85\n      },\n      {\n        _id: ObjectId(\"62040bc9394d47411658b558\"),\n        date: ISODate(\"2021-03-13T00:00:00.000Z\"),\n        score: 85\n      }\n   ]\n\n.. _fill-example-partition:\n\nFill Data for Distinct Partitions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the :ref:`previous example <fill-example-locf>` with restaurant\nreviews but instead of tracking a single restaurant, the collection now\ncontains reviews for multiple restaurants.\n\nCreate a collection named ``restaurantReviewsMultiple`` and populate the\ncollection with these documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/fill.txt"
  },
  {
    "code": "   :emphasize-lines: 18,36,48\n   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"620559f4394d47411658b58f\"),\n       date: ISODate(\"2021-03-08T00:00:00.000Z\"),\n       restaurant: \"Joe's Pizza\",\n       score: 90\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b591\"),\n       date: ISODate(\"2021-03-09T00:00:00.000Z\"),\n       restaurant: \"Joe's Pizza\",\n       score: 92\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b593\"),\n       date: ISODate(\"2021-03-10T00:00:00.000Z\"),\n       restaurant: \"Joe's Pizza\",\n       score: 92\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b595\"),\n       date: ISODate(\"2021-03-11T00:00:00.000Z\"),\n       restaurant: \"Joe's Pizza\",\n       score: 93\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b590\"),\n       date: ISODate(\"2021-03-08T00:00:00.000Z\"),\n       restaurant: \"Sally's Deli\",\n       score: 75\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b592\"),\n       date: ISODate(\"2021-03-09T00:00:00.000Z\"),\n       restaurant: \"Sally's Deli\",\n       score: 75\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b594\"),\n       date: ISODate(\"2021-03-10T00:00:00.000Z\"),\n       restaurant: \"Sally's Deli\",\n       score: 68\n     },\n     {\n       _id: ObjectId(\"620559f4394d47411658b596\"),\n       date: ISODate(\"2021-03-11T00:00:00.000Z\"),\n       restaurant: \"Sally's Deli\",\n       score: 68\n     }\n   ]\n\nIndicate if a Field was Populated Using ``$fill``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you populate missing values, the output does not indicate if a\nvalue was populated with the ``$fill`` operator or if the value existed\nin the document originally. To distinguish between filled and\npreexisting values, you can use a :pipeline:`$set` stage before\n``$fill`` and set a new field based on whether the value exists.\n\nFor example, create a ``restaurantReviews`` collection that contains\nreview scores for a restaurant over time:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/fill.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f15\"),\n         date: ISODate(\"2021-03-08T00:00:00.000Z\"),\n         score: 90,\n         valueExisted: true\n      },\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f16\"),\n         date: ISODate(\"2021-03-09T00:00:00.000Z\"),\n         score: 92,\n         valueExisted: true\n      },\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f17\"),\n         date: ISODate(\"2021-03-10T00:00:00.000Z\"),\n         valueExisted: false,\n         score: 92\n      },\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f18\"),\n         date: ISODate(\"2021-03-11T00:00:00.000Z\"),\n         valueExisted: false,\n         score: 92\n      },\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f19\"),\n         date: ISODate(\"2021-03-12T00:00:00.000Z\"),\n         score: 85,\n         valueExisted: true\n      },\n      {\n         _id: ObjectId(\"63595116b1fac2ee2e957f1a\"),\n         date: ISODate(\"2021-03-13T00:00:00.000Z\"),\n         valueExisted: false,\n         score: 85\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/fill.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $filter: {\n               input: [ 1, \"a\", 2, null, 3.1, NumberLong(4), \"5\" ],\n               as: \"num\",\n               cond: { $isNumber: \"$$num\" }\n            }\n          }\n\n     - ``[ 1, 2, 3.1, NumberLong(4) ]``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 6\n\n          {\n            $filter: {\n               input: [ 1, \"a\", 2, null, 3.1, NumberLong(4), \"5\" ],\n               as: \"num\",\n               cond: { $isNumber: \"$$num\" },\n               limit: 2\n            }\n          }\n\n     - ``[ 1, 2 ]``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 6\n\n          {\n            $filter: {\n               input: [ 1, \"a\", 2, null, 3.1, NumberLong(4), \"5\" ],\n               as: \"num\",\n               cond: { $isNumber: \"$$num\" },\n               limit: { $add: [ 0, 1 ] }\n            }\n          }\n\n     - ``[ 1 ]``\n\nExamples\n--------\n\nA collection ``sales`` has the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.sales.aggregate( [\n         {\n            $project: {\n               items: {\n                  $filter: {\n                     input: \"$items\", \n                     as: \"item\", \n                     cond: { $gte: [ \"$$item.price\", 100 ] } \n                  }\n               }\n            }\n         }\n      ] )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: 0,\n            items: [ { item_id: 2, quantity: 1, price: 240, name: 'briefcase' } ]\n         },\n         {\n            _id: 1,\n            items: [\n               { item_id: 23, quantity: 3, price: 110, name: 'notebook' },\n               { item_id: 38, quantity: 1, price: 300, name: 'printer' }\n            ]\n         },\n         { _id: 2, items: [] }\n      ]\n\nUse the limit Field\n~~~~~~~~~~~~~~~~~~~\n\nThis example uses the ``sales`` collection from the previous example.\n\nThe example uses the ``limit`` field to specify the number of matching\nelements returned in each ``items`` array. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n      :emphasize-lines: 9\n\n      db.sales.aggregate( [\n         {\n            $project: {\n               items: {\n                  $filter: {\n                     input: \"$items\",\n                     as: \"item\", \n                     cond: { $gte: [ \"$$item.price\", 100 ] }, \n                     limit: 1 \n                  }\n               }\n            }\n         }\n      ] )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: 0,\n            items: [ { item_id: 2, quantity: 1, price: 240, name: 'briefcase' } ]\n         },\n         {\n            _id: 1,\n            items: [ { item_id: 23, quantity: 3, price: 110, name: 'notebook' } ]\n         },\n         { _id: 2, items: [] }\n      ]\n\nlimit Greater than Possible Matches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses the ``sales`` collection from the previous example.\n\nThe example uses a ``limit`` field value that is larger than the\npossible number of matching elements that can be returned. In this case,\n``limit`` does not affect the query results and returns all documents\nmatching the ``$gte`` filter criteria.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n      :emphasize-lines: 9\n\n      db.sales.aggregate( [\n         {\n            $project: {\n               items: {\n                  $filter: {\n                     input: \"$items\",\n                     as: \"item\", \n                     cond: { $gte: [ \"$$item.price\", 100] },\n                     limit: 5\n                  }\n               }\n            }\n         }\n      ] )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: 0,\n            items: [ { item_id: 2, quantity: 1, price: 240, name: 'briefcase' } ]\n         },\n         {\n            _id: 1,\n            items: [\n               { item_id: 23, quantity: 3, price: 110, name: 'notebook' },\n               { item_id: 38, quantity: 1, price: 300, name: 'printer' }\n            ]\n         },\n         { _id: 2, items: [] }\n      ]\n\nFilter Based on String Equality Match\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses the ``sales`` collection from the previous example.\n\nThe following aggregation filters for ``items`` that have a ``name``\nvalue of ``pen``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.sales.aggregate( [\n         {\n            $project: {\n               items: {\n                  $filter: {\n                     input: \"$items\",\n                     as: \"item\",\n                     cond: { $eq: [ \"$$item.name\", \"pen\"] }\n                  }\n               }\n            }\n         }\n      ] )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: 0,\n            items: [ { item_id: 43, quantity: 2, price: 10, name: 'pen' } ]\n         },\n         {\n            _id: 1,\n            items: [ { item_id: 103, quantity: 4, price: 5, name: 'pen' } ]\n         },\n         { _id: 2, items: [] }\n      ]\n\nFilter Based on Regular Expression Match\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses the ``sales`` collection from the previous example.\n\nThe following aggregation uses :expression:`$regexMatch` to filter for\n``items`` that have a ``name`` value that starts with ``p``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.sales.aggregate( [\n         {\n            $project: {\n               items: {\n                  $filter: {\n                     input: \"$items\",\n                     as: \"item\",\n                     cond: {\n                        $regexMatch: { input: \"$$item.name\", regex: /^p/ }\n                     } \n                  }\n               }\n            }\n         }\n      ] )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            _id: 0,\n            items: [ { item_id: 43, quantity: 2, price: 10, name: 'pen' } ]\n         },\n         {\n            _id: 1,\n            items: [\n               { item_id: 103, quantity: 4, price: 5, name: 'pen' },\n               { item_id: 38, quantity: 1, price: 300, name: 'printer' }\n            ]\n         },\n         {\n            _id: 2,\n            items: [ { item_id: 4, quantity: 1, price: 23, name: 'paper' } ]\n         }\n      ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/filter.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"firstOrderTypeForState\" : \"strawberry\" }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"firstOrderTypeForState\" : \"strawberry\" }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"firstOrderTypeForState\" : \"strawberry\" }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"firstOrderTypeForState\" : \"strawberry\" }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"firstOrderTypeForState\" : \"strawberry\" }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"firstOrderTypeForState\" : \"strawberry\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/first.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $firstN:\n         {\n            input: <expression>,\n            n: <expression>\n         }\n   }\n\n- ``input`` specifies the field(s) from the document to take the first \n  ``n`` of. Input can be any expression.\n- ``n`` has to be a positive integral expression that is either a \n  constant or depends on the ``_id`` value for :pipeline:`$group`. \n  For details see :ref:`group key example<first-n-with-group-key>`.\n\nBehavior\n~~~~~~~~\n\nNull and Missing Values\n```````````````````````\n\n- ``$firstN`` does not filter out null values.\n- ``$firstN`` converts missing values to null.\n\nConsider the following aggregation that returns the first five documents\nfrom a group:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            firstFiveScores:\n               { \n                  $firstN:\n                     {    \n                        input: \"$score\",\n                        n: 5\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``firstFiveScores`` field is specified using ``input : \"$score\"`` \n  and returned as an array. \n- Since there is no sort criteria the first 5 ``score``\n  fields are returned.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         firstFiveScores: [ 1, 2, 3, null, null ]\n      }\n   ]\n\nComparison of ``$firstN`` and ``$topN`` Accumulators\n````````````````````````````````````````````````````\n\nBoth ``$firstN`` and ``$topN`` accumulators can accomplish similar \nresults.\n\nIn general:\n\n- If the documents coming into :pipeline:`$group` are already ordered,\n  you should use ``$firstN``.\n- If you're sorting and selecting the top ``n`` elements then you can use \n  ``$topN`` to accomplish both tasks with one accumulator.\n- ``$firstN`` can be used as an aggregation expression, ``$topN`` cannot.\n\nRestrictions\n~~~~~~~~~~~~\n\nWindow Function and Aggregation Expression Support\n``````````````````````````````````````````````````\n\n``$firstN`` is supported as an\n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$firstN`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nExamples\n~~~~~~~~\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         firstThreeScores: [ [ 'PlayerA', 31 ], [ 'PlayerB', 33 ], [ 'PlayerC', 99 ] ]\n      }\n   ]\n\nFinding the First Three Player Scores Across Multiple Games\n```````````````````````````````````````````````````````````\n\nYou can use the ``$firstN`` accumulator to find the first ``n``\ninput fields in each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerA', 31 ], [ 'PlayerB', 33 ], [ 'PlayerC', 99 ] ]\n      },\n      {\n         _id: 'G2',\n         playerId: [ [ 'PlayerA', 10 ], [ 'PlayerB', 14 ], [ 'PlayerC', 66 ] ]\n      }\n   ]\n\nUsing ``$sort`` With ``$firstN``\n````````````````````````````````\n\nUsing a ``$sort`` stage earlier in the pipeline can influence the \nresults of the ``$firstN`` accumulator.\n\nIn this example:\n\n- ``{$sort : { score : -1 } }`` sorts the highest scores to the back of \n  each group.\n- ``firstN`` returns the three highest scores from front of each group.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G2',\n         playerId: [ [ 'PlayerD', 80 ], [ 'PlayerC', 66 ], [ 'PlayerB', 14 ] ]\n      },\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerC', 99 ], [ 'PlayerB', 33 ], [ 'PlayerA', 31 ] ]\n      }\n   ]\n\n.. _first-n-with-group-key: \n\nComputing ``n`` Based on the Group Key for ``$group``\n`````````````````````````````````````````````````````\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $firstN:\n                     {\n                        input: \"$score\",\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Uses ``$group`` to group the results by ``gameId``.\n- Specifies the fields that input for ``$firstN`` with\n  ``input : \"$score\"``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: 'G1' }, gamescores: [ 31, 33, 99 ] },\n      { _id: { gameId: 'G2' }, gamescores: [ 10 ] }\n   ]\n\n\n.. _firstN-aggregation-expression:\n\nUsing ``$firstN`` as an Aggregation Expression\n``````````````````````````````````````````````\n\nYou can also use ``$firstN`` as an aggregation expression.\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal document that contains\n  an array of values.\n- ``$project`` is used to return the output of ``$firstN``.\n- ``_id`` is omited from the output with ``_id : 0``.\n- ``$firstN`` uses the input array of ``[10, 20, 30, 40]``.\n- The first three elements of the array are returned for the input \n  document.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.aggregate( [ \n      {\n         $documents: [\n            { array: [10, 20, 30, 40] } ] \n      },\n      { $project: { \n         firstThreeElements:{\n                              $firstN: \n                              { \n                                 input: \"$array\", \n                                 n: 3 \n                              }\n                           }\n                  } \n      }\n   ] )\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { firstThreeElements: [ 10, 20, 30 ] }\n   ]\n\nArray Operator\n--------------\n\n.. expression:: $firstN \n\n\nSyntax\n~~~~~~\n\nWhen used as an array operator, ``$firstN`` has the following syntax:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.games.insertMany([\n       { \"playerId\" : 1, \"score\" : [ 1, 2, 3 ] },\n       { \"playerId\" : 2, \"score\" : [ 12, 90, 7, 89, 8 ] },\n       { \"playerId\" : 3, \"score\" : [ null ] },\n       { \"playerId\" : 4, \"score\" : [ ] },\n       { \"playerId\" : 5, \"score\" : [ 1293, null, 3489, 9 ]},\n       { \"playerId\" : 6, \"score\" : [ \"12.1\", 2, NumberLong(\"2090845886852\"), 23 ]}\n   ])\n\nThe following example uses the :expression:`$firstN` operator to retrieve the \nfirst three scores for each player. The scores are returned in the new field \n``firstScores`` created by :pipeline:`$addFields`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.games.aggregate([\n      { $addFields: { firstScores: { $firstN: { n: 3, input: \"$score\" } } } }\n   ])\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4, 9, 14, 19, 24, 29\n\n   [{\n     \"playerId\": 1,\n     \"score\": [ 1, 2, 3 ],\n     \"firstScores\": [ 1, 2, 3 ]\n   },\n   {\n     \"playerId\": 2,\n     \"score\": [ 12, 90, 7, 89, 8 ],\n     \"firstScores\": [ 12, 90, 7 ]\n   },\n   {\n     \"playerId\": 3,\n     \"score\": [ null ],\n     \"firstScores\": [ null ]\n   },\n   {\n     \"playerId\": 4,\n     \"score\": [ ],\n     \"firstScores\": [ ]\n   },\n   { \n     \"playerId\": 5,\n     \"score\": [ 1293, null, 3489, 9 ],\n     \"firstScores\": [ 1293, null, 3489 ]\n   },\n   {\n     \"playerId\": 6,\n     \"score\": [ \"12.1\", 2, NumberLong(\"2090845886852\"), 23 ],\n     \"firstScores\": [ \"12.1\", 2, NumberLong(\"2090845886852\") ]\n    }]\n\n.. seealso::\n\n   - :expression:`$lastN`\n   - :expression:`$sortArray`\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/firstN.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"Miss Cheevous\", \"scores\" : [ 10, 5, 10 ], \"isFound\" : false, \"message\" : \"Hello Miss Cheevous.  Your total score is 25.\" }\n   { \"_id\" : 2, \"name\" : \"Miss Ann Thrope\", \"scores\" : [ 10, 10, 10 ], \"isFound\" : true, \"message\" : \"Hello Miss Ann Thrope.  Your total score is 30.\" }\n   { \"_id\" : 3, \"name\" : \"Mrs. Eppie Delta \", \"scores\" : [ 9, 8, 8 ], \"isFound\" : false, \"message\" : \"Hello Mrs. Eppie Delta .  Your total score is 25.\" }\n\n.. _function-example-where-alternative:\n\nExample 2: Alternative to ``$where``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note:: Aggregation Alternatives Preferred over ``$where``\n\n   The :query:`$expr` operator allows the use of \n   :ref:`aggregation expressions <aggregation-expressions>` within the\n   query language. And the :expression:`$function` and :group:`$accumulator` \n   allows users to define custom aggregation expressions in JavaScript if the \n   provided pipeline operators cannot fulfill your application's needs.\n   \n   Given the available aggregation operators:\n\n   - The use of :query:`$expr` with aggregation operators that do not\n     use JavaScript (i.e. non-:expression:`$function` and\n     non-:group:`$accumulator` operators) is faster than\n     :query:`$where` because it does not execute JavaScript and should\n     be preferred if possible.\n\n   - However, if you must create custom expressions,\n     :expression:`$function` is preferred over :query:`$where`.\n\nAs an alternative to a query that uses the :query:`$where` operator,\nyou can use :query:`$expr` and :expression:`$function`. For example,\nconsider the following :query:`$where` example.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/function.txt"
  },
  {
    "code": "   :copyable: false\n   \n   { \"_id\" : 2, \"name\" : \"Miss Ann Thrope\", \"scores\" : [ 10, 10, 10 ] }\n\nThe example can be expressed using :query:`$expr` and :expression:`$function`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/function.txt"
  },
  {
    "code": "   :emphasize-lines: 6,16\n\n   db.places.aggregate(\n   [\n      {\n         \"$geoNear\":\n         {\n            \"near\":\"$$pt\",\n            \"distanceField\":\"distance\",\n            \"maxDistance\":2,\n            \"query\":{\"category\":\"Parks\"},\n            \"includeLocs\":\"dist.location\",\n            \"spherical\":true\n         }\n      }\n   ],\n   {\n      \"let\":{ \"pt\": [ -73.99279, 40.719296 ] }\n   }\n   )\n\nThe aggregation returns all documents with: \n\n- A location at most 2 meters from the point defined in  the ``let`` variable\n- A ``category`` equal to ``Parks``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/geoNear.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: ObjectId(\"61715cf9b0c1d171bb498fd7\"),\n      name: 'Sara D. Roosevelt Park',\n      location: { type: 'Point', coordinates: [ -73.9928, 40.7193 ] },\n      category: 'Parks',\n      distance: 1.4957325341976439e-7,\n      dist: { location: { type: 'Point', coordinates: [ -73.9928, 40.7193 ] } }\n   },\n   {\n      _id: ObjectId(\"61715cf9b0c1d171bb498fd6\"),\n      name: 'Central Park',\n      location: { type: 'Point', coordinates: [ -73.97, 40.77 ] },\n      category: 'Parks',\n      distance: 0.0009348548688841822,\n      dist: { location: { type: 'Point', coordinates: [ -73.97, 40.77 ] } }\n   }\n\n.. _geoNear_bounded_let_example:\n\n$geoNear with Bound ``let`` Option\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``let`` option can bind a variable which can be used in a \n$geoNear query.\n\nIn this example, :pipeline:`$lookup` uses:\n\n- ``let`` to define ``$pt``.\n- :pipeline:`$geoNear` in the ``pipeline``.\n- ``$pt`` to define ``near`` in the :pipeline:`$geoNear` pipeline stage.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/geoNear.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   db.places.aggregate( [\n      {\n         $lookup: {\n            from: \"places\",\n            let: { pt: \"$location\" },\n            pipeline: [\n               {\n                  $geoNear: {\n                     near: \"$$pt\",\n                     distanceField: \"distance\"\n                  }\n               }\n            ],\n            as: \"joinedField\"\n         }\n      },\n      { \n         $match: { name: \"Sara D. Roosevelt Park\" }\n      }\n   ] );\n\nThe aggregation returns a document with: \n\n- The 'Sara D. Roosevelt Park' document as the main document.\n- Every document in the places collection as subDocuments using the \n  ``$pt`` variable for calculating distance.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/geoNear.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: ObjectId(\"61715cf9b0c1d171bb498fd7\"),\n         name: 'Sara D. Roosevelt Park',\n         location: { type: 'Point', coordinates: [ -73.9928, 40.7193 ] },\n         category: 'Parks',\n         joinedField: [\n            {\n            _id: ObjectId(\"61715cf9b0c1d171bb498fd7\"),\n            name: 'Sara D. Roosevelt Park',\n            location: { type: 'Point', coordinates: [ -73.9928, 40.7193 ] },\n            category: 'Parks',\n            distance: 0\n            },\n            {\n            _id: ObjectId(\"61715cf9b0c1d171bb498fd6\"),\n            name: 'Central Park',\n            location: { type: 'Point', coordinates: [ -73.97, 40.77 ] },\n            category: 'Parks',\n            distance: 5962.448255234964\n            },\n            {\n            _id: ObjectId(\"61715cfab0c1d171bb498fd8\"),\n            name: 'Polo Grounds',\n            location: { type: 'Point', coordinates: [ -73.9375, 40.8303 ] },\n            category: 'Stadiums',\n            distance: 13206.535424939102\n            }\n         ]\n   }\n\n.. _pipeline-geoNear-key-param-example:\n\nSpecify Which Geospatial Index to Use\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``places`` collection that has a :ref:`2dsphere\n<2dsphere-index>` index on the ``location`` field and a\n:ref:`2d <2d-index>` index on the ``legacy`` field.\n\nA document in the ``places`` collection resembles the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/geoNear.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 2, item: 'winter coat', qty: 200, 'price.usd': 499.99 },\n     { _id: 4, item: 'leather boots', qty: 300, 'price.usd': 249.99 }\n   ]\n\nQuery Fields that Start with a Dollar Sign (``$``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/getField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 2, item: 'winter coat', qty: 200, '$price': 499.99 },\n     { _id: 4, item: 'leather boots', qty: 300, '$price': 249.99 }\n   ]\n\nQuery a Field in a Sub-document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/getField.txt"
  },
  {
    "code": "   :emphasize-lines: 6-8\n\n   db.inventory.aggregate( [\n      { $match: \n         { $expr:\n            { $lte:\n               [\n                  { $getField: \n                     { field: { $literal: \"$small\" },\n                       input: \"$quantity\"\n                     }\n                  },\n                  20\n               ]\n            }\n         }\n      }\n   ] )\n\nUse these operators to query the collection:\n\n- The :expression:`$lte` operator finds values less than or equal to\n  20.\n- :expression:`$getField` requires explicit ``field`` and ``input``\n  parameters because the ``$small`` field is part of a\n  sub-document.\n- :expression:`$getField` uses :expression:`$literal` to evaluate\n  \"``$small``\", because the field name has a dollar sign (``$``) in it.\n\nExample output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/getField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: 3,\n       item: 'sun dress',\n       'price.usd': 199.99,\n       quantity: { '$large': 45, '$medium': 40, '$small': 5 }\n     }\n   ]\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/getField.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : null, \"count\" : 8 }\n\nThis aggregation operation is equivalent to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"abc\" }\n   { \"_id\" : \"jkl\" }\n   { \"_id\" : \"def\" }\n   { \"_id\" : \"xyz\" }\n\n.. note::\n\n   When you use ``$group`` to retrieve distinct values in a sharded\n   collection, if the operation results in a ``DISTINCT_SCAN``, the\n   result might contain :term:`orphaned documents <orphaned document>`.\n\n   The only semantically correct pipeline that is impacted is\n   effectively a logical equivalent of a :dbcommand:`distinct` command,\n   where there is a ``$group`` stage at or near the beginning of the\n   pipeline and the ``$group`` is not preceded by a :pipeline:`$sort`\n   stage.\n\n   For example, ``$group`` operations of the following form can result\n   in a ``DISTINCT_SCAN``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "      :copyable: false\n\n      { $group : { _id : \"$<field>\" } }\n\n   For more information on behavior for retrieving distinct values, see\n   the :ref:`distinct command behavior <distinct-command-behavior>`.\n\n   To see whether your operation results in a ``DISTINCT_SCAN``, check\n   your operation's :ref:`explain results <explain-results>`.\n\nGroup by Item Having\n~~~~~~~~~~~~~~~~~~~~\n\nThe following aggregation operation groups documents by the ``item``\nfield, calculating the total sale amount per item and returning only\nthe items with total sale amount greater than or equal to 100:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"abc\", \"totalSaleAmount\" : Decimal128(\"170\") }\n   { \"_id\" : \"xyz\", \"totalSaleAmount\" : Decimal128(\"150\") }\n   { \"_id\" : \"def\", \"totalSaleAmount\" : Decimal128(\"112.5\") }\n\nThis aggregation operation is equivalent to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \n      \"_id\" : \"2014-04-04\", \n      \"totalSaleAmount\" : Decimal128(\"200\"), \n      \"averageQuantity\" : 15, \"count\" : 2 \n   }\n   { \n      \"_id\" : \"2014-03-15\", \n      \"totalSaleAmount\" : Decimal128(\"50\"), \n      \"averageQuantity\" : 10, \"count\" : 1 \n   }\n   { \n      \"_id\" : \"2014-03-01\", \n      \"totalSaleAmount\" : Decimal128(\"40\"), \n      \"averageQuantity\" : 1.5, \"count\" : 2 \n   }\n\nThis aggregation operation is equivalent to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \n     \"_id\" : null, \n     \"totalSaleAmount\" : Decimal128(\"452.5\"), \n     \"averageQuantity\" : 7.875, \n     \"count\" : 8 \n   }\n\nThis aggregation operation is equivalent to the following SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"Homer\", \n       \"books\" : \n         [ \n            { \"_id\" : 7000, \"title\" : \"The Odyssey\", \"author\" : \"Homer\", \"copies\" : 10 }, \n            { \"_id\" : 7020, \"title\" : \"Iliad\", \"author\" : \"Homer\", \"copies\" : 10 }\n         ]\n      },\n      { \"_id\" : \"Dante\", \n        \"books\" : \n          [ \n            { \"_id\" : 8751, \"title\" : \"The Banquet\", \"author\" : \"Dante\", \"copies\" : 2 },\n            { \"_id\" : 8752, \"title\" : \"Divine Comedy\", \"author\" : \"Dante\", \"copies\" : 1 },\n            { \"_id\" : 8645, \"title\" : \"Eclogues\", \"author\" : \"Dante\", \"copies\" : 2 }\n          ]\n      }\n\nSecond Stage:\n  :pipeline:`$addFields` adds a field to the output containing\n  the total copies of books for each author.\n\n  .. note::\n\n     The resulting documents must not exceed the\n     :limit:`BSON Document Size` limit of 16 megabytes.\n   \n  The operation returns the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/group.txt"
  },
  {
    "code": "   :copyable: false\n\n   { item : \"abc1\", qty : 300, qtyGt250 : true }\n   { item : \"abc2\", qty : 200, qtyGt250 : false }\n   { item : \"xyz1\", qty : 250, qtyGt250 : false }\n   { item : \"VWZ1\", qty : 300, qtyGt250 : true }\n   { item : \"VWZ2\", qty : 180, qtyGt250 : false }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/gt.txt"
  },
  {
    "code": "   :copyable: false\n\n   { item : \"abc1\", qty : 300, qtyGte250 : true }\n   { item : \"abc2\", qty : 200, qtyGte250 : false }\n   { item : \"xyz1\", qty : 250, qtyGte250 : true }\n   { item : \"VWZ1\", qty : 300, qtyGte250 : true }\n   { item : \"VWZ2\", qty : 180, qtyGte250 : false }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/gte.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: new Date(\"2016-01-01T12:00:00Z\") }\n\n     - 12\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: { date: new Date(\"Jan 7, 2003Z\") } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: {\n              date: new Date(\"August 14, 2011Z\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 19\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: ISODate(\"2017-10-19T00:00:00Z\") }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: {\n              date: ISODate(\"2017-10-19T00:00:00Z\"),\n              timezone: \"+0530\"\n          } }\n\n     - 5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $hour: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$hour`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "   :emphasize-lines: 9\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/hour.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $ifNull: [\n         <input-expression-1>,\n         ...\n         <input-expression-n>,\n         <replacement-expression-if-null>\n      ]\n   }\n\nExamples\n--------\n\nThis ``inventory`` collection is used in the examples:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/ifNull.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"buggy\", \"description\" : \"toy car\" }\n   { \"_id\" : 2, \"item\" : \"bicycle\", \"description\" : \"Unspecified\" }\n   { \"_id\" : 3, \"item\" : \"flag\", \"description\" : \"Unspecified\" }\n\nMultiple Input Expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\nThe following example uses :expression:`$ifNull` to return:\n\n- ``description`` if it is non-null.\n\n- ``quantity`` if ``description`` is null or missing and ``quantity``\n  is non-null.\n\n- ``\"Unspecified\"`` string if ``description`` and ``quantity`` are both\n  null or missing.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/ifNull.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"buggy\", \"value\" : \"toy car\" }\n   { \"_id\" : 2, \"item\" : \"bicycle\", \"value\" : 200 }\n   { \"_id\" : 3, \"item\" : \"flag\", \"value\" : \"Unspecified\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/ifNull.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 0, index: -1 },\n      { _id: 1, index: 1 },\n      { _id: 2, index: 1 },\n      { _id: 3, index: 2 },\n      { _id: 4, index: 0 },\n      { _id: 5, index: null },\n      { _id: 6, index: null }\n   ]\n\n.. seealso::\n\n   - :expression:`$indexOfBytes`\n   - :expression:`$indexOfCP`\n   - :expression:`$in`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/indexOfArray.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         name: 'type_1_item_1',\n         key: { type: 1, item: 1 },\n         host: 'examplehost.local:27018',\n         accesses: { ops: Long(\"1\"), since: ISODate(\"2024-05-02T15:07:21.420Z\") },\n         shard: \"shardA\",\n         spec: { v: 2, key: { type: 1, item: 1 }, name: 'type_1_item_1' }\n      },\n      {\n         name: 'item_1_quantity_1',\n         key: { item: 1, quantity: 1 },\n         host: 'examplehost.local:27018',\n         accesses: { ops: Long(\"1\"), since: ISODate(\"2024-05-02T15:07:21.254Z\") },\n         shard: \"shardA\",\n         spec: { v: 2, key: { item: 1, quantity: 1 }, name: 'item_1_quantity_1' }\n      },\n      {\n         name: '_id_',\n         key: { _id: 1 },\n         host: 'examplehost.local:27018',\n         accesses: { ops: Long(\"0\"), since: ISODate(\"2024-05-02T15:07:13.274Z\") },\n         shard: \"shardA\",\n         spec: { v: 2, key: { _id: 1 }, name: '_id_' }\n      },\n      {\n         name: 'price_1',\n         key: { price: 1 },\n         host: 'examplehost.local:27018',\n         accesses: { ops: Long(\"0\"), since: ISODate(\"2024-05-02T15:07:54.847Z\") },\n         shard: \"shardA\",\n         spec: {\n            v: 2,\n            key: { price: 1 },\n            name: 'price_1',\n            partialFilterExpression: { type: 'apparel' }\n         }\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/indexStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $integral: {\n         input: <expression>,\n         unit: <time unit>\n      }\n   } \n\n:group:`$integral` takes a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - :ref:`input <integral-input>`\n\n     - .. _integral-input:\n     \n       Specifies the :ref:`expression <aggregation-expressions>` to\n       evaluate. You must provide an expression that returns a number.\n\n   * - :ref:`unit <integral-unit>`\n\n     - .. _integral-unit:\n\n       .. include:: /includes/outputUnit-behavior.rst\n\nBehavior\n--------\n\nIf you omit a :ref:`window <setWindowFields-window>`, a default\nwindow with unbounded upper and lower limits is used.\n\nExample\n-------\n\nCreate a ``powerConsumption`` collection that contains electrical power\nusage in kilowatts measured by meter devices at 30 second intervals:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/integral.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62863\"), \"powerMeterID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:10:30Z\"), \"kilowatts\" : 2.95,\n     \"powerMeterKilowattHours\" : 0 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62864\"), \"powerMeterID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:00Z\"), \"kilowatts\" : 2.7,\n     \"powerMeterKilowattHours\" : 0.023541666666666666 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62865\"), \"powerMeterID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:30Z\"), \"kilowatts\" : 2.6,\n     \"powerMeterKilowattHours\" : 0.045625 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62866\"), \"powerMeterID\" : \"1\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:12:00Z\"), \"kilowatts\" : 2.98,\n     \"powerMeterKilowattHours\" : 0.068875 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62867\"), \"powerMeterID\" : \"2\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:10:30Z\"), \"kilowatts\" : 2.5,\n     \"powerMeterKilowattHours\" : 0 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62868\"), \"powerMeterID\" : \"2\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:00Z\"), \"kilowatts\" : 2.25,\n     \"powerMeterKilowattHours\" : 0.019791666666666666 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e62869\"), \"powerMeterID\" : \"2\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:11:30Z\"), \"kilowatts\" : 2.75,\n     \"powerMeterKilowattHours\" : 0.040625 }\n   { \"_id\" : ObjectId(\"60cbdc3f833dfeadc8e6286a\"), \"powerMeterID\" : \"2\",\n     \"timeStamp\" : ISODate(\"2020-05-18T14:12:00Z\"), \"kilowatts\" : 2.82,\n     \"powerMeterKilowattHours\" : 0.06383333333333334 }\n\n.. seealso::\n\n   .. include:: /includes/fact-timeseries-example-aggregation-book.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/integral.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, items : [ \"chocolate\", \"butter\", \"apples\" ] }\n   { _id : 2, items : \"One or more fields is not an array.\" }\n   { _id : 3, items : [ \"pears\", \"pecans\", \"cherries\" ] }\n   { _id : 4, items : [ \"ice cream\" ] }\n\n.. seealso::\n\n   - :expression:`$cond`\n   - :expression:`$concatArrays`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isArray.txt"
  },
  {
    "code": "   :copyable: false \n\n   { \"_id\" : 1, \"reading\" : NumberDecimal(\"26.0000000000000\"), \"isNum \" : true, \"type\" : \"decimal\" }\n   { \"_id\" : 2, \"reading\" : NumberLong(25), \"isNum \" : true, \"type\" : \"long\" }\n   { \"_id\" : 3, \"reading\" : 24, \"isNum \" : true, \"type\" : \"int\" }\n   { \"_id\" : 4, \"reading\" : 24, \"isNum \" : true, \"type\" : \"double\" }\n   { \"_id\" : 5, \"reading\" : \"24\", \"isNum \" : false, \"type\" : \"string\" }\n   { \"_id\" : 6, \"reading\" : [ NumberDecimal(\"26.0000000000000\") ], \"isNum \" : false, \"type\" : \"array\" }\n\nConditionally Modify Fields using $isNumber\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``grades`` collection contains data on student grades. The ``grade``\nfield may either store a string letter grade *or* a numeric point value.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isNumber.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 457864153, \"GPA\" : 3.5 }\n   { \"_id\" : 978451637, \"GPA\" : 3 }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isNumber.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: new Date(\"2016-01-01\") }\n\n     - 5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 2\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 7\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 6\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 5\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoDayOfWeek: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$isoDayOfWeek`` cannot take a string as an argument.\n\nExample\n-------\n\nA collection called ``birthdays`` contains the following documents:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoDayOfWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: { date: new Date(\"Jan 4, 2016\") } }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: new Date(\"2016-01-01\") }\n\n     - 53\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 32\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: ISODate(\"1998-11-02T00:00:00Z\") }\n\n     - 45\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: {\n              date: ISODate(\"1998-11-02T00:00:00Z\"),\n              timezone: \"-0500\"\n          } }\n\n     - 44\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeek: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$isoWeek`` cannot take a string as an argument.\n\nExample\n-------\n\nA collection called ``deliveries`` contains the following documents:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { city: \"Boston\", weekNumber: 43 },\n      { city: \"Detroit\", weekNumber: 33 }\n   ]\n\n.. seealso::\n\n   - :doc:`/reference/operator/aggregation/isoDayOfWeek`\n   - :doc:`/reference/operator/aggregation/isoWeekYear`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeek.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: new Date(\"2015-05-26\") }\n\n     - 2015\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 2003\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: ISODate(\"2017-01-02T00:00:00Z\") }\n\n     - 2017\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: {\n              date: ISODate(\"2017-01-02T00:00:00Z\"),\n              timezone: \"-0500\"\n          } }\n\n     - 2016\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: {\n              date: new Date(\"April 08, 2024\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 2024\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $isoWeekYear: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$isoWeekYear`` cannot take a string as an argument.\n\nExample\n-------\n\nA collection called ``anniversaries`` contains the following documents:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/isoWeekYear.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"lastOrderTypeForState\" : \"vanilla\" }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"lastOrderTypeForState\" : \"vanilla\" }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"lastOrderTypeForState\" : \"vanilla\" }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"lastOrderTypeForState\" : \"chocolate\" }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"lastOrderTypeForState\" : \"chocolate\" }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"lastOrderTypeForState\" : \"chocolate\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/last.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $lastN:\n         {\n            input: <expression>,\n            n: <expression>\n         }\n   }\n\n- ``input`` specifies the field(s) from the document to take the last \n  ``n`` of. Input can be any expression.\n- ``n`` has to be a positive integral expression that is either a \n  constant or depends on the ``_id`` value for :pipeline:`$group`.\n  For details see :ref:`group key example <last-n-with-group-key>`.\n\nBehavior\n~~~~~~~~\n\nNull and Missing Values\n```````````````````````\n\n- ``$lastN`` does not filter out null values.\n- ``$lastN`` converts missing values to null.\n\nConsider the following aggregation that returns the last five documents\nfrom a group:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            lastFiveScores:\n               { \n                  $lastN:\n                     {    \n                        input: \"$score\",\n                        n: 5\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``lastFiveScores`` field is specified using ``input : \"$score\"`` \n  and returned as an array.\n- Since there is no sort criteria the last 5 ``score``\n  fields are returned.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         lastFiveScores: [ 1, 2, 3, null, null ]\n      }\n   ]\n\nComparison of ``$lastN`` and ``$bottomN``\n`````````````````````````````````````````\n\nBoth ``$lastN`` and ``$bottomN`` accumulators can accomplish similar \nresults.\n\nIn general:\n\n- If the documents coming into :pipeline:`$group` are already ordered,\n  you should use ``$lastN``.\n- If you're sorting and selecting the bottom ``n`` elements then you can \n  use ``$bottomN`` to accomplish both tasks with one accumulator.\n- ``$lastN`` can be used as an aggregation expression, ``$bottomN`` cannot.\n\nRestrictions\n~~~~~~~~~~~~\n\nWindow Function and Aggregation Expression Support\n``````````````````````````````````````````````````\n\n``$lastN`` is supported as an \n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$lastN`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nExamples\n~~~~~~~~\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         lastThreeScores: [ [ \"PlayerB\", 33 ], [ \"PlayerC\", 99 ], [ \"PlayerD\", 1 ] ]\n      }\n   ]\n\nFinding the Last Three Player Scores Across Multiple Games\n``````````````````````````````````````````````````````````\n\nYou can use the ``$lastN`` accumulator to find the last ``n``\ninput fields in each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G2',\n         playerId: [ [ 'PlayerB', 14 ], [ 'PlayerC', 66 ], [ 'PlayerD', 80 ] ]\n      },\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerB', 33 ], [ 'PlayerC', 99 ], [ 'PlayerD', 1 ] ]\n      }\n   ]\n\nUsing ``$sort`` With ``$lastN``\n```````````````````````````````\n\nUsing a ``$sort`` stage earlier in the pipeline can influence the \nresults of the ``$lastN`` accumulator.\n\nIn this example:\n\n- ``{$sort : { score : -1 } }`` sorts the highest scores to the back of \n  each group.\n- ``lastN`` returns the three lowest scores from the back of each group.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G2',\n         playerId: [ [ 'PlayerC', 66 ], [ 'PlayerB', 14 ], [ 'PlayerA', 10 ] ]\n      },\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerB', 33 ], [ 'PlayerA', 31 ], [ 'PlayerD', 1 ] ]\n      }\n   ]\n\n.. _last-n-with-group-key:\n\nComputing ``n`` Based on the Group Key for ``$group``\n`````````````````````````````````````````````````````\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $lastN:\n                     {\n                        input: \"$score\",\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Uses ``$group`` to group the results by ``gameId``.\n- Specifies the fields that input for ``$lastN`` with\n  ``input : \"$score\"``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: \"G1\" }, gamescores: [ 33, 99, 1 ] },\n      { _id: { gameId: \"G2\" }, gamescores: [ 80 ] }\n   ]\n\n.. _lastN-aggregation-expression:\n\nUsing ``$lastN`` as an Aggregation Expression\n`````````````````````````````````````````````\n\nYou can also use ``$lastN`` as an aggregation expression.\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal document that contains\n  an array of values.\n- ``$project`` is used to return the output of ``$lastN``.\n- ``_id`` is omited from the output with ``_id : 0``.\n- ``$lastN`` uses the input array of ``[10, 20, 30, 40]``.\n- The last three elements of the array are returned for the input \n  document.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.aggregate( [ \n      {\n         $documents: [\n            { array: [10, 20, 30, 40] } ] \n      },\n      { $project: { \n         lastThreeElements:{\n                              $lastN: \n                              { \n                                 input: \"$array\", \n                                 n: 3 \n                              }\n                           }\n                  } \n      }\n   ] )\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { lastThreeElements: [ 20, 30, 40 ] } ]\n\n\nArray Operator\n--------------\n\n.. expression:: $lastN \n\nSyntax\n~~~~~~\n\n:expression:`$lastN` has the following syntax:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.games.insertMany([\n       { \"playerId\" : 1, \"score\" : [ 1, 2, 3 ] },\n       { \"playerId\" : 2, \"score\" : [ 12, 90, 7, 89, 8 ] },\n       { \"playerId\" : 3, \"score\" : [ null ] },\n       { \"playerId\" : 4, \"score\" : [ ] },\n       { \"playerId\" : 5, \"score\" : [ 1293, null, 3489, 9 ]},\n       { \"playerId\" : 6, \"score\" : [ \"12.1\", 2, NumberLong(\"2090845886852\"), 23 ]}\n   ])\n\nThe following example uses the :expression:`$lastN` operator to retrieve the \nlast three scores for each player. The scores are returned in the new field \n``lastScores`` created by :pipeline:`$addFields`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.games.aggregate([\n      { $addFields: { lastScores: { $lastN: { n: 3, input: \"$score\" } } } }\n   ])\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4, 9, 14, 19, 24, 29\n\n   [{\n     \"playerId\": 1,\n     \"score\": [ 1, 2, 3 ],\n     \"lastScores\": [ 1, 2, 3 ]\n   },\n   {\n     \"playerId\": 2,\n     \"score\": [ 12, 90, 7, 89, 8 ],\n     \"lastScores\": [ 7, 89, 8 ]\n   },\n   {\n     \"playerId\": 3,\n     \"score\": [ null ],\n     \"lastScores\": [ null ]\n   },\n   {\n     \"playerId\": 4,\n     \"score\": [ ],\n     \"lastScores\": [ ]\n   },\n   { \n     \"playerId\": 5,\n     \"score\": [ 1293, null, 3489, 9 ],\n     \"lastScores\": [ null, 3489, 9 ]\n   },\n   {\n     \"playerId\": 6,\n     \"score\": [ \"12.1\", 2, NumberLong(\"2090845886852\"), 23 ],\n     \"lastScores\": [ 2, NumberLong(\"2090845886852\"), 23 ]\n    }]\n\n\n.. seealso::\n\n   - :expression:`$firstN` \n   - :expression:`$sortArray`\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lastN.txt"
  },
  {
    "code": "        :copyable: false\n\n        { index: 0, value: 0 },\n        { index: 1, value: 2.5 },\n        { index: 2, value: 5 },\n        { index: 3, value: 7.5 },\n        { index: 4, value: 10 }\n\n     For a complete example, see :ref:`linearFill-example`.\n\n- ``null`` values that are not preceded and followed by non-``null``\n  values remain ``null``.\n\nComparison of :pipeline:`$fill` and :group:`$linearFill`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo fill missing field values using\n:wikipedia:`linear interpolation <Linear_interpolation>`, you can use:\n\n- The :pipeline:`$fill` stage  with ``{ method: \"linear\" }``.\n\n  When you use the :pipeline:`$fill` stage, the field you specify in the\n  output is the same field used as the source data. See\n  :ref:`fill-example-linear`.\n\n- The :group:`$linearFill` operator inside of a\n  :pipeline:`$setWindowFields` stage.\n\n  When you use the :group:`$linearFill` operator, you can set values\n  for a different field than the field used as the source data. See\n  :ref:`linearFill-example-multiple-methods`.\n\n.. _linearFill-example:\n\nExamples\n--------\n\nThe examples on this page use a ``stock`` collection that contains\ntracks a single company's stock price at hourly intervals:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/linearFill.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 10,20,25\n\n   [\n      {\n         _id: ObjectId(\"620ad555394d47411658b5ef\"),\n         time: ISODate(\"2021-03-08T09:00:00.000Z\"),\n         price: 500\n      },\n      {\n         _id: ObjectId(\"620ad555394d47411658b5f0\"),\n         time: ISODate(\"2021-03-08T10:00:00.000Z\"),\n         price: 507.5\n      },\n      {\n         _id: ObjectId(\"620ad555394d47411658b5f1\"),\n         time: ISODate(\"2021-03-08T11:00:00.000Z\"),\n         price: 515\n      },\n      {\n         _id: ObjectId(\"620ad555394d47411658b5f2\"),\n         time: ISODate(\"2021-03-08T12:00:00.000Z\"),\n         price: 505\n      },\n      {\n         _id: ObjectId(\"620ad555394d47411658b5f3\"),\n         time: ISODate(\"2021-03-08T13:00:00.000Z\"),\n         price: 495\n      },\n      {\n         _id: ObjectId(\"620ad555394d47411658b5f4\"),\n         time: ISODate(\"2021-03-08T14:00:00.000Z\"),\n         price: 485\n      }\n   ]\n\n.. _linearFill-example-multiple-methods:\n\nUse Multiple Fill Methods in a Single Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/example-multiple-fill-methods.rst\n\nRestrictions\n------------\n\n- To use :group:`$linearFill`, you must use the :ref:`sortBy\n  <setWindowFields-sortBy>` field to sort your data.\n\n- When using :group:`$linearFill` window function,\n  :pipeline:`$setWindowFields` returns an error if there are any\n  repeated values in the :ref:`sortBy <setWindowFields-sortBy>` field\n  in a single :ref:`partition <setWindowFields-partitionBy>`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/linearFill.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: <uuid>,  \n      ns: \"<database>.<collection>\",\n      collectionUuid: <collUUID>,\n      cmdName: <find|aggregate|count|distinct>,\n      cmd: {\n        filter: <object>,\n        collation: <object>,\n        let: <object>\n      },\n      expireAt: <date>\n   }\n\n\n.. list-table::\n   :header-rows: 1\n\n   * - Field Name\n     - Type\n     - Description\n\n   * - ``_id``\n     - UUID\n     - Sample ID for the query.\n\n   * - ``ns``\n     - string\n     - Namespace of the sampled collection.\n\n   * - ``collectionUuid``\n     - UUID\n     - ID of the sampled collection.\n   \n   * - ``cmdName``\n     - string\n     - Name of the sampled command. Can be one of:\n\n       - ``\"find\"``\n       - ``\"aggregate\"``\n       - ``\"count\"``\n       - ``\"distinct\"``\n\n   * - ``cmd.filter``\n     - object\n     - Filter the command ran with, if applicable.\n\n   * - ``cmd.collation``\n     - object\n     - Collation the command ran with, if applicable.\n\n   * - ``cmd.let``\n     - object\n     - Custom variables the command ran with, if applicable.\n\n   * - ``expireAt``\n     - date\n     - Date that the sample expires.\n\nWrite Queries\n~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/listSampledQueries.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: <uuid>,\n      ns: \"<database>.<collection>\",\n      collectionUuid: <collUUID>,\n      cmdName: <update|delete|findAndModify>,\n      cmd: <object>,\n      expireAt: <date>\n   }\n\n.. list-table::\n   :header-rows: 1\n\n   * - Field Name\n     - Type\n     - Description\n\n   * - ``_id``\n     - UUID\n     - Sample ID for the query.\n\n   * - ``ns``\n     - string\n     - Namespace of the sampled collection.\n\n   * - ``collectionUuid``\n     - UUID\n     - ID of the sampled collection.\n   \n   * - ``cmdName``\n     - string\n     - Name of the sampled command. Can be one of:\n\n       - ``\"update\"``\n       - ``\"delete\"``\n       - ``\"findAndModify\"``\n\n   * - ``cmd``\n     - object\n     - Command object\n\n   * - ``expireAt``\n     - date\n     - Date that the sample expires.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/listSampledQueries.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"costsOneDollar\" : false }\n   { \"_id\" : 2, \"costsOneDollar\" : false }\n   { \"_id\" : 3, \"costsOneDollar\" : true }\n\nProject a New Field with Value ``1``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :pipeline:`$project` stage uses the expression ``<field>: 1`` to\ninclude the ``<field>`` in the output. The following example uses the\n:expression:`$literal` to return a new field set to the value of ``1``.\n\nA ``books`` collection has the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/literal.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"title\" : \"Dracula\", \"editionNumber\" : 1 }\n   { \"_id\" : 2, \"title\" : \"The Little Prince\", \"editionNumber\" : 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/literal.txt"
  },
  {
    "code": "   :emphasize-lines: 7-8\n\n   db.stock.aggregate( [\n      {\n         $setWindowFields: {\n           sortBy: { time: 1 },\n           output: {\n              price: { $locf: \"$price\" }\n           }\n         }\n       }\n   ] )\n\nIn the example:\n\n- ``sortBy: { time: 1 }`` :ref:`sorts\n  <setWindowFields-sortBy>` the documents in each partition by\n  ``time`` in ascending order (``1``), so the earliest\n  ``time`` is first.\n\n- For documents where the ``price`` field is missing, the :group:`$locf`\n  operator sets the ``price`` to the last-observed value in the\n  sequence.\n\nExample output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/locf.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 10,20,25\n\n   [\n     {\n       _id: ObjectId(\"62169b65394d47411658b5f5\"),\n       time: ISODate(\"2021-03-08T09:00:00.000Z\"),\n       price: 500\n     },\n     {\n       _id: ObjectId(\"62169b65394d47411658b5f6\"),\n       time: ISODate(\"2021-03-08T10:00:00.000Z\"),\n       price: 500\n     },\n     {\n       _id: ObjectId(\"62169b65394d47411658b5f7\"),\n       time: ISODate(\"2021-03-08T11:00:00.000Z\"),\n       price: 515\n     },\n     {\n       _id: ObjectId(\"62169b65394d47411658b5f8\"),\n       time: ISODate(\"2021-03-08T12:00:00.000Z\"),\n       price: 515\n     },\n     {\n       _id: ObjectId(\"62169b65394d47411658b5f9\"),\n       time: ISODate(\"2021-03-08T13:00:00.000Z\"),\n       price: 515\n     },\n     {\n       _id: ObjectId(\"62169b65394d47411658b5fa\"),\n       time: ISODate(\"2021-03-08T14:00:00.000Z\"),\n       price: 485\n     }\n   ]\n\n.. _locf-example-multiple-methods:\n\nUse Multiple Fill Methods in a Single Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/example-multiple-fill-methods.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/locf.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"bitsNeeded\" : 3 }\n   { \"_id\" : 2, \"bitsNeeded\" : 2 }\n   { \"_id\" : 3, \"bitsNeeded\" : 5 }\n   { \"_id\" : 4, \"bitsNeeded\" : 4 }\n\n.. seealso::\n\n   - :expression:`$log10`\n   - :expression:`$ln`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/log.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, (\n      SELECT ARRAY_AGG(*)\n      FROM <collection to join>\n      WHERE <foreignField> = <collection.localField>\n   ) AS <output array field>\n   FROM collection;\n\n.. note::\n\n   The SQL statements on this page are included for comparison to the\n   MongoDB aggregation pipeline syntax. The SQL statements aren't\n   runnable.\n\nFor MongoDB examples, see these pages:\n\n- :ref:`lookup-single-equality-example`\n- :ref:`unwind-example`\n- :ref:`lookup-mergeObjects`\n\n.. _lookup-syntax-let-pipeline:\n\nJoin Conditions and Subqueries on a Joined Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMongoDB supports:\n\n- Executing a pipeline on a joined collection.\n\n- Multiple join conditions.\n\n- Correlated and uncorrelated subqueries.\n\nIn MongoDB, a correlated subquery is a :ref:`pipeline\n<lookup-join-pipeline>` in a :pipeline:`$lookup` stage that references\ndocument fields from a joined collection. An uncorrelated subquery does\nnot reference joined fields.\n\n.. note::\n\n   .. include:: /includes/uncorrelated-subquery.rst\n\nMongoDB correlated subqueries are comparable to SQL correlated\nsubqueries, where the inner query references outer query values. An\nSQL uncorrelated subquery does not reference outer query values.\n\nMongoDB 5.0 also supports :ref:`concise correlated subqueries\n<lookup-syntax-concise-correlated-subquery>`.\n\nTo perform correlated and uncorrelated subqueries with two collections,\nand perform other join conditions besides a single equality match, use\nthis :pipeline:`$lookup` syntax:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $lookup:\n         {\n            from: <joined collection>,\n            let: { <var_1>: <expression>, …, <var_n>: <expression> },\n            pipeline: [ <pipeline to run on joined collection> ],\n            as: <output array field>\n         }\n   }\n\nThe :pipeline:`$lookup` stage accepts a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Field\n     - Description\n\n   * - :ref:`from <lookup-join-from>`\n\n     - .. _lookup-join-from:\n     \n       Specifies the collection in the *same* database to perform the\n       join operation.\n\n       .. include:: /includes/lookup-from.rst\n\n       Starting in MongoDB 5.1, the ``from`` collection can be sharded.\n\n   * - :ref:`let <lookup-join-let>`\n\n     - .. _lookup-join-let:\n     \n       Optional. Specifies variables to use in the :ref:`pipeline\n       <lookup-join-pipeline>` stages. Use the variable expressions to\n       access the fields from the joined collection's documents that are\n       input to the ``pipeline``.\n\n       .. include:: /includes/fact-let-variable-access-note.rst\n\n   * - :ref:`pipeline <lookup-join-pipeline>`\n\n     - .. _lookup-join-pipeline:\n     \n       Specifies the ``pipeline`` to run on the joined collection. The\n       ``pipeline`` determines the resulting documents from the joined\n       collection. To return all documents, specify an empty\n       ``pipeline`` ``[]``.\n\n       The ``pipeline`` cannot include the :pipeline:`$out` stage or the\n       :pipeline:`$merge` stage. Starting in v6.0, the ``pipeline`` \n       can contain the :atlas:`Atlas Search </atlas-search>` \n       :pipeline:`$search` stage as the first stage inside the \n       pipeline. To learn more, see :ref:`fts-lookup-behavior`.\n\n       The ``pipeline`` cannot directly access the joined document\n       fields. Instead, define variables for the joined document fields\n       using the :ref:`let <lookup-join-let>` option and then reference\n       the variables in the ``pipeline`` stages.\n\n       .. include:: /includes/fact-let-variable-access-note.rst\n \n   * - :ref:`as <lookup-join-as>`\n\n     - .. _lookup-join-as:\n     \n       Specifies the name of the new array field to add to the joined\n       documents. The new array field contains the matching documents\n       from the joined collection. If the specified name already exists\n       in the joined document, the existing field is overwritten.\n\nThe operation corresponds to this pseudo-SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, <output array field>\n   FROM collection\n   WHERE <output array field> IN (\n      SELECT <documents as determined from the pipeline>\n      FROM <collection to join>\n      WHERE <pipeline>\n   );\n\nSee the following examples:\n\n- :ref:`lookup-multiple-joins`\n- :ref:`lookup-uncorrelated-subquery`\n\n.. _lookup-syntax-concise-correlated-subquery:\n\nCorrelated Subqueries Using Concise Syntax\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\nStarting in MongoDB 5.0, you can use a concise syntax for a correlated\nsubquery. Correlated subqueries reference document fields from a joined\n\"foreign\" collection  *and* the \"local\" collection on which the\n:method:`~db.collection.aggregate()` method was run.\n\nThe following new concise syntax removes the requirement for an equality\nmatch on the foreign and local fields inside of an :query:`$expr`\noperator:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $lookup:\n         {\n            from: <foreign collection>,\n            localField: <field from local collection's documents>,\n            foreignField: <field from foreign collection's documents>,\n            let: { <var_1>: <expression>, …, <var_n>: <expression> },\n            pipeline: [ <pipeline to run> ],\n            as: <output array field>\n         }\n   }\n\nThe :pipeline:`$lookup` accepts a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 20 80\n\n   * - Field\n     - Description\n\n   * - :ref:`from <lookup-concise-correlated-subquery-from>`\n\n     - .. _lookup-concise-correlated-subquery-from:\n     \n       Specifies the foreign collection in the *same* database to join\n       to the local collection.\n\n       .. include:: /includes/lookup-from.rst\n       \n       Starting in MongoDB 5.1, the ``from`` collection can be sharded.\n\n   * - :ref:`localField\n       <lookup-concise-correlated-subquery-localField>`\n\n     - .. _lookup-concise-correlated-subquery-localField:\n     \n       Specifies the local documents' ``localField`` to perform an\n       equality match with the foreign documents' ``foreignField``.\n       \n       If a local document does not contain a ``localField`` value, the\n       :pipeline:`$lookup` uses a ``null`` value for the match.\n\n   * - :ref:`foreignField\n       <lookup-concise-correlated-subquery-foreignField>`\n\n     - .. _lookup-concise-correlated-subquery-foreignField:\n     \n       Specifies the foreign documents' ``foreignField`` to perform an\n       equality match with the local documents' ``localField``.\n       \n       If a foreign document does not contain a ``foreignField`` value,\n       the :pipeline:`$lookup` uses a ``null`` value for the match.\n\n   * - :ref:`let <lookup-concise-correlated-subquery-let>`\n\n     - .. _lookup-concise-correlated-subquery-let:\n     \n       Optional. Specifies the variables to use in the :ref:`pipeline\n       <lookup-concise-correlated-subquery-pipeline>` stages. Use the\n       variable expressions to access the document fields that are input\n       to the ``pipeline``.\n\n       .. include:: /includes/fact-let-variable-access-note.rst\n\n   * - :ref:`pipeline <lookup-concise-correlated-subquery-pipeline>`\n\n     - .. _lookup-concise-correlated-subquery-pipeline:\n     \n       Specifies the ``pipeline`` to run on the foreign collection. The\n       ``pipeline`` returns documents from the foreign collection. To\n       return all documents, specify an empty ``pipeline`` ``[]``.\n\n       The ``pipeline`` cannot include the :pipeline:`$out` or\n       :pipeline:`$merge` stages. Starting in v6.0, the ``pipeline`` \n       can contain the :atlas:`Atlas Search </atlas-search>` \n       :pipeline:`$search` stage as the first stage inside the \n       pipeline. To learn more, see :ref:`fts-lookup-behavior`.\n\n       The ``pipeline`` cannot directly access the document fields.\n       Instead, define variables for the document fields using the\n       :ref:`let <lookup-concise-correlated-subquery-let>` option and\n       then reference the variables in the ``pipeline`` stages.\n\n       .. include:: /includes/fact-let-variable-access-note.rst\n \n   * - :ref:`as <lookup-concise-correlated-subquery-as>`\n\n     - .. _lookup-concise-correlated-subquery-as:\n     \n       Specifies the name of the new array field to add to the foreign\n       documents. The new array field contains the matching documents\n       from the foreign collection. If the specified name already exists\n       in the foreign document, the existing field is overwritten.\n\nThe operation corresponds to this pseudo-SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, <output array field>\n   FROM localCollection\n   WHERE <output array field> IN (\n      SELECT <documents as determined from the pipeline>\n      FROM <foreignCollection>\n      WHERE <foreignCollection.foreignField> = <localCollection.localField>\n      AND <pipeline match condition>\n   );\n\nSee this example:\n\n- :ref:`lookup-concise-correlated-subquery`\n\n.. _lookup-behavior:\n\nBehavior\n--------\n\nEncrypted Collections \n~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 8.1, you can reference multiple encrypted collections in a \n:pipeline:`$lookup` stage. However, ``$lookup`` does not support: \n\n- Using an encrypted field as the join field in the ``localField`` or \n  ``foreignField``.\n\n  .. note:: \n\n     For drivers using {+csfle+}, you can use an encrypted field as a join \n     field only if you are performing a self-join operation.\n\n- Using any field in an encrypted array. An array is considered as encrypted if \n  it contains any encrypted elements. \n\n  - For example, you can't use any field within the resulting \n    :ref:`as <lookup-eq-as>` array of the ``$lookup`` operation, unless you're \n    using {+csfle+} and :pipeline:`$unwind` the ``as`` field.\n\nViews and Collation\n~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/views-collation-agg.rst\n\nRestrictions\n~~~~~~~~~~~~\n\nYou cannot include the :pipeline:`$out` or the :pipeline:`$merge`\nstage in the :pipeline:`$lookup` stage. That is, when specifying a\n:ref:`pipeline for the joined collection\n<lookup-syntax-let-pipeline>`, you cannot include either stage in\nthe ``pipeline`` field.\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   {\n      $lookup:\n      {\n         from: <collection to join>,\n         let: { <var_1>: <expression>, …, <var_n>: <expression> },\n         pipeline: [ <pipeline to execute on the joined collection> ],  // Cannot include $out or $merge\n         as: <output array field>\n      }\n   }\n\n.. _fts-lookup-behavior:\n\nAtlas Search Support \n~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0, you can specify the :atlas:`Atlas Search \n</atlas-search>` :pipeline:`$search` or :pipeline:`$searchMeta` stage \nin the ``$lookup`` pipeline to search collections on the Atlas \ncluster. The :pipeline:`$search` or the :pipeline:`$searchMeta` stage \nmust be the first stage inside the ``$lookup`` pipeline.\n\nFor example, when you :ref:`lookup-syntax-let-pipeline` or run \n:ref:`lookup-syntax-concise-correlated-subquery`, you can specify \n:pipeline:`$search` or :pipeline:`$searchMeta` inside the pipeline as \nshown below:\n\n.. tabs:: \n\n   .. tab:: $search\n      :tabid: search\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "         :copyable: false \n         :emphasize-lines: 7-11\n\n         [{\n           \"$lookup\": {\n             \"from\": <joined collection>,\n             localField: <field from the input documents>,\n             foreignField: <field from the documents of the \"from\" collection>,\n             \"as\": <output array field>,\n             \"pipeline\": [{\n               \"$search\": {\n                 \"<operator>\": {\n                   <operator-specification>\n                 }\n               },\n               ... \n             }]\n           }\n         }] \n\n   .. tab:: $searchMeta\n      :tabid: searchmeta\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "         :copyable: false \n         :emphasize-lines: 7-11\n\n         [{\n           \"$lookup\": {\n             \"from\": <joined collection>,\n             localField: <field from the input documents>,\n             foreignField: <field from the documents of the \"from\" collection>,\n             \"as\": <output array field>,\n             \"pipeline\": [{\n               \"$searchMeta\": {\n                 \"<collector>\": {\n                   <collector-specification>\n                 }\n               },\n               ... \n             }]\n           }\n         }] \n\nTo see an example of :pipeline:`$lookup` with :pipeline:`$search`, \nsee the Atlas Search tutorial :atlas:`Run an Atlas Search $search Query \nUsing $lookup </atlas-search/tutorial/lookup-with-search/>`.\n\n.. _lookup-sharded-collections:\n\nSharded Collections\n~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 5.1, you can specify :ref:`sharded collections \n<sharding-sharded-cluster>` in the ``from`` parameter of \n:pipeline:`$lookup` stages.\n\nStarting in MongoDB 8.0, you can use the ``$lookup`` stage within a \ntransaction while targeting a sharded collection.\n\n|sbe-title|\n~~~~~~~~~~~\n\n.. include:: /includes/fact-sbe-lookup-overview.rst\n\nFor more information, see :ref:`agg-lookup-optimization-sbe`.\n\n.. _lookup-performance-considerations:\n\nPerformance Considerations \n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``$lookup`` performance depends on the type of operation performed.\nRefer to the following table for performance considerations for\ndifferent ``$lookup`` operations. \n\n.. list-table::\n   :header-rows: 1 \n   :widths: 20 80\n\n   * - ``$lookup`` Operation\n     - Performance Considerations\n\n   * - :ref:`Equality Match with a Single Join\n       <lookup-single-equality-example>`\n\n     - .. _equality-match-performance:\n\n       - ``$lookup`` operations that perform equality matches with a\n         single join perform better when the foreign collection contains\n         an index on the ``foreignField``.\n\n         :gold:`IMPORTANT:` If a supporting index on the ``foreignField`` does \n         not exist, a ``$lookup`` operation that performs an equality match with \n         a single join will likely have poor performance.\n\n   * - :ref:`Uncorrelated Subqueries <lookup-uncorrelated-subquery>`\n\n     - .. _uncorrelated-subqueries-performance:\n     \n       - ``$lookup`` operations that contain uncorrelated subqueries\n         perform better when the inner pipeline can reference an\n         index of the foreign collection.\n\n       - MongoDB only needs to run the ``$lookup`` subquery once before\n         caching the query because there is no relationship between the\n         source and foreign collections. The subquery is not based on\n         any value in the source collection. This behavior improves\n         performance for subsequent executions of the ``$lookup``\n         operation.\n\n   * - :ref:`Correlated Subqueries <lookup-concise-correlated-subquery>`\n\n     - .. _correlated-subqueries-performance: \n\n       - ``$lookup`` operations that contain correlated subqueries\n         perform better when the following conditions apply:\n         \n         - The foreign collection contains an index on the\n           ``foreignField``.\n\n         - The foreign collection contains an index that references the\n           inner pipline. \n \n       - If your pipeline passes a large number of documents to the\n         ``$lookup`` query, the following strategies may improve\n         performance:\n\n         - Reduce the number of documents that MongoDB passes to the \n           ``$lookup`` query. For example, set a stricter filter\n           during the ``$match`` stage. \n\n         - Run the inner pipeline of the ``$lookup`` subquery as a\n           separate query and use ``$out`` to create a temporary\n           collection. Then, run an :ref:`equality match with a single\n           join <lookup-single-equality>`. \n\n         - Reconsider the data's schema to ensure it is optimal for the\n           use case. \n\nFor general performance strategies, see :ref:`Indexing Strategies\n<manual-indexing-strategies>` and :ref:`Query Optimization\n<read-operations-indexing>`. \n\n.. important::\n\n   Excessive use of ``$lookup`` within a query may slow down\n   performance. To avoid multiple ``$lookup`` stages, consider an\n   :ref:`embedded data model <data-modeling-embedding>` to optimize\n   query performance. \n\nExamples\n--------\n\n.. _lookup-single-equality-example:\n\nPerform a Single Equality Join with ``$lookup``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a collection ``orders`` with these documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, inventory_docs\n   FROM orders\n   WHERE inventory_docs IN (\n      SELECT *\n      FROM inventory\n      WHERE sku = orders.item\n   );\n\nFor more information, see\n:ref:`Equality Match Performance Considerations <equality-match-performance>`. \n\n.. _unwind-example:\n\nUse ``$lookup`` with an Array\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the ``localField`` is an array, you can match the array elements\nagainst a scalar ``foreignField`` without an :pipeline:`$unwind` stage.\n\nFor example, create an example collection ``classes`` with these\ndocuments:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, stockdata\n   FROM orders\n   WHERE stockdata IN (\n      SELECT warehouse, instock\n      FROM warehouses\n      WHERE stock_item = orders.item\n      AND instock >= orders.ordered\n   );\n\n.. include:: /includes/expr-operators-and-indexes.rst\n\nFor example, if the index ``{ stock_item: 1, instock: 1 }`` exists on\nthe ``warehouses`` collection:\n\n- The equality match on the ``warehouses.stock_item`` field uses the\n  index.\n- The range part of the query on the ``warehouses.instock`` field\n  also uses the indexed field in the compound index.\n\n.. seealso::\n\n   - :query:`$expr`\n   - :doc:`/reference/aggregation-variables/`\n\n.. _lookup-uncorrelated-subquery:\n\nPerform an Uncorrelated Subquery with ``$lookup``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn aggregation pipeline :pipeline:`$lookup` stage can execute a pipeline\non the joined collection, which allows uncorrelated subqueries. An\nuncorrelated subquery does not reference the joined document fields.\n\n.. note::\n\n   .. include:: /includes/uncorrelated-subquery.rst\n\nCreate a collection ``absences`` with these documents:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, holidays\n   FROM absences\n   WHERE holidays IN (\n      SELECT name, date\n      FROM holidays\n      WHERE year = 2018\n   );\n\nFor more information, see\n:ref:`Uncorrelated Subquery Performance Considerations <uncorrelated-subqueries-performance>`.\n\n.. _lookup-concise-correlated-subquery:\n\nPerform a Concise Correlated Subquery with ``$lookup``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\nStarting in MongoDB 5.0, an aggregation pipeline :pipeline:`$lookup`\nstage supports a :ref:`concise correlated subquery syntax\n<lookup-syntax-concise-correlated-subquery>` that improves joins between\ncollections. The new concise syntax removes the requirement for an\nequality match on the foreign and local fields inside of an\n:query:`$expr` operator in a :pipeline:`$match` stage.\n\nCreate a collection ``restaurants``:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1, \"item\" : \"filet\",\n      \"restaurant_name\" : \"American Steak House\",\n      \"matches\" : [ ]\n   }\n   {\n      \"_id\" : 2, \"item\" : \"cheese pizza\",\n      \"restaurant_name\" : \"Honest John Pizza\",\n      \"drink\" : \"lemonade\",\n      \"matches\" : [ ]\n   }\n   {\n      \"_id\" : 3, \"item\" : \"cheese pizza\",\n      \"restaurant_name\" : \"Honest John Pizza\",\n      \"drink\" : \"soda\",\n      \"matches\" : [ {\n         \"_id\" : 2, \"name\" : \"Honest John Pizza\",\n         \"food\" : [ \"cheese pizza\", \"pepperoni pizza\" ],\n         \"beverages\" : [ \"soda\" ]\n      } ]\n   }\n\nBefore the introduction of concise correlated subqueries, you had to use\nan :expression:`$eq` equality match between the local field and the\njoined field in the :query:`$expr` operator in the ``pipeline``\n:pipeline:`$lookup` stage as shown in :ref:`lookup-multiple-joins`.\n\nThis example uses the older verbose syntax from MongoDB versions before\n5.0 and returns the same results as the previous concise example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT *, matches\n   FROM orders\n   WHERE matches IN (\n      SELECT *\n      FROM restaurants\n      WHERE restaurants.name = orders.restaurant_name\n      AND restaurants.beverages = orders.drink\n   );\n\nFor more information, see\n:ref:`Correlated Subquery Performance Considerations <correlated-subqueries-performance>`.\n\n.. _lookup-example-namespaces-in-subpipelines:\n\nNamespaces in Subpipelines\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/subpipeline-namespaces.rst\n\nStarting in MongoDB 8.0, the following example returns an error because\nit contains an invalid ``from`` field:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.cakeFlavors.aggregate( [ {\n      $lookup: {\n         from: \"cakeFlavors\",\n         pipeline: [ { $documents: [ {} ] } ],\n         as: \"test\"\n      }\n   } ] )\n\nIn MongoDB versions before 8.0, the previous example runs.\n\nFor an example with a valid ``from`` field, see\n:ref:`lookup-single-equality-example`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/lookup.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"6390b8f7237da390c6869a62\"),\n       adjustedGrades: [ 7, 8, 9 ]\n     },\n     { \n       _id: ObjectId(\"6390b8f7237da390c6869a63\"),\n       adjustedGrades: []\n     },\n     {\n       _id: ObjectId(\"6390b8f7237da390c6869a64\"),\n       adjustedGrades: [ 5, 10, 11 ]\n     }\n   ]\n\nTruncate Each Array Element\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``deliveries`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/map.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"6390b9b1237da390c6869a65\"),\n       city: 'Bakersfield',\n       integerValues: [ 34, 81, 44 ]\n     },\n     {\n       _id: ObjectId(\"6390b9b1237da390c6869a66\"),\n       city: 'Barstow',\n       integerValues: [ 73, 9, 124 ]\n     },\n     {\n       _id: ObjectId(\"6390b9b1237da390c6869a67\"),\n       city: 'San Bernadino',\n       integerValues: [ 16, 3, 6 ]\n     }\n   ]\n\nConvert Celsius Temperatures to Fahrenheit\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``temperatures`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/map.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       _id: ObjectId(\"6390ba11237da390c6869a68\"),\n       date: ISODate(\"2019-06-23T00:00:00.000Z\"),\n       tempsC: [ 4, 12, 17 ],\n       tempsF: [ 39.2, 53.6, 62.6 ]\n     },\n     {\n       _id: ObjectId(\"6390ba11237da390c6869a69\"),\n       date: ISODate(\"2019-07-07T00:00:00.000Z\"),\n       tempsC: [ 14, 24, 11 ],\n       tempsF: [ 57.2, 75.2, 51.8 ]\n     },\n     {\n       _id: ObjectId(\"6390ba11237da390c6869a6a\"),\n       date: ISODate(\"2019-10-30T00:00:00.000Z\"),\n       tempsC: [ 18, 6, 8 ],\n       tempsF: [ 64.4, 42.8, 46.4 ]\n     }\n   ]\n\nLearn More\n----------\n\nTo learn more about expressions used in the previous examples, see:\n\n- :expression:`$add`\n- :expression:`$let`\n- :expression:`$multiply`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/map.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $max: <expression> }\n   \nWhen used in other supported stages, :group:`$max` has one of two\nsyntaxes:\n\n- :group:`$max` has one specified expression as its operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $max: <expression> }\n\n- :group:`$max` has a list of specified expressions as its\n  operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $max: [ <expression1>, <expression2> ... ]  }\n\nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-bson-order-return-behavior.rst\n\nNull or Missing Values\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf some, **but not all**, documents for the :group:`$max`\noperation have either a ``null`` value for the field or are\nmissing the field, the :group:`$max` operator only considers the\nnon-null and the non-missing values for the field.\n\nIf **all** documents for the :group:`$max` operation have ``null``\nvalue for the field or are missing the field, the :group:`$max`\noperator returns ``null`` for the maximum value.\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` and :pipeline:`$setWindowFields` stages, if\nthe expression resolves to an array, :group:`$max` does not traverse the\narray and compares the array as a whole.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-max.rst\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"xyz\", \"maxTotalAmount\" : 50, \"maxQuantity\" : 10 }\n   { \"_id\" : \"jkl\", \"maxTotalAmount\" : 20, \"maxQuantity\" : 1 }\n   { \"_id\" : \"abc\", \"maxTotalAmount\" : 100, \"maxQuantity\" : 10 }\n\nUse in ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection ``students`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"quizMax\" : 10, \"labMax\" : 8, \"examMax\" : 80 }\n   { \"_id\" : 2, \"quizMax\" : 10, \"labMax\" : 8, \"examMax\" : 95 }\n   { \"_id\" : 3, \"quizMax\" : 5, \"labMax\" : 6, \"examMax\" : 78 }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$max` in the :pipeline:`$setWindowFields`\nstage to output the maximum ``quantity`` of cake sales for each\n``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"maximumQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"maximumQuantityForState\" : 162 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"maximumQuantityForState\" : 162 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"maximumQuantityForState\" : 134 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"maximumQuantityForState\" : 134 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"maximumQuantityForState\" : 140 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/max.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.scores.insertMany([\n       { \"playerId\" : 1, \"score\" : [ 1, 2, 3 ] },\n       { \"playerId\" : 2, \"score\" : [ 12, 90, 7, 89, 8 ] },\n       { \"playerId\" : 3, \"score\" : [ null ] },\n       { \"playerId\" : 4, \"score\" : [ ] }\n       { \"playerId\" : 5, \"score\" : [ 1293, \"2\", 3489, 9 ]}\n   ])\n\nThe following example uses the :expression:`$maxN` operator to retrieve the two \nhighest scores for each player. The highest scores are returned in the new field \n``maxScores`` created by :pipeline:`$addFields`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN-array-element.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.scores.aggregate([\n      { $addFields: { maxScores: { $maxN: { n: 2, input: \"$score\" } } } }\n   ])\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN-array-element.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4, 9, 14, 19, 24\n\n   [{\n     \"playerId\": 1,\n     \"score\": [ 1, 2, 3 ],\n     \"maxScores\": [ 3, 2 ]\n   },\n   {\n     \"playerId\": 2,\n     \"score\": [ 12, 90, 7, 89, 8 ],\n     \"maxScores\": [ 90, 89 ]\n   },\n   {\n     \"playerId\": 3,\n     \"score\": [ null ],\n     \"maxScores\": [ ]\n   },\n   {\n     \"playerId\": 4,\n     \"score\": [ ],\n     \"maxScores\": [ ]\n   },\n   { \n     \"playerId\": 5,\n     \"score\": [ 1293, \"2\", 3489, 9 ],\n     \"maxScores\": [ \"2\", 3489 ]\n   }]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN-array-element.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $maxN:\n         {\n            input: <expression>,\n            n: <expression>\n         }\n   }\n\n- ``input`` specifies an expression that is the input to ``$maxN``. It \n  is evaluated for each element in the group and ``$maxN`` preserves the \n  maximum ``n`` values.\n- ``n`` limits the number of results per group and ``n`` has to be a\n  positive integral expression that is either a constant or depends on \n  the ``_id`` value for :pipeline:`$group`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-bson-order-return-behavior.rst\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- ``$maxN`` filters out null and missing values.\n\nConsider the following aggregation that returns the maximum ``n`` \ndocuments from a group:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\" },\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            maximumThreeScores:\n               { \n                  $maxN:\n                     {    \n                        input: \"$score\",\n                        n: 4\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``maximumThreeScores`` field is specified as :group:`$maxN` \n  with ``input : \"$score\"`` and returned as an array.\n- Since there are only 3 documents with ``scores`` ``maxN`` returns the\n  maximum 3  ``score`` fields even though ``n = 4``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ \n      { \n      _id: 'G1',\n      maximumThreeScores: [ 3, 2, 1 ] \n      } \n   ]\n\nComparison of ``$maxN`` and ``$topN`` Accumulators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBoth :group:`$maxN` and :group:`$topN` accumulators can accomplish similar \nresults.\n\nIn general:\n\n- :group:`$maxN` has the advantage of finding maximum values \n  in no particular sort order. If you want to know the \n  maximum values for ``n`` documents use :group:`$maxN`.\n\n- If guaranteing a particular sort order is a requirement \n  use :group:`$topN`. \n\n- Use :group:`$topN` if you don't intend on sorting on the output \n  values.\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use :group:`$maxN` as an accumulator.\n\n:group:`$maxN` is supported as an\n:ref:`aggregation expression <aggregation-expressions>`.\n\n:group:`$maxN` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAggregation pipelines which call ``$maxN`` are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>`. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         maxThreeScores: [ [ 99, 'PlayerC' ], [ 33, 'PlayerB' ], [ 31, 'PlayerA' ] ]\n      }\n   ]\n\nFinding the Maximum Three Scores Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$maxN`` accumulator to find the maximum ``n``\nscores in each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         maxScores: [ [ 99, 'PlayerC' ], [ 33, 'PlayerB' ], [ 31, 'PlayerA' ] ]\n      },\n      {\n         _id: 'G2',\n         maxScores: [ [ 80, 'PlayerD' ], [ 66, 'PlayerC' ], [ 14, 'PlayerB' ] ]\n      }\n   ]\n\nComputing ``n`` Based on the Group Key for ``$group``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $maxN:\n                     {\n                        input: [\"$score\",\"$playerId\"],\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Uses ``$group`` to group the results by ``gameId``.\n- Specifies the fields that input for ``$maxN`` with\n  ``input : [\"$score\",\"$playerId\"]``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: 'G2' }, gamescores: [ [ 80, 'PlayerD' ] ] },\n      {\n         _id: { gameId: 'G1' },\n         gamescores: [ [ 99, 'PlayerC' ], [ 33, 'PlayerB' ], [ 31, 'PlayerA' ] ]\n      }\n   ]\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/maxN.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $median: {\n         input: <number>,\n         method: <string>\n      }\n   }\n\nCommand Fields\n--------------\n\n|operatorName| takes the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 17 17 51\n\n   * - Field\n     - Type\n     - Necessity\n     - Description\n\n   * - ``input``\n     - Expression\n     - Required\n     - |operatorName| calculates the 50th percentile value of this data.\n       ``input`` must be a field name or an expression that evaluates to\n       a numeric type. If the expression cannot be converted to a\n       numeric type, the |operatorName| calculation ignores it.\n\n   * - ``method``\n     - String\n     - Required\n     - The method that ``mongod`` uses to calculate the 50th percentile\n       value. The method must be ``'approximate'``.\n\nBehavior\n--------\n\n.. include:: /includes/aggregation/fact-behavior-percent-median.rst\n\nType of Operation\n~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-type-of-operation.rst\n\nCalculation Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-calc-considerations.rst\n\nArray Input\n~~~~~~~~~~~\n\nIf you use |operatorName| as an aggregation expression in a\n:pipeline:`$project <$project>` stage, you can use an array as input.\n|operatorName| ignores non-numeric array values.\n\nThe syntax is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/median.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $median:\n         {\n            input: [ <expression1, <expression2>, ..., <expressionN> ], \n            method: <string>\n         }\n   }\n\nWindow Functions\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-setwindowfield.rst\n\nExamples\n--------\n\n.. include:: /includes/aggregation/example-setup-01.rst\n\nUse |operatorName| as an Accumulator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an accumulator that calculates the median value:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/median.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id: null, test01_median: 62 }\n\nThe ``_id`` field value is ``null`` so ``$group`` selects all the\ndocuments in the collection.\n\nThe |operatorName| accumulator takes its input from the ``test01``\nfield. |operatorName| calculates the median value for the field, ``62``\nin this example.\n\nUse |operatorName| in a ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn a ``$group`` stage, |operatorName| is an accumulator and calculates\na single value for all documents. In a ``$project`` stage,\n|operatorName| is an aggregation expression and calculates values for\neach document.\n\nYou can use a field name or an array as input in a ``$project`` stage.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/median.txt"
  },
  {
    "code": "   :copyable: false\n\n   { studentId: '2345', testMedians: 80 },\n   { studentId: '2356', testMedians: 79 },\n   { studentId: '2358', testMedians: 78 },\n   { studentId: '2367', testMedians: 72 },\n   { studentId: '2369', testMedians: 60 }\n\nWhen |operatorName| is an aggregation expression there is a result for\neach ``studentId``.\n\nUse |operatorName| in a ``$setWindowField`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo base your percentile values on local data trends, use |operatorName|\nin a ``$setWindowField`` aggregation pipeline stage.\n\nThis example creates a window to filter scores:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/median.txt"
  },
  {
    "code": "   :copyable: false\n\n   { studentId: '2356', test01_median: 60 },\n   { studentId: '2369', test01_median: 60 },\n   { studentId: '2345', test01_median: 60 },\n   { studentId: '2367', test01_median: 64 },\n   { studentId: '2358', test01_median: 64 }\n\nIn this example, the median calculation for each document also\nincorporates data from the three documents before and after it.\n\nLearn More\n----------\n\nThe :group:`$percentile <$percentile>` operator is a more general\nversion of the |operatorName| operator that allows you to set one or\nmore percentile values.\n\nFor more information on window functions, see:\n:pipeline:`$setWindowFields`.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/median.txt"
  },
  {
    "code": "         :copyable: false\n\n         { <variable_name_1>: <expression_1>,\n           ...,\n           <variable_name_n>: <expression_n> }\n\n      If unspecified, defaults to ``{ new: \"$$ROOT\" }`` (see\n      :variable:`ROOT`). The :ref:`whenMatched pipeline\n      <merge-whenMatched-pipeline>` can access the ``$$new`` variable.\n\n      To access the variables in the :ref:`whenMatched pipeline\n      <merge-whenMatched-pipeline>`:\n      \n      .. include:: /includes/merge-stage-variables.rst\n      \n      For examples, see :ref:`merge-variables-example`.\n\n  * - :ref:`whenNotMatched <merge-whenNotMatched>`\n\n    - .. _merge-whenNotMatched:\n\n      Optional. The behavior of :pipeline:`$merge` if a result document\n      does not match an existing document in the out collection.\n\n      You can specify one of the pre-defined action strings:\n\n      .. list-table::\n         :header-rows: 1\n         :widths: 20 80\n\n         * - Action\n           - Description\n\n         * - :ref:`\"insert\" <merge-whenNotMatched-insert>` (Default)\n\n           - ..  _merge-whenNotMatched-insert:\n\n             Insert the document into the output collection.\n\n         * - :ref:`\"discard\" <merge-whenNotMatched-discard>`\n\n           - ..  _merge-whenNotMatched-discard:\n\n             Discard the document. Specifically, :pipeline:`$merge` does\n             not insert the document into the output collection.\n\n         * - :ref:`\"fail\" <merge-whenNotMatched-fail>`\n\n           - ..  _merge-whenNotMatched-fail:\n\n             Stop and fail the aggregation operation. Any changes \n             already written to the output collection are not\n             reverted.\n\n\n.. _aggregation-merge-behavior:\n\nConsiderations\n--------------\n\n``_id`` Field Generation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the ``_id`` field is not present in a document from the\naggregation pipeline results, the :pipeline:`$merge` stage generates\nit automatically.\n\nFor example, in the following aggregation pipeline,\n:pipeline:`$project` excludes the ``_id`` field from the documents\npassed into :pipeline:`$merge`. When :pipeline:`$merge` writes these\ndocuments to the ``\"newCollection\"``, :pipeline:`$merge` generates a\nnew ``_id`` field and value.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :emphasize-lines: 5-7\n\n   { \"_id\" : { \"fiscal_year\" : 2017, \"dept\" : \"A\" }, \"salaries\" : 220000 }\n   { \"_id\" : { \"fiscal_year\" : 2017, \"dept\" : \"Z\" }, \"salaries\" : 115000 }\n   { \"_id\" : { \"fiscal_year\" : 2018, \"dept\" : \"A\" }, \"salaries\" : 215000 }\n   { \"_id\" : { \"fiscal_year\" : 2018, \"dept\" : \"Z\" }, \"salaries\" : 280000 }\n   { \"_id\" : { \"fiscal_year\" : 2019, \"dept\" : \"A\" }, \"salaries\" : 275000 }\n   { \"_id\" : { \"fiscal_year\" : 2019, \"dept\" : \"Z\" }, \"salaries\" : 410000 }\n   { \"_id\" : { \"fiscal_year\" : 2020, \"dept\" : \"Z\" }, \"salaries\" : 240000 }\n\n.. seealso::\n\n   :doc:`/core/materialized-views`\n\n.. _merge-mat-view-insert-only:\n\nOnly Insert New Data\n~~~~~~~~~~~~~~~~~~~~\n\nTo ensure that the :pipeline:`$merge` does not overwrite existing data\nin the collection, set :ref:`whenMatched <merge-whenMatched>` to\n:ref:`keepExisting <merge-whenMatched-keepExisting>` or :ref:`fail\n<merge-whenMatched-fail>`.\n\nThe example ``salaries`` collection in the ``zoo`` database contains\nthe employee salary and department history:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :emphasize-lines: 3,6\n\n   { \"_id\" : ObjectId(\"5caccc6a66b22dd8a8cc419f\"), \"employees\" : [ \"Ahn\", \"Bess\" ], \"dept\" : \"A\", \"fiscal_year\" : 2017 }\n   { \"_id\" : ObjectId(\"5caccc6a66b22dd8a8cc419e\"), \"employees\" : [ \"Ahn\", \"Gee\" ], \"dept\" : \"A\", \"fiscal_year\" : 2018 }\n   { \"_id\" : ObjectId(\"5caccd0b66b22dd8a8cc438e\"), \"employees\" : [ \"Ahn\", \"Zeb\" ], \"dept\" : \"A\", \"fiscal_year\" : 2019 }\n   { \"_id\" : ObjectId(\"5caccc6a66b22dd8a8cc41a0\"), \"employees\" : [ \"Carl\" ], \"dept\" : \"Z\", \"fiscal_year\" : 2017 }\n   { \"_id\" : ObjectId(\"5caccc6a66b22dd8a8cc41a1\"), \"employees\" : [ \"Bess\", \"Carl\" ], \"dept\" : \"Z\", \"fiscal_year\" : 2018 }\n   { \"_id\" : ObjectId(\"5caccd0b66b22dd8a8cc438d\"), \"employees\" : [ \"Bess\", \"Carl\", \"Wen\" ], \"dept\" : \"Z\", \"fiscal_year\" : 2019 }\n\nIf the ``orgArchive`` collection already contained a document for\n2019 for department ``\"A\"`` and/or ``\"B\"``, the aggregation\n:ref:`fails because of the duplicate key error\n<merge-unique-index-constraints>`. However, any document inserted\nbefore the error will not be rolled back.\n\nIf you specify :ref:`keepExisting\n<merge-whenMatched-replace>` for the matching document, the\naggregation does not affect the matching document and does not error\nwith duplicate key error. Similarly, if you specify\n:ref:`replace <merge-whenMatched-replace>`, the\noperation would not fail; however, the operation would replace the\nexisting document.\n\n.. _merge-mat-view-merge:\n\nMerge Results from Multiple Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, if a document in the aggregation results matches a\ndocument in the collection, the :pipeline:`$merge` stage\n:ref:`merges <merge-whenMatched-merge>` the documents.\n\nAn example collection ``purchaseorders`` is populated with the\npurchase order information by quarter and regions:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"2019Q2\", \"purchased\" : 1700 }\n      { \"_id\" : \"2019Q1\", \"purchased\" : 1200 }\n\nSecond stage:\n   The :pipeline:`$merge` stage writes the documents to the\n   ``quarterlyreport`` collection in the same database. If the stage\n   finds an existing document in the collection that :ref:`matches\n   on <merge-on>` the ``_id`` field, the stage merges the matching\n   documents. Otherwise, the stage inserts the document. For the\n   initial creation, no documents should match.\n\nTo view the documents in the collection, run the following operation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"2019Q1\", \"sales\" : 1200, \"purchased\" : 1200 }\n   { \"_id\" : \"2019Q2\", \"sales\" : 1700, \"purchased\" : 1700 }\n\nSimilarly, run the following aggregation pipeline against the\n``reportedsales`` collection to merge the sales results into the\n``quarterlyreport`` collection.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"2019Q2\", \"sales\" : 500 }\n      { \"_id\" : \"2019Q1\", \"sales\" : 1950 }\n\nSecond stage:\n   The :pipeline:`$merge` stage writes the documents to the\n   ``quarterlyreport`` collection in the same database. If the stage\n   finds an existing document in the collection that :ref:`matches\n   on <merge-on>` the ``_id`` field (the quarter), the stage merges\n   the matching documents. Otherwise, the stage inserts the document.\n\nTo view the documents in the ``quarterlyreport`` collection after\nthe data has been merged, run the following operation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"2019Q1\", \"sales\" : 1950, \"purchased\" : 1200 }\n   { \"_id\" : \"2019Q2\", \"sales\" : 500, \"purchased\" : 1700 }\n\nUse the Pipeline to Customize the Merge\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :pipeline:`$merge` can use a :ref:`custom update pipeline\n<merge-whenMatched-pipeline>` when documents match. The\n:ref:`whenMatched pipeline <merge-whenMatched-pipeline>` can have\nthe following stages:\n\n- :pipeline:`$addFields` and its alias :pipeline:`$set`\n- :pipeline:`$project` and its alias :pipeline:`$unset`\n- :pipeline:`$replaceRoot` and its alias :pipeline:`$replaceWith`\n\nAn example collection ``votes`` is populated with the daily vote\ntally. Create the collection with the following documents:s\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : ObjectId(\"5ce6097c436eb7e1203064a6\"), \"date\" : ISODate(\"2019-05-07T00:00:00Z\"), \"thumbsup\" : 14, \"thumbsdown\" : 10 }\n\nSecond stage:\n   The :pipeline:`$project` stage sets the ``_id`` field to a\n   year-month string. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"thumbsup\" : 14, \"thumbsdown\" : 10, \"_id\" : \"2019-05\" }\n   \nThird stage:\n   The :pipeline:`$merge` stage writes the documents to the\n   ``monthlytotals`` collection in the same database. If the stage\n   finds an existing document in the collection that :ref:`matches\n   on <merge-on>` the ``_id`` field, the stage uses a pipeline to\n   add the ``thumbsup`` votes and the ``thumbsdown`` votes.\n\n   - This pipeline cannot directly accesses the fields from the\n     results document. To access the ``thumbsup`` field and the\n     ``thumbsdown`` field in the results document, the pipeline uses\n     the ``$$new`` variable; i.e. ``$$new.thumbsup`` and\n     ``$new.thumbsdown``.\n\n   - This pipeline can directly accesses the ``thumbsup`` field\n     and the ``thumbsdown`` field in the existing document in the\n     collection; i.e. ``$thumbsup`` and ``$thumbsdown``.\n\n   The resulting document replaces the existing document.\n\nTo view documents in the ``monthlytotals`` collection after the merge\noperation, run the following operation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"2019-05\", \"thumbsup\" : 40, \"thumbsdown\" : 41 }\n\n.. _merge-variables-example:\n\nUse Variables to Customize the Merge\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use variables in the :pipeline:`$merge` stage\n:ref:`whenMatched <merge-whenMatched-pipeline>` field. Variables must\nbe defined before they can be used.\n\nDefine variables in one or both of the following:\n\n- :pipeline:`$merge` stage :ref:`let <merge-let>`\n\n- :dbcommand:`aggregate` command\n  :ref:`let <aggregate-let-option>` (starting in MongoDB 5.0)\n\nTo use variables in :ref:`whenMatched <merge-whenMatched-pipeline>`:\n\n.. include:: /includes/merge-stage-variables.rst\n\nThe tabs below demonstrate behavior when variables are defined in the\nmerge stage, the aggregate command, or both.\n\n.. tabs::\n\n   .. tab:: Merge Stage\n      :tabid: merge-variables-in-merge-stage\n\n      Use Variables Defined in the Merge Stage\n      ````````````````````````````````````````\n\n      You can define variables in the :pipeline:`$merge` stage\n      :ref:`let <merge-let>` and use the variables in the\n      :ref:`whenMatched <merge-whenMatched-pipeline>` field.\n\n      Example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"_id\" : 1, \"flavor\" : \"chocolate\", \"salesTotal\" : 1580,\n           \"salesTrend\" : \"up\", \"salesYear\" : \"2020\" }\n\n   .. tab:: Aggregate Command\n      :tabid: merge-variables-in-aggregate-command\n\n      Use Variables Defined in the Aggregate Command\n      ``````````````````````````````````````````````\n\n      .. versionadded:: 5.0\n\n      You can define variables in the :dbcommand:`aggregate`\n      command :ref:`let <aggregate-let-option>` and use the\n      variables in the :pipeline:`$merge` stage :ref:`whenMatched\n      <merge-whenMatched-pipeline>` field.\n\n      Example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"_id\" : 1, \"flavor\" : \"chocolate\", \"salesTotal\" : 1580,\n           \"salesTrend\" : \"up\", \"salesYear\" : \"2020\" }\n\n   .. tab:: Merge and Aggregate\n      :tabid: merge-variables-scope\n\n      Use Variables Defined in the Merge Stage and Aggregate Command\n      ``````````````````````````````````````````````````````````````\n\n      You can define variables in the :pipeline:`$merge` stage\n      and, starting in MongoDB 5.0, the :dbcommand:`aggregate`\n      command.\n      \n      If two variables with the same name are defined in the\n      :pipeline:`$merge` stage and the :dbcommand:`aggregate`\n      command, the :pipeline:`$merge` stage variable is used.\n\n      In this example, the ``year: \"2020\"`` :pipeline:`$merge`\n      stage variable is used instead of the ``year: \"2019\"``\n      :dbcommand:`aggregate` command variable:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           _id: 1,\n           flavor: 'chocolate',\n           salesTotal: 1580,\n           salesTrend: 'up',\n           salesYear: '2020'\n         }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/merge.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $mergeObjects: <document> }\n\nWhen used in other expressions (including in :pipeline:`$bucket`,\n:pipeline:`$bucketAuto`, and :pipeline:`$group` stages) but not as an\naccumulator, :expression:`$mergeObjects` has this syntax:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $mergeObjects: [ <document1>, <document2>, ... ] }\n\nThe ``<document>`` can be any valid :ref:`expression\n<aggregation-expressions>` that resolves to a document.\n\nBehavior\n--------\n\n:expression:`$mergeObjects` ignores ``null`` operands. If all the\noperands to :expression:`$mergeObjects` resolves to null,\n:expression:`$mergeObjects` returns an empty document ``{ }``.\n\n:expression:`$mergeObjects` overwrites the field values as it merges the\ndocuments. If documents to merge include the same field name, the field,\nin the resulting document, has the value from the last document merged\nfor the field.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 65 35\n   :class: border-table\n\n   * - Example\n     - Results\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $mergeObjects: [ { a: 1 }, null ] }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { a: 1 }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $mergeObjects: [ null, null ] }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $mergeObjects: [ \n                { a: 1 }, \n                { a: 2, b: 2 },\n                { a: 3, c: 3 } \n             ] \n          }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { a: 3, b: 2, c: 3 }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $mergeObjects: [\n              { a: 1 }, \n              { a: 2, b: 2 }, \n              { a: 3, b: null, c: 3 }\n            ] \n          }\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "          :copyable: false\n\n          { a: 3, b: null, c: 3 }\n\nExamples\n--------\n\n``$mergeObjects``\n~~~~~~~~~~~~~~~~~\n\nCreate a collection ``orders`` with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mergeObjects.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"_id\" : 0.75, \"count\" : 1 }\n         { \"_id\" : 0.6666666666666666, \"count\" : 1 }\n         { \"_id\" : 1, \"count\" : 2 }\n\n      For more examples, see :doc:`/tutorial/text-search-in-aggregation`.\n\n   .. tab:: Find and Project\n      :tabid: find\n\n      The following query performs a text search for the term ``cake`` and\n      uses the :expression:`$meta` operator in the projection document to\n      include the score assigned to each matching document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/meta.txt"
  },
  {
    "code": "         :copyable: false\n\n         { \"_id\" : 4, \"title\" : \"some cakes\", \"score\" : 1 }\n         { \"_id\" : 1, \"title\" : \"cakes and ale\", \"score\" : 0.75 }\n         { \"_id\" : 5, \"title\" : \"two cakes to go\", \"score\" : 0.6666666666666666 }\n         { \"_id\" : 2, \"title\" : \"more cakes\", \"score\" : 1 }\n\n      For additional examples of ``\"textScore\"`` projections and sorts,\n      see :ref:`ex-text-search-score`.\n\n``$meta: \"indexKey\"``\n~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   The ``{ $meta: \"indexKey\" }`` expression is for debugging\n   purposes only and not for application logic. MongoDB returns the\n   value associated with the index chosen by the query system. The\n   system can choose a different index upon subsequent execution.\n\n   For the selected index, the value returned depends on how the\n   database decides to represent values in an index and may change\n   across versions. The represented value may not be the actual\n   value for the field.\n\n\nCreate an ``orders`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/meta.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 7,15\n\n   {\n      \"_id\" : ObjectId(\"5e98a33ceaf5e9dcf2b8dcde\"),\n      \"item\" : \"abc\",\n      \"price\" : NumberDecimal(\"12\"),\n      \"quantity\" : 2,\n      \"type\" : \"apparel\",        \n      \"idxKey\" : { \"type\" : \"apparel\", \"item\" : \"abc\" }\n   }\n   {\n      \"_id\" : ObjectId(\"5e98a33ceaf5e9dcf2b8dce0\"),\n      \"item\" : \"abc\",\n      \"price\" : NumberDecimal(\"10\"),\n      \"quantity\" : 5,\n      \"type\" : \"apparel\",\n      \"idxKey\" : { \"type\" : \"apparel\", \"item\" : \"abc\" }\n   }\n\n\nIf :red:`no` index is used, the ``{ $meta: \"indexKey\" }`` does not\nreturn anything. \n\n.. tabs::\n\n   .. tab:: Aggregation\n      :tabid: aggregation\n\n      For example, the following operation does not use\n      an index since no index exists on the ``price`` field to support the\n      match condition:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/meta.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : ObjectId(\"5e98a33ceaf5e9dcf2b8dcde\"),\n      \"item\" : \"abc\",\n      \"price\" : NumberDecimal(\"12\"),\n      \"quantity\" : 2,\n      \"type\" : \"apparel\"\n   }\n   {\n      \"_id\" : ObjectId(\"5e98a33ceaf5e9dcf2b8dcdf\"),\n      \"item\" : \"jkl\",\n      \"price\" : NumberDecimal(\"20\"),\n      \"quantity\" : 1,\n      \"type\" : \"electronics\"\n   }\n   {\n      \"_id\" : ObjectId(\"5e98a33ceaf5e9dcf2b8dce0\"),\n      \"item\" : \"abc\",\n      \"price\" : NumberDecimal(\"10\"),\n      \"quantity\" : 5,\n      \"type\" : \"apparel\"\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/meta.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: new Date(\"2016-01-01\") }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $millisecond: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$millisecond`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "   :emphasize-lines: 12\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/millisecond.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $min: <expression> }\n   \nWhen used in other supported stages, :group:`$min` has one of two\nsyntaxes:\n\n- :group:`$min` has one specified expression as its operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $min: <expression> }\n\n- :group:`$min` has a list of specified expressions as its\n  operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $min: [ <expression1>, <expression2> ... ]  }\n\nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-bson-order-return-behavior.rst\n\nNull or Missing Values\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf some, **but not all**, documents for the :group:`$min`\noperation have either a ``null`` value for the field or are\nmissing the field, the :group:`$min` operator only considers the\nnon-null and the non-missing values for the field.\n\nIf **all** documents for the :group:`$min` operation have ``null``\nvalue for the field or are missing the field, the :group:`$min`\noperator returns ``null`` for the minimum value.\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` and :pipeline:`$setWindowFields` stages, if\nthe expression resolves to an array, :group:`$min` does not traverse the\narray and compares the array as a whole.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-min.rst\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"xyz\", \"minQuantity\" : 5 }\n   { \"_id\" : \"jkl\", \"minQuantity\" : 1 }\n   { \"_id\" : \"abc\", \"minQuantity\" : 2 }\n\nUse in ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection ``students`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"quizMin\" : 6, \"labMin\" : 5, \"examMin\" : 75 }\n   { \"_id\" : 2, \"quizMin\" : 9, \"labMin\" : 8, \"examMin\" : 80 }\n   { \"_id\" : 3, \"quizMin\" : 4, \"labMin\" : 5, \"examMin\" : 70 }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$min` in the :pipeline:`$setWindowFields`\nstage to output the minimum ``quantity`` of cake sales for each\n``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"minimumQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"minimumQuantityForState\" : 120 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"minimumQuantityForState\" : 120 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"minimumQuantityForState\" : 134 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"minimumQuantityForState\" : 104 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"minimumQuantityForState\" : 104 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/min.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.scores.insertMany([\n       { \"playerId\" : 1, \"score\" : [ 1, 2, 3 ] },\n       { \"playerId\" : 2, \"score\" : [ 12, 90, 7, 89, 8 ] },\n       { \"playerId\" : 3, \"score\" : [ null ] },\n       { \"playerId\" : 4, \"score\" : [ ] },\n       { \"playerId\" : 5, \"score\" : [ 1293, \"2\", 3489, 9 ]}\n   ])\n\nThe following example uses the :expression:`$minN` operator to retrieve the two \nlowest scores for each player. The lowest scores are returned in the new field \n``minScores`` created by :pipeline:`$addFields`. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN-array-element.txt"
  },
  {
    "code": "   :copyable: true\n\n   db.scores.aggregate([\n      { $addFields: { minScores: { $minN: { n: 2, input: \"$score\" } } } }\n   ])\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN-array-element.txt"
  },
  {
    "code": "   :copyable: true\n   :emphasize-lines: 4, 9, 14, 19, 24\n\n   [{\n     \"playerId\": 1,\n     \"score\": [ 1, 2, 3 ],\n     \"minScores\": [ 1, 2 ]\n   },\n   {\n     \"playerId\": 2,\n     \"score\": [ 12, 90, 7, 89, 8 ],\n     \"minScores\": [ 7, 8 ]\n   },\n   {\n     \"playerId\": 3,\n     \"score\": [ null ],\n     \"minScores\": [ ]\n   },\n   {\n     \"playerId\": 4,\n     \"score\": [ ],\n     \"minScores\": [ ]\n   },\n   {\n     \"playerId\": 5,\n     \"score\": [ 1293, \"2\", 3489, 9 ],\n     \"minScores\": [ 9, 1293 ]\n   }]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN-array-element.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $minN:\n         {\n            input: <expression>,\n            n: <expression>\n         }\n   }\n\n- ``input`` specifies an expression that is the input to ``$minN``. It \n  is evaluated for each element in the group and ``$minN`` preserves the \n  minimum ``n`` values.\n- ``n`` limits the number of results per group and ``n`` has to be a\n  positive integral expression that is either a constant or depends on \n  the ``_id`` value for :pipeline:`$group`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-bson-order-return-behavior.rst\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- ``$minN`` filters out null and missing values.\n\nConsider the following aggregation that returns the minimum ``n`` \ndocuments from a group:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\" },\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            minimumThreeScores:\n               { \n                  $minN:\n                     {    \n                        input: \"$score\",\n                        n: 4\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both ignored.\n- The ``minimumThreeScores`` field is specified as :group:`$minN` \n  with ``input : \"$score\"`` and returned as an array.\n- Since there are only 3 documents with ``scores`` ``minN`` returns \n  the minimum 3  ``score`` fields even though ``n = 4``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ \n      { \n      _id: 'G1',\n      minimumThreeScores: [ 1, 2, 3 ] \n      } \n   ]\n\nComparison of ``$minN`` and ``$bottomN`` Accumulators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBoth :group:`$minN` and :group:`$bottomN` accumulators can accomplish \nsimilar results.\n\nIn general:\n\n- :group:`$minN` has the advantage of finding minimum values \n  in no particular sort order. If you want to know the \n  minimum values for ``n`` documents use :group:`$minN`.\n\n- If guaranteing a particular sort order is a requirement \n  use :group:`$bottomN`. \n\n- Use :group:`$bottomN` if you don't intend on sorting on the output \n  values.\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use :group:`$minN` as an accumulator.\n\n:group:`$minN` is supported as an\n:ref:`aggregation expression <aggregation-expressions>`.\n\n:group:`$minN` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAggregation pipelines which call ``$minN`` are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>`. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         minScores: [ [ 1, 'PlayerD' ], [ 31, 'PlayerA' ], [ 33, 'PlayerB' ] ]\n      }\n   ]\n\nFinding the Minimum Three Documents Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$minN`` accumulator to find the minimum ``n``\nscores in each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G2',\n         minScores: [ [ 10, 'PlayerA' ], [ 14, 'PlayerB' ], [ 66, 'PlayerC' ] ]\n      },\n      {\n         _id: 'G1',\n         minScores: [ [ 1, 'PlayerD' ], [ 31, 'PlayerA' ], [ 33, 'PlayerB' ] ]\n      }\n   ]\n\nComputing ``n`` Based on the Group Key for ``$group``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $minN:\n                     {\n                        input: [\"$score\",\"$playerId\"],\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Uses ``$group`` to group the results by ``gameId``.\n- Specifies the fields that input for ``$minN`` with\n  ``input : [\"$score\",\"$playerId\"]``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: 'G2' }, gamescores: [ [ 10, 'PlayerA' ] ] },\n      {\n         _id: { gameId: 'G1' },\n         gamescores: [ [ 1, 'PlayerD' ], [ 31, 'PlayerA' ], [ 33, 'PlayerB' ] ]\n      }\n   ]\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minN.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: new Date(\"2016-01-01T12:01:00Z\") }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: {\n              date: new Date(\"2016-01-01T12:01:00Z\"),\n              timezone: \"Canada/Newfoundland\"\n          } }\n\n     - 31\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: {\n              date: ISODate(\"1998-11-07T00:40:00Z\"),\n              timezone: \"+0530\"\n          } }\n\n     - 10\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $minute: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$minute`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n.. include:: /includes/min-month-sample-data.rst\n\nThe following aggregation uses the :expression:`$minute` and other date\nexpressions to break down the ``date`` field:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "   :emphasize-lines: 10\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\" : 1,\n     \"year\" : 2014,\n     \"month\" : 1,\n     \"day\" : 1,\n     \"hour\" : 8,\n     \"minutes\" : 15,\n     \"seconds\" : 39,\n     \"milliseconds\" : 736,\n     \"dayOfYear\" : 1,\n     \"dayOfWeek\" : 4,\n     \"week\" : 0\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/minute.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { '_id' : 1, 'remainder' : 3 },\n     { '_id' : 2, 'remainder' : 0 }\n   ]\n\n.. _mod-negative-dividend-example:\n\nNegative Dividend\n~~~~~~~~~~~~~~~~~\n\nConsider a ``modExample`` collection that contains the following \ndocument:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mod.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { '_id' : 1, 'remainder' : -4 } ]\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/mod.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: new Date(\"2016-01-01\") }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: { date: new Date(\"Nov 7, 2003\") } }\n\n     - 11\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: ISODate(\"2000-01-01T00:00:00Z\") }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 8\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: {\n              date: ISODate(\"2000-01-01T00:00:00Z\"),\n              timezone: \"-0500\"\n          } }\n\n     - 12\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: {\n              date: Date(\"2016-01-01\"),\n              timezone: \"-0500\"\n          } }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $month: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$month`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n.. include:: /includes/min-month-sample-data.rst\n\nThe following aggregation uses the :expression:`$month` and other\ndate operators to break down the ``date`` field:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "   :emphasize-lines: 7\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\" : 1,\n     \"year\" : 2014,\n     \"month\" : 1,\n     \"day\" : 1,\n     \"hour\" : 8,\n     \"minutes\" : 15,\n     \"seconds\" : 39,\n     \"milliseconds\" : 736,\n     \"dayOfYear\" : 1,\n     \"dayOfWeek\" : 4,\n     \"week\" : 0\n   }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/month.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $objectToArray: { item: \"foo\", qty: 25 } }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/objectToArray.txt"
  },
  {
    "code": "          :copyable: false\n\n          [\n             {\n                \"k\" : \"item\",\n                \"v\" : \"foo\"\n             },\n             {\n                \"k\" : \"qty\",\n                \"v\" : 25\n             }\n          ]\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/objectToArray.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $objectToArray: {\n              item: \"foo\",\n              qty: 25,\n              size: { len: 25, w: 10, uom: \"cm\" }\n           } }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/objectToArray.txt"
  },
  {
    "code": "          :copyable: false\n\n          [\n             {\n                \"k\" : \"item\",\n                \"v\" : \"foo\"\n             },\n             {\n                \"k\" : \"qty\",\n                \"v\" : 25\n             },\n             {\n                \"k\" : \"size\",\n                \"v\" : {\n                   \"len\" : 25,\n                   \"w\" : 10,\n                   \"uom\" : \"cm\"\n                }\n             }\n          ]\n\nExamples\n--------\n\n``$objectToArray`` Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/objectToArray.txt"
  },
  {
    "code": "              :copyable: false\n\n              INSERT INTO T2 SELECT * FROM T1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "              :copyable: false\n\n              SELECT * INTO T2 FROM T1\n\n     - - Corresponds to the SQL statement:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "               :copyable: false\n\n               MERGE T2 AS TARGET\n               USING (SELECT * FROM T1) AS SOURCE\n               ON MATCH (T2.ID = SOURCE.ID)\n               WHEN MATCHED THEN\n                 UPDATE SET TARGET.FIELDX = SOURCE.FIELDY\n               WHEN NOT MATCHED THEN\n                 INSERT (FIELDX)\n                 VALUES (SOURCE.FIELDY)\n\n         - Create/Refresh Materialized Views\n\nBehaviors\n---------\n\n$out Read Operations Run on Secondary Replica Set Members\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 5.0, ``$out`` can run on \nreplica set secondary nodes if all the nodes in\ncluster have :ref:`featureCompatibilityVersion <view-fcv>` set \nto ``5.0`` or higher and the :doc:`/core/read-preference` is set to \nsecondary.\n\nRead operations of the ``$out`` statement occur on the \nsecondary nodes, while the write operations occur only on the \nprimary nodes.\n\nNot all driver versions support targeting of ``$out`` \noperations to replica set secondary nodes. Check your \n:driver:`driver </>` documentation to see when your driver added\nsupport for ``$out`` running on a secondary.\n\nCreate New Collection\n~~~~~~~~~~~~~~~~~~~~~\n\nThe ``$out`` operation creates a new collection if one does not\nalready exist.\n\nThe collection is not visible until the aggregation completes. If the\naggregation fails, MongoDB does not create the collection.\n\n.. _replace-existing-collection:\n\nReplace Existing Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the collection specified by the ``$out`` operation already\nexists, then upon completion of the aggregation, the ``$out``\nstage atomically replaces the existing collection with the new results\ncollection. Specifically, the ``$out`` operation:\n\n#. Creates a temp collection.\n#. Copies the indexes from the existing collection to the temp collection.\n#. Inserts the documents into the temp collection.\n#. Calls the :dbcommand:`renameCollection` command with ``dropTarget: true``\n   to rename the temp collection to the destination collection.\n\nIf specified collection exists and the ``$out`` operation specifies\n``timeseries`` options, then the following restrictions apply:\n\n#. The existing collection must be a time series collection.\n#. The existing collection must not be a view.\n#. The ``timeseries`` options included in the ``$out`` stage must\n   exactly match those on the existing collection.\n\nThe ``$out`` operation does not change any indexes that existed on the\nprevious collection. If the aggregation fails, the ``$out`` operation\nmakes no changes to the pre-existing collection.\n\nSchema Validation Errors\n````````````````````````\n\nIf your ``coll`` collection uses :ref:`schema validation\n<schema-validation-overview>` and has ``validationAction`` set to \n``error``, inserting an invalid document with ``$out`` throws an \nerror. The ``$out`` operation makes no changes to the pre-existing \ncollection and documents returned by the aggregation pipeline are not\nadded to the ``coll`` collection.\n\nIndex Constraints\n~~~~~~~~~~~~~~~~~\n\nThe pipeline will fail to complete if the documents produced by the\npipeline would violate any unique indexes, including the index on the\n``_id`` field of the original output collection.\n\nIf the ``$out`` operation modifies a collection with an\n:atlas:`Atlas Search </atlas-search>` index, you must delete and\nre-create the search index. Consider using :pipeline:`$merge` instead.\n\n``majority`` Read Concern\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/fact-aggregate-readConcern.rst\n\nInteraction with ``mongodump``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA :binary:`~bin.mongodump` started with :option:`--oplog\n<mongodump.--oplog>` fails if a client issues an aggregation pipeline\nthat includes ``$out`` during the dump process. See\n:option:`mongodump --oplog <mongodump.--oplog>` for more information.\n\nRestrictions\n~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Restrictions\n     - Description\n\n   * - :ref:`transactions <transactions>`\n\n     - An aggregation pipeline cannot use ``$out`` inside\n       :ref:`transactions <transactions>`.\n\n   * - :ref:`view definition <views-landing-page>`\n\n     - The ``$out`` stage is not allowed as part of a\n       view definition. If the view definition includes nested pipeline \n       (e.g. the view definition includes :pipeline:`$lookup` or \n       :pipeline:`$facet` stage), this ``$out`` stage \n       restriction applies to the nested pipelines as well.\n\n   * - :pipeline:`$lookup` stage\n\n     - You can't include the ``$out`` stage in the :pipeline:`$lookup`\n       stage's :ref:`nested pipeline <lookup-syntax-let-pipeline>`.\n\n   * - :pipeline:`$facet` stage\n\n     - :pipeline:`$facet` stage's :ref:`nested pipeline\n       <lookup-syntax-let-pipeline>` cannot include the\n       ``$out`` stage.\n\n   * - :pipeline:`$unionWith` stage\n\n     - :pipeline:`$unionWith` stage's :ref:`nested pipeline\n       <unionWith-pipeline>` cannot include the ``$out`` stage.\n\n   * - :readconcern:`\"linearizable\"` read concern\n\n     - .. include:: /includes/extracts/4.2-changes-out-linearizable.rst\n\nExamples\n--------\n\nIn the ``test`` database, create a collection ``books`` with the\nfollowing documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Dante\", \"books\" : [ \"The Banquet\", \"Divine Comedy\", \"Eclogues\" ] }\n      { \"_id\" : \"Homer\", \"books\" : [ \"The Odyssey\", \"Iliad\" ] }\n\nSecond Stage (``$out``):\n   The ``$out`` stage outputs the documents to the ``authors``\n   collection in the ``test`` database.\n\nTo view the documents in the output collection, run the following\noperation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"Homer\", \"books\" : [ \"The Odyssey\", \"Iliad\" ] }\n   { \"_id\" : \"Dante\", \"books\" : [ \"The Banquet\", \"Divine Comedy\", \"Eclogues\" ] }\n\nOutput to a Different Database\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   For a :ref:`replica set <replica-set>` or a standalone, if the\n   output database does not exist, ``$out`` also creates\n   the database.\n\n\n``$out`` can output to a collection in a database different from where the \naggregation is run.\n\nThe following aggregation operation pivots the data in the ``books``\ncollection to have titles grouped by authors and then writes the\nresults to the ``authors`` collection in the ``reporting`` database:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"Dante\", \"books\" : [ \"The Banquet\", \"Divine Comedy\", \"Eclogues\" ] }\n      { \"_id\" : \"Homer\", \"books\" : [ \"The Odyssey\", \"Iliad\" ] }\n\nSecond Stage (``$out``):\n   The ``$out`` stage outputs the documents to the ``authors``\n   collection in the ``reporting`` database.\n\nTo view the documents in the output collection, run the following\noperation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"Homer\", \"books\" : [ \"The Odyssey\", \"Iliad\" ] }\n   { \"_id\" : \"Dante\", \"books\" : [ \"The Banquet\", \"Divine Comedy\", \"Eclogues\" ] }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/out.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $percentile: {\n         input: <expression>,\n         p: [ <expression1>, <expression2>, ... ],\n         method: <string>\n      }\n   }\n\nCommand Fields\n--------------\n\n|operatorName| takes the following fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 17 17 51\n\n   * - Field\n     - Type\n     - Necessity\n     - Description\n\n   * - ``input``\n     - Expression\n     - Required\n     - |operatorName| calculates the percentile values of this data.\n       ``input`` must be a field name or an expression that evaluates to\n       a numeric type. If the expression cannot be converted to a\n       numeric type, the |operatorName| calculation ignores it.\n\n   * - ``p``\n     - Expression\n     - Required\n     - |operatorName| calculates a percentile value for each element in\n       ``p``. The elements represent percentages and must evaluate to\n       numeric values in the range ``0.0`` to ``1.0``, inclusive.\n\n       |operatorName| returns results in the same order as the elements\n       in ``p``.\n\n   * - ``method``\n     - String\n     - Required\n     - The method that ``mongod`` uses to calculate the percentile\n       value. The method must be ``'approximate'``.\n\nBehavior\n--------\n\n.. include:: /includes/aggregation/fact-behavior-percent-median.rst\n\nType of Operation\n~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-type-of-operation.rst\n\n.. _percentile-calculation-considerations:\n\nCalculation Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-calc-considerations.rst\n\n|operatorName| returns the minimum value for ``p = 0.0``.\n\n|operatorName| returns the maximum value for ``p = 1.0``.\n\nArray Input\n~~~~~~~~~~~\n\nIf you use |operatorName| as an aggregation expression in a\n:pipeline:`$project <$project>` stage, you can use an array as input.\nThe syntax is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $percentile: {\n         input: [ <expression1, <expression2>, .., <expressionN> ],\n         p: [ <expression1>, <expression2>, ... ],\n         method: <string>\n      }\n   }\n\nWindow Functions\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/aggregation/fact-setwindowfield.rst\n\nExamples\n--------\n\n.. include:: /includes/aggregation/example-setup-01.rst\n\nCalculate a Single Value as an Accumulator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an accumulator that calculates a single percentile value:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id: null, test01_percentiles: [ 67 ] }\n\nThe ``_id`` field value is ``null`` so ``$group`` selects all the\ndocuments in the collection.\n\nThe ``percentile`` accumulator takes its input data from the ``test01``\nfield.\n\nIn this example, the percentiles array, ``p``, has one value so the\n``$percentile`` operator only calculates one term for the ``test01``\ndata. The 95th percentile value is ``67``.\n\nCalculate Multiple Values as an Accumulator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an accumulator that calculates multiple percentile values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "   :copyable: false\n\n  {\n      _id: null,\n     test01_percentiles: [ 62, 64, 67, 67 ],\n     test02_percentiles: [ 81, 82, 83, 83 ],\n     test03_percentiles: [ 78, 79, 80, 80 ],\n     test03_percent_alt: [ 80, 78, 79, 80 ]\n  }\n\nThe ``_id`` field value is ``null`` so ``$group`` selects all the\ndocuments in the collection.\n\nThe ``percentile`` accumulator calculates values for three fields,\n``test01``, ``test02``, and ``test03``.\n\nThe accumulator calculates the 50th, 75th, 90th, and 95th percentile\nvalues for each input field. \n\nThe percentile values are returned in the same order as the elements of\n``p``. The values in ``test03_percentiles`` and ``test03_percent_alt``\nare the same, but their order is different. The order of elements in\neach result array matches the corresponding order of elements in ``p``. \n\nUse |operatorName| in a ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn a ``$project`` stage, |operatorName| is an aggregation expression and\ncalculates values for each document.\n\nYou can use a field name or an array as input in a ``$project`` stage.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "   :copyable: false\n\n   { studentId: '2345', testPercentiles: [ 80, 81 ] },\n   { studentId: '2356', testPercentiles: [ 79, 83 ] },\n   { studentId: '2358', testPercentiles: [ 78, 82 ] },\n   { studentId: '2367', testPercentiles: [ 72, 77 ] },\n   { studentId: '2369', testPercentiles: [ 60, 72 ] }\n\nWhen |operatorName| is an aggregation expression there is a result for\neach ``studentId``.\n\nUse |operatorName| in a ``$setWindowField`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo base your percentile values on local data trends, use |operatorName|\nin a ``$setWindowField`` aggregation pipeline stage.\n\nThis example creates a window to filter scores:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "   :copyable: false\n\n   { studentId: '2356', test01_95percentile: [ 62 ] },\n   { studentId: '2369', test01_95percentile: [ 62 ] },\n   { studentId: '2345', test01_95percentile: [ 64 ] },\n   { studentId: '2367', test01_95percentile: [ 67 ] },\n   { studentId: '2358', test01_95percentile: [ 67 ] }\n\nIn this example, the percentile calculation for each document also\nincorporates data from the three documents before and after it.\n\nLearn More\n----------\n\nThe :group:`$median <$median>` operator is a special case of the\n|operatorName| operator that uses a fixed value of ``p: [ 0.5 ]``.\n\nFor more information on window functions, see:\n:pipeline:`$setWindowFields`.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/percentile.txt"
  },
  {
    "code": "                :copyable: false\n\n                {\n                  \"query\" : <document>,\n                  \"sort\" : <document>,\n                  \"projection\" : <document>\n                }\n\n         * - ``isActive``\n\n           - .. include:: /includes/planCacheStats/isActive.rst\n\n         * - ``planCacheShapeHash``\n\n           - .. _plancachestats-planCacheShapeHash:\n         \n             .. include:: /includes/planCacheStats/queryHash.rst\n\n         * - ``planCacheKey``\n\n           - .. _plancachestats-planCacheKey:\n\n             .. include:: /includes/planCacheStats/planCacheKey.rst\n\n         * - ``cachedPlan``\n\n           - .. _plancachestats-cachedPlan:\n\n             .. include:: /includes/planCacheStats/cachedPlan.rst\n\n         * - ``works``\n\n           - .. include:: /includes/planCacheStats/works.rst\n\n         * - ``timeOfCreation``\n           - Time of creation for the entry.\n\n         * - ``creationExecStats``\n\n           - .. _plancachestats-creationExecStats:\n\n             An array of execution stats documents. The array contains a\n             document for each candidate plan.\n\n             For details on the execution stats, see\n             :data:`explain.executionStats`.\n\n         * - ``candidatePlanScores``\n\n           - .. _plancachestats-candidatePlanScores:\n\n             An array of scores for the candidate plans listed in the\n             ``creationExecStats`` array.\n\n         * - ``indexFilterSet``\n\n           - .. include:: /includes/planCacheStats/indexFilterSet.rst\n\n         * - ``estimatedSizeBytes``\n\n           - .. include:: /includes/planCacheStats/estimatedSizeBytes.rst\n\n         * - ``querySettings``\n\n           - .. _plancachestats-querySettings:\n           \n             .. include:: /includes/planCacheStats-querySettings.rst\n\n         * - ``host``\n\n           - .. _plancachestats-host:\n\n             .. include:: /includes/planCacheStats/host.rst\n\n         * - ``shard``\n\n           - .. _plancachestats-shard:\n\n             The name of the shard from which :pipeline:`$planCacheStats`\n             retrieved the cache entry.\n\n             Only available if run on a sharded cluster.\n\n   .. tab:: {+sbe-title+}\n      :tabid: sbe-sample-output\n      \n      For queries that use the {+sbe+}, ``$planCacheStats`` returns a\n      document similar to the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/planCacheStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {                                             // Plan Cache Entry 1\n       version: '2',\n       planCacheShapeHash: '478AD696',\n       planCacheKey: '21AE23AD',\n       isActive: true,\n       works: Long(\"7\"),\n       timeOfCreation: ISODate(\"2023-05-22T20:33:49.031Z\"),\n       cachedPlan: {\n         ...\n       },\n       indexFilterSet: false,\n       isPinned: false,\n       estimatedSizeBytes: Long(\"8194\"),\n       host: 'mongodb1.example.net:27018'\n     },\n     {                                             // Plan Cache Entry 2\n          version: '2',\n          planCacheShapeHash: '3D8AFDC6',\n          planCacheKey: '1C2C4360',\n          isActive: true,\n          works: Long(\"6\"),\n          timeOfCreation: ISODate(\"2023-05-22T20:33:50.584Z\"),\n          cachedPlan: {\n            ...\n          },\n          indexFilterSet: false,\n          isPinned: false,\n          estimatedSizeBytes: Long(\"11547\"),\n          host: 'mongodb1.example.net:27018'\n        },\n        {                                          // Plan Cache Entry 3\n          version: '2',\n          planCacheShapeHash: '27285F9B',\n          planCacheKey: '20BB9404',\n          isActive: true,\n          works: Long(\"1\"),\n          timeOfCreation: ISODate(\"2023-05-22T20:33:49.051Z\"),\n          cachedPlan: {\n            ...\n          },\n          indexFilterSet: false,\n          isPinned: false,\n          estimatedSizeBytes: Long(\"7406\"),\n          host: 'mongodb1.example.net:27018'\n        },\n        {                                          // Plan Cache Entry 4\n          version: '2',\n          planCacheShapeHash: '478AD696',\n          planCacheKey: 'B1435201',\n          isActive: true,\n          works: Long(\"5\"),\n          timeOfCreation: ISODate(\"2023-05-22T20:33:49.009Z\"),\n          cachedPlan: {\n            ...\n          },\n          indexFilterSet: false,\n          isPinned: false,\n          estimatedSizeBytes: Long(\"7415\"),\n          host: 'mongodb1.example.net:27018'\n        }\n      ],\n\n.. warning::\n\n   .. include:: /includes/plan-cache-rename.rst\n\nSee also :ref:`plan-cache-key`. \n\n.. _planCacheStats-cache-entry-for-query-hash:\n\nFind Cache Entry Details for a Query Hash\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo return plan cache information for a particular query hash, the\n:pipeline:`$planCacheStats` stage can be followed by a\n:pipeline:`$match` on the ``planCacheKey`` field.\n\nThe following aggregation pipeline uses :pipeline:`$planCacheStats`\nfollowed by a :pipeline:`$match` stage to return specific information\nfor a particular query hash:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/planCacheStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       version: '2',\n       planCacheShapeHash: '478AD696',\n       planCacheKey: 'B1435201',\n       isActive: true,\n       works: Long(\"5\"),\n       timeOfCreation: ISODate(\"2023-05-22T20:33:49.009Z\"),\n       cachedPlan: {\n         slots: '$$RESULT=s11 env: { s3 = 1684787629009 (NOW), s6 = Nothing, s5 = Nothing, s1 = TimeZoneDatabase(Asia/Kuwait...Etc/UCT) (timeZoneDB), s10 = {\"item\" : 1, \"price\" : 1}, s2 = Nothing (SEARCH_META) }',\n         stages: '[2] nlj inner [] [s4, s7, s8, s9, s10] \\n' +\n           '    left \\n' +\n           '        [1] cfilter {(exists(s5) && exists(s6))} \\n' +\n           '        [1] ixseek s5 s6 s9 s4 s7 s8 [] @\"358822b7-c129-47b7-ad7f-40017a51b03c\" @\"item_1_price_1\" true \\n' +\n           '    right \\n' +\n           '        [2] limit 1 \\n' +\n           '        [2] seek s4 s11 s12 s7 s8 s9 s10 none none [] @\"358822b7-c129-47b7-ad7f-40017a51b03c\" true false \\n'\n       },\n       indexFilterSet: false,\n       isPinned: false,\n       estimatedSizeBytes: Long(\"7415\"),\n       host: 'mongodb1.example.net:27018'\n     }\n   ]\n\n.. warning::\n\n   .. include:: /includes/plan-cache-rename.rst\n\nSee also :ref:`plan-cache-key` and :ref:`query-hash`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/planCacheStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, variance : 64.66666666666667 }\n   { _id : 2, variance : 64.66666666666667 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/pow.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $project: { contact: 1, \"contact.address.country\": 1 } }\n\nThe error occurs regardless of the order in which the parent document\nand embedded field are specified. The following :pipeline:`$project`\nfails with the same error:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/project.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $project: { \"contact.address.country\": 1, contact: 1 } }\n\n``$project`` Stage Placement\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. |$project| replace:: ``$project``\n\n.. include:: /includes/aggregation/fact-project-stage-placement.rst\n\nConsiderations\n--------------\n\nEmpty Specification\n~~~~~~~~~~~~~~~~~~~\n\nMongoDB returns an error if the :pipeline:`$project` stage is passed an\nempty document. \n\nFor example, running the following pipeline produces an error: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/project.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { x: [ 'Pepperoni' ] } ]\n\nThe following example uses an array index (``$name.0``) to attempt to\nreturn the pizza:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/project.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { x: [] } ]\n\n.. seealso::\n\n   - :doc:`/tutorial/aggregation-zip-code-data-set`\n   - :doc:`/tutorial/aggregation-with-user-preference-data`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/project.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $push: <expression> }\n\nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nWhen using :group:`$push` in a :pipeline:`$group` stage, the order of \nthe documents coming into the pipeline determines the order of the \ndocuments in the output array. To guarantee a defined order, the\n:pipeline:`$group` pipeline stage should follow a :pipeline:`$sort`\nstage.\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/push.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : { \"day\" : 46, \"year\" : 2014 },\n      \"itemsSold\" : [\n         { \"item\" : \"abc\", \"quantity\" : 10 },\n         { \"item\" : \"xyz\", \"quantity\" : 10 },\n         { \"item\" : \"xyz\", \"quantity\" : 5 },\n         { \"item\" : \"xyz\", \"quantity\" : 10 }\n      ]\n   }\n   {\n      \"_id\" : { \"day\" : 34, \"year\" : 2014 },\n      \"itemsSold\" : [\n         { \"item\" : \"jkl\", \"quantity\" : 1 },\n         { \"item\" : \"xyz\", \"quantity\" : 5 }\n      ]\n   }\n   {\n      \"_id\" : { \"day\" : 1, \"year\" : 2014 },\n      \"itemsSold\" : [ { \"item\" : \"abc\", \"quantity\" : 2 } ]\n   }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$push` in the :pipeline:`$setWindowFields`\nstage to output an array of cake sales ``quantity`` values for each\n``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/push.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"quantitiesForState\" : [ 162 ] }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"quantitiesForState\" : [ 162, 120 ] }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"quantitiesForState\" : [ 162, 120, 145 ] }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"quantitiesForState\" : [ 134 ] }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"quantitiesForState\" : [ 134, 104 ] }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"quantitiesForState\" : [ 134, 104, 140 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/push.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   db.aggregate( [\n      { $querySettings: { showDebugQueryShape: <boolean> } },\n      // Add any additional pipeline stages after $querySettings\n      ... \n   ] )\n\nCommand Fields\n--------------\n\n``$querySettings`` takes this field:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 15 15 55\n\n   * - Field\n     - Type\n     - Necessity\n     - Description\n\n   * - ``showDebugQueryShape``\n     - boolean\n     - Optional\n     - If ``true``, ``$querySettings`` returns a debugging version of\n       the :term:`query shape` output. You'll see an example in the next\n       section. For output details, see :ref:`queryStats-queryShape`.\n\n       Default is ``false``.\n\nExamples\n--------\n\nThe following examples create a collection, add query settings, and\nreturn the settings:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Create the example collection and indexes\n\n      Run:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/querySettings.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         db.aggregate( [ {\n            $querySettings: { showDebugQueryShape: true }\n         } ] )\n\n      Because ``showDebugQueryShape`` is ``true``, the\n      ``debugQueryShape`` document is included in the output. You can\n      use the ``queryShapeHash`` identifier to locate the query\n      settings. ``queryShapeHash`` and ``debugQueryShape`` are\n      highlighted in this output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/querySettings.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3, 19-24\n\n         [\n            {\n               queryShapeHash: 'AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1',\n               settings: {\n                  indexHints: [\n                     {\n                        ns: { db: 'test', coll: 'pizzaOrders' },\n                        allowedIndexes: [ 'orderDate_1' ]\n                     }\n                  ],\n                  queryFramework: 'classic',\n                  comment: 'Index hint for orderDate_1 index to improve query performance'\n               },\n               representativeQuery: {\n                  find: 'pizzaOrders',\n                  filter: { orderDate: { '$gt': ISODate('2023-01-20T00:00:00.000Z') } },\n                  sort: { totalNumber: 1 },\n                  '$db': 'test'\n               },\n               debugQueryShape: {\n                  cmdNs: { db: 'test', coll: 'pizzaOrders' },\n                  command: 'find',\n                  filter: { orderDate: { '$gt': '?date' } },\n                  sort: { totalNumber: 1 }\n               }\n            }\n         ]\n\nLearn More\n----------\n\n- :ref:`query-plans-query-optimization`\n- :dbcommand:`setQuerySettings`\n- :dbcommand:`removeQuerySettings`\n- :pipeline:`$queryStats`\n- :ref:`query-shapes`\n- :ref:`Query statistics for query shapes <queryStats-queryShape>`\n- :ref:`operation-rejection-filters`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/querySettings.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\":{\"$date\":\"2023-11-27T20:58:59.212+00:00\"},\"s\":\"D1\", \"c\":\"QRYSTATS\",\n     \"id\":7808300, \"ctx\":\"conn31\",\"msg\":\"Logging invocation\n     $queryStats\",\"attr\":{\"commandSpec\":{\"transformIdentifiers\":{\"algorithm\":\"hmac-sha-256\",\"hmacKey\":\"###\"}}\n   }\n\n``$queryStats`` Output Included\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/queryStats/toggle-logging.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"t\":{\"$date\":\"2023-11-27T20:58:59.212+00:00\"},\"s\":\"D1\", \"c\":\"QRYSTATS\",\n     \"id\":7808300, \"ctx\":\"conn31\",\"msg\":\"Logging invocation\n     $queryStats\",\"attr\":{\"commandSpec\":{\"transformIdentifiers\":{\"algorithm\":\"hmac-sha-256\",\"hmacKey\":\"###\"}}\n   }\n\n   {\n     \"t\":{\"$date\":\"2023-11-27T20:58:59.212+00:00\"},\"s\":\"D3\", \"c\":\"QRYSTATS\",\n     \"id\":7808301, \"ctx\":\"conn31\",\"msg\":\"Logging all outputs of\n     $queryStats\",\"attr\":{\"thisOutput\":\"{key: {queryShape: {cmdNs: {db:\n     \\\"hYt+nW/sr1/Zc3YR8nlGWFoesJdvywkw+cR9rMGzXU4=\\\", coll:\n     \\\"TRx6R3rvstYgX96gNmeOi5E3QVsOqzRbv7A9j3q7OvM=\\\"}, command: \\\"find\\\",\n     filter: {Wb/Uu22DzKZ/Os+ZvLgPKFKGZPV4cIMZ3Ybv1HfYih4=: {$lt:\n     \\\"?date\\\"}}, projection: {r5zQZllsGoqQuQp4Jm0eH2M6RrMqH84KHowcFaiverg=:\n     true}, sort: {r5zQZllsGoqQuQp4Jm0eH2M6RrMqH84KHowcFaiverg=: 1}},\n     readConcern: {}, collectionType: \\\"nonExistent\\\"}, metrics:\n     {lastExecutionMicros: 208, execCount: 21, totalExecMicros: {sum: 6079,\n     max: 1875, min: 198, sumOfSquares: 4401645}, firstResponseExecMicros:\n     {sum: 6079, max: 1875, min: 198, sumOfSquares: 4401645}, docsReturned:\n     {sum: 0, max: 0, min: 0, sumOfSquares: 0}, firstSeenTimestamp:\n     2023-11-27T19:15:51.317Z, latestSeenTimestamp:\n     2023-11-27T20:55:51.309Z}, asOf: 2023-11-27T20:58:59.212Z}\"}\n   }\n\n   {\n     \"t\":{\"$date\":\"2023-11-27T20:58:59.213+00:00\"},\"s\":\"D3\", \"c\":\"QRYSTATS\",\n     \"id\":7808301, \"ctx\":\"conn31\",\"msg\":\"Logging all outputs of\n     $queryStats\",\"attr\":{\"thisOutput\":\"{key: {queryShape: {cmdNs: {db:\n     \\\"j+Caz+gxt7vl++gmeCAWrvyhDL17WaNrSIDi6Au7VI0=\\\", coll:\n     \\\"f/LCkK/kVEbt4fk2NNbyDPhxas+kzCLLcVbjeNBbhyg=\\\"}, let:\n     {pUZAyEEImSXcu8deG05tfIf6F/H92YsFnkZXIeRQtgc=: \\\"?number\\\"}, command:\n     \\\"aggregate\\\", pipeline: [{$group: {_id: \\\"?number\\\",\n     5E6FSc5VxCvIZK0jrqkY3k3aX51jSc73hQwO/8kH0lo=: {$sum: \\\"?number\\\"}}}],\n     explain: true, allowDiskUse: false}, client: {driver: {name:\n     \\\"nodejs|mongosh\\\", version: \\\"5.1.0\\\"}, os: {type: \\\"Darwin\\\", name:\n     \\\"darwin\\\", architecture: \\\"arm64\\\", version: \\\"22.6.0\\\"}, platform:\n     \\\"Node.js v16.19.1, LE (unified)\\\", version: \\\"5.1.0|1.8.0\\\",\n     application: {name: \\\"mongosh 1.8.0\\\"}}, collectionType: \\\"collection\\\",\n     cursor: {batchSize: \\\"?number\\\"}}, metrics: {lastExecutionMicros: 0,\n     execCount: 1, totalExecMicros: {sum: 0, max: 0, min: 0, sumOfSquares:\n     0}, firstResponseExecMicros: {sum: 0, max: 0, min: 0, sumOfSquares: 0},\n     docsReturned: {sum: 0, max: 0, min: 0, sumOfSquares: 0},\n     firstSeenTimestamp: 2023-11-27T19:31:36.463Z, latestSeenTimestamp:\n     2023-11-27T19:31:36.463Z}, asOf: 2023-11-27T20:58:59.213Z}\"}\n   }\n\n   // Additional $queryStats output...\n\nLearn More\n----------\n\n- :ref:`auditing`\n\n- :ref:`audit-message`\n\n- :atlas:`Configure a Custom Auditing Filter </database-auditing/#std-label-auditing-custom-filter>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/queryStats/toggle-logging.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       key: {\n         queryShape: {\n           cmdNs: { db: 'test', coll: 'products' },\n           command: 'find',\n           filter: { item: { '$eq': '?string' } }\n         },\n         client: {\n           driver: { name: 'nodejs|mongosh', version: '5.1.0' },\n           os: {\n             type: 'Darwin',\n             name: 'darwin',\n             architecture: 'arm64',\n             version: '22.6.0'\n           },\n           platform: 'Node.js v16.19.1, LE (unified)',\n           version: '5.1.0|1.8.0',\n           application: { name: 'mongosh 1.8.0' }\n         },\n         collectionType: 'collection'\n       },\n       keyHash: 'dsoJ+LHAru0z6MJ1/IygJnnLTrlpVYYmPnlmNZbZrLI=',\n       metrics: {\n         lastExecutionMicros: Long(\"4254\"),\n         execCount: Long(\"1\"),\n         totalExecMicros: {\n           sum: Long(\"4254\"),\n           max: Long(\"4254\"),\n           min: Long(\"4254\"),\n           sumOfSquares: Decimal128(\"18096516\")\n         },\n         firstResponseExecMicros: {\n           sum: Long(\"4254\"),\n           max: Long(\"4254\"),\n           min: Long(\"4254\"),\n           sumOfSquares: Decimal128(\"18096516\")\n         },\n         docsReturned: {\n           sum: Long(\"1\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"1\")\n         },\n         firstSeenTimestamp: ISODate(\"2023-09-14T12:30:27.989Z\"),\n         latestSeenTimestamp: ISODate(\"2023-09-14T12:30:27.989Z\")\n       },\n       asOf: Timestamp({ t: 1694695007, i: 0 })\n     },\n     {\n       key: {\n         queryShape: {\n           cmdNs: { db: 'test', coll: 'products' },\n           command: 'aggregate',\n           pipeline: [\n             { '$match': { qty: { '$gt': '?number' } } }\n           ]\n         },\n         apiVersion: '1',\n         client: {\n           driver: { name: 'nodejs|mongosh', version: '5.1.0' },\n           os: {\n             type: 'Darwin',\n             name: 'darwin',\n             architecture: 'arm64',\n             version: '22.6.0'\n           },\n           platform: 'Node.js v16.19.1, LE (unified)',\n           version: '5.1.0|1.8.0',\n           application: { name: 'mongosh 1.8.0' }\n         },\n         collectionType: 'collection',\n         cursor: { batchSize: '?number' }\n       },\n       keyHash: '2QLBfL0m1lliStdN4XvBjqVBtZQ6ffaB2L1pJ99twT8=',\n       metrics: {\n         lastExecutionMicros: Long(\"350\"),\n         execCount: Long(\"3\"),\n         totalExecMicros: {\n           sum: Long(\"3084\"),\n           max: Long(\"2499\"),\n           min: Long(\"235\"),\n           sumOfSquares: Decimal128(\"6422726\")\n         },\n         firstResponseExecMicros: {\n           sum: Long(\"3084\"),\n           max: Long(\"2499\"),\n           min: Long(\"235\"),\n           sumOfSquares: Decimal128(\"6422726\")\n         },\n         docsReturned: {\n           sum: Long(\"3\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"3\")\n         },\n         firstSeenTimestamp: ISODate(\"2023-11-29T21:16:17.796Z\"),\n         latestSeenTimestamp: ISODate(\"2023-11-29T21:17:12.385Z\")\n       },\n       asOf: Timestamp({ t: 1701292827, i: 0 })\n     }\n   ]\n\n.. _queryStats-example-transformed:\n\nTransformed Example\n~~~~~~~~~~~~~~~~~~~\n\nInput:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/queryStats.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     {\n       key: {\n         queryShape: {\n           cmdNs: {\n             db: 'Mtrt3iG7dsX5c5uCSIhSVlcu5qD3u3xx2EQnS1dJLxM=',\n             coll: '3oJE6AyOuf8h5NqWiXETxulFlPm3QUXbMnMjL2EqAU4='\n           },\n           command: 'find',\n           filter: {\n             'VWVRow7Ure92ajRPfrpWiU8OtDeWcLePFIq0+tooBng=': { '$eq': '?string' }\n           }\n         },\n         client: {\n           driver: { name: 'nodejs|mongosh', version: '5.1.0' },\n           os: {\n             type: 'Darwin',\n             name: 'darwin',\n             architecture: 'arm64',\n             version: '22.6.0'\n           },\n           platform: 'Node.js v16.19.1, LE (unified)',\n           version: '5.1.0|1.8.0',\n           application: { name: 'mongosh 1.8.0' }\n         },\n         collectionType: 'collection'\n       },\n       keyHash: 'q4vxam+wbk8tTrl8D0MDFH1LQAbI8fWspfkGKhEUROk=',\n       metrics: {\n         lastExecutionMicros: Long(\"4254\"),\n         execCount: Long(\"1\"),\n         keysExamined: { \n           sum: Int(\"5\"),\n           max: Long(\"5\"),\n           min: Long(\"5\"),\n           sumOfSquares: Decimal128(\"25\") \n         },\n         docsExamined: {\n           sum: Long(\"1\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"1\")\n         },\n         hasSortStage: false,\n         usedDisk: false,\n         fromMultiPlanner: false, \n         fromPlanCache: true, \n         totalExecMicros: {\n           sum: Long(\"4254\"),\n           max: Long(\"4254\"),\n           min: Long(\"4254\"),\n           sumOfSquares: Decimal128(\"18096516\")\n         },\n         firstResponseExecMicros: {\n           sum: Long(\"4254\"),\n           max: Long(\"4254\"),\n           min: Long(\"4254\"),\n           sumOfSquares: Decimal128(\"18096516\")\n         },\n         docsReturned: {\n           sum: Long(\"1\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"1\")\n         },\n         firstSeenTimestamp: ISODate(\"2023-09-14T12:30:27.989Z\"),\n         latestSeenTimestamp: ISODate(\"2023-09-14T12:30:27.989Z\")\n       },\n       asOf: Timestamp({ t: 1694695712, i: 0 })\n     },\n     {\n       key: {\n         queryShape: {\n           cmdNs: {\n             db: 'Mtrt3iG7dsX5c5uCSIhSVlcu5qD3u3xx2EQnS1dJLxM=',\n             coll: '3oJE6AyOuf8h5NqWiXETxulFlPm3QUXbMnMjL2EqAU4='\n           },\n           command: 'aggregate',\n           pipeline: [\n             {\n               '$match': {\n                 'RVqrwNEPotzdKnma/T7s4YcgNvpqO29BMDoni2N4IMI=': { '$gt': '?number' }\n               }\n             }\n           ]\n         },\n         apiVersion: '1',\n         client: {\n           driver: { name: 'nodejs|mongosh', version: '5.1.0' },\n           os: {\n             type: 'Darwin',\n             name: 'darwin',\n             architecture: 'arm64',\n             version: '22.6.0'\n           },\n           platform: 'Node.js v16.19.1, LE (unified)',\n           version: '5.1.0|1.8.0',\n           application: { name: 'mongosh 1.8.0' }\n         },\n         collectionType: 'collection',\n         cursor: { batchSize: '?number' }\n       },\n       keyHash: 'HEhpQTYB+/wVoHLkOkMd+EC2jguQlMJ1N/vTE7+b8Js=',\n       metrics: {\n         lastExecutionMicros: Long(\"350\"),\n         execCount: Long(\"3\"),\n         keysExamined: { \n           sum: Int(\"5\"),\n           max: Long(\"5\"),\n           min: Long(\"5\"),\n           sumOfSquares: Decimal128(\"25\") \n         },\n         docsExamined: {\n           sum: Long(\"1\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"1\")\n         },\n         hasSortStage: false,\n         usedDisk: false,\n         fromMultiPlanner: false, \n         fromPlanCache: true, \n         totalExecMicros: {\n           sum: Long(\"3084\"),\n           max: Long(\"2499\"),\n           min: Long(\"235\"),\n           sumOfSquares: Decimal128(\"6422726\")\n         },\n         firstResponseExecMicros: {\n           sum: Long(\"3084\"),\n           max: Long(\"2499\"),\n           min: Long(\"235\"),\n           sumOfSquares: Decimal128(\"6422726\")\n         },\n         docsReturned: {\n           sum: Long(\"3\"),\n           max: Long(\"1\"),\n           min: Long(\"1\"),\n           sumOfSquares: Decimal128(\"3\")\n         },\n         firstSeenTimestamp: ISODate(\"2023-11-29T21:16:17.796Z\"),\n         latestSeenTimestamp: ISODate(\"2023-11-29T21:17:12.385Z\")\n       },\n       asOf: Timestamp({ t: 1701293302, i: 0 })\n     },\n   ]\n\nMongoDB Atlas Data Collection\n-----------------------------\n\nMongoDB Atlas periodically uses ``$queryStats`` to collect anonymized\ndata about your queries, which helps improve MongoDB products. Your data\nmay also be used to make feature suggestions based on usage. MongoDB\nretains the data it collects with ``$queryStats`` for four years.\n\nWhen Atlas runs ``$queryStats`` on your deployment, it uses a unique\nHMAC key per Atlas organization to transform your data and avoid\ncollecting sensitive information.\n\n.. toctree::\n   :titlesonly: \n   :hidden: \n\n   Toggle Log Output </reference/operator/aggregation/queryStats/toggle-logging>\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/queryStats.txt"
  },
  {
    "code": "   :copyable: false\r\n\r\n   {\r\n     \"_id\" : ObjectId(\"5c50aec71c75c59232b3ede4\"),\r\n     \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224290\"),\r\n     \"angle_b\" : NumberDecimal(\"0.6435011087932843868028092287173227\"),\r\n     \"angle_c\" : NumberDecimal(\"1.570796326794896619231321691639752\"),\r\n     \"angle_a_deg\" : NumberDecimal(\"53.13010235415597870314438744090659\"),\r\n     \"angle_b_deg\" : NumberDecimal(\"36.86989764584402129685561255909341\"),\r\n     \"angle_c_deg\" : NumberDecimal(\"90.00000000000000000000000000000000\")\r\n   }\r\n\r\nSince ``angle_a``, ``angle_b``, and ``angle_c`` are stored as \r\n:ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n:expression:`$radiansToDegrees` is a 128-bit decimal. \r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/radiansToDegrees.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"donorId\" : 1000, \"amount\" : 27 }\n   { \"donorId\" : 1001, \"amount\" : 10 }\n   { \"donorId\" : 1002, \"amount\" : 88 }\n   { \"donorId\" : 1003, \"amount\" : 73 }\n   { \"donorId\" : 1004, \"amount\" : 5 }\n\nSelect Random Items From a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use ``$rand`` in an aggregation pipeline to select random\ndocuments from a collection. Consider a collection of voter records:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rand.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"name\" : \"Archibald\", \"registered\" : true }\n   { \"name\" : \"Debarge\", \"registered\" : false }\n   { \"name\" : \"Humphrey\", \"registered\" : true }\n\n.. note::\n\n   The number of documents selected is different each time. If you need\n   to select an exact number of documents, consider using\n   :pipeline:`$sample` instead of ``$rand``.\n\n.. seealso::\n\n   - :query:`$rand (query) <$rand>`\n   - :pipeline:`$sample`\n   - :expression:`$round`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rand.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $rank: { } }\n\n:group:`$rank` does not accept any parameters.\n\n.. seealso::\n\n   :group:`$denseRank`\n\n.. _rank-behavior:\n\nBehavior\n--------\n\n.. include:: /includes/rank-and-denseRank-behavior.rst\n\nExamples\n--------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nRank Partitions by an Integer Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$rank` in the :pipeline:`$setWindowFields`\nstage to output the ``quantity`` rank of the cake sales for each\n``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rank.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"rankQuantityForState\" : 1 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"rankQuantityForState\" : 3 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"rankQuantityForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"rankQuantityForState\" : 3 }\n\nRank Partitions by a Date Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example shows how to use dates with :group:`$rank` in the\n:pipeline:`$setWindowFields` stage to output the ``orderDate`` rank of\nthe cake sales for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rank.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"rankOrderDateForState\" : 1 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"rankOrderDateForState\" : 2 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"rankOrderDateForState\" : 3 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"rankOrderDateForState\" : 1 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"rankOrderDateForState\" : 2 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"rankOrderDateForState\" : 3 }\n\n.. _rank-duplicate-null-missing-values-example:\n\nRank Partitions Containing Duplicate Values, Nulls, or Missing Data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/setWindowFields-duplicates-example-collection.rst\n\nThis example uses :group:`$rank` in the :pipeline:`$setWindowFields`\nstage to output the ``quantity`` rank from the\n``cakeSalesWithDuplicates`` collection for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rank.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 9-12\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"rankQuantityForState\" : 1 }\n   { \"_id\" : 9, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : 162, \"rankQuantityForState\" : 1 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"rankQuantityForState\" : 3 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"rankQuantityForState\" : 4 }\n   { \"_id\" : 10, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"quantity\" : null, \"rankQuantityForState\" : 5 }\n   { \"_id\" : 11, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-05-11T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 39, \"rankQuantityForState\" : 5 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"rankQuantityForState\" : 1 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 6, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 41, \"quantity\" : 134, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 7, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-01T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 34, \"quantity\" : 134, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 8, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2020-01-02T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 40, \"quantity\" : 134, \"rankQuantityForState\" : 2 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"rankQuantityForState\" : 6 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/rank.txt"
  },
  {
    "code": "          :copyable: false\n\n           {\n              $reduce: {\n                 input: [\"a\", \"b\", \"c\"],\n                 initialValue: \"\",\n                 in: { $concat : [\"$$value\", \"$$this\"] }\n               }\n           }\n\n     - ``\"abc\"``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $reduce: {\n                input: [ 1, 2, 3, 4 ],\n                initialValue: { sum: 5, product: 2 },\n                in: {\n                   sum: { $add : [\"$$value.sum\", \"$$this\"] },\n                   product: { $multiply: [ \"$$value.product\", \"$$this\" ] }\n                }\n             }\n          }\n\n     - ``{ \"sum\" : 15, \"product\" : 48 }``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $reduce: {\n                input: [ [ 3, 4 ], [ 5, 6 ] ],\n                initialValue: [ 1, 2 ],\n                in: { $concatArrays : [\"$$value\", \"$$this\"] }\n             }\n          }\n\n     - ``[ 1, 2, 3, 4, 5, 6 ]``\n\nExamples\n--------\n\nMultiplication\n~~~~~~~~~~~~~~\n\nProbability\n```````````\n\nA collection named ``events`` contains the events of a probability\nexperiment. Each experiment can have multiple ``events``, such as\nrolling a die several times or drawing several cards **(without replacement)**\nin succession to achieve a desired result. In order to obtain the\noverall probability of the experiment, we will need to multiply the\nprobability of each event in the experiment.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : \"dak\", results : 0.00603318250377101 }\n   { _id : \"r5\", results : 0.16666666666667 }\n   { _id : \"r16\", results : 0.027777777777778886 }\n   { _id : \"d3rc\", results : 0.11764705882352879 }\n\nDiscounted Merchandise\n``````````````````````\n\nA collection named ``clothes`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : ObjectId(\"57c893067054e6e47674ce01\"), discountedPrice : 9 }\n   { _id : ObjectId(\"57c9932b7054e6e47674ce12\"), discountedPrice : 24.224999999999998 }\n   { _id : ObjectId(\"57c993457054e6e47674ce13\"), discountedPrice : 24.224999999999998 }\n   { _id : ObjectId(\"57c993687054e6e47674ce14\"), discountedPrice : 17.5 }\n   { _id : ObjectId(\"57c993837054e6e47674ce15\"), discountedPrice : 54 }\n\nString Concatenation\n~~~~~~~~~~~~~~~~~~~~\n\nA collection named ``people`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, name : \"Melissa\", bio : \"My hobbies include: softball, drawing, reading\" }\n   { _id : 2, name : \"Brad\", bio : \"My hobbies include: gaming, skateboarding\" }\n   { _id : 3, name : \"Scott\", bio : \"My hobbies include: basketball, music, fishing\" }\n   { _id : 4, name : \"Tracey\", bio : \"My hobbies include: acting, yoga\" }\n   { _id : 5, name : \"Josh\", bio : \"My hobbies include: programming\" }\n\nArray Concatenation\n~~~~~~~~~~~~~~~~~~~\n\nA collection named ``matrices`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, collapsed : [ 24, 55, 79, 14, 78, 35, 84, 90, 3, 50, 89, 70 ] }\n   { _id : 2, collapsed : [ 39, 32, 43, 7, 62, 17, 80, 64, 17, 88, 11, 73 ] }\n   { _id : 3, collapsed : [ 42, 26, 59, 17, 72, 19, 35 ] }\n   { _id : 4, collapsed : null }\n\nComputing a Multiple Reductions\n```````````````````````````````\n\nThe following example performs the same two dimensional array collapse as the example above, but also\ncreates a new array containing only the first element of each array.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, results : { collapsed : [ 24, 55, 79, 14, 78, 35, 84, 90, 3, 50, 89, 70 ], firstValues : [ 24, 14, 84, 50 ] } }\n   { _id : 2, results : { collapsed : [ 39, 32, 43, 7, 62, 17, 80, 64, 17, 88, 11, 73 ], firstValues : [ 39, 62, 17 ] } }\n   { _id : 3, results : { collapsed : [ 42, 26, 59, 17, 72, 19, 35 ], firstValues : [ 42, 26, 17, 72 ] } }\n   { _id : 4, results : null }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"match\" : <string>, \"idx\" : <num>, \"captures\" : <array of strings> }\n\n.. seealso::\n\n   - :expression:`$regexFindAll`\n   - :expression:`$regexMatch`\n\nBehavior\n--------\n\nPCRE Library\n~~~~~~~~~~~~\n\n.. include:: /includes/fact-6.1-pcre2.rst\n\n``$regexFind`` and Collation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:expression:`$regexFind` ignores the collation specified for the\ncollection, :method:`db.collection.aggregate()`, and the index, if used.\n\nFor example, the create a sample collection with collation strength\n``1`` (i.e. compare base character only and ignore other differences\nsuch as case and diacritics):\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 1,4\n\n   { \"_id\" : 1, \"returnObject\" : { \"match\" : \"Carol\", \"idx\" : 0, \"captures\" : [ \"Car\", \"ar\" ] } }\n   { \"_id\" : 2, \"returnObject\" : null }\n   { \"_id\" : 3, \"returnObject\" : null }\n   { \"_id\" : 4, \"returnObject\" : { \"match\" : \"Col\", \"idx\" : 0, \"captures\" : [ \"C\", null ] } }\n   { \"_id\" : 5, \"returnObject\" : null }\n\nThe pattern contains the capture group ``(C(ar)*)`` which contains the\nnested group ``(ar)``. The elements in the ``captures`` array correspond\nto the two capture groups. If a matching document is not captured by a\ngroup (e.g. ``Colleen`` and the group ``(ar)``),\n:expression:`$regexFind` replaces the group with a null placeholder.\n\nAs shown in the previous example, the ``captures`` array contains an\nelement for each capture group (using ``null`` for non-captures).\nConsider the following example which searches for phone numbers with\nNew York City area codes by applying a logical ``or`` of capture\ngroups to the ``phone`` field. Each group represents a New York City\narea code:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"nycContacts\" : { \"match\" : \"718-555-0113\", \"idx\" : 0, \"captures\" : [ \"718\", null, null ] } }\n   { \"_id\" : 2, \"nycContacts\" : { \"match\" : \"212-555-8832\", \"idx\" : 0, \"captures\" : [ null, \"212\", null ] } }\n   { \"_id\" : 3, \"nycContacts\" : null }\n   { \"_id\" : 4, \"nycContacts\" : null }\n   { \"_id\" : 5, \"nycContacts\" : { \"match\" : \"917-555-4414\", \"idx\" : 0, \"captures\" : [ null, null, \"917\" ] } }\n\nExamples\n--------\n\n``$regexFind`` and Its Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo illustrate the behavior of the :expression:`$regexFind` operator as\ndiscussed in this example, create a sample collection ``products`` with\nthe following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : null }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ ] } }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ ] } }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ ] } }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : null }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n\nThe following regex pattern ``/lin(e|k)/`` specifies a grouping\n``(e|k)`` in the pattern:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : null }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : { \"match\" : \"link\", \"idx\" : 9, \"captures\" : [ \"k\" ] } }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n\nIn the return option, the ``idx`` field is the `code point\n<http://www.unicode.org/glossary/#code_point>`_ index and not the byte\nindex. To illustrate, consider the following example that uses the\nregex pattern ``/tier/``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : null }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : null }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : null }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : null }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : null }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \n                \"returnObject\" : { \"match\" : \"tier\", \"idx\" : 2, \"captures\" : [ ] } }\n\n.. _regexFind-example-i-options:\n\n``i`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo perform case-*insensitive* pattern matching, include the :ref:`i\n<regexFind-options>` option as part of the :ref:`regex <regexFind-regex>` field or\nin the :ref:`options <regexFind-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify i as part of the regex field\n  { $regexFind: { input: \"$description\", regex: /line/i } }\n\n  // Specify i in the options field\n  { $regexFind: { input: \"$description\", regex: /line/, options: \"i\" } }\n  { $regexFind: { input: \"$description\", regex: \"line\", options: \"i\" } }\n\nFor example, the following aggregation performs a case-*insensitive*\n:expression:`$regexFind` on the ``description`` field. The regex\npattern ``/line/`` does not specify any grouping:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : { \"match\" : \"LINE\", \"idx\" : 7, \"captures\" : [ ] } }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ ] } }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ ] } }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ ] } }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : null }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n   \n``m`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo match the specified anchors (e.g. ``^``, ``$``) for each line of a\nmultiline string, include the :ref:`m <regexFind-options>` option as\npart of the :ref:`regex <regexFind-regex>` field or in the\n:ref:`options <regexFind-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify m as part of the regex field\n  { $regexFind: { input: \"$description\", regex: /line/m } }\n\n  // Specify m in the options field\n  { $regexFind: { input: \"$description\", regex: /line/, options: \"m\" } }\n  { $regexFind: { input: \"$description\", regex: \"line\", options: \"m\" } }\n\nThe following example includes both the ``i`` and the ``m`` options to\nmatch lines starting with either the letter ``s`` or ``S`` for\nmultiline strings:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : { \"match\" : \"S\", \"idx\" : 0, \"captures\" : [ ] } }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : { \"match\" : \"s\", \"idx\" : 12, \"captures\" : [ ] } }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : null }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : null }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : null }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n\n``x`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo ignore all unescaped white space characters and comments (denoted by\nthe un-escaped hash ``#`` character and the next new-line character) in\nthe pattern, include the :ref:`s <regexFind-options>` option in the\n:ref:`options <regexFind-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify x in the options field\n  { $regexFind: { input: \"$description\", regex: /line/, options: \"x\" } }\n  { $regexFind: { input: \"$description\", regex: \"line\", options: \"x\" } }\n\nThe following example includes the ``x`` option to skip unescaped white\nspaces and comments:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : null }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ \"e\" ] } }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : { \"match\" : \"link\", \"idx\" : 9, \"captures\" : [ \"k\" ] } }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n\n``s`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo allow the dot character (i.e. ``.``) in the pattern to match all\ncharacters including the new line character, include the :ref:`s\n<regexFind-options>` option in the :ref:`options <regexFind-options>`\nfield:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify s in the options field\n  { $regexFind: { input: \"$description\", regex: /m.*line/, options: \"s\" } }\n  { $regexFind: { input: \"$description\", regex: \"m.*line\", options: \"s\" } }\n\nThe following example includes the ``s`` option to allow the dot\ncharacter (i.e. .) to match all characters including new line as well\nas the ``i`` option to perform a case-insensitive match:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : null }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : null }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : { \"match\" : \"Many spaces before     line\", \"idx\" : 0, \"captures\" : [ ] } }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : { \"match\" : \"Multiple\\nline\", \"idx\" : 0, \"captures\" : [ ] } }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : null }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : null }\n\nUse ``$regexFind`` to Parse Email from String\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``feedback`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\" : 1, \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\", \"email\" : { \"match\" : \"aunt.arc.tica@example.com\", \"idx\" : 38, \"captures\" : [ ] } }\n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"email\" : null }\n      { \"_id\" : 3, \"comment\" : \"I can't find how to convert a date to string. cam@mongodb.com\", \"email\" : { \"match\" : \"cam@mongodb.com\", \"idx\" : 46, \"captures\" : [ ] } }\n      { \"_id\" : 4, \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\", \"email\" : { \"match\" : \"fred@MongoDB.com\", \"idx\" : 28, \"captures\" : [ ] } }\n\nSecond Stage\n   The stage use the :pipeline:`$set` stage to reset the ``email`` to\n   the current ``\"$email.match\"`` value. If the current value of ``email``\n   is null, the new value of ``email`` is set to null.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\", \"email\" : \"aunt.arc.tica@example.com\" }\n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\" }\n      { \"_id\" : 3, \"comment\" : \"I can't find how to convert a date to string. cam@mongodb.com\", \"email\" : \"cam@mongodb.com\" }\n      { \"_id\" : 4, \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\", \"email\" : \"fred@MongoDB.com\" }\n\nApply ``$regexFind`` to String Elements of an Array\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``contacts`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : \"+672-19-9999\" }\n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : \"aunt.arc.tica@example.com\" }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : \"+32-2-111-11-11\" }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : \"belle.gium@example.com\" }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : \"+855-012-000-0000\" }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : \"cam.bo.dia@example.com\" }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"details\" : \"+1-111-222-3333\" }\n\nSecond Stage\n   The stage uses the :pipeline:`$addFields` stage to add new fields to\n   the document that contains the result of the\n   :expression:`$regexFind` for phone number and email:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : \"+672-19-9999\", \"regexemail\" : null, \"regexphone\" : { \"match\" : \"+672-19-9999\", \"idx\" : 0, \"captures\" : [ ] } }\n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : \"aunt.arc.tica@example.com\", \"regexemail\" : { \"match\" : \"aunt.arc.tica@example.com\", \"idx\" : 0, \"captures\" : [ ] }, \"regexphone\" : null }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : \"+32-2-111-11-11\", \"regexemail\" : null, \"regexphone\" : { \"match\" : \"+32-2-111-11-11\", \"idx\" : 0, \"captures\" : [ ] } }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : \"belle.gium@example.com\", \"regexemail\" : { \"match\" : \"belle.gium@example.com\", \"idx\" : 0, \"captures\" : [ ] }, \"regexphone\" : null }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : \"+855-012-000-0000\", \"regexemail\" : null, \"regexphone\" : { \"match\" : \"+855-012-000-0000\", \"idx\" : 0, \"captures\" : [ ] } }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : \"cam.bo.dia@example.com\", \"regexemail\" : { \"match\" : \"cam.bo.dia@example.com\", \"idx\" : 0, \"captures\" : [ ] }, \"regexphone\" : null }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"details\" : \"+1-111-222-3333\", \"regexemail\" : null, \"regexphone\" : { \"match\" : \"+1-111-222-3333\", \"idx\" : 0, \"captures\" : [ ] } }\n\nThird Stage\n   The stage use the :pipeline:`$project` stage to output documents with the ``_id`` field, the ``name`` field and\n   the ``details`` field. The ``details`` field is set to a\n   document with ``email`` and ``phone`` fields, whose values are determined from the\n   ``regexemail`` and ``regexphone`` fields, respectively.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : { \"phone\" : \"+855-012-000-0000\", \"email\" : \"cam.bo.dia@example.com\" } }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"details\" : { \"phone\" : \"+1-111-222-3333\" } }\n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : { \"phone\" : \"+672-19-9999\", \"email\" : \"aunt.arc.tica@example.com\" } }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : { \"phone\" : \"+32-2-111-11-11\", \"email\" : \"belle.gium@example.com\" } }\n\nFifth Stage\n   The stage uses the :pipeline:`$sort` stage to sort the documents by the ``_id`` field.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false   \n\n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"details\" : { \"phone\" : \"+672-19-9999\", \"email\" : \"aunt.arc.tica@example.com\" } }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"details\" : { \"phone\" : \"+32-2-111-11-11\", \"email\" : \"belle.gium@example.com\" } }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"details\" : { \"phone\" : \"+855-012-000-0000\", \"email\" : \"cam.bo.dia@example.com\" } }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"details\" : { \"phone\" : \"+1-111-222-3333\" } }\n\n\nUse Captured Groupings to Parse User Name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``employees`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"email\" : \"aunt.tica@example.com\", \"username\" : { \"match\" : \"aunt.tica@example.com\", \"idx\" : 0, \"captures\" : [ \"aunt.tica\" ] } }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"email\" : \"belle.gium@example.com\", \"username\" : { \"match\" : \"belle.gium@example.com\", \"idx\" : 0, \"captures\" : [ \"belle.gium\" ] } }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"email\" : \"cam.dia@example.com\", \"username\" : { \"match\" : \"cam.dia@example.com\", \"idx\" : 0, \"captures\" : [ \"cam.dia\" ] } }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"username\" : null }\n   \nSecond Stage\n   The stage use the :pipeline:`$set` stage to reset the ``username`` to\n   the zero-th element of the ``\"$username.captures\"`` array. If the current value of ``username``\n   is null, the new value of ``username`` is set to null.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"name\" : \"Aunt Arc Tikka\", \"email\" : \"aunt.tica@example.com\", \"username\" : \"aunt.tica\" }\n      { \"_id\" : 2, \"name\" : \"Belle Gium\", \"email\" : \"belle.gium@example.com\", \"username\" : \"belle.gium\" }\n      { \"_id\" : 3, \"name\" : \"Cam Bo Dia\", \"email\" : \"cam.dia@example.com\", \"username\" : \"cam.dia\" }\n      { \"_id\" : 4, \"name\" : \"Fred\", \"username\" : null }\n\n.. seealso::\n\n   For more information on the behavior of the ``captures`` array and\n   additional examples, see\n   :ref:`regexFind-captures-behavior`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFind.txt"
  },
  {
    "code": "     :copyable: false\n\n     [ { \"match\" : <string>, \"idx\" : <num>, \"captures\" : <array of strings> }, ... ]\n\n.. seealso::\n\n   - :expression:`$regexFind`\n   - :expression:`$regexMatch`\n\nBehavior\n--------\n\nPCRE Library\n~~~~~~~~~~~~\n\n.. include:: /includes/fact-6.1-pcre2.rst\n\n``$regexFindAll`` and Collation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:expression:`$regexFindAll` ignores the collation specified for the\ncollection, :method:`db.collection.aggregate()`, and the index, if used.\n\nFor example, the create a sample collection with collation strength\n``1`` (i.e. compare base character only and ignore other differences\nsuch as case and diacritics):\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 1,4\n\n   { \"_id\" : 1, \"returnObject\" : [ { \"match\" : \"Carol\", \"idx\" : 0, \"captures\" : [ \"Car\", \"ar\" ] } ] }\n   { \"_id\" : 2, \"returnObject\" : [ ] }\n   { \"_id\" : 3, \"returnObject\" : [ ] }\n   { \"_id\" : 4, \"returnObject\" : [ { \"match\" : \"Col\", \"idx\" : 0, \"captures\" : [ \"C\", null ] } ] }\n   { \"_id\" : 5, \"returnObject\" : [ ] }\n\nThe pattern contains the capture group ``(C(ar)*)`` which contains the\nnested group ``(ar)``. The elements in the ``captures`` array correspond\nto the two capture groups. If a matching document is not captured by a\ngroup (e.g. ``Colleen`` and the group ``(ar)``),\n:expression:`$regexFindAll` replaces the group with a null placeholder.\n\nAs shown in the previous example, the ``captures`` array contains an\nelement for each capture group (using ``null`` for non-captures).\nConsider the following example which searches for phone numbers with\nNew York City area codes by applying a logical ``or`` of capture\ngroups to the ``phone`` field. Each group represents a New York City\narea code:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"nycContacts\" : [ { \"match\" : \"718-555-0113\", \"idx\" : 0, \"captures\" : [ \"718\", null, null ] } ] }\n   { \"_id\" : 2, \"nycContacts\" : [ { \"match\" : \"212-555-8832\", \"idx\" : 0, \"captures\" : [ null, \"212\", null ] } ] }\n   { \"_id\" : 3, \"nycContacts\" : [ ] }\n   { \"_id\" : 4, \"nycContacts\" : [ ] }\n   { \"_id\" : 5, \"nycContacts\" : [ { \"match\" : \"917-555-4414\", \"idx\" : 0, \"captures\" : [ null, null, \"917\" ] } ] }\n\nExamples\n--------\n\n``$regexFindAll`` and Its Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo illustrate the behavior of the :expression:`$regexFindAll` operator as\ndiscussed in this example, create a sample collection ``products`` with\nthe following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ ]}, { \"match\" : \"line\", \"idx\" : 19, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ ] }\n   ] }\n\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ ]\n   }\n   { \n      \"_id\" : 6,\n      \"description\" : \"métier work vocation\",\n      \"returnObject\" : [ ]\n   }\n      \n\nThe following regex pattern ``/lin(e|k)/`` specifies a grouping\n``(e|k)`` in the pattern:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\", \n      \"returnObject\": [ ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ \"e\" ] }, { \"match\" : \"line\", \"idx\" : 19, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",   \n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ { \"match\" : \"link\", \"idx\" : 9, \"captures\" : [ \"k\" ] }, { \"match\" : \"link\", \"idx\" : 24, \"captures\" : [ \"k\" ] } ]\n   }\n   { \n      \"_id\" : 6,\n      \"description\" : \"métier work vocation\",\n      \"returnObject\" : [ ]\n   }\n\nIn the return option, the ``idx`` field is the `code point\n<http://www.unicode.org/glossary/#code_point>`_ index and not the byte\nindex. To illustrate, consider the following example that uses the\nregex pattern ``/tier/``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returnObject\" : [ ] }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returnObject\" : [ ] }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returnObject\" : [ ] }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returnObject\" : [ ] }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returnObject\" : [ ] }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \n                \"returnObject\" : [ { \"match\" : \"tier\", \"idx\" : 2, \"captures\" : [ ] } ] }\n\n.. _regexFindAll-example-i-options:\n\n``i`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo perform case-*insensitive* pattern matching, include the :ref:`i\n<regexFindAll-options>` option as part of the :ref:`regex\n<regexFindAll-regex>` field or in the :ref:`options <regexFindAll-options>`\nfield:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify i as part of the regex field\n  { $regexFindAll: { input: \"$description\", regex: /line/i } }\n\n  // Specify i in the options field\n  { $regexFindAll: { input: \"$description\", regex: /line/, options: \"i\" } }\n  { $regexFindAll: { input: \"$description\", regex: \"line\", options: \"i\" } }\n\nFor example, the following aggregation performs a case-*insensitive*\n:expression:`$regexFindAll` on the ``description`` field. The regex\npattern ``/line/`` does not specify any grouping:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\",\n      \"returnObject\" : [ { \"match\" : \"LINE\", \"idx\" : 7, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ ] }, { \"match\" : \"line\", \"idx\" : 19, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ ]\n   }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : [ ] }\n      \n\n``m`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo match the specified anchors (e.g. ``^``, ``$``) for each line of a\nmultiline string, include the :ref:`m <regexFindAll-options>` option\nas part of the :ref:`regex <regexFindAll-regex>` field or in the\n:ref:`options <regexFindAll-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify m as part of the regex field\n  { $regexFindAll: { input: \"$description\", regex: /line/m } }\n\n  // Specify m in the options field\n  { $regexFindAll: { input: \"$description\", regex: /line/, options: \"m\" } }\n  { $regexFindAll: { input: \"$description\", regex: \"line\", options: \"m\" } }\n\nThe following example includes both the ``i`` and the ``m`` options to\nmatch lines starting with either the letter ``s`` or ``S`` for\nmultiline strings:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\",\n      \"returnObject\" : [ { \"match\" : \"S\", \"idx\" : 0, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ { \"match\" : \"s\", \"idx\" : 12, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ ]\n   }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : [ ] }\n\n``x`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo ignore all unescaped white space characters and comments (denoted by\nthe un-escaped hash ``#`` character and the next new-line character) in\nthe pattern, include the :ref:`s <regexFindAll-options>` option in the\n:ref:`options <regexFindAll-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify x in the options field\n  { $regexFindAll: { input: \"$description\", regex: /line/, options: \"x\" } }\n  { $regexFindAll: { input: \"$description\", regex: \"line\", options: \"x\" } }\n\n\nThe following example includes the ``x`` option to skip unescaped white\nspaces and comments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 6, \"captures\" : [ \"e\" ] }, { \"match\" : \"line\", \"idx\" : 19, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 23, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ { \"match\" : \"line\", \"idx\" : 9, \"captures\" : [ \"e\" ] } ]\n   }\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ { \"match\" : \"link\", \"idx\" : 9, \"captures\" : [ \"k\" ] }, { \"match\" : \"link\", \"idx\" : 24, \"captures\" : [ \"k\" ] } ]\n   }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : [ ] }\n\n``s`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo allow the dot character (i.e. ``.``) in the pattern to match all\ncharacters including the new line character, include the :ref:`s\n<regexFindAll-options>` option in the :ref:`options\n<regexFindAll-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify s in the options field\n  { $regexFindAll: { input: \"$description\", regex: /m.*line/, options: \"s\" } }\n  { $regexFindAll: { input: \"$description\", regex: \"m.*line\", options: \"s\" } }\n\nThe following example includes the ``s`` option to allow the dot\ncharacter (i.e. .) to match all characters including new line as well\nas the ``i`` option to perform a case-insensitive match:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"description\" : \"Single LINE description.\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 2,\n      \"description\" : \"First lines\\nsecond line\",\n      \"returnObject\" : [ ]\n   }\n   {\n      \"_id\" : 3,\n      \"description\" : \"Many spaces before     line\",\n      \"returnObject\" : [ { \"match\" : \"Many spaces before line\", \"idx\" : 0, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 4,\n      \"description\" : \"Multiple\\nline descriptions\",\n      \"returnObject\" : [ { \"match\" : \"Multiple\\nline\", \"idx\" : 0, \"captures\" : [ ] } ]\n   }\n   {\n      \"_id\" : 5,\n      \"description\" : \"anchors, links and hyperlinks\",\n      \"returnObject\" : [ ]\n   }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returnObject\" : [ ] }\n\nUse ``$regexFindAll`` to Parse Email from String\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``feedback`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\" : 1, \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\", \"email\" : [ { \"match\" : \"aunt.arc.tica@example.com\", \"idx\" : 38, \"captures\" : [ ] } ] }\n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"email\" : [ ] }\n      { \"_id\" : 3, \"comment\" : \"How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com\", \"email\" : [ { \"match\" : \"cam@mongodb.com\", \"idx\" : 56, \"captures\" : [ ] }, { \"match\" : \"c.dia@mongodb.com\", \"idx\" : 75, \"captures\" : [ ] } ] }\n      { \"_id\" : 4, \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\", \"email\" : [ { \"match\" : \"fred@MongoDB.com\", \"idx\" : 28, \"captures\" : [ ] } ] }\n\n\nSecond Stage\n   The stage use the :pipeline:`$set` stage to reset the ``email`` array elements to\n   the ``\"email.match\"`` value(s). If the current value of ``email``\n   is null, the new value of ``email`` is set to null.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\", \"email\" : [ \"aunt.arc.tica@example.com\" ] }\n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"email\" : [ ] }\n      { \"_id\" : 3, \"comment\" : \"How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com\", \"email\" : [ \"cam@mongodb.com\", \"c.dia@mongodb.com\" ] }\n      { \"_id\" : 4, \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\", \"email\" : [ \"fred@MongoDB.com\" ] }\n\nUse Captured Groupings to Parse User Name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``feedback`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "      :copyable: false\n   \n      {\n         \"_id\" : 1,\n         \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\",\n         \"names\" : [ { \"match\" : \"aunt.arc.tica@example.com\", \"idx\" : 38, \"captures\" : [ \"aunt.arc.tica\" ] } ] \n      }\n      \n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"names\" : [ ] }\n      {\n         \"_id\" : 3,\n         \"comment\" : \"How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com\",\n         \"names\" : [ \n            { \"match\" : \"cam@mongodb.com\", \"idx\" : 56, \"captures\" : [ \"cam\" ] }, \n            { \"match\" : \"c.dia@mongodb.com\", \"idx\" : 75, \"captures\" : [ \"c.dia\" ] }\n          ]\n      }\n      {\n         \"_id\" : 4,\n         \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\",\n         \"names\" : [ { \"match\" : \"fred@MongoDB.com\", \"idx\" : 28, \"captures\" : [ \"fred\" ] } ]\n      }\n\nSecond Stage\n   The stage use the :pipeline:`$set` stage with the\n   :expression:`$reduce` operator to reset  ``names`` to an array that contains\n   the ``\"$names.captures\"`` elements.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "      :copyable: false\n\n      {\n         \"_id\" : 1,\n         \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\",\n         \"names\" : [ \"aunt.arc.tica\" ]\n      }\n      { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"names\" : [ ] }\n      {\n         \"_id\" : 3,\n         \"comment\" : \"How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com\",\n         \"names\" : [ \"cam\", \"c.dia\" ]\n      }\n      {\n         \"_id\" : 4,\n         \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\",\n         \"names\" : [ \"fred\" ]\n      }\n\n.. seealso::\n\n   For more information on the behavior of the ``captures`` array and\n   additional examples, see\n   :ref:`regexFindAll-captures-behavior`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexFindAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"result\" : false }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"result\" : true }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"result\" : true }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"result\" : true }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"result\" : false }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"result\" : false }\n   \n\nThe following regex pattern ``/lin(e|k)/`` specifies a grouping\n``(e|k)`` in the pattern:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"result\" : false }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"result\" : true }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"result\" : true }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"result\" : true }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"result\" : true }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"result\" : false }\n\n.. _regexMatch-example-i-options:\n\n``i`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo perform case-*insensitive* pattern matching, include the :ref:`i\n<regexMatch-options>` option as part of the :ref:`regex\n<regexMatch-regex>` field or in the :ref:`options <regexMatch-options>`\nfield:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify i as part of the regex field\n  { $regexMatch: { input: \"$description\", regex: /line/i } }\n\n  // Specify i in the options field\n  { $regexMatch: { input: \"$description\", regex: /line/, options: \"i\" } }\n  { $regexMatch: { input: \"$description\", regex: \"line\", options: \"i\" } }\n\nFor example, the following aggregation performs a case-*insensitive*\n:expression:`$regexMatch` on the ``description`` field. The regex\npattern ``/line/`` does not specify any grouping:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"result\" : true }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"result\" : true }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"result\" : true }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"result\" : true }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"result\" : false }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"result\" : false }\n\n``m`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo match the specified anchors (e.g. ``^``, ``$``) for each line of a\nmultiline string, include the :ref:`m <regexMatch-options>` option\nas part of the :ref:`regex <regexMatch-regex>` field or in the\n:ref:`options <regexMatch-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify m as part of the regex field\n  { $regexMatch: { input: \"$description\", regex: /line/m } }\n\n  // Specify m in the options field\n  { $regexMatch: { input: \"$description\", regex: /line/, options: \"m\" } }\n  { $regexMatch: { input: \"$description\", regex: \"line\", options: \"m\" } }\n\nThe following example includes both the ``i`` and the ``m`` options to\nmatch lines starting with either the letter ``s`` or ``S`` for\nmultiline strings:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"result\" : true }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"result\" : true }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"result\" : false }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"result\" : false }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"result\" : false }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"result\" : false }\n\n\n``x`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo ignore all unescaped white space characters and comments (denoted by\nthe un-escaped hash ``#`` character and the next new-line character) in\nthe pattern, include the :ref:`s <regexMatch-options>` option in the\n:ref:`options <regexMatch-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify x in the options field\n  { $regexMatch: { input: \"$description\", regex: /line/, options: \"x\" } }\n  { $regexMatch: { input: \"$description\", regex: \"line\", options: \"x\" } }\n\n\nThe following example includes the ``x`` option to skip unescaped white\nspaces and comments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returns\" : false }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returns\" : true }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returns\" : true }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returns\" : true }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returns\" : true }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returns\" : false }\n\n``s`` Option\n````````````\n\n.. include:: /includes/extracts/agg-regex-options-one-place-only.rst\n\nTo allow the dot character (i.e. ``.``) in the pattern to match all\ncharacters including the new line character, include the :ref:`s\n<regexMatch-options>` option in the :ref:`options\n<regexMatch-options>` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "  :copyable: false\n\n  // Specify s in the options field\n  { $regexMatch: { input: \"$description\", regex: /m.*line/, options: \"s\" } }\n  { $regexMatch: { input: \"$description\", regex: \"m.*line\", options: \"s\" } }\n\nThe following example includes the ``s`` option to allow the dot\ncharacter (i.e. .) to match all characters including new line as well\nas the ``i`` option to perform a case-insensitive match:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"description\" : \"Single LINE description.\", \"returns\" : false }\n   { \"_id\" : 2, \"description\" : \"First lines\\nsecond line\", \"returns\" : false }\n   { \"_id\" : 3, \"description\" : \"Many spaces before     line\", \"returns\" : true }\n   { \"_id\" : 4, \"description\" : \"Multiple\\nline descriptions\", \"returns\" : true }\n   { \"_id\" : 5, \"description\" : \"anchors, links and hyperlinks\", \"returns\" : false }\n   { \"_id\" : 6, \"description\" : \"métier work vocation\", \"returns\" : false }\n\nUse ``$regexMatch`` to Check Email Address\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample collection ``feedback`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"comment\" : \"Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com\", \"category\" : \"External\" }\n   { \"_id\" : 2, \"comment\" : \"I wanted to concatenate a string\", \"category\" : \"External\" }\n   { \"_id\" : 3, \"comment\" : \"How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com\", \"category\" : \"Employee\" }\n   { \"_id\" : 4, \"comment\" : \"It's just me. I'm testing.  fred@MongoDB.com\", \"category\" : \"Employee\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/regexMatch.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"cafe\", \"resultObject\" : \"cafe\" }\n   { \"_id\" : 2, \"name\" : \"Cafe\", \"resultObject\" : \"CAFE\" }\n   { \"_id\" : 3, \"name\" : \"café\", \"resultObject\" : \"café\" }\n\nOperators which respect collation, such as :pipeline:`$match`, would\nmatch all three documents when performing a string comparison against\n\"Cafe\" due to this collection's collation strength of ``1``.\n\n.. _replaceall-and-unicode-normalization:\n\n``$replaceAll`` and Unicode Normalization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :expression:`$replaceAll` aggregation expression does not perform\nany unicode normalization. This means that string matching for all\n``$replaceAll`` expressions will consider the number of code points used\nto represent a character in unicode when attempting a match.\n\nFor example, the character ``é`` can be represented in unicode using\neither one code point or two:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 25 25 50\n\n   * - Unicode\n     - Displays as\n     - Code points\n\n   * - ``\\xe9``\n     - ``é``\n     - 1 ( ``\\xe9`` )\n\n   * - ``e\\u0301``\n     - ``é``\n     - 2 ( ``e`` + ``\\u0301`` )\n\nUsing :expression:`$replaceAll` with a :ref:`find <replaceAll-find>`\nstring where the character ``é`` is represented in unicode with one code\npoint will not match any instance of ``é`` that uses two code points in\nthe :ref:`input <replaceAll-input>` string.\n\nThe following table shows whether a match occurs for a\n:ref:`find <replaceAll-find>` string of \"café\" when compared to\n:ref:`input <replaceAll-input>` strings where ``é`` is represented\nby either one code point or two. The :ref:`find <replaceAll-find>`\nstring in this example uses one code point to represent the ``é``\ncharacter:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 85 15\n\n   * - Example\n     - Match\n\n   * - ``{ $replaceAll: { input: \"caf\\xe9\", find: \"café\", replacement: \"CAFE\" } }``\n     - yes\n\n   * - ``{ $replaceAll: { input: \"cafe\\u0301\", find: \"café\", replacement: \"CAFE\" } }``\n     - no\n\nBecause :expression:`$replaceAll` does not perform any unicode\nnormalization, only the first string comparison matches, where both the\n:ref:`find <replaceAll-find>` and :ref:`input <replaceAll-input>`\nstrings use one code point to represent ``é``.\n\nExample\n-------\n\nCreate an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceAll.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"red paint\" }\n   { \"_id\" : 2, \"item\" : \"blue and green paint\" }\n   { \"_id\" : 3, \"item\" : \"red paint with red paintbrush\" }\n   { \"_id\" : 4, \"item\" : \"red paint with green paintbrush\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceAll.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n   :copyable: false\n\n   { \"_id\" : 1, \"name\" : \"cafe\", \"resultObject\" : \"cafe\" }\n   { \"_id\" : 2, \"name\" : \"Cafe\", \"resultObject\" : \"CAFE\" }\n   { \"_id\" : 3, \"name\" : \"café\", \"resultObject\" : \"café\" }\n\nOperators which respect collation, such as :pipeline:`$match`, would\nmatch all three documents when performing a string comparison against\n\"Cafe\" due to this collection's collation strength of ``1``.\n\n.. _replaceone-and-unicode-normalization:\n\n``$replaceOne`` and Unicode Normalization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :expression:`$replaceOne` aggregation expression does not perform\nany unicode normalization. This means that string matching for all\n``$replaceOne`` expressions will consider the number of code points used\nto represent a character in unicode when attempting a match.\n\nFor example, the character ``é`` can be represented in unicode using\neither one code point or two:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 25 25 50\n\n   * - Unicode\n     - Displays as\n     - Code points\n\n   * - ``\\xe9``\n     - ``é``\n     - 1 ( ``\\xe9`` )\n\n   * - ``e\\u0301``\n     - ``é``\n     - 2 ( ``e`` + ``\\u0301`` )\n\nUsing :expression:`$replaceOne` with a :ref:`find <replaceOne-find>`\nstring where the character ``é`` is represented in unicode with one code\npoint will not match any instance of ``é`` that uses two code points in\nthe :ref:`input <replaceOne-input>` string.\n\nThe following table shows whether a match occurs for a\n:ref:`find <replaceOne-find>` string of \"café\" when compared to\n:ref:`input <replaceOne-input>` strings where ``é`` is represented\nby either one code point or two. The :ref:`find <replaceOne-find>`\nstring in this example uses one code point to represent the ``é``\ncharacter:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 85 15\n\n   * - Example\n     - Match\n\n   * - ``{ $replaceOne: { input: \"caf\\xe9\", find: \"café\", replacement: \"CAFE\" } }``\n     - yes\n\n   * - ``{ $replaceOne: { input: \"cafe\\u0301\", find: \"café\", replacement: \"CAFE\" } }``\n     - no\n\nBecause :expression:`$replaceOne` does not perform any unicode\nnormalization, only the first string comparison matches, where both the\n:ref:`find <replaceOne-find>` and :ref:`input <replaceOne-input>`\nstrings use one code point to represent ``é``.\n\nExample\n-------\n\nCreate an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"red paint\" }\n   { \"_id\" : 2, \"item\" : \"blue and green paint\" }\n   { \"_id\" : 3, \"item\" : \"red paint with blue paintbrush\" }\n   { \"_id\" : 4, \"item\" : \"red paint with green paintbrush\" }\n\nNote that with document ``3``, only the first matched instance of \n\"blue paint\" is replaced.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 1,\n     name: 'Fred',\n     email: 'fred@example.net',\n     cell: '',\n     home: ''\n   },\n   {\n     _id: 2,\n     name: 'Frank N. Stine',\n     email: '',\n     cell: '012-345-9999',\n     home: ''\n   },\n   {\n     _id: 3,\n     name: 'Gren Dell',\n     email: 'beo@example.net',\n     cell: '',\n     home: '987-654-3210'\n   }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceRoot.txt"
  },
  {
    "code": "   :copyable: false\n   \n   { \"dogs\" : 2, \"cats\" : 1, \"birds\" : 0, \"fish\" : 0 }\n   { \"dogs\" : 0, \"cats\" : 1, \"birds\" : 0, \"fish\" : 3 }\n   { \"dogs\" : 0, \"cats\" : 0, \"birds\" : 0, \"fish\" : 0 }\n\n``$replaceWith`` a Document Nested in an Array\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection named ``students`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"2019Q1\", \"A\" : 400, \"B\" : 550, \"C\" : 1000 }\n\nTo view the data grouped by quarter, you can use the following\naggregation pipeline:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : 1, \"quarter\" : \"2019Q1\", \"region\" : \"A\", \"qty\" : 400, \"obj\" : { \"k\" : \"A\", \"v\" : 400 } }\n\nSecond stage:\n   The :pipeline:`$group` stage groups by the quarter and uses\n   :group:`$push` to accumulate the ``obj`` fields into a new\n   ``items`` array field. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"2019Q1\", \"items\" : [ { \"k\" : \"A\", \"v\" : 400 }, { \"k\" : \"B\", \"v\" : 550 }, { \"k\" : \"C\", \"v\" : 1000 } ] }\n\nThird stage: \n   The :pipeline:`$project` stage uses :expression:`$concatArrays` to\n   create a new array ``items2`` that includes the ``_id`` info and the\n   elements from the ``items`` array:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"2019Q1\", \"items2\" : [ { \"k\" : \"_id\", \"v\" : \"2019Q1\" }, { \"k\" : \"A\", \"v\" : 400 }, { \"k\" : \"B\", \"v\" : 550 }, { \"k\" : \"C\", \"v\" : 1000 } ] }\n\nFourth stage:\n   The :pipeline:`$replaceWith` uses the\n   :expression:`$arrayToObject` to convert the ``items2`` into a\n   document, using the specified key ``k`` and value ``v`` pairs and\n   outputs that document to the next stage. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "      :copyable: false\n      \n      { \"_id\" : \"2019Q1\", \"A\" : 400, \"B\" : 550, \"C\" : 1000 }\n\nThe aggregation returns the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "   :copyable: false\n      \n   { \"_id\" : \"2019Q1\", \"A\" : 400, \"B\" : 550, \"C\" : 1000 }\n   { \"_id\" : \"2019Q2\", \"A\" : 660, \"B\" : 500, \"C\" : 1200 }\n\n``$replaceWith`` a New Document Created from ``$$ROOT`` and a Default Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a collection named ``contacts`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 1,\n     name: 'Fred',\n     email: 'fred@example.net',\n     cell: '',\n     home: ''\n   },\n   {\n     _id: 2,\n     name: 'Frank N. Stine',\n     email: '',\n     cell: '012-345-9999',\n     home: ''\n   },\n   {\n     _id: 3,\n     name: 'Gren Dell',\n     email: 'beo@example.net',\n     cell: '',\n     home: '987-654-3210'\n   }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/replaceWith.txt"
  },
  {
    "code": "          :copyable: false \n\n          { $reverseArray: { $literal: [ 1, 2, 3 ] } }\n     - ``[ 3, 2, 1 ]``\n   \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reverseArray.txt"
  },
  {
    "code": "          :copyable: false \n         \n          { $reverseArray: \n             { $slice:  [ [ \"foo\", \"bar\", \"baz\", \"qux\" ], 1, 2 ] } }\n          }\n     - ``[ \"baz\", \"bar\" ]``\n   \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reverseArray.txt"
  },
  {
    "code": "          :copyable: false \n\n          { $reverseArray: null }\n\n     - ``null``\n      \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reverseArray.txt"
  },
  {
    "code": "          :copyable: false \n\n          { $reverseArray: { $literal: [ ] } }\n\n     - ``[ ]``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reverseArray.txt"
  },
  {
    "code": "          :copyable: false \n\n          { $reverseArray: { $literal: [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] } }\n     - ``[ [ 4, 5, 6 ], [ 1, 2, 3 ] ]``\n\n.. [#literal]\n\n   The examples in the table take a literal argument. To avoid parsing\n   ambiguity if the literal argument is an array, you must wrap the\n   literal array in a :expression:`$literal` expression or keep the\n   outer array that designates the argument list (e.g. ``[ [ 1, 2, 3 ]\n   ]`` ) to pass in the literal array ``[1, 2, 3]``.\n\nExample\n-------\n\nA collection named ``users`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/reverseArray.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"numMatches\" : 38 }\n      { \"numMatches\" : 36 }\n      { \"numMatches\" : 29 }\n      { \"numMatches\" : 29 }\n      { \"numMatches\" : 28 }\n\n.. seealso::\n\n   - :pipeline:`$sample`\n   - :query:`$rand`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sampleRate.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: new Date(\"2012-11-06T00:14:20\") }\n\n     - 20\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: ISODate(\"1998-11-07T00:00:42Z\") }\n\n     - 42\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: {\n              date: ISODate(\"1998-11-07T00:00:09Z\"),\n              timezone: \"+0530\"\n          } }\n\n     - 9\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $second: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$second`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/second.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { \n         _id: 1,\n         student: \"Maya\",\n         homework: [ 10, 5, 10 ],\n         quiz: [ 10, 8 ],\n         extraCredit: 0, \n         totalHomework: 25,\n         totalQuiz: 18,\n         totalScore: 43\n      },\n      { \n         _id: 2,\n         student: \"Ryan\",\n         homework: [ 5, 6, 5 ],\n         quiz: [ 8, 8 ],\n         extraCredit: 8,\n         totalHomework: 16,\n         totalQuiz: 16,\n         totalScore: 40\n      }\n   ]\n\nAdding Fields to an Embedded Document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. _set-add-field-to-embedded:\n\nUse dot notation to add new fields to embedded documents.\n\nCreate a sample collection ``vehicles`` with the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, type: \"car\", specs: { doors: 4, wheels: 4, fuel_type: \"unleaded\" } },\n      { _id: 2, type: \"motorcycle\", specs: { doors: 0, wheels: 2, fuel_type: \"unleaded\" } },\n      { _id: 3, type: \"jet ski\", specs: { fuel_type: \"unleaded\" } }\n   ]\n\nOverwriting an existing field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSpecifying an existing field name in a :pipeline:`$set` operation\ncauses the original field to be replaced.\n\nCreate a sample collection called ``animals`` with the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, dogs: 10, cats: 20 } ]\n\nIt is possible to replace one field with another. In the following\nexample the ``item`` field substitutes for the ``_id`` field.\n\nCreate a sample collection called ``fruits`` contains the following\ndocuments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: \"tangerine\", item: \"fruit\", type: \"citrus\" },\n      { _id: \"lemon\", item: \"fruit\", type: \"citrus\" },\n      { _id: \"grapefruit\", item: \"fruit\", type: \"citrus\" }\n   ]\n\n.. _set-add-element-to-array:\n\nAdd Element to an Array\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``scores`` collection with the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, student: \"Maya\", homework: [ 10, 5, 10, 7 ], quiz: [ 10, 8 ], extraCredit: 0 } ]\n\nCreating a New Field with Existing Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a sample ``scores`` collection with the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 1,\n         student: 'Maya',\n         homework: [ 10, 5, 10 ],\n         quiz: [ 10, 8 ],\n         extraCredit: 0,\n         quizAverage: 9\n      },\n      {\n         _id: 2,\n         student: 'Ryan',\n         homework: [ 5, 6, 5 ],\n         quiz: [ 8, 8 ],\n         extraCredit: 8,\n         quizAverage: 8\n      }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/set.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setDifference: [ [ \"a\", \"b\", \"a\" ], [ \"b\", \"a\" ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setDifference.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setDifference.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setDifference: [ [ \"a\", \"b\" ], [ [ \"a\", \"b\" ] ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setDifference.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"a\", \"b\" ]\n\nExample\n-------\n\nConsider an ``flowers`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setDifference.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\" ], \"inBOnly\" : [ ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"orchid\", \"rose\", \"orchid\" ], \"inBOnly\" : [ ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\", \"jasmine\" ], \"inBOnly\" : [ \"jasmine\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"jasmine\", \"rose\" ], \"inBOnly\" : [ \"jasmine\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ ], \"inBOnly\" : [ ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\" ], [ \"orchid\" ] ], \"inBOnly\" : [ [ \"rose\" ], [ \"orchid\" ] ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\", \"orchid\" ] ], \"inBOnly\" : [ [ \"rose\", \"orchid\" ] ] }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ ], \"inBOnly\" : [ ] }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ \"rose\" ], \"inBOnly\" : [ \"rose\" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setDifference.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300, 'price.usd': 45.99 },\n     { _id: 2, item: 'winter coat', qty: 200, 'price.usd': 499.99 },\n     { _id: 3, item: 'sun dress', qty: 250, 'price.usd': 199.99 },\n     { _id: 4, item: 'leather boots', qty: 300, 'price.usd': 249.99 },\n     { _id: 5, item: 'bow tie', qty: 180, 'price.usd': 9.99 }\n   ]\n\nAdd Fields that Start with a Dollar Sign (``$``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300, '$price': 45.99 },\n     { _id: 2, item: 'winter coat', qty: 200, '$price': 499.99 },\n     { _id: 3, item: 'sun dress', qty: 250, '$price': 199.99 },\n     { _id: 4, item: 'leather boots', qty: 300, '$price': 249.99 },\n     { _id: 5, item: 'bow tie', qty: 180, '$price': 9.99 }\n   ]\n\nUpdate Fields that Contain Periods (``.``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ \n     { _id: 1, item: 'sweatshirt', qty: 300, 'price.usd': 49.99 } \n   ]\n\nUpdate Fields that Start with a Dollar Sign (``$``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ \n     { _id: 1, item: 'sweatshirt', qty: 300, '$price': 49.99 } \n   ]\n\nRemove Fields that Contain Periods (``.``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300 },\n     { _id: 2, item: 'winter coat', qty: 200 },\n     { _id: 3, item: 'sun dress', qty: 250 },\n     { _id: 4, item: 'leather boots', qty: 300 },\n     { _id: 5, item: 'bow tie', qty: 180 }\n   ]\n\nA similar query written using the :expression:`$unsetField` alias\nreturns the same results: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300 },\n     { _id: 2, item: 'winter coat', qty: 200 },\n     { _id: 3, item: 'sun dress', qty: 250 },\n     { _id: 4, item: 'leather boots', qty: 300 },\n     { _id: 5, item: 'bow tie', qty: 180 }\n   ]\n\nA similar query written using the :expression:`$unsetField` alias\nreturns the same results: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setField.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setIntersection: [ [ \"a\", \"b\", \"a\" ], [ \"b\", \"a\" ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIntersection.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"b\", \"a\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIntersection.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setIntersection: [ [ \"a\", \"b\" ], [ [ \"a\", \"b\" ] ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIntersection.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ ]\n\nExamples\n--------\n\nThis section contains examples that show the use of ``$setIntersection``\nwith collections.\n\nElements Array Example\n~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``flowers`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIntersection.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\" ], \"commonToBoth\" : [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"orchid\", \"rose\", \"orchid\" ], \"commonToBoth\" : [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\", \"jasmine\" ], \"commonToBoth\" : [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"jasmine\", \"rose\" ], \"commonToBoth\" : [ \"rose\" ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ ], \"commonToBoth\" : [ ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\" ], [ \"orchid\" ] ], \"commonToBoth\" : [ ] }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\", \"orchid\" ] ], \"commonToBoth\" : [ ] }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ ], \"commonToBoth\" : [ ] }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ \"rose\" ], \"commonToBoth\" : [ ] }\n\n.. _setIntersection-user-roles-system-variable-example:\n\nRetrieve Documents for Roles Granted to the Current User\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/user-roles-system-variable-introduction.rst\n\nPerform the following steps to retrieve the documents accessible to\n``John``:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Log in as John\n\n      .. include:: /includes/user-roles-system-variable-example-login-john.rst\n\n   .. step:: Retrieve the documents\n\n      .. include:: /includes/user-roles-system-variable-example-description-start.rst\n\n      .. include:: /includes/user-roles-system-variable-example-pipeline.rst\n\n      .. include:: /includes/user-roles-system-variable-example-description.rst\n\n   .. step:: Examine the documents\n\n      .. include:: /includes/user-roles-system-variable-example-output-john.rst\n\nPerform the following steps to retrieve the documents accessible to\n``Jane``:\n\n.. procedure::\n   :style: normal\n\n   .. step:: Log in as Jane\n\n      .. include:: /includes/user-roles-system-variable-example-login-jane.rst\n\n   .. step:: Retrieve the documents\n\n      .. include:: /includes/user-roles-system-variable-example-description-start.rst\n\n      .. include:: /includes/user-roles-system-variable-example-pipeline.rst\n\n   .. step:: Examine the documents\n\n      .. include:: /includes/user-roles-system-variable-example-output-jane.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIntersection.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setIsSubset: [ [ \"a\", \"b\", \"a\" ], [ \"b\", \"a\" ] ] }\n\n     - ``true``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIsSubset.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setIsSubset: [ [ \"a\", \"b\" ], [ [ \"a\", \"b\" ] ] ] }\n\n     - ``false``\n\nExample\n-------\n\nConsider an ``flowers`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIsSubset.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\" ], \"AisSubset\" : true }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"orchid\", \"rose\", \"orchid\" ], \"AisSubset\" : true }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"rose\", \"orchid\", \"jasmine\" ], \"AisSubset\" : true }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ \"jasmine\", \"rose\" ], \"AisSubset\" : false }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ ], \"AisSubset\" : false }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\" ], [ \"orchid\" ] ], \"AisSubset\" : false }\n   { \"flowerFieldA\" : [ \"rose\", \"orchid\" ], \"flowerFieldB\" : [ [ \"rose\", \"orchid\" ] ], \"AisSubset\" : false }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ ], \"AisSubset\" : true }\n   { \"flowerFieldA\" : [ ], \"flowerFieldB\" : [ \"rose\" ], \"AisSubset\" : true }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setIsSubset.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setUnion: [ [ \"a\", \"b\", \"a\" ], [ \"b\", \"a\" ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setUnion.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"b\", \"a\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setUnion.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $setUnion: [ [ \"a\", \"b\" ], [ [ \"a\", \"b\" ] ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setUnion.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ [ \"a\", \"b\" ], \"b\", \"a\" ]\n\n.. note::\n\n   Starting in MongoDB 5.2, the sort order for :expression:`$setUnion`\n   is undefined. To sort an array, refer to :expression:`$sortArray`.\n\nExample\n-------\n\nConsider an ``flowers`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setUnion.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ \"rose\", \"orchid\" ], \"allValues\": [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ \"orchid\", \"rose\", \"orchid\" ], \"allValues\": [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ \"rose\", \"orchid\", \"jasmine\" ], \"allValues\": [ \"orchid\", \"rose\", \"jasmine\" ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ \"jasmine\", \"rose\" ], \"allValues\": [ \"orchid\", \"rose\", \"jasmine\" ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ ], \"allValues\": [ \"orchid\", \"rose\" ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ [ \"rose\" ], [ \"orchid\" ] ], \"allValues\": [ \"orchid\", \"rose\", [ \"rose\" ], [ \"orchid\" ] ] }\n   { \"flowerFieldA\": [ \"rose\", \"orchid\" ], \"flowerFieldB\": [ [ \"rose\", \"orchid\" ] ], \"allValues\": [ \"orchid\", \"rose\", [ \"rose\", \"orchid\" ] ] }\n   { \"flowerFieldA\": [ ], \"flowerFieldB\": [ ], \"allValues\": [ ] }\n   { \"flowerFieldA\": [ ], \"flowerFieldB\": [ \"rose\" ], \"allValues\": [ \"rose\" ] }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setUnion.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $setWindowFields: {\n         partitionBy: <expression>,\n         sortBy: {\n            <sort field 1>: <sort order>,\n            <sort field 2>: <sort order>,\n            ...,\n            <sort field n>: <sort order>\n         },\n         output: {\n            <output field 1>: {\n               <window operator>: <window operator parameters>,\n               window: {\n                  documents: [ <lower boundary>, <upper boundary> ],\n                  range: [ <lower boundary>, <upper boundary> ],\n                  unit: <time unit>\n               }\n            },\n            <output field 2>: { ... },\n            ...\n            <output field n>: { ... }\n         }\n      }\n   }\n\nThe :pipeline:`$setWindowFields` stage takes a document with these\nfields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 15 70\n\n   * - Field\n     - Necessity\n     - Description\n\n   * - :ref:`partitionBy <setWindowFields-partitionBy>`\n\n     - Optional\n\n     - .. _setWindowFields-partitionBy:\n     \n       Specifies an :ref:`expression <aggregation-expressions>` to group\n       the documents. In the :pipeline:`$setWindowFields` stage, the\n       group of documents is known as a *partition*. Default is one\n       partition for the entire collection.\n\n   * - :ref:`sortBy <setWindowFields-sortBy>`\n\n     - Required for some operators (see\n       :ref:`setWindowFields-restrictions`)\n\n     - .. _setWindowFields-sortBy:\n     \n       Specifies the field(s) to sort the documents by in the partition.\n       Uses the same syntax as the :pipeline:`$sort` stage. Default is\n       no sorting.\n\n   * - :ref:`output <setWindowFields-output>`\n\n     - Required\n\n     - .. _setWindowFields-output:\n     \n       Specifies the field(s) to append to the documents in the output\n       returned by the :pipeline:`$setWindowFields` stage. Each field is\n       set to the result returned by the :ref:`window operator\n       <setWindowFields-window-operators>`.\n       \n       A field can contain :ref:`dots <document-dot-notation>` to\n       specify embedded document fields and array fields. The semantics\n       for the embedded document dotted notation in the\n       :pipeline:`$setWindowFields` stage are the same as the\n       :pipeline:`$addFields` and :pipeline:`$set` stages. See\n       :ref:`embedded document $addFields example\n       <add-field-to-embedded>` and :ref:`embedded document $set example\n       <set-add-field-to-embedded>`.\n\n       - The ``window operator`` is the :ref:`window operator\n         <setWindowFields-window-operators>` name to use in the\n         :pipeline:`$setWindowFields` stage.\n\n       - The ``window operator parameters`` are the parameters to pass\n         to the :ref:`window operator\n         <setWindowFields-window-operators>`.\n\n   * - :ref:`window <setWindowFields-window>`\n\n     - Optional\n\n     - .. _setWindowFields-window:\n     \n       Specifies the window boundaries and parameters. Window boundaries\n       are inclusive. Default is an unbounded window, which includes all\n       documents in the partition.\n       \n       Specify either a :ref:`documents <setWindowFields-documents>` or\n       :ref:`range <setWindowFields-range>` window.\n\n   * - :ref:`documents <setWindowFields-documents>`\n\n     - Optional\n\n     - .. _setWindowFields-documents:\n     \n       A window where the lower and upper boundaries are specified\n       relative to the position of the current document read from the\n       collection.\n       \n       The window boundaries are specified using a two element array\n       containing a lower and upper limit string or integer. Use:\n       \n       - The ``\"current\"`` string for the current document position in\n         the output.\n       \n       - The ``\"unbounded\"`` string for the first or last document\n         position in the partition.\n       \n       - An integer for a position relative to the current document. Use\n         a negative integer for a position before the current\n         document. Use a positive integer for a position after the\n         current document. ``0`` is the current document position.\n\n       See :ref:`setWindowFields-documents-window-examples`.\n\n   * - :ref:`range <setWindowFields-range>`\n\n     - Optional\n\n     - .. _setWindowFields-range:\n\n       A window where the lower and upper boundaries are defined using\n       a range of values based on the :ref:`sortBy\n       <setWindowFields-sortBy>` field in the current document.\n       \n       The window boundaries are specified using a two element array\n       containing a lower and upper limit string or number. Use:\n       \n       - The ``\"current\"`` string for the current document position in\n         the output.\n       \n       - The ``\"unbounded\"`` string for the first or last document\n         position in the partition.\n       \n       - A number to add to the value of the :ref:`sortBy\n         <setWindowFields-sortBy>` field for the current document. A\n         document is in the window if the :ref:`sortBy\n         <setWindowFields-sortBy>` field value is inclusively within the\n         lower and upper boundaries.\n\n       See :ref:`setWindowFields-range-window-example`.\n\n   * - :ref:`unit <setWindowFields-unit>`\n\n     - Optional\n\n     - .. _setWindowFields-unit:\n\n       Specifies the units for time :ref:`range <setWindowFields-range>`\n       window boundaries. Can be set to one of these strings:\n       \n       - ``\"year\"``\n       \n       - ``\"quarter\"``\n\n       - ``\"month\"``\n\n       - ``\"week\"``\n       \n       - ``\"day\"``\n       \n       - ``\"hour\"``\n       \n       - ``\"minute\"``\n       \n       - ``\"second\"``\n       \n       - ``\"millisecond\"``\n       \n       If omitted, default numeric :ref:`range <setWindowFields-range>`\n       window boundaries are used.\n\n       See :ref:`setWindowFields-time-range-window-examples`.\n\n.. seealso::\n\n   :ref:`setWindowFields-examples`\n\nBehavior\n--------\n\nThe :pipeline:`$setWindowFields` stage appends new fields to existing\ndocuments. You can include one or more :pipeline:`$setWindowFields`\nstages in an aggregation operation.\n\n.. include:: /includes/setWindowFields-and-transactions-snapshots.rst\n\nThe ``$setWindowFields`` stage doesn't guarantee the order of the\nreturned documents.\n\n.. _setWindowFields-window-operators:\n\nWindow Operators\n----------------\n\n.. include:: /includes/setWindowFields-operators.rst\n\n.. _setWindowFields-restrictions:\n\nRestrictions\n------------\n\nRestrictions for the :pipeline:`$setWindowFields` stage:\n\n- Prior to MongoDB 5.3, the :pipeline:`$setWindowFields` \n  stage cannot be used:\n\n  - Within :ref:`transactions <transactions>`.\n  - With :readconcern:`\"snapshot\"` read concern.\n\n- :ref:`sortBy <setWindowFields-sortBy>` is required for:\n\n  - :ref:`Rank <setWindowFields-rank-operators>` and :ref:`order\n    <setWindowFields-order-operators>` window operators.\n  \n  - Bounded windows (either a :ref:`documents\n    <setWindowFields-documents>` window or a :ref:`range\n    <setWindowFields-range>` window).\n\n  - :group:`$linearFill` operator.\n\n- :ref:`Range <setWindowFields-range>` windows require all :ref:`sortBy\n  <setWindowFields-sortBy>` values to be numbers.\n\n- :ref:`Time range <setWindowFields-unit>` windows require all\n  :ref:`sortBy <setWindowFields-sortBy>` values to be dates.\n\n- :ref:`Range <setWindowFields-range>` and :ref:`time range\n  <setWindowFields-unit>` windows can only contain one :ref:`sortBy\n  <setWindowFields-sortBy>` field and the sort must be ascending.\n\n- You cannot specify both a :ref:`documents <setWindowFields-documents>`\n  window and a :ref:`range <setWindowFields-range>` window.\n\n- These operators use an implicit window and return an error if you\n  specify a :ref:`window <setWindowFields-window>` option:\n  \n  - :ref:`Rank <setWindowFields-rank-operators>` operators.\n\n  - :group:`$shift` operator.\n\n- For :ref:`range <setWindowFields-range>` windows, only numbers in\n  the specified range are included in the window. Missing, undefined,\n  and ``null`` values are excluded.\n\n- For :ref:`time range <setWindowFields-unit>` windows:\n\n  - Only date and time types are included in the window.\n\n  - Numeric boundary values must be integers. For example, you can use 2\n    hours as a boundary but you cannot use 1.5 hours.\n\n- For empty windows or windows with incompatible values (for example,\n  using :group:`$sum` on strings), the returned value depends on the\n  operator:\n  \n  - For :group:`$count` and :group:`$sum`, the returned value is ``0``.\n  \n  - For :group:`$addToSet` and :group:`$push`, the returned value is an\n    empty array.\n  \n  - For all other operators, the returned value is ``null``.\n\n.. _setWindowFields-examples:\n\nExamples\n--------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThe following examples use the ``cakeSales`` collection.\n\n.. _setWindowFields-documents-window-examples:\n\nDocuments Window Examples\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse Documents Window to Obtain Cumulative Quantity for Each State\n`````````````````````````````````````````````````````````````````\n\nThis example uses a :ref:`documents <setWindowFields-documents>` window\nin :pipeline:`$setWindowFields` to output the cumulative cake sales\n``quantity`` for each ``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"cumulativeQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"cumulativeQuantityForState\" : 282 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"cumulativeQuantityForState\" : 427 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"cumulativeQuantityForState\" : 134 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"cumulativeQuantityForState\" : 238 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"cumulativeQuantityForState\" : 378 }\n\nUse Documents Window to Obtain Cumulative Quantity for Each Year\n````````````````````````````````````````````````````````````````\n\nThis example uses a :ref:`documents <setWindowFields-documents>` window\nin :pipeline:`$setWindowFields` to output the cumulative cake sales\n``quantity`` for each :expression:`$year` in ``orderDate``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"cumulativeQuantityForYear\" : 134 }\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"cumulativeQuantityForYear\" : 296 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"cumulativeQuantityForYear\" : 104 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"cumulativeQuantityForYear\" : 224 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"cumulativeQuantityForYear\" : 145 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"cumulativeQuantityForYear\" : 285 }\n\nUse Documents Window to Obtain Moving Average Quantity for Each Year\n````````````````````````````````````````````````````````````````````\n\nThis example uses a :ref:`documents <setWindowFields-documents>` window\nin :pipeline:`$setWindowFields` to output the moving average\nfor the cake sales ``quantity``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"averageQuantity\" : 134 }\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"averageQuantity\" : 148 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"averageQuantity\" : 104 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"averageQuantity\" : 112 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"averageQuantity\" : 145 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"averageQuantity\" : 142.5 }\n\nUse Documents Window to Obtain Cumulative and Maximum Quantity for Each Year\n````````````````````````````````````````````````````````````````````````````\n\nThis example uses a :ref:`documents <setWindowFields-documents>` window\nin :pipeline:`$setWindowFields` to output the cumulative and maximum\ncake sales ``quantity`` values for each :expression:`$year` in\n``orderDate``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134,\n     \"cumulativeQuantityForYear\" : 134, \"maximumQuantityForYear\" : 162 }\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162,\n     \"cumulativeQuantityForYear\" : 296, \"maximumQuantityForYear\" : 162 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104,\n     \"cumulativeQuantityForYear\" : 104, \"maximumQuantityForYear\" : 120 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120,\n      \"cumulativeQuantityForYear\" : 224, \"maximumQuantityForYear\" : 120 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145,\n     \"cumulativeQuantityForYear\" : 145, \"maximumQuantityForYear\" : 145 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140,\n     \"cumulativeQuantityForYear\" : 285, \"maximumQuantityForYear\" : 145 }\n\n.. _setWindowFields-range-window-example:\n\nRange Window Example\n~~~~~~~~~~~~~~~~~~~~\n\nThis example uses a :ref:`range <setWindowFields-range>` window in\n:pipeline:`$setWindowFields` to return the sum of the ``quantity``\nvalues of cakes sold for orders within plus or minus 10 dollars of the\ncurrent document's ``price`` value:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"quantityFromSimilarOrders\" : 265 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"quantityFromSimilarOrders\" : 265 }\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"quantityFromSimilarOrders\" : 162 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"quantityFromSimilarOrders\" : 244 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"quantityFromSimilarOrders\" : 244 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"quantityFromSimilarOrders\" : 134 }\n\n.. _setWindowFields-time-range-window-examples:\n\nTime Range Window Examples\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse a Time Range Window with a Positive Upper Bound\n```````````````````````````````````````````````````\n\nThe following example uses a :ref:`window <setWindowFields-window>` with\na positive upper bound time range :ref:`unit <setWindowFields-unit>` in\n:pipeline:`$setWindowFields`. The pipeline outputs an array of\n``orderDate`` values for each ``state`` that match the specified time\nrange.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162,\n     \"recentOrders\" : [ ISODate(\"2019-05-18T16:09:01Z\") ] }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120,\n     \"recentOrders\" : [ ISODate(\"2019-05-18T16:09:01Z\"), ISODate(\"2020-05-18T14:10:30Z\"), ISODate(\"2021-01-11T06:31:15Z\") ] }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145,\n     \"recentOrders\" : [ ISODate(\"2019-05-18T16:09:01Z\"), ISODate(\"2020-05-18T14:10:30Z\"), ISODate(\"2021-01-11T06:31:15Z\") ] }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134,\n     \"recentOrders\" : [ ISODate(\"2019-01-08T06:12:03Z\") ] }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104,\n     \"recentOrders\" : [ ISODate(\"2019-01-08T06:12:03Z\"), ISODate(\"2020-02-08T13:13:23Z\") ] }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140,\n     \"recentOrders\" : [ ISODate(\"2019-01-08T06:12:03Z\"), ISODate(\"2020-02-08T13:13:23Z\"), ISODate(\"2021-03-20T11:30:05Z\") ] }\n\nUse a Time Range Window with a Negative Upper Bound\n```````````````````````````````````````````````````\n\nThe following example uses a :ref:`window <setWindowFields-window>` with\na negative upper bound time range :ref:`unit <setWindowFields-unit>` in\n:pipeline:`$setWindowFields`. The pipeline outputs an array of\n``orderDate`` values for each ``state`` that match the specified time\nrange.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162,\n     \"recentOrders\" : [ ] }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120,\n     \"recentOrders\" : [ ISODate(\"2019-05-18T16:09:01Z\") ] }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145,\n     \"recentOrders\" : [ ISODate(\"2019-05-18T16:09:01Z\") ] }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134,\n     \"recentOrders\" : [ ] }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104,\n     \"recentOrders\" : [ ISODate(\"2019-01-08T06:12:03Z\") ] }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140,\n     \"recentOrders\" : [ ISODate(\"2019-01-08T06:12:03Z\"), ISODate(\"2020-02-08T13:13:23Z\") ] }\n\n.. seealso::\n\n   .. include:: /includes/fact-timeseries-example-aggregation-book.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/setWindowFields.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $shift: {\n         output: <output expression>, \n         by: <integer>,\n         default: <default expression>\n      }\n   }\n\n:group:`$shift` takes a document with these fields:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - Field\n     - Description\n\n   * - :ref:`output <shift-output>`\n\n     - .. _shift-output:\n     \n       Specifies an :ref:`expression <aggregation-expressions>` to\n       evaluate and return in the output.\n\n   * - :ref:`by <shift-by>`\n\n     - .. _shift-by:\n       \n       Specifies an ``integer`` with a numeric document position\n       relative to the current document in the output.\n       \n       For example:\n       \n       - ``1`` specifies the document position after the current\n         document.\n       \n       - ``-1`` specifies the document position before the current\n         document.\n\n       - ``-2`` specifies the document position that is two\n         positions before the current document.\n\n   * - :ref:`default <shift-default>`\n\n     - .. _shift-default:\n     \n       Specifies an optional default :ref:`expression\n       <aggregation-expressions>` to evaluate if the document position\n       is outside of the implicit :pipeline:`$setWindowFields` stage\n       :ref:`window <setWindowFields-window>`. The implicit window\n       contains all the documents in the :ref:`partition\n       <setWindowFields-partitionBy>`.\n       \n       The :ref:`default <shift-default>` expression must evaluate to a\n       constant value.\n       \n       If you do not specify a :ref:`default <shift-default>`\n       expression, :group:`$shift` returns ``null`` for documents whose\n       positions are outside of the implicit\n       :pipeline:`$setWindowFields` stage window.\n\nBehavior\n--------\n\n:group:`$shift` returns an error if you specify a :ref:`window\n<setWindowFields-window>` in the :pipeline:`$setWindowFields` stage.\n\nExamples\n--------\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThe ``cakeSales`` collection is used in the following examples.\n\nShift Using a Positive Integer\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$shift` in the :pipeline:`$setWindowFields`\nstage to output the ``quantity`` of the cake sales from each document\nfollowing the current document for each ``state``:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/shift.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"shiftQuantityForState\" : 145 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"shiftQuantityForState\" : 120 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"shiftQuantityForState\" : \"Not available\" }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"shiftQuantityForState\" : 134 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"shiftQuantityForState\" : 104 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"shiftQuantityForState\" : \"Not available\" }\n\nShift Using a Negative Integer\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example uses :group:`$shift` in the :pipeline:`$setWindowFields`\nstage to output the ``quantity`` of the cake sales from each document\nbefore the current document for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/shift.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"shiftQuantityForState\" : \"Not available\" }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"shiftQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"shiftQuantityForState\" : 145 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"shiftQuantityForState\" : \"Not available\" }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"shiftQuantityForState\" : 140 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"shiftQuantityForState\" : 134 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/shift.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $sin to -inf, value must in (-inf,inf)\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Sine of Value in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores the hypotenuse and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090659\"),\r\n              \"side_b\" : NumberDecimal(\"4.000000000000000000000000000000000\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n            }\r\n\r\n         Since ``angle_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$sin` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Sine of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores the hypotenuse and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224288\"),\r\n              \"side_b\" : NumberDecimal(\"4.000000000000000000000000000000000\"),\r\n              \"hypotenuse\" : NumberDecimal(\"5\"),\r\n            }\r\n\r\n         Since ``angle_a`` and ``hypotenuse`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$sin` is a 128-bit decimal.\r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sin.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d25\"),\r\n               \"angle\" : NumberDecimal(\"53.1301023541559787031443874490659\"),\r\n               \"sinh_output\" : NumberDecimal(\"1.066020404405732132503284522731829\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$sinh` output is also a\r\n         128-bit decimal.\r\n\r\n     - id: radians\r\n       name: Hyperbolic Sine of Value in Radians\r\n       content: |\r\n\r\n         The following ``trigonometry`` collection contains a document\r\n         that stores an ``angle`` value measured in radians:\r\n\r\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sinh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d35\"),\r\n               \"angle\" : NumberDecimal(\"1.6301023541559787031443874490659\"),\r\n               \"sinh_output\" : NumberDecimal(\"2.454243813557362033961729701069671\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$sinh` output is also\r\n         a 128-bit decimal.\r\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sinh.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $slice: [ [ 1, 2, 3 ], 1, 1 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ 2 ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $slice: [ [ 1, 2, 3 ], -2 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ 2, 3 ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $slice: [ [ 1, 2, 3 ], 15, 2 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          [  ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $slice: [ [ 1, 2, 3 ], -15, 2 ] }\n          \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ 1, 2 ]\n\nExample\n-------\n\nA collection named ``users`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/slice.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 3, \"name\" : \"Empire State Pub\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 5, \"name\" : \"Jane's Deli\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 1, \"name\" : \"Central Park Cafe\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 4, \"name\" : \"Stan's Pizzaria\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 2, \"name\" : \"Rock A Feller Bar and Grill\", \"borough\" : \"Queens\" }\n\n   { \"_id\" : 5, \"name\" : \"Jane's Deli\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 3, \"name\" : \"Empire State Pub\", \"borough\" : \"Brooklyn\" }\n   { \"_id\" : 4, \"name\" : \"Stan's Pizzaria\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 1, \"name\" : \"Central Park Cafe\", \"borough\" : \"Manhattan\" }\n   { \"_id\" : 2, \"name\" : \"Rock A Feller Bar and Grill\", \"borough\" : \"Queens\" }\n\nWhile the values for ``borough`` are still sorted in alphabetical order,\nthe order of the documents containing duplicate values for ``borough``\n(i.e. ``Manhattan`` and ``Brooklyn``) is not the same.\n\nTo achieve a *consistent sort*, add a field which contains exclusively\nunique values to the sort. The following command uses the\n:pipeline:`$sort` stage to sort on both the ``borough`` field and the\n``_id`` field:\n\n",
    "language": "js",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sort.txt"
  },
  {
    "code": "   :emphasize-lines: 7\n\n   db.engineers.aggregate( [\n      { $project: \n         {\n             _id: 0,\n             result:\n               {\n                  $sortArray: { input: \"$team\", sortBy: { name: 1 } }\n               }\n         }\n      }\n   ] )\n\nThe ``name`` field is a sub-element in the ``team`` array. The\noperation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sortArray.txt"
  },
  {
    "code": "   :emphasize-lines: 10-11\n\n   db.engineers.aggregate( [\n      { \n         $project: \n            {\n           \t   _id: 0,\n           \t   result: \n                  {\n                     $sortArray:\n                        {\n                           input: \"$team\",\n                           sortBy: { \"address.city\": -1 }\n                        }\n                  }\n           \t}\n      }\n   ] )\n\nThe sort direction is descending because the ``sortBy`` value is \"-1\".\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sortArray.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.engineers.aggregate( [\n      {\n         $project:\n            {\n               _id: 0,\n               result:\n                  {\n                     $sortArray:\n                        {\n                           input: \"$team\",\n                           sortBy: { age: -1, name: 1 }\n                        }\n                  }\n            }\n       }\n    ] )\n\nExample output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sortArray.txt"
  },
  {
    "code": "   :copyable: false\n\n   { result: [\n         4,\n         5,\n         6,\n         Decimal128(\"10.23\"),\n         20,\n         21,\n         'Gratis',\n         { a: null },\n         { a: 'Free' },\n         { a: 'On sale' },\n         { a: { sale: true, price: 19 } }\n   ] }\n\nThe results are ordered. \n\nIn contrast, after changing the ``sortBy`` field to sort on the one of\nthe document fields, ``sortBy: { a: 1 }``, the sort order for the\nscalar and ``null`` values is undefined:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sortArray.txt"
  },
  {
    "code": "   :copyable: false\n\n  { result: [\n       20,\n       4,\n       6,\n       21,\n       5,\n       'Gratis',\n       { a: null },\n       Decimal128(\"10.23\"),\n       { a: 'Free' },\n       { a: 'On sale' },\n       { a: { sale: true, price: 19 } }\n  ] }\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sortArray.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $split: [ \"June-15-2013\", \"-\" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"June\", \"15\", \"2013\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $split: [ \"banana split\", \"a\" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"b\", \"n\", \"n\", \" split\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $split: [ \"Hello World\", \" \" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"Hello\", \"World\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $split: [ \"astronomical\", \"astro\" ] }\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"\", \"nomical\" ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $split: [ \"pea green boat\", \"owl\" ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ \"pea green boat\" ]\n\n   * - ``{ $split: [ \"headphone jack\", 7 ] }``\n     - Errors with message:\n\n       ``\"$split requires an expression that evaluates to a string as\n       a second argument, found: double\"``\n\n   * - ``{ $split: [ \"headphone jack\", /jack/ ] }``\n     - Errors with message:\n\n       ``\"$split requires an expression that evaluates to a string as\n       a second argument, found: regex\"``\n\nExample\n-------\n\nA collection named ``deliveries`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { state: \"OR\" }, total_qty: 1741 },\n      { _id: { state: \"CA\" }, total_qty: 1455 },\n      { _id: { state: \"NV\" }, total_qty: 655 }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/split.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $stdDevPop: <expression> }\n   \nWhen used in other supported stages, :group:`$stdDevPop` has one of\ntwo syntaxes:\n\n- :group:`$stdDevPop` has one specified expression as its operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $stdDevPop: <expression> }\n\n- :group:`$stdDevPop` has a list of specified expressions as its\n  operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $stdDevPop: [ <expression1>, <expression2> ... ]  }\n\nThe argument for :group:`$stdDevPop` can be any :ref:`expression\n<aggregation-expressions>` as long as it resolves to an array.\n   \nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n``$stdDevPop`` returns the population standard deviation of the \ninput values as a :bsontype:`decimal <Decimal128>`.\n\nNon-numeric Values\n~~~~~~~~~~~~~~~~~~\n\n:group:`$stdDevPop` ignores non-numeric values. If all operands for a\n:group:`$stdDevPop` are non-numeric, :group:`$stdDevPop` returns\n``null``.\n\nSingle Value\n~~~~~~~~~~~~\n\nIf the sample consists of a single numeric value, :group:`$stdDevPop`\nreturns ``0``.\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` and :pipeline:`$setWindowFields` stages,\nif the expression resolves to an array, :group:`$stdDevPop` treats the\noperand as a non-numerical value and has no effect on the calculation.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-stdDevPop.rst\n\nWindow Values\n~~~~~~~~~~~~~\n\n.. include:: /includes/stdDev-behavior.rst\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a collection called ``users`` with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 2, \"stdDev\" : 8.04155872120988 }\n   { \"_id\" : 1, \"stdDev\" : 8.04155872120988 }\n\nUse in ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an example collection named ``quizzes`` with the following\ndocuments:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, stdDev : 8.04155872120988 }\n   { _id : 2, stdDev : 8.04155872120988 }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$stdDevPop` in the\n:pipeline:`$setWindowFields` stage to output the population standard\ndeviation of the cake sales ``quantity`` for each ``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 4, type : \"strawberry\", orderDate : ISODate(\"2019-05-18T16:09:01Z\"),\n     state : \"CA\", price : 41, quantity : 162, stdDevPopQuantityForState : 0 }\n   { _id : 0, type : \"chocolate\", orderDate : ISODate(\"2020-05-18T14:10:30Z\"),\n     state : \"CA\", price : 13, quantity : 120, stdDevPopQuantityForState : 21 }\n   { _id : 2, type : \"vanilla\", orderDate : ISODate(\"2021-01-11T06:31:15Z\"),\n     state : \"CA\", price : 12, quantity : 145, stdDevPopQuantityForState : 17.249798710580816 }\n   { _id : 5, type : \"strawberry\", orderDate : ISODate(\"2019-01-08T06:12:03Z\"),\n     state : \"WA\", price : 43, quantity : 134, stdDevPopQuantityForState : 0 }\n   { _id : 3, type : \"vanilla\", orderDate : ISODate(\"2020-02-08T13:13:23Z\"),\n     state : \"WA\", price : 13, quantity : 104, stdDevPopQuantityForState : 15 }\n   { _id : 1, type : \"chocolate\", orderDate : ISODate(\"2021-03-20T11:30:05Z\"),\n     state : \"WA\", price : 14, quantity : 140, stdDevPopQuantityForState : 15.748015748023622 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevPop.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $stdDevSamp: <expression> }\n   \nWhen used in other supported stages, :group:`$stdDevSamp` has one of\ntwo syntaxes:\n\n- :group:`$stdDevSamp` has one specified expression as its operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $stdDevSamp: <expression> }\n\n- :group:`$stdDevSamp` has a list of specified expressions as its\n  operand:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "     :copyable: false\n\n     { $stdDevSamp: [ <expression1>, <expression2> ... ]  }\n\nThe argument for :group:`$stdDevSamp` can be any :ref:`expression\n<aggregation-expressions>` as long as it resolves to an array.\n   \nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Type\n~~~~~~~~~~~\n\n``$stdDevSamp`` returns the sample standard deviation of the \ninput values as a :bsontype:`double <Double>`.\n\nNon-numeric Values\n~~~~~~~~~~~~~~~~~~\n\n:group:`$stdDevSamp` ignores non-numeric values. If all operands for a\nsum are non-numeric, :group:`$stdDevSamp` returns ``null``.\n\nSingle Value\n~~~~~~~~~~~~\n\nIf the sample consists of a single numeric value, :group:`$stdDevSamp`\nreturns ``null``.\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` and :pipeline:`$setWindowFields` stages,\nif the expression resolves to an array, :group:`$stdDevSamp` treats the\noperand as a non-numerical value.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-stdDevSamp.rst\n\nWindow Values\n~~~~~~~~~~~~~\n\n.. include:: /includes/stdDev-behavior.rst\n\nExamples\n--------\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection ``users`` contains documents with the following fields:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "   :copyable: false\n\n   {_id: 0, username: \"user0\", age: 20}\n   {_id: 1, username: \"user1\", age: 42}\n   {_id: 2, username: \"user2\", age: 28}\n   ...\n\nTo calculate the standard deviation of a sample of users, following\naggregation operation first uses the :pipeline:`$sample` pipeline to\nsample 100 users, and then uses :group:`$stdDevSamp` calculates the\nstandard deviation for the sampled users.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : null, \"ageStdDev\" : 7.811258386185771 }\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$stdDevSamp` in the\n:pipeline:`$setWindowFields` stage to output the sample standard\ndeviation of the ``quantity`` values of the cake sales for each\n``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"stdDevSampQuantityForState\" : null }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"stdDevSampQuantityForState\" : 29.698484809834994 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"stdDevSampQuantityForState\" : 21.1266025033211 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"stdDevSampQuantityForState\" : null }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"stdDevSampQuantityForState\" : 21.213203435596427 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"stdDevSampQuantityForState\" : 19.28730152198591 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/stdDevSamp.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"abcde\" }\n     - ``5``\n     - Each character is encoded using one byte.\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"Hello World!\" }\n     - ``12``\n     - Each character is encoded using one byte.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"cafeteria\" }\n     - ``9``\n     - Each character is encoded using one byte.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"cafétéria\" }\n     - ``11``\n     - ``é`` is encoded using two bytes.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"\" }\n     - ``0``\n     - Empty strings return 0.\n \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"$€λG\" }\n     - ``7``\n     - ``€`` is encoded using three bytes.\n       ``λ`` is encoded using two bytes.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $strLenBytes: \"寿司\" }\n     - ``6``\n     - Each character is encoded using three bytes.\n\nExample\n-------\n\nSingle-Byte and Multibyte Character Set\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a ``food`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenBytes.txt"
  },
  {
    "code": "      :copyable: false\n\n      { $strLenCP: <string expression> }\n\n   The argument can be any valid :ref:`expression\n   <aggregation-expressions>` that resolves to a string.\n\n   .. include:: /includes/extracts/agg-expression-null-operand-strLenCP.rst\n\n   .. list-table::\n      :header-rows: 1\n      :widths: 95 5\n   \n      * - Example\n        - Results\n   \n      * - ``{ $strLenCP: \"abcde\" }``\n        - ``5``\n        \n      * - ``{ $strLenCP: \"Hello World!\" }``\n        - ``12``\n   \n      * - ``{ $strLenCP: \"cafeteria\" }``\n        - ``9``\n   \n      * - ``{ $strLenCP: \"cafétéria\" }``\n        - ``9``\n      \n      * - ``{ $strLenCP: \"\" }``\n        - ``0``\n      \n      * - ``{ $strLenCP: \"$€λA\" }``\n        - ``4``\n\n      * - ``{ $strLenCP: \"寿司\" }``\n        - ``2``\n\nBehavior\n--------\n\nThe :expression:`$strLenCP` operator counts the number of code points\nin the specified string. This behavior differs from the\n:expression:`$strLenBytes` operator that counts the number of bytes in\nthe string, where each character uses between one and four bytes.\n\nExample\n-------\n\nSingle-Byte and Multibyte Character Set\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a ``food`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenCP.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, name: 'apple', length: 5 },\n      { _id: 2, name: 'banana', length: 6 },\n      { _id: 3, name: 'éclair', length: 6 },\n      { _id: 4, name: 'hamburger', length: 9 },\n      { _id: 5, name: 'jalapeño', length: 8 },\n      { _id: 6, name: 'pizza', length: 5 },\n      { _id: 7, name: 'tacos', length: 5 },\n      { _id: 8, name: '寿司', length: 2 }\n   ]\n\n.. seealso::\n\n   :expression:`$strLenBytes`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strLenCP.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"ABC1\", \"comparisonResult\" : -1 }\n   { \"_id\" : 2, \"item\" : \"ABC2\", \"comparisonResult\" : 0 }\n   { \"_id\" : 3, \"item\" : \"XYZ1\", \"comparisonResult\" : 1 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/strcasecmp.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"abcde\", 1, 2 ] }\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          \"bc\"\n     \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"Hello World!\", 6, 5 ] }\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n           \"World\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"cafétéria\", 0, 5 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          \"café\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"cafétéria\", 5, 4 ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          \"tér\"\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"cafétéria\", 7, 3 ] }\n     - Errors with message:\n\n       ``\"Error: Invalid range, starting index is a UTF-8 continuation byte.\"``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $substrBytes: [ \"cafétéria\", 3, 1 ] }\n     - Errors with message:\n\n       ``\"Error: Invalid range, ending index is in the middle of a UTF-8 character.\"``\n\nExample\n-------\n\nSingle-Byte Character Set\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider an ``inventory`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/substrBytes.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $sum: <expression> }\n   \nWhen not used as an accumulator, :group:`$sum` has this syntax:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $sum: [ <expression1>, <expression2> ... ]  }\n\nFor more information on expressions, see\n:ref:`aggregation-expressions`.\n\nBehavior\n--------\n\nResult Data Type\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/agg-expression-order-of-return-behavior.rst\n\nNon-Numeric or Non-Existent Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf used on a field that contains both numeric and non-numeric values,\n:group:`$sum` ignores the non-numeric values and returns the sum of the\nnumeric values.\n\nIf used on a field that does not exist in any document in the collection,\n:group:`$sum` returns ``0`` for that field.\n\nIf all operands are non-numeric, non-arrays, or contain ``null`` values,\n:group:`$sum` returns ``0``. For details on how ``$sum`` handles arrays,\nsee :ref:`sum-array-operand`.\n\n.. _sum-array-operand:\n\nArray Operand\n~~~~~~~~~~~~~\n\nIn the :pipeline:`$group` stage, if the expression resolves to an array,\n:group:`$sum` treats the operand as a non-numeric value.\n\n.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-sum.rst\n\nFor example, when not used in a ``$group`` stage:\n\n- If the ``$sum`` operand is ``[ 2, 2 ]``, ``$sum`` adds the array\n  elements and returns 4.\n\n- If the ``$sum`` operand is ``[ 2, [ 3, 4 ] ]``, ``$sum`` returns 2\n  because it treats the nested array ``[ 3, 4 ]`` as a non-numeric\n  value.\n\nExamples\n--------\n\n.. _sum-group-example:\n\nUse in ``$group`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider a ``sales`` collection with the following documents:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"day\" : 46, \"year\" : 2014 }, \"totalAmount\" : 150, \"count\" : 2 }\n   { \"_id\" : { \"day\" : 34, \"year\" : 2014 }, \"totalAmount\" : 45, \"count\" : 2 }\n   { \"_id\" : { \"day\" : 1, \"year\" : 2014 }, \"totalAmount\" : 20, \"count\" : 1 }\n\nUsing :group:`$sum` on a non-existent field returns a value of ``0``.\nThe following operation attempts to :group:`$sum` on ``qty``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : { \"day\" : 46, \"year\" : 2014 }, \"totalAmount\" : 0, \"count\" : 2 }\n   { \"_id\" : { \"day\" : 34, \"year\" : 2014 }, \"totalAmount\" : 0, \"count\" : 2 }\n   { \"_id\" : { \"day\" : 1, \"year\" : 2014 }, \"totalAmount\" : 0, \"count\" : 1 }\n\nThe :group:`$count` aggregation accumulator can be used in place of\n``{ $sum : 1 }`` in the :pipeline:`$group` stage. \n\n.. seealso:: \n   \n   :group:`$count (aggregation accumulator) <$count>`\n\n.. _sum-project-example:\n\nUse in ``$project`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA collection ``students`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"quizTotal\" : 23, \"labTotal\" : 13, \"examTotal\" : 155 }\n   { \"_id\" : 2, \"quizTotal\" : 19, \"labTotal\" : 16, \"examTotal\" : 175 }\n   { \"_id\" : 3, \"quizTotal\" : 14, \"labTotal\" : 11, \"examTotal\" : 148 }\n\n.. _sum-window-example:\n\nUse in ``$setWindowFields`` Stage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 5.0\n\n.. include:: /includes/setWindowFields-example-collection.rst\n\nThis example uses :group:`$sum` in the :pipeline:`$setWindowFields`\nstage to output the sum of the ``quantity`` of cakes sold in each\n``state``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-05-18T16:09:01Z\"),\n     \"state\" : \"CA\", \"price\" : 41, \"quantity\" : 162, \"sumQuantityForState\" : 162 }\n   { \"_id\" : 0, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2020-05-18T14:10:30Z\"),\n     \"state\" : \"CA\", \"price\" : 13, \"quantity\" : 120, \"sumQuantityForState\" : 282 }\n   { \"_id\" : 2, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2021-01-11T06:31:15Z\"),\n     \"state\" : \"CA\", \"price\" : 12, \"quantity\" : 145, \"sumQuantityForState\" : 427 }\n   { \"_id\" : 5, \"type\" : \"strawberry\", \"orderDate\" : ISODate(\"2019-01-08T06:12:03Z\"),\n     \"state\" : \"WA\", \"price\" : 43, \"quantity\" : 134, \"sumQuantityForState\" : 134 }\n   { \"_id\" : 3, \"type\" : \"vanilla\", \"orderDate\" : ISODate(\"2020-02-08T13:13:23Z\"),\n     \"state\" : \"WA\", \"price\" : 13, \"quantity\" : 104, \"sumQuantityForState\" : 238 }\n   { \"_id\" : 1, \"type\" : \"chocolate\", \"orderDate\" : ISODate(\"2021-03-20T11:30:05Z\"),\n     \"state\" : \"WA\", \"price\" : 14, \"quantity\" : 140, \"sumQuantityForState\" : 378 }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/sum.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $switch: {\n                branches: [\n                   { case: { $eq: [ 0, 5 ] }, then: \"equals\" },\n                   { case: { $gt: [ 0, 5 ] }, then: \"greater than\" },\n                   { case: { $lt: [ 0, 5 ] }, then: \"less than\" }\n                ]\n             }\n          }\n\n     - ``\"less than\"``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/switch.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $switch: {\n                branches: [\n                   { case: { $eq: [ 0, 5 ] }, then: \"equals\" },\n                   { case: { $gt: [ 0, 5 ] }, then: \"greater than\" }\n                ],\n                default: \"Did not match\"\n             }\n          }\n\n     - ``\"Did not match\"``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/switch.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n             $switch: {\n                branches: [\n                   { case: \"this is true\", then: \"first case\" },\n                   { case: false, then: \"second case\" }\n                ],\n                default: \"Did not match\"\n             }\n          }\n\n     - ``\"First case\"``\n\nExample\n-------\n\nA collection named ``grades`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/switch.txt"
  },
  {
    "code": "          :copyable: false\r\n\r\n          \"errmsg\" : \r\n            \"Failed to optimize pipeline :: caused by :: cannot \r\n            apply $tan to -inf, value must in (-inf,inf)\"\r\n\r\nExample\r\n-------\r\n\r\n.. tabs::\r\n\r\n   tabs:\r\n\r\n     - id: degrees\r\n       name: Tangent of Value in Degrees\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores one side and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tan.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"53.13010235415597870314438744090659\"),\r\n              \"side_a\" : NumberDecimal(\"3\")\r\n              \"side_b\" : NumberDecimal(4.000000000000000000000000000000000\")\r\n            }\r\n\r\n         Since ``angle_a`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$tan` is a 128-bit decimal. \r\n\r\n     - id: radians\r\n       name: Tangent of Value in Radians\r\n       content: |\r\n\r\n         The ``trigonometry`` collection contains a document that\r\n         stores the hypotenuse and one angle in a right-angle triangle:\r\n\r\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tan.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n              \"_id\" : ObjectId(\"5c50782193f833234ba90d85\"),\r\n              \"angle_a\" : NumberDecimal(\"0.9272952180016122324285124629224288\"),\r\n              \"side_a\" : NumberDecimal(\"3\")\r\n              \"side_b\" : NumberDecimal(\"3.999999999999999999999999999999999\")\r\n            }\r\n\r\n         Since ``angle_a`` and ``side_a`` are stored as \r\n         :ref:`128-bit decimals <shell-type-decimal>`, the output of \r\n         :expression:`$tan` is a 128-bit decimal.\r\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tan.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d45\"),\r\n               \"angle\" : NumberDecimal(\"53.1301023541559787031443874490659\"),\r\n               \"tanh_output\" : NumberDecimal(\"0.7293303448445332820512777329448416\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$tanh` output is also a\r\n         128-bit decimal.\r\n\r\n     - id: radians\r\n       name: Hyperbolic Tangent in Radians\r\n       content: |\r\n\r\n         The following ``trigonometry`` collection contains a document\r\n         that stores an ``angle`` value measured in radians:\r\n\r\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tanh.txt"
  },
  {
    "code": "            :copyable: false\r\n \r\n            {\r\n               \"_id\" : ObjectId(\"5c50782193f833234ba90d55\"),\r\n               \"angle\" : NumberDecimal(\"1.6301023541559787031443874490659\"),\r\n               \"tanh_output\" : NumberDecimal(\"0.9260761562750713360156803177935379\")\r\n            }\r\n\r\n         Because ``angle`` is stored as a :ref:`128-bit decimal\r\n         <shell-type-decimal>`, the :expression:`$tanh` output is also\r\n         a 128-bit decimal.\r\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tanh.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   db.aggregate(\n      [ \n         { $documents: [ { val: \"string to hash\" } ] },\n         { $addFields: { hashedVal: { $toHashedIndexKey: \"$val\" } } }\n      ]\n    )\n\nExample output:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/toHashedIndexKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { val: 'string to hash', hashedVal: Long(\"763543691661428748\") } ]\n\nLearn More\n----------\n\n- :method:`convertShardKeyToHashed()` \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/toHashedIndexKey.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"abc1\", \"description\" : \"product 1\" }\n   { \"_id\" : 2, \"item\" : \"abc2\", \"description\" : \"product 2\" }\n   { \"_id\" : 3, \"item\" : \"xyz1\", \"description\" : \"\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/toLower.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"ABC1\", \"description\" : \"PRODUCT 1\" }\n   { \"_id\" : 2, \"item\" : \"ABC2\", \"description\" : \"PRODUCT 2\" }\n   { \"_id\" : 3, \"item\" : \"XYZ1\", \"description\" : \"\" }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/toUpper.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $top:\n         {\n            sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },\n            output: <expression>\n         }\n   }\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 15 70\n\n   * - Field\n     - Necessity\n     - Description\n\n   * - sortBy\n\n     - Required\n\n     - Specifies the order of results, with syntax similar to \n       :pipeline:`$sort`.\n\n   * - output\n\n     - Required\n\n     - Represents the output for each element in the group \n       and can be any expression.\n\nBehavior\n--------\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the following aggregation that returns the top document \nfrom a group of scores:\n\n- ``$top`` does not filter out null values.\n- ``$top`` converts missing values to null.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/top.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            playerId:\n               { \n                  $top:\n                     {    \n                        output: [ \"$playerId\", \"$score\" ],\n                        sortBy: { \"score\": 1 }\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``playerId`` and ``score`` fields are specified as \n  ``output : [\"$playerId\",\" $score\"]`` and returned as array values. \n- Specify the sort order with ``sortBy: { \"score\": 1 }``.\n- ``PlayerD`` and ``PlayerE`` tied for the top element. ``PlayerD`` \n  is returned as the top ``score``.\n- To have more deterministic tie breaking behavior for multiple null \n  values, add more fields to ``sortBy``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/top.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ 'PlayerD', null ]\n      }\n   ]\n\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``$top`` is not supported as a \n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$top`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAggregation pipelines which call ``$top`` are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>`. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/top.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 'G1', playerId: [ 'PlayerC', 99 ] } ]\n\nFind the Top ``Score`` Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$top`` accumulator to find the top ``score``\nin each game.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/top.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 'G2', playerId: [ 'PlayerD', 80 ] },\n      { _id: 'G1', playerId: [ 'PlayerC', 99 ] }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/top.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      $topN:\n         {\n            n: <expression>,\n            sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },\n            output: <expression>\n         }\n   }\n\n- ``n`` limits the number of results per group and has to be a positive\n  integral expression that is either a constant or depends on the ``_id``\n  value for :pipeline:`$group`.\n- sortBy specifies the order of results, with syntax similar to \n  :pipeline:`$sort`.\n- ``output`` represents the output for each element in the group and can \n  be any expression.\n\nBehavior\n--------\n\nNull and Missing Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- ``$topN`` does not filter out null values.\n- ``$topN`` converts missing values to null which are preserved in\n  the output.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :emphasize-lines: 7,8\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: 2 },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: 3 },\n            { playerId: \"PlayerD\", gameId: \"G1\"},\n            { playerId: \"PlayerE\", gameId: \"G1\", score: null }\n         ]\n      },\n      {\n         $group:\n         {  \n            _id: \"$gameId\",\n            playerId:\n               { \n                  $topN:\n                     {    \n                        output: [ \"$playerId\", \"$score\" ],\n                        sortBy: { \"score\": 1 },\n                        n: 3\n                     }\n               }\n         }\n      }\n   ] )\n\nIn this example:\n\n- :pipeline:`$documents` creates the literal documents that contain\n  player scores.\n- :pipeline:`$group` groups the documents by ``gameId``. This\n  example has only one ``gameId``, ``G1``.\n- ``PlayerD`` has a missing score and ``PlayerE`` has a\n  null ``score``. These values are both considered as null.\n- The ``playerId`` and ``score`` fields are specified as \n  ``output : [\"$playerId\",\" $score\"]`` and returned as array values. \n- Because of the ``sortBy: { \"score\" : 1 }``, the null values are sorted\n  to the front of the returned ``playerId`` array.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerD', null ], [ 'PlayerE', null ], [ 'PlayerA', 1 ] ]\n      }\n   ]\n\nBSON Data Type Sort Ordering\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen sorting different types, the order of :ref:`BSON data types \n<bson_sort_order>` is used to determine ordering. As an example, \nconsider a collection whose values consist of strings and numbers.\n\n- In an ascending sort, string values are sorted after numeric values.\n- In a descending sort, string values are sorted before numeric values.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :emphasize-lines: 5,6\n\n   db.aggregate( [\n      {\n         $documents: [\n            { playerId: \"PlayerA\", gameId: \"G1\", score: 1 },\n            { playerId: \"PlayerB\", gameId: \"G1\", score: \"2\" },\n            { playerId: \"PlayerC\", gameId: \"G1\", score: \"\" }\n         ]\n      },\n      {\n         $group:\n            {\n               _id: \"$gameId\",\n               playerId: {\n                  $topN:\n                  {\n                     output: [\"$playerId\",\"$score\"],\n                     sortBy: {\"score\": -1},\n                     n: 3\n                  }\n               }\n            }\n      }\n   ] )\n\nIn this example:\n\n- ``PlayerA`` has an integer score.\n- ``PlayerB`` has a string ``\"2\"`` score. \n- ``PlayerC`` has an empty string score.\n\nBecause the sort is in descending ``{ \"score\" : -1 }``, the string\nliteral values are sorted before ``PlayerA``'s numeric score:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: \"G1\",\n         playerId: [ [ \"PlayerB\", \"2\" ], [ \"PlayerC\", \"\" ], [ \"PlayerA\", 1 ] ]\n      }\n   ]\n\nRestrictions\n------------\n\nWindow Function and Aggregation Expression Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``$topN`` is not supported as a \n:ref:`aggregation expression <aggregation-expressions>`.\n\n``$topN`` is supported as a \n:pipeline:`window operator <$setWindowFields>`.\n\nMemory Limit Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGroups within the ``$topN`` aggregation pipeline are subject to the\n:ref:`100 MB limit <agg-memory-restrictions>` pipeline limit. If this\nlimit is exceeded for an individual group, the aggregation fails\nwith an error.\n\nExamples\n--------\n\nConsider a ``gamescores`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerC', 99 ], [ 'PlayerB', 33 ], [ 'PlayerA', 31 ] ]\n      }\n   ]\n\nThe SQL equivalent to this query is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT T3.GAMEID,T3.PLAYERID,T3.SCORE\n   FROM GAMESCORES AS GS\n   JOIN (SELECT TOP 3\n            GAMEID,PLAYERID,SCORE\n            FROM GAMESCORES\n            WHERE GAMEID = 'G1'\n            ORDER BY SCORE DESC) AS T3\n               ON GS.GAMEID = T3.GAMEID\n   GROUP BY T3.GAMEID,T3.PLAYERID,T3.SCORE\n      ORDER BY T3.SCORE DESC\n\nFinding the Three Highest Score Documents Across Multiple Games\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the ``$topN`` accumulator to find the highest scoring\nplayers in each game.\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 'G1',\n         playerId: [ [ 'PlayerC', 99 ], [ 'PlayerB', 33 ], [ 'PlayerA', 31 ] ]\n      },\n      {\n         _id: 'G2',\n         playerId: [ [ 'PlayerD', 80 ], [ 'PlayerC', 66 ], [ 'PlayerB', 14 ] ]\n      }\n   ]\n\nThe SQL equivalent to this query is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT PLAYERID,GAMEID,SCORE\n   FROM(\n      SELECT ROW_NUMBER() OVER (PARTITION BY GAMEID ORDER BY SCORE DESC) AS GAMERANK,\n      GAMEID,PLAYERID,SCORE\n      FROM GAMESCORES\n   ) AS T\n   WHERE GAMERANK <= 3\n   ORDER BY GAMEID\n\nComputing ``n`` Based on the Group Key for ``$group``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also assign the value of ``n`` dynamically. In this example,\nthe :expression:`$cond` expression is used on the ``gameId`` field.\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :emphasize-lines: 11\n\n   db.gamescores.aggregate([\n      {\n         $group:\n         {\n            _id: {\"gameId\": \"$gameId\"},\n            gamescores:\n               {\n                  $topN:\n                     {\n                        output: \"$score\",\n                        n: { $cond: { if: {$eq: [\"$gameId\",\"G2\"] }, then: 1, else: 3 } },\n                        sortBy: { \"score\": -1 }\n                     }\n               }\n         }\n      }\n   ] )\n\nThe example pipeline:\n\n- Uses ``$group`` to group the results by ``gameId``.\n- Specifies the fields that are output from ``$topN`` with\n  ``output : \"$score\"``.\n- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.\n- Uses sort by ``{ \"score\": -1 }`` to sort the results in descending\n  order.\n\nThe operation returns the following results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: { gameId: 'G1' }, gamescores: [ 99, 33, 31 ] },\n      { _id: { gameId: 'G2' }, gamescores: [ 80 ] }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/topN.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $tsIncrement: <expression> }\n\nThe :ref:`expression <aggregation-expressions>` must resolve to a\n:ref:`timestamp <document-bson-type-timestamp>`.\n\n.. seealso::\n\n   - :ref:`aggregation-expressions`\n   - :ref:`bson-types`\n   - :expression:`$tsSecond`\n\nBehavior\n--------\n\n:expression:`$tsIncrement` returns:\n\n- ``Null`` if the input :ref:`expression <aggregation-expressions>`\n  evaluates to ``null`` or refers to a field that is missing.\n\n- An error if the input :ref:`expression <aggregation-expressions>` does\n  not evaluate to a :ref:`timestamp <document-bson-type-timestamp>`.\n\nExamples\n--------\n\nObtain the Incrementing Ordinal from a Timestamp Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/stockSales-example-collection.rst\n\nThe following example uses :expression:`$tsIncrement` in a\n:pipeline:`$project` stage to return the incrementing ordinal from the\nstock sales ``saleTimestamp`` field:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsIncrement.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     saleTimestamp: Timestamp({ t: 1622731060, i: 1 }),\n     saleIncrement: Long(\"1\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1622731060, i: 2 }),\n     saleIncrement: Long(\"2\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 1 }),\n     saleIncrement: Long(\"1\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 2 }),\n     saleIncrement: Long(\"2\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 3 }),\n     saleIncrement: Long(\"3\")\n   }\n\nUse ``$tsIncrement`` in a Change Stream Cursor to Monitor Collection Changes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe example in this section uses :expression:`$tsIncrement` in a\n:ref:`change stream cursor <changeStreams>` to return every other change\nmade to a collection in the same second of time.\n\nCreate a :ref:`change stream cursor <changeStreams>` on a collection\nnamed ``cakeSales`` that you will see later in this section:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsIncrement.txt"
  },
  {
    "code": "   :copyable: false\n\n   _id: {\n     _data: '82613A4F25000000022B022C0100296E5A100454C5BFAF538C47AB950614F43889BE00461E5F696400290004'\n   },\n   operationType: 'insert',\n   clusterTime: Timestamp({ t: 1631211301, i: 2 }),\n   fullDocument: {\n     _id: 0,\n     type: 'chocolate',\n     orderDate: ISODate(\"2020-05-18T14:10:30.000Z\"),\n     state: 'CA',\n     price: 13,\n     quantity: 120\n   },\n   ns: { db: 'test', coll: 'cakeSales' },\n   documentKey: { _id: 0 }\n\nRunning ``cakeSalesCursor.next()`` again returns the ``cakeSales``\ndocument for which the ``clusterTime`` incrementing ordinal ``i`` is\n``4``, omitting the document where ``i`` is ``3``.\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsIncrement.txt"
  },
  {
    "code": "   :copyable: false\n\n   { $tsSecond: <expression> }\n\nThe :ref:`expression <aggregation-expressions>` must resolve to a\n:ref:`timestamp <document-bson-type-timestamp>`.\n\n.. seealso::\n\n   - :ref:`aggregation-expressions`\n   - :ref:`bson-types`\n   - :expression:`$tsIncrement`\n\nBehavior\n--------\n\n:expression:`$tsSecond` returns:\n\n- ``Null`` if the input :ref:`expression <aggregation-expressions>`\n  evaluates to ``null`` or refers to a field that is missing.\n\n- An error if the input :ref:`expression <aggregation-expressions>` does\n  not evaluate to a :ref:`timestamp <document-bson-type-timestamp>`.\n\nExamples\n--------\n\nObtain the Number of Seconds from a Timestamp Field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/stockSales-example-collection.rst\n\nThe following example uses :expression:`$tsSecond` in a\n:pipeline:`$project` pipeline stage to return the seconds from the\nstock sales ``saleTimestamp`` field:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsSecond.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     saleTimestamp: Timestamp({ t: 1622731060, i: 1 }),\n     saleSeconds: Long(\"1622731060\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1622731060, i: 2 }),\n     saleSeconds: Long(\"1622731060\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 1 }),\n     saleSeconds: Long(\"1714124193\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 2 }),\n     saleSeconds: Long(\"1714124193\")\n   },\n   {\n     saleTimestamp: Timestamp({ t: 1714124193, i: 3 }),\n     saleSeconds: Long(\"1714124193\")\n   }\n\nUse ``$tsSecond`` in a Change Stream Cursor to Monitor Collection Changes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe example in this section uses :expression:`$tsSecond` in a\n:ref:`change stream cursor <changeStreams>` to monitor changes to a\ncollection.\n\nCreate a :ref:`change stream cursor <changeStreams>` on a collection\nnamed ``cakeSales`` that you will see later in this section:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsSecond.txt"
  },
  {
    "code": "   :copyable: false\n\n   _id: {\n     _data: '82613A4A51000000032B022C0100296E5A100495189B4131584C56AC8BA9D540799F23461E5F696400290004'\n   },\n   operationType: 'insert',\n   clusterTime: Timestamp({ t: 1631210065, i: 3 }),\n   fullDocument: {\n     _id: 0,\n     type: 'chocolate',\n     orderDate: ISODate(\"2020-05-18T14:10:30.000Z\"),\n     state: 'CA',\n     price: 13,\n     quantity: 120\n   },\n   ns: { db: 'test', coll: 'cakeSales' },\n   documentKey: { _id: 0 },\n   clusterTimeSeconds: 1631210065\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/tsSecond.txt"
  },
  {
    "code": "   :emphasize-lines: 2,5\n   :copyable: false\n\n   { \"state\" : \"Texas\" }\n   { \"state\" : \"Colorado\" }\n   { \"state\" : \"Rhode Island\" }\n   { \"state\" : \"California\" }\n   { \"state\" : \"Colorado\" }\n   { \"state\" : \"Florida\" }\n   \nTo remove the duplicates, you can include a :pipeline:`$group` stage to\ngroup by the ``state`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "  :copyable: false\n\n   { \"_id\" : \"California\" }\n   { \"_id\" : \"Texas\" }\n   { \"_id\" : \"Florida\" }\n   { \"_id\" : \"Colorado\" }\n   { \"_id\" : \"Rhode Island\" }\n\n``$unionWith`` a Sharded Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the :pipeline:`$unionWith` stage is part of the :ref:`$lookup\npipeline <lookup-join-pipeline>`, the ``$unionWith`` :ref:`coll\n<unionWith-coll>` cannot be sharded. For example, in the following\naggregation operation, the ``inventory_q1`` collection cannot be\nsharded:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 8\n\n   db.suppliers.aggregate([\n      {\n         $lookup: {\n            from: \"warehouses\",\n            let: { order_item: \"$item\", order_qty: \"$ordered\" },\n            pipeline: [\n               ...\n               { $unionWith: { coll: \"inventory_q1\", pipeline: [ ... ] } },\n               ...\n            ],\n            as: \"stockdata\"\n         }\n      }\n   ])\n\nCollation\n~~~~~~~~~\n\nIf the :method:`db.collection.aggregate()` includes a ``collation``\ndocument, that collation is used for the operation, ignoring any other\ncollations. \n\nIf the :method:`db.collection.aggregate()` does not include a\n``collation`` document, the :method:`db.collection.aggregate()` method\nuses the collation for the top-level collection/view on which the\n:method:`db.collection.aggregate()` is run:\n\n- If the :ref:`$unionWith coll <unionWith-coll>` is a collection, its\n  collation is ignored.\n\n- If the :ref:`$unionWith coll <unionWith-coll>` is a :doc:`view\n  </core/views>`, then its collation must match that of the top-level\n  collection/view.  Otherwise, the operation errors.\n\n.. _fts-unionwith-behavior:\n\nAtlas Search Support\n~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0, you can specify the :atlas:`Atlas Search \n</atlas-search>` :pipeline:`$search` or :pipeline:`$searchMeta` stage \nin the ``$unionWith`` pipeline to search collections on the Atlas \ncluster. The :pipeline:`$search` or the :pipeline:`$searchMeta` stage \nmust be the first stage inside the ``$unionWith`` pipeline. \n\n.. tabs:: \n\n   .. tab:: $search\n      :tabid: search\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "         :copyable: false \n         :emphasize-lines: 5-9\n\n         [{\n           \"$unionWith\": {\n             \"coll\": <collection-name>,\n             \"pipeline\": [{\n               \"$search\": {\n                 \"<operator>\": {\n                   <operator-specification>\n                 }\n               },\n               ... \n             }]\n           }\n         }] \n\n   .. tab:: $searchMeta\n      :tabid: searchmeta\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "         :copyable: false \n         :emphasize-lines: 5-9\n\n         [{\n           \"$unionWith\": {\n             \"coll\": <collection-name>,\n             \"pipeline\": [{\n               \"$searchMeta\": {\n                 \"<collector>\": {\n                   <collector-specification>\n                 }\n               },\n               ...\n             }]\n           }\n         }] \n\nTo see an example of :pipeline:`$unionWith` with :pipeline:`$search`, \nsee the Atlas Search tutorial :atlas:`Run an Atlas Search $search Query \nUsing $unionWith </atlas-search/tutorial/search-with-unionwith/>`.\n\nRestrictions\n~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Restrictions\n     - Description\n\n   * - :ref:`transactions <transactions>`\n\n     - An aggregation pipeline cannot use :pipeline:`$unionWith` inside\n       :ref:`transactions <transactions>`.\n\n   * - Sharded Collection\n   \n     - If the :pipeline:`$unionWith` stage is part of the :ref:`$lookup\n       pipeline <lookup-join-pipeline>`, the  :ref:`$unionWith coll\n       <unionWith-coll>` cannot be sharded.\n\n   * - :pipeline:`$out`\n   \n     - The :ref:`$unionWith pipeline <unionWith-pipeline>` cannot\n       include the :pipeline:`$out` stage.\n\n   * - :pipeline:`$merge`\n\n     - The :ref:`$unionWith pipeline <unionWith-pipeline>` cannot\n       include the :pipeline:`$merge` stage.\n\nExamples\n--------\n\nCreate Sales Reports from the Union of Yearly Data Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following examples use the :pipeline:`$unionWith` stage to combine data and\nreturn results from multiple collections. In these examples, each collection \ncontains a year of sales data. \n\nPopulate Sample Data\n````````````````````\n\n#. Create a ``sales_2017`` collection with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"2017\", \"store\" : \"General Store\", \"item\" : \"Chocolates\", \"quantity\" : 150 }\n   { \"_id\" : \"2017\", \"store\" : \"General Store\", \"item\" : \"Cookies\", \"quantity\" : 100 }\n   { \"_id\" : \"2017\", \"store\" : \"General Store\", \"item\" : \"Pie\", \"quantity\" : 10 }\n   { \"_id\" : \"2017\", \"store\" : \"ShopMart\", \"item\" : \"Chocolates\", \"quantity\" : 50 }\n   { \"_id\" : \"2017\", \"store\" : \"ShopMart\", \"item\" : \"Cookies\", \"quantity\" : 120 }\n   { \"_id\" : \"2017\", \"store\" : \"ShopMart\", \"item\" : \"Pie\", \"quantity\" : 5 }\n   { \"_id\" : \"2018\", \"store\" : \"General Store\", \"item\" : \"Cheese\", \"quantity\" : 30 }\n   { \"_id\" : \"2018\", \"store\" : \"General Store\", \"item\" : \"Chocolates\", \"quantity\" : 125 }\n   { \"_id\" : \"2018\", \"store\" : \"General Store\", \"item\" : \"Cookies\", \"quantity\" : 200 }\n   { \"_id\" : \"2018\", \"store\" : \"General Store\", \"item\" : \"Pie\", \"quantity\" : 30 }\n   { \"_id\" : \"2018\", \"store\" : \"ShopMart\", \"item\" : \"Cheese\", \"quantity\" : 50 }\n   { \"_id\" : \"2018\", \"store\" : \"ShopMart\", \"item\" : \"Chocolates\", \"quantity\" : 150 }\n   { \"_id\" : \"2018\", \"store\" : \"ShopMart\", \"item\" : \"Cookies\", \"quantity\" : 100 }\n   { \"_id\" : \"2018\", \"store\" : \"ShopMart\", \"item\" : \"Nuts\", \"quantity\" : 100 }\n   { \"_id\" : \"2018\", \"store\" : \"ShopMart\", \"item\" : \"Pie\", \"quantity\" : 25 }\n   { \"_id\" : \"2019\", \"store\" : \"General Store\", \"item\" : \"Cheese\", \"quantity\" : 50 }\n   { \"_id\" : \"2019\", \"store\" : \"General Store\", \"item\" : \"Chocolates\", \"quantity\" : 125 }\n   { \"_id\" : \"2019\", \"store\" : \"General Store\", \"item\" : \"Cookies\", \"quantity\" : 200 }\n   { \"_id\" : \"2019\", \"store\" : \"General Store\", \"item\" : \"Nuts\", \"quantity\" : 80 }\n   { \"_id\" : \"2019\", \"store\" : \"General Store\", \"item\" : \"Pie\", \"quantity\" : 50 }\n   { \"_id\" : \"2019\", \"store\" : \"ShopMart\", \"item\" : \"Cheese\", \"quantity\" : 20 }\n   { \"_id\" : \"2019\", \"store\" : \"ShopMart\", \"item\" : \"Chocolates\", \"quantity\" : 150 }\n   { \"_id\" : \"2019\", \"store\" : \"ShopMart\", \"item\" : \"Cookies\", \"quantity\" : 100 }\n   { \"_id\" : \"2019\", \"store\" : \"ShopMart\", \"item\" : \"Nuts\", \"quantity\" : 30 }\n   { \"_id\" : \"2019\", \"store\" : \"ShopMart\", \"item\" : \"Pie\", \"quantity\" : 75 }\n   { \"_id\" : \"2020\", \"store\" : \"General Store\", \"item\" : \"Cheese\", \"quantity\" : 100 }\n   { \"_id\" : \"2020\", \"store\" : \"General Store\", \"item\" : \"Chocolates\", \"quantity\" : 200 }\n   { \"_id\" : \"2020\", \"store\" : \"General Store\", \"item\" : \"Cookies\", \"quantity\" : 500 }\n   { \"_id\" : \"2020\", \"store\" : \"General Store\", \"item\" : \"Nuts\", \"quantity\" : 100 }\n   { \"_id\" : \"2020\", \"store\" : \"General Store\", \"item\" : \"Pie\", \"quantity\" : 100 }\n   { \"_id\" : \"2020\", \"store\" : \"ShopMart\", \"item\" : \"Cheese\", \"quantity\" : 100 }\n   { \"_id\" : \"2020\", \"store\" : \"ShopMart\", \"item\" : \"Chocolates\", \"quantity\" : 300 }\n   { \"_id\" : \"2020\", \"store\" : \"ShopMart\", \"item\" : \"Cookies\", \"quantity\" : 400 }\n   { \"_id\" : \"2020\", \"store\" : \"ShopMart\", \"item\" : \"Nuts\", \"quantity\" : 200 }\n   { \"_id\" : \"2020\", \"store\" : \"ShopMart\", \"item\" : \"Pie\", \"quantity\" : 100 }\n\nReport 2: Aggregated Sales by Items\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following aggregation creates a sales report that lists the sales quantity \nper item. The pipeline uses :pipeline:`$unionWith` to combine documents from all\nfour years:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"Cookies\", \"total\" : 1720 }\n   { \"_id\" : \"Chocolates\", \"total\" : 1250 }\n   { \"_id\" : \"Nuts\", \"total\" : 510 }\n   { \"_id\" : \"Pie\", \"total\" : 395 }\n   { \"_id\" : \"Cheese\", \"total\" : 350 }\n\n.. _unionWith-example-specified-docs:\n\nCreate a Union with Specified Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use ``$unionWith`` to perform a union with documents that you\nspecify in the ``pipeline`` field. When you specify a\n:pipeline:`$documents` stage in the ``pipeline`` field, you perform a\nunion with documents that aren't stored in a separate collection.\n\n.. include:: /includes/let-example-create-flavors.rst\n\nThe following ``$unionWith`` operation performs a union with documents\nspecified in the ``pipeline`` :pipeline:`$documents` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, flavor: 'chocolate' },\n      { _id: 2, flavor: 'strawberry' },\n      { _id: 3, flavor: 'cherry' },\n      { _id: 4, flavor: 'orange' },\n      { _id: 5, flavor: 'vanilla', price: 20 }\n   ]\n\n.. _unionWith-example-namespaces-in-subpipelines:\n\nNamespaces in Subpipelines\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/subpipeline-namespaces.rst\n\nStarting in MongoDB 8.0, the following example returns an error because\nit contains an invalid ``coll`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.cakeFlavors.aggregate( [ {\n      $unionWith: {\n         coll: \"cakeFlavors\",\n         pipeline: [ { $documents: [] } ] }\n   } ] )\n\nIn MongoDB versions before 8.0, the previous example runs.\n\nFor an example with a valid ``coll`` field, see\n:ref:`unionWith-duplicate-results`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unionWith.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300 },\n     { _id: 2, item: 'winter coat', qty: 200 },\n     { _id: 3, item: 'sun dress', qty: 250 },\n     { _id: 4, item: 'leather boots', qty: 300 },\n     { _id: 5, item: 'bow tie', qty: 180 }\n   ]\n\nRemove Fields that Start with a Dollar Sign (``$``)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the inventory collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unsetField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { _id: 1, item: 'sweatshirt', qty: 300 },\n     { _id: 2, item: 'winter coat', qty: 200 },\n     { _id: 3, item: 'sun dress', qty: 250 },\n     { _id: 4, item: 'leather boots', qty: 300 },\n     { _id: 5, item: 'bow tie', qty: 180 }\n   ]\n\nRemove A Subfield\n~~~~~~~~~~~~~~~~~\n\nConsider the inventory collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unsetField.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, item: \"sweatshirt\", qty: 300, price: { usd: 45.99 } },\n      { _id: 2, item: \"winter coat\", qty: 200, price: { usd: 499.99 } },\n      { _id: 3, item: \"sun dress\", qty: 250, price: { usd: 199.99 } },\n      { _id: 4, item: \"leather boots\", qty: 300, price: { usd: 249.99 } },\n      { _id: 5, item: \"bow tie\", qty: 180, price: { usd: 9.99 } }\n   ]\n\nLearn More\n----------\n\n:expression:`$setField`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unsetField.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"ABC1\", \"sizes\" : \"S\" }\n   { \"_id\" : 1, \"item\" : \"ABC1\", \"sizes\" : \"M\" }\n   { \"_id\" : 1, \"item\" : \"ABC1\", \"sizes\" : \"L\" }\n\nEach document is identical to the input document except for the value\nof the ``sizes`` field which now holds a value from the original\n``sizes`` array.\n\nMissing or Non-array Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the ``clothing`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id: 1, item: 'Shirt', sizes: 'S' },\n   { _id: 1, item: 'Shirt', sizes: 'M' },\n   { _id: 1, item: 'Shirt', sizes: 'L' },\n   { _id: 3, item: 'Hat', sizes: 'M' }\n\n- In document ``\"_id\": 1``, ``sizes`` is a populated array.\n  :pipeline:`$unwind` returns a document for each element in the\n  ``sizes`` field.\n- In document ``\"_id\": 3``, ``sizes`` resolves to a single element\n  array.\n- Documents ``\"_id\": 2, \"_id\": 4``, and ``\"_id\": 5`` do not return\n  anything because the ``sizes`` field cannot be reduced to a single\n  element array.\n\n.. note::\n\n   The ``{ path: <FIELD> }`` syntax is optional. The following\n   :pipeline:`$unwind` operations are equivalent.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "   :emphasize-lines: 4,6-7\n   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"S\" }\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"M\" }\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"L\" }\n   { \"_id\" : 2, \"item\" : \"EFG\", \"price\" : NumberDecimal(\"120\") }\n   { \"_id\" : 3, \"item\" : \"IJK\", \"price\" : NumberDecimal(\"160\"), \"sizes\" : \"M\" }\n   { \"_id\" : 4, \"item\" : \"LMN\", \"price\" : NumberDecimal(\"10\") }\n   { \"_id\" : 5, \"item\" : \"XYZ\", \"price\" : NumberDecimal(\"5.75\"), \"sizes\" : null }\n\n.. _ex-includeArrayIndex:\n\n``includeArrayIndex``\n`````````````````````\n\nThe following :pipeline:`$unwind` operation uses the\n:ref:`includeArrayIndex <unwind-includeArrayIndex>` option to include\nthe array index in the output.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"S\", \"arrayIndex\" : NumberLong(0) }\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"M\", \"arrayIndex\" : NumberLong(1) }\n   { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"L\", \"arrayIndex\" : NumberLong(2) }\n   { \"_id\" : 3, \"item\" : \"IJK\", \"price\" : NumberDecimal(\"160\"), \"sizes\" : \"M\", \"arrayIndex\" : null }\n\nGroup by Unwound Values\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``inventory2`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"S\" }\n     { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"M\" }\n     { \"_id\" : 1, \"item\" : \"ABC\", \"price\" : NumberDecimal(\"80\"), \"sizes\" : \"L\" }\n     { \"_id\" : 2, \"item\" : \"EFG\", \"price\" : NumberDecimal(\"120\") }\n     { \"_id\" : 3, \"item\" : \"IJK\", \"price\" : NumberDecimal(\"160\"), \"sizes\" : \"M\" }\n     { \"_id\" : 4, \"item\" : \"LMN\", \"price\" : NumberDecimal(\"10\") }\n     { \"_id\" : 5, \"item\" : \"XYZ\", \"price\" : NumberDecimal(\"5.75\"), \"sizes\" : null }\n\nSecond Stage:\n  The :pipeline:`$group` stage groups the documents by ``sizes``\n  and calculates the average price of each size. This stage\n  passes the following documents to the next stage:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"S\", \"averagePrice\" : NumberDecimal(\"80\") }\n     { \"_id\" : \"L\", \"averagePrice\" : NumberDecimal(\"80\") }\n     { \"_id\" : \"M\", \"averagePrice\" : NumberDecimal(\"120\") }\n     { \"_id\" : null, \"averagePrice\" : NumberDecimal(\"45.25\") }\n  \nThird Stage:\n  The :pipeline:`$sort` stage sorts the documents by ``averagePrice`` in\n  descending order. The operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"M\", \"averagePrice\" : NumberDecimal(\"120\") }\n     { \"_id\" : \"L\", \"averagePrice\" : NumberDecimal(\"80\") }\n     { \"_id\" : \"S\", \"averagePrice\" : NumberDecimal(\"80\") }\n     { \"_id\" : null, \"averagePrice\" : NumberDecimal(\"45.25\") }\n\n.. seealso::\n\n   - :pipeline:`$group`\n   - :pipeline:`$sort`\n\nUnwind Embedded Arrays\n~~~~~~~~~~~~~~~~~~~~~~\n\nIn :binary:`~bin.mongosh`, create a sample collection named\n``sales`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"pens\", \"tags\" : [ \"writing\", \"office\", \"school\", \"stationary\" ], \"price\" : NumberDecimal(\"12.00\"), \"quantity\" : 5 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"envelopes\", \"tags\" : [ \"stationary\", \"office\" ], \"price\" : NumberDecimal(\"19.95\"), \"quantity\" : 8 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"laptop\", \"tags\" : [ \"office\", \"electronics\" ], \"price\" : NumberDecimal(\"800.00\"), \"quantity\" : 1 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"notepad\", \"tags\" : [ \"stationary\", \"school\" ], \"price\" : NumberDecimal(\"14.95\"), \"quantity\" : 3 } }\n\nSecond Stage\n  The second :pipeline:`$unwind` stage outputs a new document for each\n  element in the ``items.tags`` arrays:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"pens\", \"tags\" : \"writing\", \"price\" : NumberDecimal(\"12.00\"), \"quantity\" : 5 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"pens\", \"tags\" : \"office\", \"price\" : NumberDecimal(\"12.00\"), \"quantity\" : 5 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"pens\", \"tags\" : \"school\", \"price\" : NumberDecimal(\"12.00\"), \"quantity\" : 5 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"pens\", \"tags\" : \"stationary\", \"price\" : NumberDecimal(\"12.00\"), \"quantity\" : 5 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"envelopes\", \"tags\" : \"stationary\", \"price\" : NumberDecimal(\"19.95\"), \"quantity\" : 8 } }\n     { \"_id\" : \"1\", \"items\" : { \"name\" : \"envelopes\", \"tags\" : \"office\", \"price\" : NumberDecimal(\"19.95\"), \"quantity\" : 8 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"laptop\", \"tags\" : \"office\", \"price\" : NumberDecimal(\"800.00\"), \"quantity\" : 1 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"laptop\", \"tags\" : \"electronics\", \"price\" : NumberDecimal(\"800.00\"), \"quantity\" : 1 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"notepad\", \"tags\" : \"stationary\", \"price\" : NumberDecimal(\"14.95\"), \"quantity\" : 3 } }\n     { \"_id\" : \"2\", \"items\" : { \"name\" : \"notepad\", \"tags\" : \"school\", \"price\" : NumberDecimal(\"14.95\"), \"quantity\" : 3 } }\n\nThird Stage\n  The :pipeline:`$group` stage groups the documents by the tag and\n  calculates the total sales amount of items with each tag:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "     :copyable: false\n\n     { \"_id\" : \"writing\", \"totalSalesAmount\" : NumberDecimal(\"60.00\") }\n     { \"_id\" : \"stationary\", \"totalSalesAmount\" : NumberDecimal(\"264.45\") }\n     { \"_id\" : \"electronics\", \"totalSalesAmount\" : NumberDecimal(\"800.00\") }\n     { \"_id\" : \"school\", \"totalSalesAmount\" : NumberDecimal(\"104.85\") }\n     { \"_id\" : \"office\", \"totalSalesAmount\" : NumberDecimal(\"1019.60\") }\n\n.. seealso::\n\n   - :pipeline:`$group`\n   - :group:`$sum`\n   - :expression:`$multiply`\n\nAdditional Resources\n--------------------\n\n- :doc:`/tutorial/aggregation-zip-code-data-set`,\n- :doc:`/tutorial/aggregation-with-user-preference-data`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/unwind.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: new Date(\"Jan 1, 2016\") }\n\n     - 0\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: { date: new Date(\"2016-01-04\") } }\n\n     - 1\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 33\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: ISODate(\"1998-11-01T00:00:00Z\") }\n\n     - 44\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: {\n              date: ISODate(\"1998-11-01T00:00:00Z\"),\n              timezone: \"-0500\"\n          } }\n\n     - 43\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $week: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$week`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following document:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "   :emphasize-lines: 15\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/week.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: new Date(\"2016-01-01\") }\n\n     - 2016\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: { date: new Date(\"Jan 7, 2003\") } }\n\n     - 2003\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: {\n              date: new Date(\"August 14, 2011\"),\n              timezone: \"America/Chicago\"\n          } }\n\n     - 2011\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: ISODate(\"1998-11-07T00:00:00Z\") }\n\n     - 1998\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: {\n              date: ISODate(\"1998-11-07T00:00:00Z\"),\n              timezone: \"-0400\"\n          } }\n\n     - 1998\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: \"March 28, 1976\" }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: Date(\"2016-01-01\") }\n\n     - ``error``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $year: \"2009-04-09\" }\n\n     - ``error``\n\n.. note:: ``$year`` cannot take a string as an argument.\n\nExample\n-------\n\nConsider a ``sales`` collection with the following documents:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   db.sales.aggregate(\n      [\n        {\n          $project:\n            {\n              year: { $year: \"$date\" },\n              month: { $month: \"$date\" },\n              day: { $dayOfMonth: \"$date\" },\n              hour: { $hour: \"$date\" },\n              minutes: { $minute: \"$date\" },\n              seconds: { $second: \"$date\" },\n              milliseconds: { $millisecond: \"$date\" },\n              dayOfYear: { $dayOfYear: \"$date\" },\n              dayOfWeek: { $dayOfWeek: \"$date\" },\n              week: { $week: \"$date\" }\n            }\n        }\n      ]\n   )\n\nThe operation returns the following result:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/year.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $zip: { inputs: [ [ \"a\" ], [ \"b\" ], [ \"c\" ] ] }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ [ \"a\", \"b\", \"c\" ] ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          { $zip: { inputs: [ [ \"a\" ], [ \"b\", \"c\" ] ] } }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ [ \"a\", \"b\" ] ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $zip: {\n               inputs: [ [ 1 ], [ 2, 3 ] ],\n               useLongestLength: true\n            }\n          }\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          [ [ 1, 2 ], [ null, 3 ] ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "          :copyable: false\n\n          {\n            $zip: {\n               inputs: [ [ 1 ], [ 2, 3 ], [ 4 ] ],\n               useLongestLength: true,\n               defaults: [ \"a\", \"b\", \"c\" ]\n            }\n          }\n\n     - Because ``useLongestLength: true``, ``$zip`` will pad the shorter\n       input arrays with the corresponding ``defaults`` elements.\n\n       This yields ``[ [ 1, 2, 4 ], [ \"a\", 3, \"c\" ] ]``.\n\nExample\n-------\n\nMatrix Transposition\n~~~~~~~~~~~~~~~~~~~~\n\nA collection called ``matrices`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/aggregation/zip.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.collection.find( \n      <query>, \n      { <arrayField>: { $slice: <number> } } \n   );\n\nor\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/projection/slice.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.collection.find( \n      <query>, \n      { <arrayField>: { $slice: [ <number>, <number> ] } } \n   );\n\n.. list-table::\n   :header-rows: 1\n\n   * - Value\n     - Description\n     \n   * - ``$slice: <number>``\n   \n     - Specifies the number of elements to return in the\n       ``<arrayField>``. For ``<number>``:\n\n       - Specify a positive number ``n`` to return the first ``n``\n         elements.\n\n       - Specify a negative number ``n`` to return the last ``n``\n         elements.\n\n       If the ``<number>`` is greater than the number of array\n       elements, the query returns all array elements.\n\n   * - ``$slice: [ <number to skip>, <number to return> ]``\n\n     - Specifies the number of elements to return in the\n       ``<arrayField>`` after skipping the specified number of elements\n       starting from the first element. You must specify both elements.\n\n       For the ``<number to skip>``:\n\n       - Specify a positive number ``n`` to skip ``n`` elements from\n         the start of the array; i.e. 0th index position. Based on a\n         zero-based array index, ``1`` indicates the starting position\n         of the 2nd element, etc. If ``n`` is greater than the number\n         of array elements, the query returns an empty array for the\n         ``<arrayField>``.\n\n       - Specify a negative number ``n`` to skip backward ``n``\n         elements from the start of the array; i.e. 0th index position\n         Based on a zero-based array index (i.e. the first element is\n         at index 0), ``-1`` indicates the starting position of the\n         last element, etc. If the absolute value of the negative\n         number is greater than the number of array elements, the\n         starting position is the start of the array.\n\n       For the ``<number to return>``, you must specify a \n       *positive* number ``n`` to return the next ``n`` elements,\n       starting after skipping the specified number.\n\nBehavior\n--------\n\n\n``$slice`` of Embedded Array \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/projection-slice-operator-inclusion.rst\n\nView Restriction\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/views-unsupported-projection-$slice.rst\n\n``$`` Positional Operator and ``$slice`` Restriction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/projection-positional-operator-slice-full.rst\n\nPath Collision: ``$slice`` of an Array and Embedded Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/extracts/projection-path-collision-slice-embedded-field-full.rst\n\n.. |findoperation| replace:: :method:`find <db.collection.find()>` and :method:`findAndModify <db.collection.findAndModify()>`\n\n.. seealso::\n\n   :ref:`find-projection`\n\nExamples\n--------\n\nCreate an example collection ``posts`` with the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/projection/slice.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 3, \"results\" : [ { \"product\" : \"abc\", \"score\" : 7 },\n                              { \"product\" : \"xyz\", \"score\" : 8 } ] }\n\n.. _elemmatch-single-query-condition:\n\nSingle Query Condition\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following sections show the output differences when you use\n``$elemMatch`` with a single query condition, and omit ``$elemMatch``.\n\nExample 1\n`````````\n\nQuery with ``$elemMatch``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/elemMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      {\n         _id: 1,\n         results: [ { product: 'abc', score: 10 }, { product: 'xyz', score: 5 } ]\n      },\n      {\n         _id: 2,\n         results: [ { product: 'abc', score: 8 }, { product: 'xyz', score: 7 } ]\n      },\n      {\n         _id: 3,\n         results: [ { product: 'abc', score: 7 }, { product: 'xyz', score: 8 } ]\n      }\n   ]\n\nQuery without ``$elemMatch``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/elemMatch.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 14\n\n   [\n      {\n         _id: 1,\n         results: [ { product: 'abc', score: 10 }, { product: 'xyz', score: 5 } ]\n      },\n      {\n         _id: 2,\n         results: [ { product: 'abc', score: 8 }, { product: 'xyz', score: 7 } ]\n      },\n      {\n         _id: 3,\n         results: [ { product: 'abc', score: 7 }, { product: 'xyz', score: 8 } ]\n      },\n      { _id: 5, results: { product: 'xyz', score: 7 } }\n   ]\n\nExample 2\n`````````\n\nConsider the following queries:\n\n- First query has a single ``<query>`` condition in ``$elemMatch``.\n- Second query omits ``$elemMatch``.\n\nFirst query with ``$elemMatch``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/elemMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 1, \"results\" : [ { \"product\" : \"abc\", \"score\" : 10 },\n                              { \"product\" : \"xyz\", \"score\" : 5 } ] }\n   { \"_id\" : 2, \"results\" : [ { \"product\" : \"abc\", \"score\" : 8 },\n                              { \"product\" : \"xyz\", \"score\" : 7 } ] }\n   { \"_id\" : 3, \"results\" : [ { \"product\" : \"abc\", \"score\" : 7 },\n                              { \"product\" : \"xyz\", \"score\" : 8 } ] }\n   { \"_id\" : 4, \"results\" : [ { \"product\" : \"abc\", \"score\" : 7 },\n                              { \"product\" : \"def\", \"score\" : 8 } ] }\n\nSecond query without ``$elemMatch``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/elemMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 4, \"results\" : [ { \"product\" : \"abc\", \"score\" : 7 },\n                              { \"product\" : \"def\", \"score\" : 8 } ] }\n\nBoth queries include the document with an ``_id`` of ``4``, and omit the\ndocument with an ``_id`` of ``5`` because the ``product`` is ``\"xyz\"``.\n\nLearn More\n----------\n\n.. include:: /includes/arrays-additional-examples.rst\n\n.. seealso::\n\n   :method:`db.collection.find()`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/elemMatch.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 2, item: { name: \"cd\", code: \"123\" }, qty: 20, tags: [ \"B\" ] },\n      { _id: 5, item: { name: \"mn\", code: \"000\" }, qty: 20, tags: [ [ \"A\", \"B\" ], \"C\" ] }\n   ]\n\nField in Embedded Document Equals a Value\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example queries the ``inventory`` collection to select\nall documents where the value of the ``name`` field in the ``item``\ndocument equals ``\"ab\"``. To specify a condition on a field in an\nembedded document, use the :term:`dot notation`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, item: { name: \"ab\", code: \"123\" }, qty: 15, tags: [ \"A\", \"B\", \"C\" ] } ]\n\n.. seealso::\n\n   :ref:`Query Embedded Documents <read-operations-embedded-documents>`\n\nArray Element Equals a Value\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example queries the ``inventory`` collection to select\nall documents where the ``tags`` array contains an element with the\nvalue ``\"B\"`` [#match-string-value]_:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 1, item: { name: \"ab\", code: \"123\" }, qty: 15, tags: [ \"A\", \"B\", \"C\" ] },\n      { _id: 2, item: { name: \"cd\", code: \"123\" }, qty: 20, tags: [ \"B\" ] },\n      { _id: 3, item: { name: \"ij\", code: \"456\" }, qty: 25, tags: [ \"A\", \"B\" ] },\n      { _id: 4, item: { name: \"xy\", code: \"456\" }, qty: 30, tags: [ \"B\", \"A\" ] }\n   ]\n\n.. seealso::\n\n   - :query:`$elemMatch`\n   - :ref:`Query Arrays <read-operations-arrays>`\n\n.. [#match-string-value] The query will also match documents where the\n   value of the ``tags`` field is the string ``\"B\"``.\n\n.. _eq-match-array-value:\n\nEquals an Array Value\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example queries the ``inventory`` collection to select\nall documents where the ``tags`` array equals exactly the specified\narray or the ``tags`` array contains an element that equals the array\n``[ \"A\", \"B\" ]``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 3, item: { name: \"ij\", code: \"456\" }, qty: 25, tags: [ \"A\", \"B\" ] },\n      { _id: 5, item: { name: \"mn\", code: \"000\" }, qty: 20, tags: [ [ \"A\", \"B\" ], \"C\" ] }\n   ]\n\n.. _eq-regex-matching:\n\nRegex Match Behaviour\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following examples demonstrate the differences in behavior between\nimplicit and explicit regular expression matching. Consider a collection\nwith these documents: \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "     :copyable: false\n\n     [ { company: \"MongoDB\" } ]\n\n$eq match on a regular expression\n   An explicit query using ``$eq`` and a regular expression will only \n   match an object which is also a regular expresssion. The example \n   query won't return anything since values in the ``company`` field \n   are strings.\n   \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "      :copyable: false\n\n      [\n         { company: \"MongoDB\" },\n         { company: \"MongoDB2\" }  \n      ]\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/eq.txt"
  },
  {
    "code": "   :copyable: false\n\n   { saffron: 5, cinnamon: 5, mustard: null }\n   { saffron: 3, cinnamon: null, mustard: 8 }\n   { saffron: null, cinnamon: 3, mustard: 9 }\n   { saffron: 1, cinnamon: 2, mustard: 3 }\n   { saffron: 2, mustard: 5 }\n   { saffron: 3, cinnamon: 2 }\n   { saffron: 4 }\n   \n\n``$exists: false``\n^^^^^^^^^^^^^^^^^^\n\nThe following query specifies the query predicate ``cinnamon: { $exists: false }``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/exists.txt"
  },
  {
    "code": "   :copyable: false\n\n   { saffron: 2, mustard: 5 }\n   { saffron: 4 }\n   { mustard: 6 }\n\n.. include:: /includes/extracts/4.2-changes-type-0.rst\n\nUse a Sparse Index to Improve ``$exists`` Performance \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following table compares ``$exists`` query performance using sparse \nand non-sparse indexes:\n\n.. list-table::\n   :widths: 20,30,30\n   :header-rows: 1\n\n   * - ``$exists`` Query\n     - Using a Sparse Index\n     - Using a Non-Sparse Index\n   * - ``{ $exists: true }``\n     - Most efficient. MongoDB can make an exact match and does not\n       require a ``FETCH``.\n     - More efficient than queries without an index, but still requires \n       a ``FETCH``.\n   * - ``{ $exists: false }``\n     - Cannot use the index and requires a ``COLLSCAN``.\n     - Requires a ``FETCH``.\n\nQueries that use ``{ $exists: true }`` on fields that use a non-sparse \nindex or that use ``{ $exists: true }`` on fields that are not indexed\nexamine all documents in a collection. To improve performance, create \na :ref:`sparse index <index-type-sparse>` on the ``field`` as shown in \nthe following scenario:\n\n#. Create a ``stockSales`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/exists.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 2, item : \"notebook\", qty : 200 , price : NumberDecimal(\"8\") }\n   { _id : 3, item : \"pencil\", qty : 50 , price : NumberDecimal(\"6\") }\n   { _id : 4, item : \"eraser\", qty : 150 , price : NumberDecimal(\"3\") }\n\nEven though :expression:`$cond` calculates an effective discounted\nprice, that price is not reflected in the returned documents. Instead,\nthe returned documents represent the matching documents in their\noriginal state. The find operation did not return the ``binder``\nor ``legal pad`` documents, as their discounted price was greater than\n``5``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/expr.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n     { '_id' : 1, 'item' : 'abc123', 'qty' : 0 },\n     { '_id' : 3, 'item' : 'ijk123', 'qty' : 12 }\n   ]\n\n.. _mod-not-enough-elements:\n\nNot Enough Elements Error\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :query:`$mod` operator errors when passed an array with fewer than\ntwo elements.\n\nArray with Single Element\n`````````````````````````\n\nThe following operation incorrectly passes the :query:`$mod` operator\nan array that contains a single element:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: malformed mod, not enough elements\n\nEmpty Array\n```````````\n\nThe following operation incorrectly passes the :query:`$mod` operator\nan empty array:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: malformed mod, not enough elements\n\n.. _mod-too-many-elements:\n\nToo Many Elements Error\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :query:`$mod` operator errors when passed an array with more than\ntwo elements.\n\nFor example, the following operation attempts to use the :query:`$mod`\noperator with an array that contains four elements:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: malformed mod, too many elements\n\nFloating Point Arguments\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``$mod`` expression rounds decimal input towards zero.\n\nThe following examples demonstrate this behavior:\n\n.. example::\n\n   Input query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "      :copyable: false\n\n      [\n        { _id: 1, item: 'abc123', qty: 0 },\n        { _id: 3, item: 'ijk123', qty: 12 }\n      ]\n\n.. example::\n\n   Input query:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "      :copyable: false\n\n      [\n        { _id: 1, item: 'abc123', qty: 0 },\n        { _id: 3, item: 'ijk123', qty: 12 }\n      ]\n\n.. example:: \n\n   Input query:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "      :copyable: false\n\n      [\n        { _id: 1, item: 'abc123', qty: 0 },\n        { _id: 3, item: 'ijk123', qty: 12 }\n      ]\n\nEach query applies ``4`` to the ``$mod`` expression regardless of \ndecimal points, resulting in the same result set.\n\n.. _mod-qo-negative-dividend-example:\n\nNegative Dividend\n~~~~~~~~~~~~~~~~~\n\nThe ``$mod`` expression produces a negative result when the dividend\nis negative. \n\nThe following example demonstrates this behavior:\n\n.. example::\n\n   Input query:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "      :copyable: false\n\n      [\n        { _id: 1, item: 'abc123', qty: 0 },\n        { _id: 3, item: 'ijk123', qty: 12 }\n      ]\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/mod.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.inventory.find( { quantity: { $ne: 20 } } )\n\n   .. output::\n      :language: javascript\n      :visible: false\n\n      {\n       _id: ObjectId(\"61ba667dfe687fce2f042420\"),\n       item: 'nuts',\n       quantity: 30,\n       carrier: { name: 'Shipit', fee: 3 }\n      },\n      {\n       _id: ObjectId(\"61ba667dfe687fce2f042421\"),\n       item: 'bolts',\n       quantity: 50,\n       carrier: { name: 'Shipit', fee: 4 }\n      },\n      {\n       _id: ObjectId(\"61ba667dfe687fce2f042422\"),\n       item: 'washers',\n       quantity: 10,\n       carrier: { name: 'Shipit', fee: 1 }\n      }\n\nThe SQL equivalent to this query is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/ne.txt"
  },
  {
    "code": "   :copyable: false\n\n   SELECT * FROM INVENTORY WHERE QUANTITIY != 20\n\nUpdate Based on Not Equal Embedded Document Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example sets the ``price`` field based on a ``$ne``\ncomparison against a field in an embedded document. The \n:method:`~db.collection.updateMany()` operation searches for an\nembedded document, ``carrier``, with a subfield named ``fee``. It uses \n:update:`$set` to update the ``price`` field to ``9.99`` in each \ndocument where ``fee`` has a value that does not equal ``1`` or \nwhere the ``fee`` subfield does not exist:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/ne.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n\n      db.inventory.updateMany( \n         { \"carrier.fee\" : { $ne: 1 } }, \n         { $set: { \"price\": 9.99 } } \n      )\n\n   .. output::\n      :language: javascript\n      :visible: false\n\n      {\n       _id: ObjectId(\"61ba66e2fe687fce2f042423\"),\n       item: 'nuts',\n       quantity: 30,\n       carrier: { name: 'Shipit', fee: 3 },\n       price: 9.99\n      },\n      {\n       _id: ObjectId(\"61ba66e2fe687fce2f042424\"),\n       item: 'bolts',\n       quantity: 50,\n       carrier: { name: 'Shipit', fee: 4 },\n       price: 9.99\n      },\n      {\n       _id: ObjectId(\"61ba66e2fe687fce2f042425\"),\n       item: 'washers',\n       quantity: 10,\n       carrier: { name: 'Shipit', fee: 1 }\n      }\n\nThe SQL equivalent to this query is:\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/ne.txt"
  },
  {
    "code": "   :copyable: false\n\n   UPDATE INVENTORY SET PRICE = '9.99' WHERE carrierfee != 1\n\n.. include:: /includes/extracts/ne_operators_selectivity.rst\n\nLearn More\n----------\n\n- :ref:`sql-to-mongodb-mapping`\n- :ref:`read-operations-query-document`\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/ne.txt"
  },
  {
    "code": "   :copyable: false\n   \n   { price: { $not: 1.99 } }\n\nBehavior\n--------\n\nArrays\n~~~~~~\n\nWhen passed an array argument, the ``$not`` operator may yield\nunexpected results. To match documents based on multiple false\nconditions, use :query:`$nor`.\n\nRegular Expressions\n~~~~~~~~~~~~~~~~~~~\n\n:query:`$not` operator can perform logical ``NOT`` operation on:\n\n- Regular expression objects (i.e. ``/pattern/``)\n\n  For example, the following query selects all documents in the\n  ``inventory`` collection where the ``item`` field value does *not*\n  start with the letter ``p``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/not.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"donorId\" : 1000, \"amount\" : 2, \"frequency\" : 1 }\n   { \"donorId\" : 1001, \"amount\" : 58, \"frequency\" : 2 }\n   { \"donorId\" : 1002, \"amount\" : 27, \"frequency\" : 1 }\n   { \"donorId\" : 1003, \"amount\" : 26, \"frequency\" : 2 }\n   { \"donorId\" : 1004, \"amount\" : 42, \"frequency\" : 1 }\n\nSelect Random Items From a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``$rand`` operator can be used to select random documents from a\ncollection. Given a collection of voter records:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/rand.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"name\" : \"Beckham\", \"registered\" : true }\n   { \"name\" : \"Eckhard\", \"registered\" : false }\n   { \"name\" : \"Grimwald\", \"registered\" : true }\n   { \"name\" : \"Humphrey\", \"registered\" : true }\n\nLearn More\n----------\n\n:expression:`$rand (aggregation) <$rand>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/rand.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 101, sku: 'abc789', description: 'First line\\nSecond line' },\n      { _id: 103, sku: 'xyz789', description: 'Multiple\\nline description' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\n.. _regex-case-insensitive:\n\nPerform Case-Insensitive Regular Expression Match\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``i`` option perform a\n*case-insensitive* match for documents with ``sku`` value that starts\nwith ``ABC``.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' },\n      { _id: 101, sku: 'abc789', description: 'First line\\nSecond line' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\n.. _regex-multiline-match:\n\nMultiline Match for Lines Starting with Specified Pattern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``m`` option to match lines starting\nwith the letter ``S`` for multiline strings:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' },\n      { _id: 101, sku: 'abc789', description: 'First line\\nSecond line' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\nWithout the ``m`` option, the example output is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\nIf the ``$regex`` pattern does not contain an anchor, the pattern\nmatches against the string as a whole, as in the following example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' },\n      { _id: 101, sku: 'abc789', description: 'First line\\nSecond line' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\n.. _regex-dot-new-line:\n\nUse the ``.`` Dot Character to Match New Line\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``s`` option to allow the  dot\ncharacter (i.e. ``.``) to match all characters *including* new line as well as the\n``i`` option to perform a case-insensitive match:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 102, sku: 'xyz456', description: 'Many spaces before     line' },\n      { _id: 103, sku: 'xyz789', description: 'Multiple\\nline description' }\n   ]\n\n*Without* the ``s`` option, the example output is:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 102, sku: 'xyz456', description: 'Many spaces before     line' }\n   ]\n\n.. _regex-ignore-white-spaces:\n\nIgnore White Spaces in Pattern\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``x`` option ignore white spaces and the\ncomments, denoted by the ``#`` and ending with the ``\\n`` in the\nmatching pattern:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' }\n   ]\n\n.. _regex-match-case-in-strings:\n\nUse a Regular Expression to Match Case in Strings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the regular expression ``\"(?i)a(?-i)bc\"`` to\nmatch ``sku`` field strings that contain:\n\n- ``\"abc\"``\n- ``\"Abc\"``\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 100, sku: 'abc123', description: 'Single line description.' },\n      { _id: 101, sku: 'abc789', description: 'First line\\nSecond line' },\n      { _id: 104, sku: 'Abc789', description: 'SKU starts with A' }\n   ]\n\n.. _regex-example-pcre2-ucp:\n\nExtend Regex Options to Match Characters Outside of ASCII\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 6.1\n\nBy default, certain regex options (such as ``/b`` and ``/w``) only\nrecognize ASCII characters. This can cause unexpected results when\nperforming regex matches against UTF-8 characters.\n\nStarting in MongoDB 6.1, you can specify the ``*UCP`` regex option to\nmatch UTF-8 characters.\n\n.. important:: Performance of UCP Option\n\n   The ``*UCP`` option results in slower queries than those without the\n   option specified because ``*UCP`` requires a multistage table lookup\n   to perform the match.\n\nFor example, consider the following documents in a ``songs``\ncollection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 0, artist: 'Blue Öyster Cult', title: 'The Reaper' },\n      { _id: 1, artist: 'Blue Öyster Cult', title: 'Godzilla' }\n   ]\n\nThe previous results are unexpected because none of the words in the\nreturned ``artist`` fields begin with the matched string (``yster``).\nThe ``Ö`` character in documents ``_id: 0`` and ``_id: 1`` is ignored\nwhen performing the match because it is a UTF-8 character.\n\nThe expected result is that the query does not return any documents.\n\nTo allow the query to recognize UTF-8 characters, specify the ``*UCP``\noption before the pattern:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/regex.txt"
  },
  {
    "code": "   :copyable: false \n\n   [\n     { _id: 8, subject: 'Cafe con Leche', author: 'xyz', views: 10 },\n     { _id: 5, subject: 'Café Con Leche', author: 'abc', views: 200 },\n     { _id: 1, subject: 'coffee', author: 'xyz', views: 50 },\n     { _id: 7, subject: 'coffee and cream', author: 'efg', views: 10 },\n     { _id: 2, subject: 'Coffee Shopping', author: 'efg', views: 5 }\n   ]\n\n.. seealso::\n\n   :ref:`text-operator-phrases`\n\nExclude Documents That Contain a Term\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA *negated* term is a term that is prefixed by a minus sign ``-``. If\nyou negate a term, the ``$text`` operator excludes the documents that\ncontain those terms from the results.\n\nThe following example matches documents that contain the word ``coffee``\nbut do **not** contain the term ``shop``, or more precisely the stemmed\nversion of the words:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/text.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : 3, \"subject\" : \"Baking a cake\", \"author\" : \"abc\", \"views\" : 90, \"score\" : 0.75 }\n\n.. seealso::\n\n   :expression:`$meta`\n\n.. _ex-sort-text-search-score:\n\nSort by Relevance Score\n```````````````````````\n\n.. include:: /includes/extracts/4.4-changes-projection-sort-meta-list.rst\n\n.. seealso::\n\n   :expression:`$meta`\n\n.. _ex-sort-limit-two:\n\nReturn Top 2 Matching Documents\n```````````````````````````````\n\nUse the :method:`~cursor.limit()` method in conjunction with a\n:method:`~cursor.sort()` to return the top ``n`` matching documents.\n\nThe following example queries for the term ``coffee`` and sorts the\nresults by the descending score, limiting the results to the top two\nmatching documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/text.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, address : \"2030 Martian Way\", zipCode : \"90698345\" }\n   { _id : 5, address : \"104 Venus Drive\", zipCode : [ \"834847278\", \"1893289032\" ] }\n\nThe following queries return all documents where ``zipCode`` is the\n:term:`BSON` type ``double`` *or* is an array containing an element of\nthe specified type:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 2, address : \"156 Lunar Place\", zipCode : 43339374 }\n\nThe following query uses the ``number`` alias to return documents where\n``zipCode`` is the :term:`BSON` type ``double``, ``int``, or ``long``\n*or* is an array containing an element of the specified types:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 2, address : \"156 Lunar Place\", zipCode : 43339374 }\n   { _id : 3, address : \"2324 Pluto Place\", zipCode : NumberLong(3921412) }\n   { _id : 4, address : \"55 Saturn Ring\", zipCode : 88602117 }\n\n.. _document-querying-by-multiple-data-types:\n\nQuerying by Multiple Data Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``grades`` collection contains names and averages, where\n``classAverage`` has ``string``, ``int``, and ``double`` values:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   { _id : 1, name : \"Alice King\", classAverage : 87.33333333333333 }\n   { _id : 2, name : \"Bob Jenkins\", classAverage : \"83.52\" }\n   { _id : 3, name : \"Cathy Hart\", classAverage : \"94.06\" } \n\n.. _document-querying-by-MinKey-And-MaxKey:\n\nQuerying by MinKey and MaxKey\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``restaurants`` collection uses ``minKey`` for any grade that is a\nfailing grade:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id : 1,\n      address : {\n         building : \"230\",\n         coord : [ -73.996089, 40.675018 ],\n         street : \"Huntington St\",\n         zipcode : \"11231\"\n      },\n      borough : \"Brooklyn\",\n      cuisine : \"Bakery\",\n      grades : [\n         { date : ISODate(\"2014-03-03T00:00:00Z\"), grade : \"C\", score : 15 },\n         { date : ISODate(\"2013-09-11T00:00:00Z\"), grade : \"C\", score : 16 },\n         { date : ISODate(\"2013-01-24T00:00:00Z\"), grade : { \"$minKey\" : 1 }, score : 30 },\n         { date : ISODate(\"2011-11-23T00:00:00Z\"), grade : \"C\", score : 15 }\n      ],\n      name : \"Dirty Dan's Donuts\",\n      restaurant_id : \"30075445\"\n   }\n\nThe following query returns any restaurant whose ``grades.grade`` field\ncontains ``maxKey`` *or* is an array containing an element of\nthe specified type:\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id : 2,\n      address : {\n         building : \"1166\",\n         coord : [ -73.955184, 40.738589 ],\n         street : \"Manhattan Ave\",\n         zipcode : \"11222\"\n      },\n      borough : \"Brooklyn\",\n      cuisine : \"Bakery\",\n      grades : [\n         { date : ISODate(\"2014-03-03T00:00:00Z\"), grade : { \"$maxKey\" : 1 }, score : 2 },\n         { date : ISODate(\"2013-09-11T00:00:00Z\"), grade : \"B\", score : 6 },\n         { date : ISODate(\"2013-01-24T00:00:00Z\"), grade : { \"$maxKey\" : 1 }, score : 3 },\n         { date : ISODate(\"2011-11-23T00:00:00Z\"), grade : \"B\", score : 5 }\n      ],\n      name : \"Dainty Daisey's Donuts\",\n      restaurant_id : \"30075449\"\n   }\n   \n\n.. _document-querying-by-array-type:\n\nQuerying by Array Type\n----------------------\n\nA collection named ``sensorReading`` contains the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id : 1,\n      readings : [\n         25,\n         23,\n         [ \"Warn: High Temp!\", 55 ],\n         [ \"ERROR: SYSTEM SHUTDOWN!\", 66 ]\n      ]\n   },\n   {\n      _id : 2,\n      readings : [ 25, 25, 24, 23 ]\n   },\n   {\n      _id : 3,\n      readings : [ 22, 24, [] ]\n   },\n   {\n      _id : 4,\n      readings : []\n   }\n\nIn the documents with ``_id : 1``, ``_id : 2``, ``_id : 3``, and\n``_id : 4``, the ``readings`` field is an array. \n\n\nAdditional Information\n----------------------\n\n- :doc:`/tutorial/query-for-null-fields`\n\n- :method:`db.collection.find()`\n\n- :ref:`bson-types`.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/query/type.txt"
  },
  {
    "code": "   :copyable: false\n\n   1101   // expdata\n   1010   // Int32(10)\n   ----\n   1000\n\nBinary 1000 is equivalent to Int32(8). The\n``db.switches.find( { _id: 1 } )`` command returns the following\ndocument:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/bit.txt"
  },
  {
    "code": "   :copyable: false\n\n   0111   // expdata\n   0101   // Int32(5)\n   ----\n   0111\n\nBinary 0111 is equivalent to Int32(7). The \n``db.switches.find( { _id: 2 } )`` command returns the following\ndocument:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/bit.txt"
  },
  {
    "code": "   :copyable: false\n\n   0001   // expdata\n   0101   // Int32(5)\n   ----\n   0100\n\nBinary 0100 is equivalent to ``Int32(4)``. The\n``db.switches.find( { _id: 3 } )`` command returns the following\ndocument:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/bit.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 1,\n      \"status\" : \"D\",\n      \"lastModified\" : ISODate(\"2020-01-22T21:21:41.052Z\"),\n      \"cancellation\" : {\n         \"date\" : Timestamp(1579728101, 1),\n         \"reason\" : \"user request\"\n      }\n   }\n\nThe ``lastModified`` field is set to the date when\n:update:`$currentDate` was run in the update example shown earlier.\n\n.. _currentDate-example-agg:\n\nAggregation Alternative to ``$currentDate``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUpdate methods can accept an aggregation pipeline. Specifically, the previous \nexample can be rewritten as the following using the aggregation stage \n:pipeline:`$set` and the aggregation variables :variable:`NOW` \n(for the current datetime) and :variable:`CLUSTER_TIME`\n(for the current timestamp):\n\n.. tip::\n\n   - To access aggregation variables, prefix the variable with double\n     dollar signs ``$$`` and enclose in quotes.\n     \n   - :variable:`CLUSTER_TIME` is available only on replica sets and\n     sharded clusters.\n     \n   - The :variable:`NOW` and :variable:`CLUSTER_TIME` values remain the\n     same throughout the pipeline.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/currentDate.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\n      \"_id\" : 1,\n      \"status\" : \"D\",\n      \"lastModified\" : ISODate(\"2020-01-22T21:02:18.994Z\"),\n      \"cancellation\" : {\n         \"date\" : Timestamp(1579726934, 2),\n         \"reason\" : \"user request\"\n      }\n   }\n\n.. seealso::\n\n   - :method:`db.collection.updateOne()`\n   - :method:`db.collection.updateMany()`\n   - :method:`db.collection.findAndModify()`\n   - :method:`db.collection.findOneAndUpdate()`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/currentDate.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   {\n      _id: 1,\n      desc: \"decorative arts\",\n      dateEntered: ISODate(\"2013-10-01T05:00:00Z\"),\n      dateExpired: ISODate(\"2013-10-01T16:38:16.163Z\")\n   }\n\n.. seealso::\n\n   - :method:`db.collection.updateMany()`\n   - :method:`db.collection.findAndModify()`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/max.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n\n   {\n     _id: 1,\n     desc: \"crafts\",\n     dateEntered: ISODate(\"2013-09-25T00:00:00Z\"),\n     dateExpired: ISODate(\"2013-10-01T16:38:16Z\")\n   }\n\n.. seealso::\n\n   - :method:`db.collection.updateMany()`\n   - :method:`db.collection.findAndModify()`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/min.txt"
  },
  {
    "code": "   :copyable: false\n\n   MongoServerError: The path 'myArray' must exist in the document in order to apply array updates.\n\nNested Arrays\n~~~~~~~~~~~~~\n\nThe filtered positional operator ``$[<identifier>]`` can\nbe used for queries which traverse more than one array and nested arrays.\n\nFor an example, see :ref:`position-nested-arrays-filtered`.\n\n\nExamples\n--------\n\n.. _positional-update-arrayFilters:\n\nUpdate All Array Elements That Match ``arrayFilters``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate the ``students`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/positional-filtered.txt"
  },
  {
    "code": "   :emphasize-line: 5\n\n   {\n    _id: 1,\n    name: 'Christine Franklin',\n    degrees: [ \n       { level: 'Master', gradcampaign: 1 },\n       { level: 'Bachelor' }\n    ]\n  },\n  {\n    _id: 2,\n    name: 'Reyansh Sengupta',\n    degrees: [ { level: 'Bachelor' } ]\n  }\n\n\n.. _position-nested-arrays-filtered:\n\nUpdate Nested Arrays in Conjunction with ``$[]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``$[<identifier>]`` filtered positional operator, in conjunction\nwith the :update:`$[]` all positional operator, can be used to update\nnested arrays.\n\nCreate a collection ``students4`` with the following document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/positional-filtered.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   {\n     _id: 5,\n     grades: [\n       { grade: 80, mean: 75, std: 8 },\n       { grade: 85, mean: 90, std: 6 },\n       { grade: 90, mean: 85, std: 3 }\n     ]\n   }\n\n.. _multiple-array-match:\n\nUpdate with Multiple Array Matches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe positional :update:`$` update operator behaves ambiguously when the\nquery has multiple array fields to filter documents in the collection.\n\nConsider a document in the ``students_deans_list`` collection, which holds\narrays of student information:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/positional.txt"
  },
  {
    "code": "   :copyable: false\n\n   [ { _id: 1, votes: [ 5 ] } ]\n\n\nRemove Items from an Array of Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate the ``survey`` collection:\n\n.. _ex-create-survey-collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/pull.txt"
  },
  {
    "code": "   :emphasize-lines: 10, 15, 25, 30\n\n   db.survey.drop()\n\n   db.survey.insertMany( [\n      {\n         _id: 1,\n         results: [\n            {\n               item: \"A\", \n               score: 5, \n               answers: [ { q: 1, a: 4 }, { q: 2, a: 6 } ]\n            },\n            {\n               item: \"B\",\n               score: 8,\n               answers: [ { q: 1, a: 8 }, { q: 2, a: 9 } ]\n            }\n         ]\n      },\n      {\n         _id: 2,\n         results: [\n            {\n               item: \"C\",\n               score: 8,\n               answers: [ { q: 1, a: 8 }, { q: 2, a: 7 } ]\n            },\n            {\n               item: \"B\",\n               score: 4,\n               answers: [ { q: 1, a: 0 }, { q: 2, a: 8 } ]\n            }\n         ]\n      }\n   ] )\n\nThen you can specify multiple conditions on the elements of the\n``answers`` array with :query:`$elemMatch`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/pull.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n\n   db.survey.updateMany(\n     { },\n     {\n        $pull:\n           {\n              results:\n                 {\n                    answers: { $elemMatch: { q: 2, a: { $gte: 8 } } }\n                 }\n           }\n     }\n   )\n\nThe operation updated the ``results`` array in each document it\nmatched. :method:`db.collection.updateMany()` removed documents from\n``results`` when an element of the embedded ``answers`` array matched\nthe selection conditions in the highlighted line. \n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/pull.txt"
  },
  {
    "code": "   :copyable: false\n   \n   [\n      { _id: 1, scores: [ 44, 78, 38, 80, 89, 95 ] },\n      { _id: 2, scores: [ 45, 78, 38, 80, 89, 95 ] },\n      { _id: 3, scores: [ 46, 78, 38, 80, 89, 95 ] },\n      { _id: 4, scores: [ 47, 78, 38, 80, 89, 95 ] }\n   ]\n\nAppend Multiple Values to an Array\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse :update:`$push` with the :update:`$each` modifier to append\nmultiple values to the array field.\n\n.. include:: /includes/example-push-each.rst\n\nUse ``$push`` Operator with Multiple Modifiers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/example-push-with-multiple-modifiers.rst\n\n.. seealso::\n\n   - :method:`db.collection.updateMany()`\n   - :method:`db.collection.findAndModify()`\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/push.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 100,\n     quantity: 500,\n     instock: true,\n     reorder: false,\n     details: { model: '2600', make: 'Fashionaires' },\n     tags: [ 'coats', 'outerwear', 'clothing' ],\n     ratings: [ { by: 'Customer007', rating: 4 } ]\n   }\n\nSet Fields in Embedded Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/use-dot-notation.rst\n\nFor the document matching the criteria ``_id`` equal to ``100``, the\nfollowing operation updates the ``make`` field in the ``details``\ndocument:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      _id: 100,\n      quantity: 500,\n      instock: true,\n      reorder: false,\n      details: { model: '2600', make: 'Kustom Kidz' },\n      tags: [ 'coats', 'outerwear', 'clothing' ],\n      ratings: [ { by: 'Customer007', rating: 4 } ]\n   }\n\n.. important::\n\n   The above code uses ``dot notation`` to update the ``make`` field of the \n   embedded ``details`` document. The code format looks similar to the following \n   code example, which instead *replaces the entire embedded document*, removing \n   all other fields in the embedded ``details`` document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/set.txt"
  },
  {
    "code": "      :copyable: false\n\n      db.products.updateOne(\n         { _id: 100 },\n         { $set: { details:\n            {make: \"Kustom Kidz\"}\n            }\n         })\n\n\nSet Elements in Arrays\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/use-dot-notation.rst\n\nFor the document matching the criteria ``_id`` equal to ``100``, the\nfollowing operation updates the value second element (array index of\n``1``) in the ``tags`` field and the ``rating`` field in the first\nelement (array index of ``0``) of the ``ratings`` array.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     _id: 100,\n     quantity: 500,\n     instock: true,\n     reorder: false,\n     details: { model: '2600', make: 'Kustom Kidz' },\n     tags: [ 'coats', 'rain gear', 'clothing' ],\n     ratings: [ { by: 'Customer007', rating: 2 } ]\n   }\n\n\nFor additional update operators for arrays, see\n:doc:`/reference/operator/update-array`.\n\n.. seealso::\n\n   - :method:`db.collection.updateMany()`\n   - :method:`db.collection.findAndModify()`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/set.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     item: 'chisel',\n     sku: 'C001',\n     quantity: 4,\n     instock: true\n   },\n   {\n     item: 'hammer',\n     sku: 'unknown'\n   },\n   {\n     item: 'nails',\n     sku: 'unknown',\n     quantity: 100,\n     instock: true\n   }\n\n.. seealso::\n\n   :method:`db.collection.updateMany()`\n   :method:`db.collection.findAndModify()`\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/operator/update/unset.txt"
  },
  {
    "code": "      :copyable: false\n      \n      Too many index builds running simultaneously, waiting until the\n      number of active index builds is below the threshold.\n\n   .. include:: /includes/fact-runtime-startup-parameter\n\n   The following command sets a limit of 4 concurrent index builds:\n\n",
    "language": "sh",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/parameters.txt"
  },
  {
    "code": "   :copyable: false\n\n   Resolving kerberos environment...\n   [OK] Kerberos environment resolved without errors.\n\n   Verifying DNS resolution works with Kerberos service at <hostname>...\n   [OK] DNS test successful.\n\n   Getting MIT Kerberos KRB5 environment variables...\n     * KRB5CCNAME: not set.\n     * KRB5_CLIENT_KTNAME: not set.\n     * KRB5_CONFIG: not set.\n     * KRB5_KTNAME: not set.\n     * KRB5_TRACE: not set.\n   [OK]\n\n   Verifying existence of KRB5 keytab FILE:/etc/krb5.keytab...\n   [OK] KRB5 keytab exists and is populated.\n\n   Checking principal(s) in KRB5 keytab...\n   Found the following principals for MongoDB service mongodb:\n     * mongodb/server.example.com@SERVER.EXAMPLE.COM\n   Found the following kvnos in keytab entries for service mongodb:\n     * 3\n   [OK] KRB5 keytab is valid.\n\n   Fetching KRB5 Config...\n   KRB5 config profile resolved as:\n      <Your Kerberos profile file will be output here>\n   [OK] KRB5 config profile resolved without errors.\n\n   Attempting to initiate security context with service credentials...\n   [OK] Security context initiated successfully.\n\nThe final message indicates that the system's Kerberos configuration is\nready to be used with MongoDB. If any errors are encountered with\nthe configuration, they will be presented as part of the above output.\n\n.. _mongokeberos-usage-client:\n\nClient Mode\n~~~~~~~~~~~\n\nRunning :binary:`~bin.mongokerberos` in client mode tests authentication\nagainst your system's Kerberos environment, performing each step in the\nKerberos authentication process, including checking for proper DNS\nresolution, verification of the Kerberos client keytab file, and testing\nwhether a ticket can be successfully granted. Running\n:binary:`~bin.mongokerberos` in client mode simulates the client\nauthentication procedure of :binary:`~bin.mongosh`.\n\nBefore you can use :binary:`~bin.mongokerberos` in client mode, you must\nfirst have configured Kerberos on your platform according to your\nplatform's documentation. Optionally, you may also choose to run\n:binary:`~bin.mongokerberos` in\n:ref:`server mode <mongokeberos-usage-server>` first to verify that your\nplatform's Kerberos configuration is valid before using client mode.\n\nOnce you have completed these steps, you can run\n:binary:`~bin.mongokerberos` in client mode to test user authentication,\nusing the ``--client`` flag as follows:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/program/mongokerberos.txt"
  },
  {
    "code": "  :copyable: false\n\n   Resolving kerberos environment...\n   [OK] Kerberos environment resolved without errors.\n\n   Verifying DNS resolution works with Kerberos service at <hostname>...\n   [OK] DNS test successful.\n\n   Getting MIT Kerberos KRB5 environment variables...\n     * KRB5CCNAME: not set.\n     * KRB5_CLIENT_KTNAME: not set.\n     * KRB5_CONFIG: not set.\n     * KRB5_KTNAME: not set.\n     * KRB5_TRACE: not set.\n   [OK]\n\n   Verifying existence of KRB5 client keytab FILE:/path/to/client.keytab...\n   [OK] KRB5 client keytab exists and is populated.\n\n   Checking principal(s) in KRB5 keytab...\n   [OK] KRB5 keytab is valid.\n\n   Fetching KRB5 Config...\n   KRB5 config profile resolved as:\n      <Your Kerberos profile file will be output here>\n   [OK] KRB5 config profile resolved without errors.\n\n   Attempting client half of GSSAPI conversation...\n   [OK] Client half of GSSAPI conversation completed successfully.\n\nThe final message indicates that client authentication completed\nsuccessfully for the user provided.  If any errors are encountered\nduring the authentication steps, they will be presented as part of the\nabove output.\n\nOptions\n-------\n\n.. _mongokeberos-option-server:\n\n.. option:: --server\n\n   Runs :binary:`~bin.mongokerberos` in server mode to test that your\n   platform's Kerberos configuration is valid for use with MongoDB.\n\n   See :ref:`mongokeberos-usage-server` for example usage and expected\n   output.\n\n.. _mongokeberos-option-client:\n\n.. option:: --client\n\n   Runs :binary:`~bin.mongokerberos` in client mode to test client\n   authentication against your system's Kerberos environment. Requires\n   specifying a valid username with :option:`--username` when running in\n   client mode. :binary:`~bin.mongokerberos` will request a Kerberos ticket\n   for this username as part of the validation procedure. Running\n   :binary:`~bin.mongokerberos` in client mode simulates the client\n   authentication procedure of :binary:`~bin.mongosh`. \n\n   See :ref:`mongokeberos-usage-client` for example usage and expected\n   output.\n\n.. option:: --config <filename>, -f <filename>\n\n   Specifies a configuration file for runtime configuration options. \n   The options are equivalent to the command-line\n   configuration options. See :doc:`/reference/configuration-options` for\n   more information.\n\n   :binary:`~bin.mongokerberos` will read the values for\n   :parameter:`saslHostName` and :parameter:`saslServiceName` from this\n   file if present. These values can alteratively be specified with the\n   :option:`--setParameter` option instead.\n\n   Ensure the configuration file uses ASCII encoding. The\n   :binary:`~bin.mongokerberos` instance does not support configuration\n   files with non-ASCII encoding, including UTF-8.\n\n   Only valid in :ref:`server mode <mongokeberos-usage-server>`.\n\n.. option:: --setParameter <options>\n\n   Sets a configurable parameter. You can specify multiple\n   ``setParameter`` fields.\n\n   While you can use any supported parameters with ``setParameter``,\n   :binary:`~bin.mongokerberos` only checks for the value of the following:\n\n   - :parameter:`saslHostName`\n   - :parameter:`saslServiceName`\n\n   If using the :option:`--config` option with a configuration file that\n   also contains these values, the ``setParameter`` values will\n   override the values from the configuration file.\n\n   Valid in both :ref:`server mode <mongokeberos-usage-server>`\n   and :ref:`client mode <mongokeberos-usage-client>`.\n\n.. option:: --host <hostname>\n\n   Specify the hostname of the MongoDB server to connect to when testing\n   authentication.\n   \n   If :option:`--host` is not specified, :binary:`~bin.mongokerberos` does\n   not perform any DNS validation of the hostname (i.e. PTR record\n   verification)\n\n   Only valid in :ref:`client mode <mongokeberos-usage-client>`.\n\n.. option:: --username <username>, -u <username>\n\n   Username for :binary:`~bin.mongokerberos` to use when attempting Kerberos\n   authentication. This value is required when running in\n   :ref:`client mode<mongokeberos-usage-client>`.\n\n   Only valid in :ref:`client mode <mongokeberos-usage-client>`.\n\n.. option:: --gssapiServiceName <servicename>\n\n   *default: 'mongodb'*\n\n   Service principal name to use when authenticating using\n   GSSAPI/Kerberos.\n\n   Only valid in :ref:`client mode <mongokeberos-usage-client>`.\n\n.. option:: --gssapiHostName <hostname>\n\n   Remote hostname to use for purpose of GSSAPI/Kerberos authentication.\n\n   Only valid in :ref:`client mode <mongokeberos-usage-client>`.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/program/mongokerberos.txt"
  },
  {
    "code": "          :copyable: false\n\n\n          SELECT COUNT(*) AS count\n          FROM orders\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: null,\n                  count: { $sum: 1 }\n               }\n             }\n          ] )\n\n\n     - \n       Count all records\n       from ``orders``\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT SUM(price) AS total\n          FROM orders\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: null,\n                  total: { $sum: \"$price\" }\n               }\n             }\n          ] )\n\n\n     -\n       Sum the ``price`` field\n       from ``orders``\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 SUM(price) AS total\n          FROM orders\n          GROUP BY cust_id\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  total: { $sum: \"$price\" }\n               }\n             }\n          ] )\n\n\n     - \n       For each unique ``cust_id``,\n       sum the ``price`` field.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 SUM(price) AS total\n          FROM orders\n          GROUP BY cust_id\n          ORDER BY total\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  total: { $sum: \"$price\" }\n               }\n             },\n             { $sort: { total: 1 } }\n          ] )\n\n\n     - For each unique ``cust_id``,\n       sum the ``price`` field,\n       results sorted by sum.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 ord_date,\n                 SUM(price) AS total\n          FROM orders\n          GROUP BY cust_id,\n                   ord_date\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: {\n                     cust_id: \"$cust_id\",\n                     ord_date: { $dateToString: {\n                        format: \"%Y-%m-%d\",\n                        date: \"$ord_date\"\n                     }}\n                  },\n                  total: { $sum: \"$price\" }\n               }\n             }\n          ] )\n\n\n     - For each unique\n       ``cust_id``, ``ord_date`` grouping,\n       sum the ``price`` field.\n       Excludes the time portion of the date.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 count(*)\n          FROM orders\n          GROUP BY cust_id\n          HAVING count(*) > 1\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  count: { $sum: 1 }\n               }\n             },\n             { $match: { count: { $gt: 1 } } }\n          ] )\n\n\n     - For ``cust_id`` with multiple records,\n       return the ``cust_id`` and\n       the corresponding record count.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 ord_date,\n                 SUM(price) AS total\n          FROM orders\n          GROUP BY cust_id,\n                   ord_date\n          HAVING total > 250\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: {\n                     cust_id: \"$cust_id\",\n                     ord_date: { $dateToString: {\n                        format: \"%Y-%m-%d\",\n                        date: \"$ord_date\"\n                     }}\n                  },\n                  total: { $sum: \"$price\" }\n               }\n             },\n             { $match: { total: { $gt: 250 } } }\n          ] )\n\n\n     - For each unique ``cust_id``, ``ord_date``\n       grouping, sum the ``price`` field\n       and return only where the\n       sum is greater than 250.\n       Excludes the time portion of the date.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 SUM(price) as total\n          FROM orders\n          WHERE status = 'A'\n          GROUP BY cust_id\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             { $match: { status: 'A' } },\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  total: { $sum: \"$price\" }\n               }\n             }\n          ] )\n\n\n     - For each unique ``cust_id``\n       with status ``A``,\n       sum the ``price`` field.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 SUM(price) as total\n          FROM orders\n          WHERE status = 'A'\n          GROUP BY cust_id\n          HAVING total > 250\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             { $match: { status: 'A' } },\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  total: { $sum: \"$price\" }\n               }\n             },\n             { $match: { total: { $gt: 250 } } }\n          ] )\n\n\n     - For each unique ``cust_id``\n       with status ``A``,\n       sum the ``price`` field and return\n       only where the\n       sum is greater than 250.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT cust_id,\n                 SUM(li.qty) as qty\n          FROM orders o,\n               order_lineitem li\n          WHERE li.order_id = o.id\n          GROUP BY cust_id\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             { $unwind: \"$items\" },\n             {\n               $group: {\n                  _id: \"$cust_id\",\n                  qty: { $sum: \"$items.qty\" }\n               }\n             }\n          ] )\n\n\n     - For each unique ``cust_id``,\n       sum the corresponding\n       line item ``qty`` fields\n       associated with the\n       orders.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT COUNT(*)\n          FROM (SELECT cust_id,\n                       ord_date\n                FROM orders\n                GROUP BY cust_id,\n                         ord_date)\n                as DerivedTable\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.orders.aggregate( [\n             {\n               $group: {\n                  _id: {\n                     cust_id: \"$cust_id\",\n                     ord_date: { $dateToString: {\n                        format: \"%Y-%m-%d\",\n                        date: \"$ord_date\"\n                     }}\n                  }\n               }\n             },\n             {\n               $group: {\n                  _id: null,\n                  count: { $sum: 1 }\n               }\n             }\n          ] )\n\n\n     - Count the number of distinct\n       ``cust_id``, ``ord_date`` groupings.\n       Excludes the time portion of the date.\n\n.. seealso::\n\n   - :doc:`/reference/sql-comparison`\n\n   - :method:`db.collection.aggregate()`\n\n   - :ref:`aggregation-pipeline-operator-reference`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-aggregation-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          CREATE TABLE people (\n              id MEDIUMINT NOT NULL\n                  AUTO_INCREMENT,\n              user_id Varchar(30),\n              age Number,\n              status char(1),\n              PRIMARY KEY (id)\n          )\n\n\n     - Implicitly created on first :method:`~db.collection.insertOne()` or\n       :method:`~db.collection.insertMany()` operation. The primary key\n       ``_id`` is automatically added if ``_id`` field is not specified.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 1\n\n          db.people.insertOne( {\n              user_id: \"abc123\",\n              age: 55,\n              status: \"A\"\n           } )\n\n       However, you can also explicitly create a collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 1\n\n          db.createCollection(\"people\")\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          ALTER TABLE people\n          ADD join_date DATETIME\n\n\n     - Collections do not describe or enforce the structure of its\n       documents; i.e. there is no structural alteration at the\n       collection level.\n\n       However, at the document level, :method:`~db.collection.updateMany()`\n       operations can add fields to existing documents using the\n       :update:`$set` operator.\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 3\n\n          db.people.updateMany(\n              { },\n              { $set: { join_date: new Date() } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          ALTER TABLE people\n          DROP COLUMN join_date\n\n\n     - Collections do not describe or enforce the structure of its\n       documents; i.e. there is no structural alteration at the collection\n       level.\n\n       However, at the document level, :method:`~db.collection.updateMany()`\n       operations can remove fields from documents using the\n       :update:`$unset` operator.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 3\n\n          db.people.updateMany(\n              { },\n              { $unset: { \"join_date\": \"\" } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          CREATE INDEX idx_user_id_asc\n          ON people(user_id)\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 1\n\n          db.people.createIndex( { user_id: 1 } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          CREATE INDEX\n                 idx_user_id_asc_age_desc\n          ON people(user_id, age DESC)\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 1\n\n          db.people.createIndex( { user_id: 1, age: -1 } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          DROP TABLE people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 1\n\n          db.people.drop()\n\nFor more information on the methods and operators used, see:\n\n- :method:`db.collection.insertOne()`\n- :method:`db.collection.insertMany()`\n- :method:`db.createCollection()`\n- :method:`db.collection.updateMany()`\n- :method:`db.collection.createIndex()`\n- :method:`db.collection.drop()`\n- :update:`$set`\n- :update:`$unset`\n\n.. seealso::\n\n   - :ref:`databases-and-collections`\n   - :ref:`bson-document-format`\n   - :ref:`Indexes <indexes>`\n   - :ref:`data-modeling-concepts`.\n\nInsert\n~~~~~~\n\nThe following table presents the various SQL statements related to\ninserting records into tables and the corresponding MongoDB statements.\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - SQL INSERT Statements\n\n     - MongoDB insertOne() Statements\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          INSERT INTO people(user_id,\n                            age,\n                            status)\n          VALUES (\"bcd001\",\n                  45,\n                  \"A\")\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n          :emphasize-lines: 2\n\n          db.people.insertOne(\n             { user_id: \"bcd001\", age: 45, status: \"A\" }\n          )\n\n\nFor more information, see :method:`db.collection.insertOne()`.\n\n.. seealso::\n\n   - :ref:`write-op-insert`\n   - :method:`db.collection.insertMany()`\n   - :ref:`databases-and-collections`\n   - :ref:`bson-document-format`\n\n\nSelect\n~~~~~~\n\nThe following table presents the various SQL statements related to\nreading records from tables and the corresponding MongoDB statements.\n\n.. note::\n\n   The :method:`~db.collection.find()` method always includes the ``_id``\n   field in the returned documents unless specifically excluded through\n   :ref:`projection<projection>`. Some of the SQL queries below may include an\n   ``_id`` field to reflect this, even if the field is not included in the\n   corresponding :method:`~db.collection.find()` query.\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - SQL SELECT Statements\n\n     - MongoDB find() Statements\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find()\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT id,\n                 user_id,\n                 status\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :emphasize-lines: 3\n          :copyable: false\n\n          db.people.find(\n              { },\n              { user_id: 1, status: 1 }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT user_id, status\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :emphasize-lines: 3\n          :copyable: false\n\n          db.people.find(\n              { },\n              { user_id: 1, status: 1, _id: 0 }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status = \"A\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :emphasize-lines: 2\n          :copyable: false\n\n          db.people.find(\n              { status: \"A\" }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT user_id, status\n          FROM people\n          WHERE status = \"A\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n              { status: \"A\" },\n              { user_id: 1, status: 1, _id: 0 }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status != \"A\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n              { status: { $ne: \"A\" } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status = \"A\"\n          AND age = 50\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n              { status: \"A\",\n                age: 50 }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status = \"A\"\n          OR age = 50\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n              { $or: [ { status: \"A\" } , { age: 50 } ] }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE age > 25\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n              { age: { $gt: 25 } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE age < 25\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n             { age: { $lt: 25 } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE age > 25\n          AND   age <= 50\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find(\n             { age: { $gt: 25, $lte: 50 } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE user_id like \"%bc%\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { user_id: /bc/ } )\n\n       \\-or-\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { user_id: { $regex: /bc/ } } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE user_id like \"bc%\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { user_id: /^bc/ } )\n\n       \\-or-\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { user_id: { $regex: /^bc/ } } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status = \"A\"\n          ORDER BY user_id ASC\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { status: \"A\" } ).sort( { user_id: 1 } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          WHERE status = \"A\"\n          ORDER BY user_id DESC\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { status: \"A\" } ).sort( { user_id: -1 } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT COUNT(*)\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.count()\n\n       *or*\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find().count()\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT COUNT(user_id)\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.count( { user_id: { $exists: true } } )\n\n       *or*\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { user_id: { $exists: true } } ).count()\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT COUNT(*)\n          FROM people\n          WHERE age > 30\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.count( { age: { $gt: 30 } } )\n\n       *or*\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { age: { $gt: 30 } } ).count()\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT DISTINCT(status)\n          FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.aggregate( [ { $group : { _id : \"$status\" } } ] )\n\n       or, for distinct value sets that do not exceed the :ref:`BSON size limit <limit-bson-document-size>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.distinct( \"status\" )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          LIMIT 1\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.findOne()\n\n       *or*\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find().limit(1)\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          SELECT *\n          FROM people\n          LIMIT 5\n          SKIP 10\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find().limit(5).skip(10)\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          EXPLAIN SELECT *\n          FROM people\n          WHERE status = \"A\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.find( { status: \"A\" } ).explain()\n\nFor more information on the methods and operators used, see\n\n- :method:`db.collection.find()`\n- :method:`db.collection.distinct()`\n- :method:`db.collection.findOne()`\n- :method:`~cursor.limit()`\n- :method:`~cursor.skip()`\n- :method:`~cursor.explain()`\n- :method:`~cursor.sort()`\n- :method:`~cursor.count()`\n- :query:`$ne`\n- :query:`$and`\n- :query:`$or`\n- :query:`$gt`\n- :query:`$lt`\n- :query:`$exists`\n- :query:`$lte`\n- :query:`$regex`\n\n.. seealso::\n\n   - :doc:`/tutorial/query-documents`\n   - :doc:`/reference/operator/query`\n   - :doc:`/reference/method`\n\nUpdate Records\n~~~~~~~~~~~~~~\n\nThe following table presents the various SQL statements related to\nupdating existing records in tables and the corresponding MongoDB\nstatements.\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - SQL Update Statements\n\n     - MongoDB updateMany() Statements\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          UPDATE people\n          SET status = \"C\"\n          WHERE age > 25\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.updateMany(\n             { age: { $gt: 25 } },\n             { $set: { status: \"C\" } }\n          )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          UPDATE people\n          SET age = age + 3\n          WHERE status = \"A\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.updateMany(\n             { status: \"A\" } ,\n             { $inc: { age: 3 } }\n          )\n\n\nFor more information on the method and operators used in the examples, see:\n\n- :method:`db.collection.updateMany()`\n- :query:`$gt`\n- :update:`$set`\n- :update:`$inc`\n\n.. seealso::\n\n   - :doc:`/tutorial/update-documents`\n   - :doc:`/reference/operator/update`\n   - :method:`db.collection.updateOne()`\n   - :method:`db.collection.replaceOne()`\n\nDelete Records\n~~~~~~~~~~~~~~\n\nThe following table presents the various SQL statements related to\ndeleting records from tables and the corresponding MongoDB statements.\n\n.. list-table::\n   :header-rows: 1\n   :class: border-table\n\n   * - SQL Delete Statements\n\n     - MongoDB deleteMany() Statements\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          DELETE FROM people\n          WHERE status = \"D\"\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.deleteMany( { status: \"D\" } )\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          DELETE FROM people\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "          :copyable: false\n\n          db.people.deleteMany({})\n\n\nFor more information, see :method:`db.collection.deleteMany()`.\n\n.. seealso::\n\n   - :doc:`/tutorial/remove-documents`\n   - :method:`db.collection.deleteOne()`\n\nFurther Reading\n---------------\n\nIf you are considering migrating your SQL application to MongoDB,\ndownload the `MongoDB Application Modernization Guide\n<https://www.mongodb.com/modernize?tck=docs_server>`_.\n\n.. include:: /includes/fact-rdbms-guide-contents.rst\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/sql-comparison.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: php\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: c\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 0\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Stable API Example 1\n         :end-before: End Stable API Example 1\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: nodejs\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "nodejs",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: java-sync\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: kotlin-coroutine\n\n",
    "language": "",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Stable API Example 1\n         :end-before: End Stable API Example 1\n\n   .. tab::\n      :tabid: motor\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: rust\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: rust\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: ruby\n\n",
    "language": "rust",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: cpp\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: cpp\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: swift-sync\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n   .. tab::\n      :tabid: swift-async\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 1\n         :end-before: End Versioned API Example 1\n\n``\"1\"`` is currently the only API version available. \n\nBy default, clients are *non-strict*. A non-strict client allows you\nto run any command, regardless of whether or not it belongs to the \nStable API.\n\nChecking Client API Versions\n----------------------------\n\nUse the :dbcommand:`serverStatus` command to check for your \napplication's configured API version. For each application connected to \nyour MongoDB instance, an ``appname`` appears in the ``apiVersions`` \ndocument.\n\nSee :ref:`metrics.apiVersions <server-status-apiVersions>` for more \ninformation.\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: php\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: c\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 0\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n   \n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Stable API Example 2\n         :end-before: End Stable API Example 2\n   \n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: nodejs\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "nodejs",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: java-sync\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: kotlin-coroutine\n\n",
    "language": "",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Stable API Example 2\n         :end-before: End Stable API Example 2\n\n   .. tab::\n      :tabid: motor\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n   \n   .. tab::\n      :tabid: rust\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: rust\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: ruby\n\n",
    "language": "rust",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: cpp\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: cpp\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: swift-sync\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\n   .. tab::\n      :tabid: swift-async\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 2\n         :end-before: End Versioned API Example 2\n\nMigrate To Stable API Commands\n------------------------------\n\nTo migrate your application to use the Stable API, you must:\n\n#. Run your application's test suite with the new MongoClient options.\n#. Determine which commands and features you're using that are outside \n   of the Stable API.\n#. Migrate to alternative commands and features in the Stable API.\n\nOnce your application uses only commands and features defined in the \nStable API, you can redeploy it with the new MongoClient options \nand be confident that future server upgrades won't negatively\nimpact your application.\n\nHow To Use Commands and Features Outside of the Stable API\n----------------------------------------------------------\n\nTo use commands and features outside of the Stable API, you can \nconnect to your deployment with a *non-strict* client. By default,\nclients are *non-strict*.\n\nTo create a *non-strict* client, use the following sample code:\n\n.. tabs-drivers::\n\n   .. tab::\n      :tabid: shell\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: php\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: c\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 0\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n   \n   .. tab::\n      :tabid: csharp\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: csharp\n         :dedent: 12\n         :start-after: Start Stable API Example 3\n         :end-before: End Stable API Example 3\n\n   .. tab::\n      :tabid: nodejs\n\n",
    "language": "csharp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: nodejs\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: java-sync\n\n",
    "language": "nodejs",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: java-sync\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: kotlin-coroutine\n\n",
    "language": "",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: Start Stable API Example 3\n         :end-before: End Stable API Example 3\n\n   .. tab::\n      :tabid: motor\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n   \n   .. tab::\n      :tabid: rust\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: rust\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n   \n   .. tab::\n      :tabid: ruby\n\n",
    "language": "rust",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: cpp\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: cpp\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: swift-sync\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\n   .. tab::\n      :tabid: swift-async\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "         :language: swift\n         :dedent: 4\n         :start-after: Start Versioned API Example 3\n         :end-before: End Versioned API Example 3\n\nUsing this non-strict client allows you to run commands outside of the\nStable API. For example, this non-strict client allows you to run the\n:dbcommand:`createUser` command.\n\n.. important:: \n\n   Commands and features outside of the Stable API do not have the same \n   backward compatibility guarantees as versioned alternatives.\n\n.. _api-v1-command-list:\n\nStable API Commands\n-------------------\n\nThe database commands included in Stable API V1 depend on the MongoDB\nversion you are using. To view the database commands included in the\nStable API and the MongoDB version they were introduced, see\n:ref:`stable-api-changelog`.\n\n.. _stable-api-params:\n\nParameters\n----------\n\nYou can specify the following optional parameters for Stable API in \nyour application's MongoDB driver connection code. Check the MongoDB \ndriver documentation for the driver you use in your application for \nmore information:\n\n.. _api-version-desc:\n.. _api-strict-desc: \n.. _api-depr-desc:\n\n.. include:: /includes/stable-api-options.rst\n  \n.. |param| replace:: Parameter\n.. |apiVersion| replace:: :ref:`apiVersion <api-version-desc>`\n.. |strict| replace:: :ref:`apiStrict <api-strict-desc>`\n.. |deprecation| replace:: :ref:`apiDeprecationErrors <api-depr-desc>`\n       \n\nBehavior\n--------\n\nParameter Validation                         \n~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 5.0, API V1 database commands raise an error if \npassed a parameter not explicitly accepted by the command. \n\n.. _api-error-responses:\n\nStable API Error Responses\n--------------------------\n\nThis table shows error responses for problematic Stable API requests.\n\n.. list-table::\n   :widths: 25,75\n   :header-rows: 1\n\n   * - Server Response \n\n     - Request\n\n   * - :ref:`APIDeprecationError <api-deprecation-resp>`\n\n     - .. _api-deprecation-resp:\n\n       Specifies ``{ apiDeprecationErrors: true }`` with \n       API version ``V`` and uses a behavior deprecated in ``V``.\n\n   * - :ref:`APIStrictError <api-strict-resp>`\n    \n     - .. _api-strict-resp:\n\n       Specifies ``{ apiStrict: true }`` with API version ``V``, \n       but uses a behavior not in version ``V``.\n\n   * - :ref:`APIVersionError <api-vers-resp>`\n  \n     - .. _api-vers-resp:\n\n       Specifies an :ref:`apiVersion <api-version-desc>` that the server \n       does not support.\n\n   * - :ref:`InvalidOptions <api-invalid-opts-resp>`\n       \n     - .. _api-invalid-opts-resp:\n\n       Specifies ``{ apiStrict: true }`` or \n       ``{ apiDeprecationErrors: true }`` but omits \n       :ref:`apiVersion <api-version-desc>`.\n  \n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Migrate to Later Version </reference/stable-api-reference>\n   Changelog </reference/stable-api-changelog>\n\n",
    "language": "swift",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/reference/stable-api.txt"
  },
  {
    "code": "   :copyable: false\n\n   Connection handshake failed. Is your mongod 3.4 or older? \n   :: caused by :: network error while attempting to run command\n   'isMaster' on host '127.0.0.1:27017'\n\nmongod Responses to Legacy Opcodes\n``````````````````````````````````\n\nSince MongoDB 3.6, MongoDB drivers have used :ref:`OP_MSG <wire-op-msg>`\ninstead of :ref:`OP_QUERY <wire-op-query>` and the other legacy opcodes\nand commands.\n\nStarting in MongoDB 6.0:\n\n- :binary:`mongod` will close the connection and will not respond to:\n\n  - :ref:`OP_INSERT <wire-op-insert>`\n  - :ref:`OP_DELETE <wire-op-delete>`\n  - :ref:`OP_UPDATE <wire-op-update>`\n  - :ref:`OP_KILL_CURSORS <wire-op-kill-cursors>`\n\n- :binary:`mongod` will keep the connection open and return an error for:\n\n  - The ``getLastError`` database command\n  - :ref:`OP_GET_MORE <wire-op-get-more>` \n  - :ref:`OP_QUERY <wire-op-query>` finds\n  - Most :ref:`OP_QUERY <wire-op-query>`\n    :abbr:`RPC (Remote Procedure Call)` command messages\n\n.. note:: OP_QUERY RPC Commands\n\n   The :ref:`OP_QUERY <wire-op-query>` :abbr:`RPC (Remote Procedure Call)`\n   protocol may be used with the following commands:\n\n   - ``_isSelf``\n   - ``authenticate``\n   - ``buildinfo``\n   - ``buildInfo``\n   - ``hello``\n   - ``ismaster``\n   - ``isMaster``\n   - ``saslContinue``\n   - ``saslStart``\n\n   All other commands will be rejected if issued as :ref:`OP_QUERY\n   <wire-op-query>`.\n\n.. _6.0-js-engine-change:\n\nRemoved Deprecated Array and String Functions for Server-Side JavaScript\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/fact-6.0-js-engine-change.rst\n\nFor the complete list of removed array and string functions, see the\nnext sections on this page.\n\n.. note:: Only Static Functions are Removed\n\n   Only *static* JavaScript functions are removed. *Prototype function*\n   equivalents of the removed functions can still be used.\n\n   For example:\n\n   - ``Array.concat(<array1>, <array2>)`` is a static function and no\n     longer works in MongoDB 6.0.\n   - ``<array1>.concat(<array2>)`` is a prototype function and still\n     works in MongoDB 6.0.\n\n   This behavior applies to both removed array and removed string\n   functions.\n\nRemoved Array Functions\n```````````````````````\n\nStarting in MongoDB 6.0, the following array functions are removed and\ncannot be used in server-side JavaScript with ``$accumulator``,\n``$function``, and ``$where`` expressions:\n\n- ``Array.concat``\n- ``Array.every``\n- ``Array.filter``\n- ``Array.forEach``\n- ``Array.indexOf``\n- ``Array.join``\n- ``Array.lastIndexOf``\n- ``Array.map``\n- ``Array.pop``\n- ``Array.push``\n- ``Array.reduce``\n- ``Array.reduceRight``\n- ``Array.reverse``\n- ``Array.shift``\n- ``Array.slice``\n- ``Array.some``\n- ``Array.sort``\n- ``Array.splice``\n- ``Array.unshift``\n\nRemoved String Functions\n````````````````````````\n\nStarting in MongoDB 6.0, the following array functions are removed and\ncannot be used in server-side JavaScript with ``$accumulator``,\n``$function``, and ``$where`` expressions:\n\n- ``String.charAt``\n- ``String.charCodeAt``\n- ``String.concat``\n- ``String.contains``\n- ``String.endsWith``\n- ``String.includes``\n- ``String.indexOf``\n- ``String.lastIndexOf``\n- ``String.localeCompare``\n- ``String.match``\n- ``String.normalize``\n- ``String.replace``\n- ``String.search``\n- ``String.slice``\n- ``String.split``\n- ``String.startsWith``\n- ``String.substr``\n- ``String.substring``\n- ``String.toLocaleLowerCase``\n- ``String.toLocaleUpperCase``\n- ``String.toLowerCase``\n- ``String.toUpperCase``\n- ``String.trim``\n- ``String.trimLeft``\n- ``String.trimRight``\n\nDefault ``db.stats()`` Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0, the :dbcommand:`dbStats` command and the\n:method:`db.stats()` method only report free space assigned to\ncollections if the :ref:`freeStorage <dbStats-freeStorage>` parameter is\nset to 1.\n\nIndex Filters and Collations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/index-filters-and-collations.rst\n\nArrays in Collections and Views with ``distinct`` Command\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/distinct-arrays-in-collections-and-views.rst\n\nSee :ref:`distinct-arrays-in-collections-and-views`.\n\n.. _6.0-downgrade-considerations:\n\nDowngrade Considerations\n------------------------\n\n.. |version| replace:: 6.0\n\n.. include:: /includes/downgrade-introduction.rst\n\nClustered Collections\n~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-clustered-collections.rst\n\nUser Write Blocking\n~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-user-write-blocking.rst\n\nSee :ref:`setFeatureCompatibilityVersion-user-write-blocking`.\n\nTime Series Collections\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-timeseries-collections.rst\n\nSee :ref:`Time Series Collections <manual-timeseries-collection>`.\n\nCluster Parameters\n~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-set-cluster-parameter.rst\n\nSELinux Policy Data\n~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-SELinux-policy.rst\n\nKey Management Interoperability Protocol (KMIP) Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0, the default KMIP protocol version is 1.2. To use KMIP \nversion 1.0 or 1.1, use the :setting:`useLegacyProtocol \n<security.kmip.useLegacyProtocol>` setting.\n\nStarting in MongoDB 5.3 Enterprise, if you are using the following KMIP\nsettings, you must remove them from the configuration file before you\ncan downgrade to an earlier MongoDB version:\n\n- :setting:`security.kmip.keyStatePollingSeconds`\n- :setting:`security.kmip.activateKeys`\n\nTime-based Retention of Change Streams Pre- and Post-Image Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0, if you are using \n``changeStreamOptions.preAndPostImages.expireAfterSeconds`` to control\ntime-based retention of \n:ref:`change streams pre- and post-image collections \n<db.collection.watch-change-streams-pre-and-post-images-example>`, you \nmust ensure there are no active ``setClusterParameter`` operations when \ndowngrading.\n\nAudit Log Encryption Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 6.0 Enterprise, if you are using audit log\nencryption, you must remove the following settings from the\nconfiguration file before you can downgrade to an earlier MongoDB\nversion:\n\n- :setting:`auditLog.auditEncryptionKeyIdentifier`\n- :setting:`auditLog.localAuditKeyFile`\n\nExisting encrypted audit logs remain encrypted, and you can keep any\nprocedures you have developed for storage and processing of encrypted\nlogs.\n\nSee :ref:`security-encryption-at-rest-audit-log`.\n\nChange Streams with Document Pre- and Post-Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/downgrade-for-pre-and-post-images.rst\n\nChange Streams with Expanded Events\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application uses change streams, ensure that it does not require the\n``showExpandedEvents`` option, which will not be available after downgrade.\n\nLDAP with ``srv:`` and ``srv_raw:`` \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your cluster's configuration is using the new ``\"srv:\"`` or \n``\"srv_raw:\"`` URL types in its LDAP configuration, it will be unable \nto restart after a downgrade. Remove the new URL types from your \ncluster's configuration before downgrading.\n\nCollections with Encrypted Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou must drop collections that use encrypted fields before you\ncan complete the FCV downgrade. The downgrade will not complete \nif there are collections using ``encryptedFields``.\n\nCreate New Documents Operation Using ``$densify``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application uses :pipeline:`$densify` to create documents that\nfill gaps, add missing values, or populate your data with specified\nrange of values, remove the ``$densify`` stage from your aggregation\npipeline before downgrading. The ``$densify`` stage is only available in\nversion 5.1 and later.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/release-notes/6.0-compatibility.txt"
  },
  {
    "code": "   :copyable: false\n\n   { featureCompatibilityVersion : { version : \"6.0\" }, ok: 1}\n\nTo set or update ``featureCompatibilityVersion`` to ``6.0``, run the \nfollowing command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/release-notes/7.0-upgrade-standalone.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 'jane' },\n      { _id: 'joe' },\n      { _id: 'ruth' },\n      { _id: 'harold' },\n      { _id: 'kate' }\n   ]\n\n\nFor basic query and projection operations, standard queries with the\n:method:`find() <db.collection.find()>` method have the best performance. \n\nNormalize and Sort Documents\n----------------------------\n\nThe following operation returns member names in upper case and in\nalphabetical order. You might do this to normalize member names for\nprocessing.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { name: 'HAROLD' },\n      { name: 'JANE' },\n      { name: 'JOE' },\n      { name: 'KATE' },\n      { name: 'RUTH' }\n   ]\n\nReturn Usernames Ordered by Join Month\n--------------------------------------\n\nThe following aggregation operation returns member names sorted by the\nmonth they joined. You might use this aggregation to help generate\nmembership renewal notices.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { month_joined: 1, name: 'ruth' },\n      { month_joined: 1, name: 'harold' },\n      { month_joined: 1, name: 'kate' },\n      { month_joined: 3, name: 'jane' },\n      { month_joined: 7, name: 'joe' }\n   ]\n\nReturn Total Number of Joins per Month\n--------------------------------------\n\nThe following operation shows how many people joined each month of the\nyear. You might use this aggregated data for recruiting and marketing\nstrategies.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "        :copyable: false\n\n        {\n          _id: \"jane\",\n          joined: ISODate(\"2011-03-02\"),\n          likes: [\"golf\", \"racquetball\"]\n        }\n\n     The :pipeline:`$unwind` operator outputs the following\n     documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "        :copyable: false\n\n        {\n          _id: \"jane\",\n          joined: ISODate(\"2011-03-02\"),\n          likes: \"golf\"\n        }\n        {\n          _id: \"jane\",\n          joined: ISODate(\"2011-03-02\"),\n          likes: \"racquetball\"\n        }\n\n- The :pipeline:`$group` operator collects all documents with the same\n  value for the ``likes`` field and counts each grouping. With this\n  information, :pipeline:`$group` creates a new document with two\n  fields:\n\n  - ``_id``, which contains the ``likes`` value.\n\n  - ``number``, which is a generated field. The :group:`$sum`\n    operator increments this field by 1 for every document containing\n    the given ``likes`` value.\n\n- The :pipeline:`$sort` operator sorts these documents by the\n  ``number`` field in reverse order.\n\n- The :pipeline:`$limit` operator only includes the first 5 result\n  documents.\n\nThe aggregation operation returns the following documents:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "   :copyable: false\n\n   [\n      { _id: 'golf', number: 4 },\n      { _id: 'racquetball', number: 3 },\n      { _id: 'tennis', number: 2 },\n      { _id: 'swimming', number: 2 },\n      { _id: 'handball', number: 1 }\n   ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/aggregation-with-user-preference-data.txt"
  },
  {
    "code": "            :emphasize-lines: 22,24\n\n            {\n               queryPlanner: {\n                  ...\n                  winningPlan: {\n                     queryPlan: {\n                        stage: 'FETCH',\n                        inputStage: {\n                           stage: 'IXSCAN',\n                           keyPattern: {\n                              quantity: 1,\n                              type: 1\n                           },\n                           ...\n                           }\n                        }\n                     }\n                  },\n                  rejectedPlans: [ ]\n               },\n               executionStats: {\n                  executionSuccess: true,\n                  nReturned: 2,\n                  executionTimeMillis: 0,\n                  totalKeysExamined: 5,\n                  totalDocsExamined: 2,\n                  executionStages: {\n                  ...\n                  }\n               },\n               ...\n            }\n\n         MongoDB scanned ``5`` index keys\n         (:data:`executionStats.totalKeysExamined\n         <explain.executionStats.totalKeysExamined>`) to return ``2``\n         matching documents (:data:`executionStats.nReturned\n         <explain.executionStats.nReturned>`).\n\n         Evaluate the effect of the second index on the query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/analyze-query-plan.txt"
  },
  {
    "code": "            :emphasize-lines: 19,21\n\n            {\n               queryPlanner: {\n                  ...\n                  queryPlan: {\n                     winningPlan: {\n                        stage: 'FETCH',\n                        inputStage: {\n                           stage: 'IXSCAN',\n                           keyPattern: {\n                              type: 1,\n                              quantity: 1\n                           },\n                           ...\n                        }\n                     }\n                  },\n                  rejectedPlans: [ ]\n               },\n               executionStats: {\n                  executionSuccess: true,\n                  nReturned: 2,\n                  executionTimeMillis: 0,\n                  totalKeysExamined: 2,\n                  totalDocsExamined: 2,\n                  executionStages: {\n                     ...\n                  }\n               },\n               ...\n            }\n\n         MongoDB scanned ``2`` index keys\n         (:data:`executionStats.totalKeysExamined\n         <explain.executionStats.totalKeysExamined>`) to return ``2``\n         matching documents (:data:`executionStats.nReturned\n         <explain.executionStats.nReturned>`).\n\n         The second compound index, ``{ type: 1, quantity: 1 }``, is\n         therefore the more efficient index for supporting the example\n         query, as the MongoDB server only needs to scan ``2``\n         :data:`index keys <explain.executionStats.totalKeysExamined>`\n         to find all matching documents using this index, compared to\n         ``5`` when when using the compound index\n         ``{ quantity: 1, type: 1 }``.\n\n         .. seealso::\n\n            - :doc:`/core/query-optimization`\n            - :doc:`/core/query-plans`\n            - :doc:`/tutorial/optimize-query-performance-with-indexes-and-projections`\n            - :doc:`/applications/indexes`\n\n     - id: compass\n       content: |\n         .. seealso::\n\n            - :ref:`Query Optimization <read-operations-indexing>`\n            - :ref:`MongoDB Compass Documentation <compass-index>`\n            - :compass:`Compass Query Plan Documentation </query-plan/>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/analyze-query-plan.txt"
  },
  {
    "code": "     :copyable: false\n     \n     mongodump --uri=\"mongodb+srv://username:password@cluster0.example.mongodb.net\" <additional_options>\n\n- Specify the hostname and port in the ``--host`` string:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/backup-and-restore-tools.txt"
  },
  {
    "code": "     :copyable: false\n     \n     mongodump --host=\"mongodb0.example.com:27017\" <additional_options>\n\n- Specify the hostname and port in the ``--host`` and ``--port``:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/backup-and-restore-tools.txt"
  },
  {
    "code": "     :copyable: false\n     \n     mongodump --host=\"mongodb0.example.com\" --port=27017 <additional_options>\n\n:binary:`~bin.mongodump` will write :term:`BSON` files that hold a copy of\ndata accessible via the :binary:`~bin.mongod` listening on port ``27017`` of\nthe ``mongodb.example.net`` host. See :ref:`backup-from-non-local` for more\ninformation.\n\nTo specify a different output directory, you can use the :option:`--out\nor -o <mongodump.--out>` option:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/backup-and-restore-tools.txt"
  },
  {
    "code": "   :copyable: false\n\n   mongorestore --uri <connection string> <path to the backup>\n\n\nConsider the following example:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/backup-and-restore-tools.txt"
  },
  {
    "code": "   :copyable: false\n\n   Shard shardA at shardA/s1-mongo1.example.net:27018,s1-mongo2.example.net:27018,s1-mongo3.example.net:27018\n    data : 1KiB docs : 50 chunks : 1\n    estimated data per chunk : 1KiB\n    estimated docs per chunk : 50\n\n   Shard shardC at shardC/s3-mongo1.example.net:27018,s3-mongo2.example.net:27018,s3-mongo3.example.net:27018\n    data : 1KiB docs : 50 chunks : 1\n    estimated data per chunk : 1KiB\n    estimated docs per chunk : 50\n\n   Totals\n    data : 3KiB docs : 100 chunks : 2\n    Shard shardA contains 50% data, 50% docs in cluster, avg obj size on shard : 40B\n    Shard shardC contains 50% data, 50% docs in cluster, avg obj size on shard : 40B\n\nFrom the output, you only build the indexes for ``test.records`` on\n``shardA`` and ``shardC``.\n\n.. _tutorial-index-on-affected-shards:\n\nC. Build Indexes on the Shards That Contain Collection Chunks\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor each shard that contains chunks for the collection, follow the\nprocedure to build the index on the shard.\n\n.. _tutorial-index-on-sharded-clusters-stop-one-member:\n\nC1. Stop One Secondary and Restart as a Standalone\n``````````````````````````````````````````````````\n\nFor an affected shard, stop the :binary:`~bin.mongod` process\nassociated with one of its secondary. Restart after making the following\nconfiguration updates:\n\n.. tabs::\n\n   tabs:\n      - id: config-file\n        name: Configuration File\n        content: |\n\n           If you are using a configuration file, make the following\n           configuration updates:\n\n           - Change the :setting:`net.port` to a different port. [#different-port]_\n             Make a note of the original port setting as a comment.\n\n           - Comment out the :setting:`replication.replSetName` option.\n\n           - Comment out the :setting:`sharding.clusterRole` option.\n\n           - Set parameter :parameter:`skipShardingConfigurationChecks`\n             to ``true`` in the :setting:`setParameter` section.\n      \n           - Set parameter ``disableLogicalSessionCacheRefresh`` to\n             ``true`` in the :setting:`setParameter` section.\n\n           For example, for a shard replica set member, the\n           updated configuration file will include content like\n           the following example:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/build-indexes-on-sharded-clusters.txt"
  },
  {
    "code": "   :emphasize-lines: 4-5\n\n   {\n     \"_id\" : <num>\n     \"host\" : <hostname:port>,\n     \"priority\" : 0,\n     \"hidden\" : true\n   }\n\n.. _configure-hidden-replica-set-member:\n\nConfiguration Procedure\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example hides the secondary member currently at the index\n``0`` in the :rsconf:`members` array. To configure\na :term:`hidden member`, use the following sequence of operations in a\n:binary:`~bin.mongosh` session that is connected to the primary,\nspecifying the member to configure by its array index in the\n:rsconf:`members` array:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-a-hidden-replica-set-member.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"<tag1>\": \"<string1>\", \"<tag2>\": \"<string2>\",... }\n\nFor read operations, you can specify a tag set in the :ref:`read\npreferences <replica-set-read-preference>` to help direct read\noperations to members that have specific tag(s).\n\nFor write operations, you can use the tags to create a custom\n:ref:`write concern <write-concern>`.\n\n.. _configure-read-pref-tags:\n\nUse Tag Sets in Read Preference\n-------------------------------\n\nIf a replica set member or members are associated with\n:rsconf:`~members[n].tags`, you can specify a tag set in the :ref:`read\npreference <read-preference>` to target those members. A tag\nset is an array of documents, where each document contains the tag and\nvalue pair(s). The specifications are tried in order until a match is\nfound. Once found, that specification is used to find all eligible\nmatching members.\n\n.. note::\n\n   You cannot specify a tag set when specifying read preference mode\n   :readmode:`primary`.\n\nFor example, a replica set has the following :ref:`replica set\nconfiguration <replica-set-configuration-document>` (some of the fields\nhave been omitted for brevity):\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-replica-set-tag-sets.txt"
  },
  {
    "code": "            :emphasize-lines: 1-4\n\n            net:\n               tls:\n                  mode: requireTLS\n                  certificateKeyFile: /etc/ssl/mongodb.pem\n            systemLog:\n               destination: file\n               path: \"/var/log/mongodb/mongod.log\"\n               logAppend: true\n            storage:\n               dbPath: \"/var/lib/mongodb\"\n            processManagement:\n               fork: true\n            net:\n               bindIp: localhost,mongodb0.example.net\n               port: 27017\n\n     - id: certstore\n       name: \"System SSL Certificate Store(Windows/macOS)\"\n       content: |\n         You can use system SSL certificate stores for Windows and macOS. To \n         use the system SSL certificate store, specify\n         :setting:`net.tls.certificateSelector` instead of specifying the\n         certificate key file.\n\n         .. list-table::\n            :class: border-table\n            :header-rows: 1\n            :widths: 30 70\n   \n            * - Setting\n              - Notes\n\n            * - :setting:`net.tls.mode`\n\n              - Set to ``requireTLS``.\n\n                This setting restricts each server to use only TLS/SSL\n                encrypted connections. You can also specify either the\n                value ``allowTLS`` or ``preferTLS`` to set up the use\n                of mixed TLS/SSL modes on a port. See\n                :setting:`net.tls.mode` for details.\n\n            * - :setting:`net.tls.certificateSelector` \n\n              - Set to the property (either ``subject`` or\n                ``thumbprint``) and value.\n\n                This setting is used to select the certificate. See\n                :setting:`net.tls.certificateSelector` for details.\n\n         For example, consider the following :ref:`configuration file\n         <conf-file>` for a :binary:`~bin.mongod` instance:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "            :emphasize-lines: 1-4\n\n            net:\n               tls:\n                  mode: requireTLS\n                  certificateSelector: subject=\"<CertificateCommonName>\"\n            systemLog:\n               destination: file\n               path: \"/var/log/mongodb/mongod.log\"\n               logAppend: true\n            storage:\n               dbPath: \"/var/lib/mongodb\"\n            processManagement:\n               fork: true\n            net:\n               bindIp: localhost,mongodb0.example.net\n               port: 27017\n\nA :binary:`~bin.mongod` instance that uses the above configuration can\nonly accept TLS/SSL connections:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 1-5\n\n   net:\n      tls:\n         mode: requireTLS\n         certificateKeyFile: /etc/ssl/mongodb.pem\n         CAFile: /etc/ssl/caToValidateClientCertificates.pem\n   systemLog:\n      destination: file\n      path: \"/var/log/mongodb/mongod.log\"\n      logAppend: true\n   storage:\n      dbPath: \"/var/lib/mongodb\"\n   processManagement:\n      fork: true\n   net:\n      bindIp: localhost,mongodb0.example.net\n      port: 27017\n\nA :binary:`~bin.mongod` instance that uses the above configuration can\nonly accept TLS/SSL connections and requires a valid certificate from\nits clients:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n      tls:\n         mode: requireTLS\n         certificateKeyFile: /etc/ssl/mongodb.pem\n         CAFile: /etc/ssl/caToValidateClientCertificates.pem\n         CRLFile: /etc/ssl/revokedCertificates.pem\n\nClients that present certificates that are listed in the\n:file:`/etc/ssl/revokedCertificates.pem` file are not able to connect.\n\n.. seealso::\n\n   You can also configure the revoked certificate list using the\n   command-line option.\n\n   - For :binary:`~bin.mongod`, see :option:`--tlsCRLFile <mongod\n     --tlsCRLFile>`.\n   - For :binary:`~bin.mongos`, see :option:`--tlsCRLFile <mongos\n     --tlsCRLFile>`.\n\n.. _ssl-mongod-weak-certification:\n\nValidate Only if a Client Presents a Certificate\n````````````````````````````````````````````````\n\nIn most cases, it is important to ensure that clients present valid\ncertificates. However, if you have clients that cannot present a client\ncertificate or are transitioning to using a certificate, you may only\nwant to validate certificates from clients that present a certificate.\n\n.. note::\n\n   The procedure uses the ``net.tls`` settings. For procedures using the \n   ``net.ssl`` settings, see :ref:`configure-ssl`.\n\nTo bypass client certificate validation for clients that do not present\na certificate, include\n:setting:`net.tls.allowConnectionsWithoutCertificates` set to ``true``.\n\nFor example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n     tls:\n       mode: requireTLS\n       certificateKeyFile: /etc/ssl/mongodb.pem\n       CAFile: /etc/ssl/caToValidateClientCertificates.pem\n       allowConnectionsWithoutCertificates: true\n\nA :binary:`mongod` / :binary:`mongos` running with these\nsettings allows connection from:\n\n- Clients that do not present a certificate.\n\n- Clients that present a valid certificate.\n\n.. note::\n\n   If the client presents a certificate, the certificate must be a\n   valid certificate.\n\n   All connections, including those that have not presented\n   certificates, are encrypted using TLS/SSL.\n\nSee :ref:`ssl-clients` for more information on TLS/SSL connections for\nclients.\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see\n     :option:`--tlsAllowConnectionsWithoutCertificates <mongod\n     --tlsAllowConnectionsWithoutCertificates>`.\n\n   - For :binary:`~bin.mongos`, see\n     :option:`--tlsAllowConnectionsWithoutCertificates <mongos\n     --tlsAllowConnectionsWithoutCertificates>`.\n\n\n.. _ssl-disallow-protocols:\n\nDisallow Protocols\n~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   The procedure uses the ``net.tls`` settings. For procedures using the \n   ``net.ssl`` settings, see :ref:`configure-ssl`.\n\nTo prevent MongoDB servers from accepting incoming connections that use\nspecific protocols, include :setting:`net.tls.disabledProtocols` set to\nthe disallowed protocols.\n\nFor example, the following configuration prevents\n:binary:`mongod` / :binary:`mongos` from accepting incoming\nconnections that use either ``TLS1_0`` or ``TLS1_1``\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n     tls:\n       mode: requireTLS\n       certificateKeyFile: /etc/ssl/mongodb.pem\n       CAFile: /etc/ssl/caToValidateClientCertificates.pem\n       disabledProtocols: TLS1_0,TLS1_1\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see :option:`--tlsDisabledProtocols\n     <mongod --tlsDisabledProtocols>`.\n\n   - For :binary:`~bin.mongos`, see :option:`--tlsDisabledProtocols\n     <mongos --tlsDisabledProtocols>`.\n\n.. _ssl-certificate-password:\n\nTLS/SSL Certificate Passphrase\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the certificate key files for\n:binary:`mongod` / :binary:`mongos` are encrypted, include\n:setting:`net.tls.certificateKeyFilePassword` set to the passphrase.\n\n.. tip::\n\n   To avoid specifying the passphrase in cleartext, you can use an \n   :ref:`expansion value <externally-sourced-values>` in the configuration file.\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see :option:`--tlsCertificateKeyFilePassword\n     <mongod --tlsCertificateKeyFilePassword>`.\n\n   - For :binary:`~bin.mongos`, see :option:`--tlsCertificateKeyFilePassword\n     <mongos --tlsCertificateKeyFilePassword>`.\n\n.. _certificate-rotation:\n\nOnline Certificate Rotation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStarting in MongoDB 5.0, you can rotate the following certificate key\nfiles on-demand:\n\n- :setting:`TLS Certificates <net.tls.certificateKeyFile>`\n- :setting:`CRL (Certificate Revocation List) files <net.tls.CRLFile>`\n  (on Linux and Windows platforms)\n- :setting:`CA (Certificate Authority) files <net.tls.CAFile>`\n\nTo rotate one or more of these certificates:\n\n#. Replace the certificate or certificates you wish to rotate on the\n   filesystem, noting the following constraints:\n   \n   - Each new certificate must have the *same filename* and\n     *same filepath* as the certificate it is replacing.\n\n   - If rotating an encrypted :setting:`TLS Certificate\n     <net.tls.certificateKeyFile>`, its password must be the same as\n     the password for the old certificate (as specified to the\n     :setting:`~net.tls.certificateKeyFilePassword` configuration file\n     setting). Certificate rotation does not support the interactive\n     password prompt.\n\n#. Connect :binary:`~bin.mongosh` to the :binary:`~bin.mongod` or\n   :binary:`~bin.mongos` instance that you wish to perform certificate\n   rotation on.\n\n#. Run the :dbcommand:`rotateCertificates` command or the\n   :method:`db.rotateCertificates()` shell method to rotate the\n   certificates used by the :binary:`~bin.mongod` or\n   :binary:`~bin.mongos` instance.\n\nWhen certificate rotation takes place:\n\n- Existing connections to the :binary:`~bin.mongod` or\n  :binary:`~bin.mongos` instance are not terminated, and will continue\n  to use the old certificates.\n\n- Any new connections will use the new certificates.\n\nIncorrect, expired, revoked, or missing certificate files will cause the\ncertificate rotation to fail, but will not invalidate the existing\nTLS configuration or terminate the running :binary:`~bin.mongod` or\n:binary:`~bin.mongos` process.\n\nPrevious to MongoDB 5.0, certificate rotation required downtime, and was\ntypically performed during maintenance windows.\n\nSee :dbcommand:`rotateCertificates` or :method:`db.rotateCertificates()`\nfor additional considerations and full usage instructions.\n\n.. _ssl-run-fips-mode:\n\nRun in FIPS Mode\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/note-fips-is-enterprise-only.rst\n\nSee :doc:`/tutorial/configure-fips` for more details.\n\nNext Steps\n~~~~~~~~~~\n\nTo configure TLS/SSL support for clients, see\n:doc:`/tutorial/configure-ssl-clients`.\n\n.. seealso::\n\n   :doc:`/tutorial/configure-x509-client-authentication`\n\n\n.. _configure-ssl:\n\nProcedures (Using ``net.ssl`` Settings)\n---------------------------------------\n\n.. note::\n\n   .. include:: /includes/fact-net-tls-ssl.rst\n\n   The procedures in this section use the ``net.ssl`` settings. For\n   procedures using the ``net.tls`` aliases, see :ref:`configure-tls`.\n   \nSet Up ``mongod`` and ``mongos`` with TLS/SSL Certificate and Key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following section configures\n:binary:`mongod` / :binary:`mongos` to use TLS/SSL connections.\nWith these TLS/SSL settings,\n:binary:`mongod` / :binary:`mongos` presents its certificate\nkey file to the client. However, the\n:binary:`mongod` / :binary:`mongos` does not require a\ncertificate key file from the client to verify the client's identity.\nTo require client's certificate key file, see\n:ref:`client-cert-validation-ssl` instead.\n   \nTo use TLS/SSL connections, include the following TLS/SSL settings in\nyour :binary:`mongod` / :binary:`mongos` instance's\n:ref:`configuration file <conf-file>`:\n\n.. tabs::\n\n   tabs:\n   \n     - id: pem\n       name: \"PEMKeyFile (Linux/Windows/macOS)\"\n       content: |\n         .. list-table::\n            :class: border-table\n            :header-rows: 1\n            :widths: 30 70\n   \n            * - Setting\n              - Notes\n\n            * - ``net.ssl.mode``\n\n              - Set to ``requireSSL``.\n\n                This setting restricts each server to use only TLS/SSL encrypted\n                connections. You can also specify ``allowSSL`` or ``preferSSL``\n                to use mixed TLS/SSL modes. See\n                ``net.ssl.mode`` for details.\n\n            * - ``net.ssl.PEMKeyFile`` \n\n              - Set to the :file:`.pem` file that contains the TLS/SSL\n                certificate and key.\n  \n                The :binary:`mongod` / :binary:`mongos` instance\n                presents this file to its clients to establish the instance's\n                identity.\n\n                If the key is encrypted, specify the passphrase\n                (``net.ssl.PEMKeyPassword``).\n\n         For example, consider the following :ref:`configuration file\n         <conf-file>` for a :binary:`~bin.mongod` instance:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "            :emphasize-lines: 1-4\n\n            net:\n               ssl:\n                  mode: requireSSL\n                  PEMKeyFile: /etc/ssl/mongodb.pem\n            systemLog:\n               destination: file\n               path: \"/var/log/mongodb/mongod.log\"\n               logAppend: true\n            storage:\n               dbPath: \"/var/lib/mongodb\"\n            processManagement:\n               fork: true\n            net:\n               bindIp: localhost,mongodb0.example.net\n               port: 27017\n\n\n     - id: certstore\n       name: \"System SSL Certificate Store(Windows/macOS)\"\n       content: |\n         You can use system SSL certificate stores for Windows and macOS. To \n         use the system SSL certificate store, specify\n         ``net.ssl.certificateSelector`` instead of specifying the\n         certificate key file.\n\n         .. list-table::\n            :class: border-table\n            :header-rows: 1\n            :widths: 30 70\n   \n            * - Setting\n              - Notes\n\n            * - ``net.ssl.mode``\n\n              - Set to ``requireSSL``.\n\n                This setting restricts each server to use only TLS/SSL encrypted\n                connections. You can also specify ``allowSSL`` or ``preferSSL``\n                to use mixed TLS/SSL modes. See\n                ``net.ssl.mode`` for details.\n\n            * - ``net.ssl.certificateSelector`` \n\n              - Set to the property (either ``subject`` or\n                ``thumbprint``) and value.\n\n                This setting is used to select the certificate. See\n                ``net.ssl.certificateSelector`` for details.\n\n         For example, consider the following :ref:`configuration file\n         <conf-file>` for a :binary:`~bin.mongod` instance:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "            :emphasize-lines: 1-4\n\n            net:\n               ssl:\n                  mode: requireSSL\n                  certificateSelector: subject=\"<CertificateCommonName>\"\n            systemLog:\n               destination: file\n               path: \"/var/log/mongodb/mongod.log\"\n               logAppend: true\n            storage:\n               dbPath: \"/var/lib/mongodb\"\n            processManagement:\n               fork: true\n            net:\n               bindIp: localhost,mongodb0.example.net\n               port: 27017\n\nA :binary:`~bin.mongod` instance that uses the above configuration can\nonly accept TLS/SSL connections:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 1-5\n\n   net:\n      ssl:\n         mode: requireSSL\n         PEMKeyFile: /etc/ssl/mongodb.pem\n         CAFile: /etc/ssl/caToValidateClientCertificates.pem\n   systemLog:\n      destination: file\n      path: \"/var/log/mongodb/mongod.log\"\n      logAppend: true\n   storage:\n      dbPath: \"/var/lib/mongodb\"\n   processManagement:\n      fork: true\n   net:\n      bindIp: localhost,mongodb0.example.net\n      port: 27017\n\nA :binary:`~bin.mongod` instance that uses the above configuration can\nonly accept TLS/SSL connections and requires a valid certificate from\nits clients:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n      ssl:\n         mode: requireSSL\n         PEMKeyFile: /etc/ssl/mongodb.pem\n         CAFile: /etc/ssl/caToValidateClientCertificates.pem\n         CRLFile: /etc/ssl/revokedCertificates.pem\n\nClients that present certificates that are listed in the\n:file:`/etc/ssl/revokedCertificates.pem` file are not able to connect.\n\n.. seealso::\n\n   You can also configure the revoked certificate list using the command-line option.\n\n   - For :binary:`~bin.mongod`, see ``--sslCRLFile``.\n   - For :binary:`~bin.mongos`, see ``--sslCRLFile``.\n\nValidate Only if a Client Presents a Certificate\n````````````````````````````````````````````````\n\nIn most cases, it is important to ensure that clients present valid\ncertificates. However, if you have clients that cannot present a client\ncertificate or are transitioning to using a certificate, you may only\nwant to validate certificates from clients that present a certificate.\n\nTo bypass client certificate validation for clients that do not present\na certificate, include\n``net.ssl.allowConnectionsWithoutCertificates`` set to ``true``.\n\nFor example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n     ssl:\n       mode: requireSSL\n       PEMKeyFile: /etc/ssl/mongodb.pem\n       CAFile: /etc/ssl/caToValidateClientCertificates.pem\n       allowConnectionsWithoutCertificates: true\n   \nA :binary:`mongod` / :binary:`mongos` running with these\nsettings allows connection from:\n\n- Clients that do not present a certificate.\n\n- Clients that present a valid certificate.\n\n.. note::\n\n   If the client presents a certificate, the certificate must be a\n   valid certificate.\n\n   All connections, including those that have not presented\n   certificates, are encrypted using TLS/SSL.\n\nSee :ref:`ssl-clients` for more information on TLS/SSL connections for\nclients.\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see ``--sslAllowConnectionsWithoutCertificates``.\n\n   - For :binary:`~bin.mongos`, see ``--sslAllowConnectionsWithoutCertificates``.\n\nDisallow Protocols\n~~~~~~~~~~~~~~~~~~\n\nTo prevent MongoDB servers from accepting incoming connections that use\nspecific protocols, include ``net.ssl.disabledProtocols`` set to\nthe disallowed protocols.\n\nFor example, the following configuration prevents\n:binary:`mongod` / :binary:`mongos` from accepting incoming\nconnections that use either ``TLS1_0`` or ``TLS1_1``\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "   :emphasize-lines: 6\n\n   net:\n     ssl:\n       mode: requireSSL\n       PEMKeyFile: /etc/ssl/mongodb.pem\n       CAFile: /etc/ssl/caToValidateClientCertificates.pem\n       disabledProtocols: TLS1_0,TLS1_1\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see ``--sslDisabledProtocols``.\n\n   - For :binary:`~bin.mongos`, see ``--sslDisabledProtocols``.\n\nTLS/SSL Certificate Passphrase\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the certificate key files for\n:binary:`mongod` / :binary:`mongos` are encrypted, include\n``net.ssl.PEMKeyPassword`` set to the passphrase.\n\n.. seealso::\n\n   You can also configure using the command-line options:\n\n   - For :binary:`~bin.mongod`, see ``sslPEMKeyPassword``.\n\n   - For :binary:`~bin.mongos`, see ``--sslPEMKeyPassword``.\n\nRun in FIPS Mode\n~~~~~~~~~~~~~~~~\n\n.. include:: /includes/note-fips-is-enterprise-only.rst\n\nSee :doc:`/tutorial/configure-fips` for more details.\n\nNext Steps\n~~~~~~~~~~\n\nTo configure TLS/SSL support for clients, see\n:doc:`/tutorial/configure-ssl-clients`.\n\n.. seealso::\n\n   :doc:`/tutorial/configure-x509-client-authentication`\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/configure-ssl.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 9\n\n         [Unit]\n         Description=High-performance, schema-free document-oriented database\n         After=network.target\n         Documentation=https://docs.mongodb.org/manual\n          \n         [Service]\n         User=mongodb\n         Group=mongodb\n         ExecStart=/usr/bin/mongod --config /etc/mongod.conf\n         Environment=\"KRB5_KTNAME=/etc/mongod.keytab\"\n         PIDFile=/var/run/mongodb/mongod.pid\n         # file size\n         LimitFSIZE=infinity\n         # cpu time\n         LimitCPU=infinity\n         # virtual memory size\n         LimitAS=infinity\n         # open files\n         LimitNOFILE=64000\n         # processes/threads\n         LimitNPROC=64000\n         # locked memory\n         LimitMEMLOCK=infinity\n         # total threads (user+kernel)\n         TasksMax=infinity\n         TasksAccounting=false\n          \n         # Recommended limits for for mongod as specified in\n         # http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings\n          \n         [Install]\n         WantedBy=multi-user.target\n\n   .. step:: Reload the updated unit file:\n\n",
    "language": "shell",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/control-access-to-mongodb-with-kerberos-authentication.txt"
  },
  {
    "code": "   :copyable: false\n\n   mongod --shardsvr --replSet myShard  --dbpath /var/lib/mongodb --bind_ip localhost,My-Example-Hostname --fork --logpath /var/log/mongodb/mongod.log --clusterAuthMode x509 --tlsMode requireTLS  --tlsCAFile /path/to/my/CA/file  --tlsCertificateKeyFile /path/to/my/certificate/file --tlsClusterFile /path/to/my/cluster/membership/file\n\nInclude the :option:`--outputConfig <mongod --outputConfig>`\ncommand-line option to generate the corresponding YAML file.\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-command-line-options-to-yaml.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n\n   net:\n     bindIp: localhost,My-Example-Hostname\n     tls:\n       CAFile: /path/to/my/CA/file\n       certificateKeyFile: /path/to/my/certificate/file\n       clusterFile: /path/to/my/cluster/membership/file\n       mode: requireTLS\n   outputConfig: true\n   processManagement:\n     fork: true\n   replication:\n     replSet: myShard\n   security:\n     clusterAuthMode: x509\n   sharding:\n     clusterRole: shardsvr\n   storage:\n     dbPath: /var/lib/mongodb\n   systemLog:\n     destination: file\n     path: /var/log/mongodb/mongod.log\n\nTo create a configuration file, copy the generated content into a\nfile and delete the ``outputConfig`` setting from the YAML.\n\nConvert ``mongos`` Command-Line Options to YAML\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConsider the following :binary:`~bin.mongos` invocation that uses the\ncommand-line options:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-command-line-options-to-yaml.txt"
  },
  {
    "code": "   :copyable: false\n\n   mongos --configdb myCSRS/cfg1.example.net:27019,cfg2.example.net:27019 --bind_ip localhost,My-Example-MONGOS-Hostname --fork --logpath /var/log/mongodb/mongos.log --clusterAuthMode x509 --tlsMode requireTLS  --tlsCAFile /path/to/my/CA/file  --tlsCertificateKeyFile /path/to/my/certificate/file --tlsClusterFile /path/to/my/cluster/membership/file\n\nInclude the :option:`--outputConfig <mongos --outputConfig>`\ncommand-line option to generate the corresponding YAML for the\n:binary:`~bin.mongos` instance:\n\n",
    "language": "bash",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-command-line-options-to-yaml.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n\n   net:\n     bindIp: localhost,My-Example-MONGOS-Hostname\n     tls:\n       CAFile: /path/to/my/CA/file\n       certificateKeyFile: /path/to/my/certificate/file\n       clusterFile: /path/to/my/cluster/membership/file\n       mode: requireTLS\n   outputConfig: true\n   processManagement:\n     fork: true\n   security:\n     clusterAuthMode: x509\n   sharding:\n     configDB: myCSRS/cfg1.example.net:27019,cfg2.example.net:27019\n   systemLog:\n     destination: file\n     path: /var/log/mongodb/mongos.log\n\nTo create a configuration file, copy the generated content into a\nfile and delete the ``outputConfig`` setting from the YAML.\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-command-line-options-to-yaml.txt"
  },
  {
    "code": "      :copyable: false\n\n      [ { fsyncLocked: true }, { fsyncUnlocked: false } ]\n\nConvert a Cluster with a Single Shard into a Replica Set\n--------------------------------------------------------\n\nIn the case of a :term:`sharded cluster` with only one shard, that shard\ncontains the full data set. Use the following procedure to convert that\ncluster into a non-sharded :term:`replica set`:\n\n1. Reconfigure the application to connect to the primary member of the\n   replica set hosting the single shard that system will be the new replica\n   set.\n\n#. Remove the :option:`--shardsvr <mongod --shardsvr>`\n   option from your :binary:`~bin.mongod`.\n\n   .. tip:: Changing the :option:`--shardsvr <mongod --shardsvr>`\n      option will change the port that :binary:`~bin.mongod` listens for\n      incoming connections on.\n\nThe single-shard cluster is now a non-sharded :term:`replica set` that\nwill accept read and write operations on the data set.\n\nConvert a Sharded Cluster into a Replica Set\n--------------------------------------------\n\nUse the following procedure to transition from a :term:`sharded cluster`\nwith more than one shard to an entirely new :term:`replica set`.\n\n1. With the sharded cluster locked and the balancer disabled, :ref:`deploy a new replica\n   set <server-replica-set-deploy>` in addition to your sharded cluster. The\n   replica set must have sufficient capacity to hold all of the data\n   files from all of the current shards combined. Do not configure the\n   application to connect to the new replica set until the data\n   transfer is complete.\n\n#. Reconfigure\n   your application or stop all :binary:`~bin.mongos` instances. If you\n   stop all :binary:`~bin.mongos` instances, the applications will not be\n   able to read from the database. If you stop all :binary:`~bin.mongos`\n   instances, start a temporary :binary:`~bin.mongos` instance that\n   applications cannot access for the data migration procedure.\n\n#. Use :doc:`mongodump and mongorestore\n   </tutorial/backup-and-restore-tools/>` to migrate\n   the data from the :binary:`~bin.mongos` instance to the new\n   :term:`replica set`.\n\n   Exclude the ``config`` database when you run ``mongorestore``. Use\n   the :option:`--nsExclude <mongorestore --nsExclude>` option as shown\n   in this example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-sharded-cluster-to-replica-set.txt"
  },
  {
    "code": "      :copyable: false\n\n      [ { fsyncLocked: false }, { fsyncUnlocked: true } ]\n\nLearn More\n----------\n\n:ref:`sharded-cluster-balancer`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/convert-sharded-cluster-to-replica-set.txt"
  },
  {
    "code": "   :copyable: false\n\n   { manufacturer: 1, model: 1, cost: 1 }\n\nLearn More\n----------\n\n- :ref:`create-indexes-to-support-queries`\n- :ref:`index-sort`\n- :ref:`index-selectivity`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/equality-sort-range-rule.txt"
  },
  {
    "code": "   :emphasize-lines: 5-6\n\n   db.foo.createIndex( \n      { F: 1 }, \n      { \n         name: \"Partial-TTL-Index\", \n         partialFilterExpression: { D : 1 }, \n         expireAfterSeconds: 10 \n      }\n   )\n\nInsert two documents, one of which matches the filter expression \n``{ D : 1 }`` of the ``partialFilterExpression``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/expire-data.txt"
  },
  {
    "code": "   :emphasize-lines: 3\n\n   db.foo.insertMany( [\n      { \"F\" : ISODate(\"2019-03-07T20:59:18.428Z\"), \"D\" : 3},\n      { \"F\" : ISODate(\"2019-03-07T20:59:18.428Z\"), \"D\" : 1}\n   ] )\n\nWait for ten seconds then query the ``foo`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/expire-data.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: c\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 1\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: motor\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: php\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: ruby\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: ruby\n         :dedent: 6\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\n   .. tab::\n      :tabid: cpp\n\n",
    "language": "ruby",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: cpp\n         :dedent: 4\n         :start-after: Start Snapshot Query Example 1\n         :end-before: End Snapshot Query Example 1\n\nThe preceding series of commands: \n\n- Uses ``MongoClient()`` to establish a connection to the MongoDB\n  deployment.\n\n- Switches to the ``pets`` database.\n\n- Establishes a session. The command specifies ``snapshot=True``,\n  so the session uses read concern :readconcern:`\"snapshot\"`.\n\n- Performs these actions for each collection in the ``pets`` database:\n\n  - Uses :pipeline:`$match` to filter for documents where the\n    ``adoptable`` field is ``True``.\n\n  - Uses :pipeline:`$count` to return a count of the filtered documents.\n\n  - Increments the ``adoptablePetsCount`` variable with the count from\n    the database.\n\n- Prints the ``adoptablePetsCount`` variable.\n\nAll queries within the session read data as it appeared at the same\npoint in time. As a result, the final count reflects a consistent\nsnapshot of the data.\n\n.. note::\n\n   If the session lasts longer than the WiredTiger history retention\n   period (300 seconds, by default), the query errors with a\n   ``SnapshotTooOld`` error. To learn how to configure snapshot\n   retention and enable longer-running queries, see\n   :ref:`configure-snapshot-retention`.\n\n.. _example-snapshot-pit:\n\nRead from a Consistent State of the Data from Some Point in the Past\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRead concern :readconcern:`\"snapshot\"` ensures that your query reads\ndata as it appeared at some single point in time in the recent past.\n\nAn online shoe store has a ``sales`` collection that contains data for\neach item sold at the store. For example, a document in the ``sales``\ncollection looks like this:\n\n",
    "language": "cpp",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 2\n         :end-before: End Snapshot Query Example 2\n\n   .. tab::\n      :tabid: c\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: c\n         :dedent: 3\n         :start-after: Start Snapshot Query Example 2\n         :end-before: End Snapshot Query Example 2\n\n   .. tab::\n      :tabid: go\n\n",
    "language": "c",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: go\n         :dedent: 1\n         :start-after: Start Snapshot Query Example 2\n         :end-before: End Snapshot Query Example 2\n\n   .. tab::\n      :tabid: motor\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: python\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 2\n         :end-before: End Snapshot Query Example 2\n\n   .. tab::\n      :tabid: php\n\n",
    "language": "python",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :language: php\n         :dedent: 8\n         :start-after: Start Snapshot Query Example 2\n         :end-before: End Snapshot Query Example 2\n\nThe preceding query:\n\n- Uses :pipeline:`$match` with :query:`$expr` to specify a filter on the\n  ``saleDate`` field.\n  \n  - :query:`$expr` allows the use of :ref:`aggregation expressions\n    <aggregation-expressions>` (such as :variable:`NOW`) in the\n    :pipeline:`$match` stage.\n\n- Uses the :query:`$gt` operator and :expression:`$dateSubtract`\n  expression to return documents where the ``saleDate`` is\n  greater than one day before the time the query is executed.\n\n- Uses :pipeline:`$count` to return a count of the matching documents.\n  The count is stored in the ``totalDailySales`` variable.\n\n- Specifies read concern :readconcern:`\"snapshot\"` to ensure that the\n  query reads from a single point in time.\n\nThe ``sales`` collection is quite large, and as a result this query may\ntake a few minutes to run. Because the store is online, sales can occur\nat any time of day.\n\nFor example, consider if:\n\n- The query begins executing at 12:00 AM.\n- A customer buys three pairs of shoes at 12:02 AM.\n- The query finishes executing at 12:04 AM.\n\nIf the query doesn't use read concern :readconcern:`\"snapshot\"`, sales\nthat occur between when the query starts and when it finishes can be\nincluded in the query count, despite not occurring on the day the report\nis for. This could result in inaccurate reports with some sales being\ncounted twice.\n\nBy specifying read concern :readconcern:`\"snapshot\"`, the query only\nreturns data that was present in the database at a point in time shortly\nbefore the query started executing.\n\n.. note::\n\n   If the query takes longer than the WiredTiger history retention\n   period (300 seconds, by default), the query errors with a\n   ``SnapshotTooOld`` error. To learn how to configure snapshot\n   retention and enable longer-running queries, see\n   :ref:`configure-snapshot-retention`.\n\n.. _configure-snapshot-retention:\n\nConfigure Snapshot Retention\n----------------------------\n\nBy default, the WiredTiger storage engine retains history for 300\nseconds. You can use a session with ``snapshot=true`` for a total of 300\nseconds from the time of the first operation in the session to the last.\nIf you use the session for a longer period of time, the session fails\nwith a ``SnapshotTooOld`` error. Similarly, if you query data using read\nconcern :readconcern:`\"snapshot\"` and your query lasts longer than 300\nseconds, the query fails.\n\nIf your query or session run for longer than 300 seconds, consider\nincreasing the snapshot retention period. To increase the retention\nperiod, modify the :parameter:`minSnapshotHistoryWindowInSeconds`\nparameter.\n\nFor example, this command sets the value of\n:parameter:`minSnapshotHistoryWindowInSeconds` to 600 seconds:\n\n",
    "language": "php",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/long-running-queries.txt"
  },
  {
    "code": "         :copyable: false\n\n         url_1\n\n   .. step:: Create a temporary index that contains the ``url`` field\n\n      Run this command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "         :copyable: false\n\n         url_1_dummyField_1\n\n      This temporary index lets you safely drop the original ``{ \"url\":\n      1 }`` index without impacting performance.\n\n   .. step:: Drop the original index\n\n      Run this command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "         :copyable: false\n\n         { nIndexesWas: 3, ok: 1 } \n\n   .. step:: Recreate the ``{ \"url\": 1 }`` index with the ``unique`` property\n\n       Run this command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "          :copyable: false\n\n          url_1\n         \n       The ``url_1`` index is recreated and you can drop the temporary\n       index without impacting performance. Queries on the ``url`` field\n       can use the new unique index.\n\n   .. step:: Drop the temporary index\n\n      Run this command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "         :copyable: false\n\n         { nIndexesWas: 3, ok: 1 } \n\n   .. step:: Confirm that the index was updated\n\n      To view the indexes on the ``siteAnalytics`` collection, run this\n      command:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "         :copyable: false\n\n         [\n           { v: 2, key: { _id: 1 }, name: '_id_' },\n           { v: 2, key: { url: 1 }, name: 'url_1', unique: true }\n         ]       \n\n.. _manage-indexes-find-inconsistent-indexes:\n\nFind Inconsistent Indexes Across Shards\n---------------------------------------\n\nA sharded collection has an inconsistent index if the collection does\nnot have the exact same indexes (including the index options) on each\nshard that contains chunks for the collection. Although inconsistent\nindexes should not occur during normal operations, inconsistent indexes\ncan occur , such as:\n\n- When a user is creating an index with a ``unique`` key constraint and\n  one shard contains a chunk with duplicate documents. In such cases,\n  the create index operation may succeed on the shards without\n  duplicates but not on the shard with duplicates.\n  \n- When a user is creating an index across the shards in a :doc:`rolling\n  manner (i.e. manually building the index one by one across the\n  shards) </tutorial/build-indexes-on-sharded-clusters>` but either\n  fails to build the index for an associated shard or incorrectly\n  builds an index with different specification.\n\nThe :ref:`config server <sharding-config-server>` primary, by default, checks \nfor index inconsistencies across the shards for sharded collections, and\nthe command :dbcommand:`serverStatus`, when run on the config server\nprimary, returns the field :serverstatus:`shardedIndexConsistency`\nfield to report on the number of sharded collections with index\ninconsistencies.\n\nIf :serverstatus:`shardedIndexConsistency` reports any index\ninconsistencies, you can run the following pipeline for your\nsharded collections until you find the inconsistencies.\n\n#. Define the following :ref:`aggregation pipeline <aggregation-pipeline>`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-indexes.txt"
  },
  {
    "code": "   :copyable: true \n\n   use config\n   db.settings.find( { _id: \"balancer\" } )\n\n.. _sharding-balancing-remove-window:\n\nRemove a Balancing Window Schedule\n----------------------------------\n\nIf you have :ref:`set the balancing window\n<sharding-schedule-balancing-window>` and wish to remove the schedule\nso that the balancer is always running, use :update:`$unset` to clear\nthe ``activeWindow``, as in the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-sharded-cluster-balancer.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"was\" : 0, \"slowms\" : 100, \"sampleRate\" : 1.0, \"ok\" : 1 }\n\nTo verify the new setting, see the\n:ref:`database-profiling-view-status` section.\n\n.. include:: /includes/log-changes-to-database-profiler.rst\n\nGlobal and Per-Database Profiling Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe :ref:`slowms <set-profiling-level-options-slowms>` and\n:ref:`sampleRate <set-profiling-level-options-sampleRate>` profiling\nsettings are *global*. When set, these settings affect all databases in\nyour process.\n\nWhen set through the :dbcommand:`profile` command or\n:method:`db.setProfilingLevel()` shell helper method, :ref:`profiling\nlevel <database-profiling-level>` and :ref:`filter\n<set-profiling-level-options-filter>` settings are set at the *database*\nlevel. When set as either command line or :ref:`configuration\nfile <configuration-options>` options, profiling level and ``filter``\nsettings affect the entire process.\n\n.. _database-profiling-specify-slowms-threshold:\n\nSpecify the Threshold for Slow Operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the slow operation threshold is 100 milliseconds.\n\n.. include:: /includes/slowms-log-levels.rst\n\nTo change the slow operation threshold, specify the required threshold\nvalue in one of the following ways:\n\n- Set the value of ``slowms`` using the :dbcommand:`profile` command or\n  :method:`db.setProfilingLevel()` shell helper method.\n\n- Set the value of :option:`--slowms <mongod --slowms>` from the command line at startup.\n\n- Set the value of :setting:`~operationProfiling.slowOpThresholdMs` in a\n  :ref:`configuration file <configuration-options>`.\n\nThe following example sets the profiling level for the\ncurrently connected database to ``1`` and sets the slow\noperation threshold for the :binary:`~bin.mongod` instance to ``20``\nmilliseconds:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/manage-the-database-profiler.txt"
  },
  {
    "code": "   :emphasize-lines: 3-6\n\n   { \"username\" : \"user56522\" } -->> { \"username\" : \"user63169\" } on : shardA Timestamp(21, 1)\n   { \"username\" : \"user63169\" } -->> { \"username\" : \"user69816\" } on : shardA Timestamp(10, 1)\n   { \"username\" : \"user69816\" } -->> { \"username\" : \"user76462\" } on : shardA Timestamp(11, 1)\n   { \"username\" : \"user76462\" } -->> { \"username\" : \"user83108\" } on : shardA Timestamp(12, 1)\n   { \"username\" : \"user83108\" } -->> { \"username\" : \"user89756\" } on : shardA Timestamp(14, 1)\n   { \"username\" : \"user89756\" } -->> { \"username\" : \"user96401\" } on : shardA Timestamp(15, 1)\n   { \"username\" : \"user96401\" } -->> { \"username\" : { \"$maxKey\" : 1 } } on : shardA Timestamp(15, 2)\n\nTo merge the highlighted contiguous chunks, issue the\n:dbcommand:`mergeChunks` command against the ``admin`` database:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/merge-chunks-in-sharded-cluster.txt"
  },
  {
    "code": "   :emphasize-lines: 48\n\n   --- Sharding Status ---\n     sharding version: {\n        \"_id\" : 1,\n        \"minCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"5ebef5447fa151d4bd79dd72\")\n     }\n     shards:\n           { \"_id\" : \"shardA\", \"host\" : \"shardA/shardA-m1.example.net:27018,shardA-m2.example.net:27018,shardA-m3.example.net:27018\", \"state\" : 1 }\n           { \"_id\" : \"shardB\", \"host\" : \"shardB/shardB-m1.example.net:27018,shardB-m2.example.net:27018,shardB-m3.example.net:27018\", \"state\" : 1 }\n     active mongoses:\n           \"4.4.0\" : 1\n     autosplit:\n           Currently enabled: yes\n     balancer:\n           Currently enabled:  yes\n           Currently running:  no\n           Failed balancer rounds in last 5 attempts:  0\n           Migration Results for the last 24 hours: \n                   519 : Success\n     databases:\n           { \"_id\" : \"config\", \"primary\" : \"config\" }\n                   config.system.sessions\n                           shard key: { \"_id\" : 1 }\n                           unique: false\n                           balancing: true\n                           chunks:\n                                   shardA   512\n                                   shardB   512\n                          too many chunks to print, use verbose if you want to force print\n           { \"_id\" : \"test\", \"primary\" : \"shardA\", \"version\" : { \"uuid\" : UUID(\"22c042fc-7e3d-4c6d-992d-f3d714759781\"), \"lastMod\" : 1 } }\n                   test.members\n                           shard key: { \"username\" : 1 }\n                           unique: false\n                           balancing: true\n                           chunks:\n                                   shardA\t5\n                                   shardB\t6\n                           { \"username\" : { \"$minKey\" : 1 } } -->> { \"username\" : \"user16643\" } on : shardA Timestamp(22, 0) \n                           { \"username\" : \"user16643\" } -->> { \"username\" : \"user2329\" } on : shardB Timestamp(22, 1) \n                           { \"username\" : \"user2329\" } -->> { \"username\" : \"user29937\" } on : shardB Timestamp(17, 0) \n                           { \"username\" : \"user29937\" } -->> { \"username\" : \"user36583\" } on : shardB Timestamp(18, 0) \n                           { \"username\" : \"user36583\" } -->> { \"username\" : \"user43229\" } on : shardB Timestamp(19, 0) \n                           { \"username\" : \"user43229\" } -->> { \"username\" : \"user49877\" } on : shardB Timestamp(20, 0) \n                           { \"username\" : \"user49877\" } -->> { \"username\" : \"user56522\" } on : shardB Timestamp(21, 0) \n                           { \"username\" : \"user56522\" } -->> { \"username\" : \"user63169\" } on : shardA Timestamp(21, 1) \n                           { \"username\" : \"user63169\" } -->> { \"username\" : \"user69816\" } on : shardA Timestamp(10, 1) \n                           { \"username\" : \"user69816\" } -->> { \"username\" : \"user96401\" } on : shardA Timestamp(21, 2) \n                           { \"username\" : \"user96401\" } -->> { \"username\" : { \"$maxKey\" : 1 } } on : shardA Timestamp(15, 2)\n\nAfter the merge, the :ref:`balancer <sharding-balancing>` may migrate\nchunks across shards to ensure a more even distribution of chunks.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/merge-chunks-in-sharded-cluster.txt"
  },
  {
    "code": "   :emphasize-lines: 9-10\n\n   {\n       _id: 123456789,\n       title: \"MongoDB: The Definitive Guide\",\n       author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n       published_date: ISODate(\"2010-09-24\"),\n       pages: 216,\n       language: \"English\",\n       publisher_id: \"oreilly\",\n       available: 3,\n       checkout: [ { by: \"joe\", date: ISODate(\"2012-10-15\") } ]\n   }\n\nThen to update with new checkout information, you can use the\n:method:`db.collection.updateOne()` method to atomically update both\nthe ``available`` field and the ``checkout`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/model-data-for-atomic-operations.txt"
  },
  {
    "code": "   :emphasize-lines: 7-11,20-24\n\n   {\n      title: \"MongoDB: The Definitive Guide\",\n      author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n      published_date: ISODate(\"2010-09-24\"),\n      pages: 216,\n      language: \"English\",\n      publisher: {\n                 name: \"O'Reilly Media\",\n                 founded: 1980,\n                 location: \"CA\"\n               }\n   }\n\n   {\n      title: \"50 Tips and Tricks for MongoDB Developer\",\n      author: \"Kristina Chodorow\",\n      published_date: ISODate(\"2011-05-06\"),\n      pages: 68,\n      language: \"English\",\n      publisher: {\n                 name: \"O'Reilly Media\",\n                 founded: 1980,\n                 location: \"CA\"\n               }\n   }\n\nTo avoid repetition of the publisher data, use *references* and keep\nthe publisher information in a separate collection from the book\ncollection.\n\nWhen using references, the growth of the relationships determine where\nto store the reference. If the number of books per publisher is small\nwith limited growth, storing the book reference inside the publisher\ndocument may sometimes be useful. Otherwise, if the number of books per\npublisher is unbounded, this data model would lead to mutable, growing\narrays, as in the following example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/model-referenced-one-to-many-relationships-between-documents.txt"
  },
  {
    "code": "   :emphasize-lines: 5\n\n   {\n      name: \"O'Reilly Media\",\n      founded: 1980,\n      location: \"CA\",\n      books: [123456789, 234567890, ...]\n   }\n\n   {\n       _id: 123456789,\n       title: \"MongoDB: The Definitive Guide\",\n       author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n       published_date: ISODate(\"2010-09-24\"),\n       pages: 216,\n       language: \"English\"\n   }\n\n   {\n      _id: 234567890,\n      title: \"50 Tips and Tricks for MongoDB Developer\",\n      author: \"Kristina Chodorow\",\n      published_date: ISODate(\"2011-05-06\"),\n      pages: 68,\n      language: \"English\"\n   }\n\nTo avoid mutable, growing arrays, store the publisher reference inside\nthe book document:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/model-referenced-one-to-many-relationships-between-documents.txt"
  },
  {
    "code": "   :emphasize-lines: 15, 25\n\n   {\n      _id: \"oreilly\",\n      name: \"O'Reilly Media\",\n      founded: 1980,\n      location: \"CA\"\n   }\n\n   {\n      _id: 123456789,\n      title: \"MongoDB: The Definitive Guide\",\n      author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n      published_date: ISODate(\"2010-09-24\"),\n      pages: 216,\n      language: \"English\",\n      publisher_id: \"oreilly\"\n   }\n\n   {\n      _id: 234567890,\n      title: \"50 Tips and Tricks for MongoDB Developer\",\n      author: \"Kristina Chodorow\",\n      published_date: ISODate(\"2011-05-06\"),\n      pages: 68,\n      language: \"English\",\n      publisher_id: \"oreilly\"\n   }\n\n.. Reworked the Queue slide from the presentation to Atomic Operation\n.. TODO later, include a separate queue example for maybe checkout requests,\n   and possibly bucket example that is separate from the pre-allocation\n   example link above in the Document Growth section\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/model-referenced-one-to-many-relationships-between-documents.txt"
  },
  {
    "code": "            :copyable: false\n            :emphasize-lines: 14-15\n\n            [\n               {\n                  shard: '<shard>',\n                  type: 'op',\n                  desc: 'ReshardingRecipientService | ReshardingDonorService | ReshardingCoordinatorService <reshardingUUID>',\n                  op: 'command',\n                  ns: '<database>.<collection>',\n                  originatingCommand: {\n                  reshardCollection: '<database>.<collection>',\n                  key: <shardkey>,\n                  unique: <boolean>,\n                  collation: { locale: 'simple' }\n                  },\n                  totalOperationTimeElapsedSecs: <number>,\n                  remainingOperationTimeEstimatedSecs: <number>,\n                  ...\n               },\n               ...\n            ]\n\n      #. Monitor the number of bytes transferred.\n\n         To monitor the number of bytes transferred,  \n         use :serverstatus:`shardingStatistics.resharding.active.bytesCopied`\n         and compare against the number of bytes in the collection.\n\n   .. step:: Confirm the collection has been moved.\n\n      To confirm the collection has been moved to the expected shard, \n      use the :pipeline:`$collStats` pipeline stage.\n\n      This example shows how to confirm that the ``app.inventory``\n      collection exists on the expected shard:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/move-a-collection.txt"
  },
  {
    "code": "         :copyable: false\n\n         [ { shard: 'shard02' } ]\n\n\nLearn More\n----------\n\n- :ref:`moveable-collections`\n- :dbcommand:`moveCollection`\n- :method:`sh.moveCollection`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/move-a-collection.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 2-3\n\n         {\n            queryShapeHash: 'AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1',\n            settings: { reject: true },\n            representativeQuery: {\n               find: 'pizzaOrders',\n               filter: { orderDate: { '$gt': ISODate('2023-01-20T00:00:00.000Z') } },\n               sort: { totalNumber: 1 },\n               '$db': 'test'\n            },\n            ok: 1,\n            ...\n         }\n\n   .. step:: (Optional) Use the explain command to confirm settings\n\n      Run :dbcommand:`explain`:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/operation-rejection-filters.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 11\n\n         {\n            queryPlanner: {\n              winningPlan: {\n                stage: 'SINGLE_SHARD',\n                shards: [\n                  {\n                    explainVersion: '1',\n                    ...\n                    namespace: 'test.pizzaOrders',\n                    parsedQuery: { orderDate: { '$gt': ISODate('2023-01-20T00:00:00.000Z') } },\n                    querySettings: { reject: true },\n                    ...\n                  }\n                ]\n             }\n         }\n\n   .. step:: (Optional) Verify the query is rejected\n\n      Attempt to run this query:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/operation-rejection-filters.txt"
  },
  {
    "code": "         :copyable: false\n\n         MongoServerError: Query rejected by admin query settings\n\n   .. step:: (Optional) Remove the operation rejection filter\n\n      The following example uses ``removeQuerySettings`` to remove the\n      operation rejection filter, which are identified using the\n      ``queryShapeHash`` value from the output shown in step 2 earlier:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/operation-rejection-filters.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n\n         db.adminCommand( {\n            removeQuerySettings: \"AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1\"\n         } )\n\n      You can also get the ``queryShapeHash`` value from:\n\n      - :atlas:`Atlas Query Profiler </tutorial/profile-database>`\n      - :ref:`Slow query logs <log-message-slow-ops>`\n\n      You can also remove an operation rejection filter using a query\n      shape. For example:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/operation-rejection-filters.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"a\", \"value\" : { \"total_time\" : 200, \"count\" : 2, \"avg_time\" : 100 } }\n      { \"_id\" : \"b\", \"value\" : { \"total_time\" : 230, \"count\" : 2, \"avg_time\" : 115 } }\n      { \"_id\" : \"c\", \"value\" : { \"total_time\" : 250, \"count\" : 2, \"avg_time\" : 125 } }\n      { \"_id\" : \"d\", \"value\" : { \"total_time\" : 110, \"count\" : 2, \"avg_time\" : 55 } }\n\nSubsequent Incremental Map-Reduce\n---------------------------------\n\nLater, as the ``usersessions`` collection grows, you can run additional\nmap-reduce operations. For example, add new documents to the\n``usersessions`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\" : \"a\", \"value\" : { \"total_time\" : 330, \"count\" : 3, \"avg_time\" : 110 } }\n   { \"_id\" : \"b\", \"value\" : { \"total_time\" : 270, \"count\" : 3, \"avg_time\" : 90 } }\n   { \"_id\" : \"c\", \"value\" : { \"total_time\" : 360, \"count\" : 3, \"avg_time\" : 120 } }\n   { \"_id\" : \"d\", \"value\" : { \"total_time\" : 210, \"count\" : 3, \"avg_time\" : 70 } }\n\nAggregation Alternative\n-----------------------\n\nAs an alternative to map-reduce, you can use an :ref:`aggregation\npipeline <aggregation-pipeline>` that combines :pipeline:`$group`\nand :pipeline:`$merge` stages to achieve the same result in a more\nflexible operation.\n\nRecreate the ``usersessions`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"c\", \"total_time\" : 250, \"count\" : 2, \"avg_time\" : 125 }\n      { \"_id\" : \"d\", \"total_time\" : 110, \"count\" : 2, \"avg_time\" : 55 }\n      { \"_id\" : \"a\", \"total_time\" : 200, \"count\" : 2, \"avg_time\" : 100 }\n      { \"_id\" : \"b\", \"total_time\" : 230, \"count\" : 2, \"avg_time\" : 115 }\n\n\n#. The :pipeline:`$project` stage reshapes the output document to\n   mirror the map-reduce's output to have two fields ``_id`` and\n   ``value``. The stage is optional if you do not need to mirror the\n   ``_id`` and ``value`` structure.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"a\", \"value\" : { \"total_time\" : 200, \"count\" : 2, \"avg_time\" : 100 } }\n      { \"_id\" : \"d\", \"value\" : { \"total_time\" : 110, \"count\" : 2, \"avg_time\" : 55 } }\n      { \"_id\" : \"b\", \"value\" : { \"total_time\" : 230, \"count\" : 2, \"avg_time\" : 115 } }\n      { \"_id\" : \"c\", \"value\" : { \"total_time\" : 250, \"count\" : 2, \"avg_time\" : 125 } }\n\n#. The :pipeline:`$merge` stage outputs the results to a\n   ``session_stats_agg`` collection. If an existing document has the\n   same ``_id`` as the new result, the operation applies the specified\n   pipeline to calculate the total_time, count, and avg_time from the\n   result and the existing document. If there is no existing document\n   with the same ``_id`` in the ``session_stats_agg``, the operation\n   inserts the document.\n      \n#. Query the ``session_stats_agg`` collection to verify the results:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"a\", \"value\" : { \"total_time\" : 200, \"count\" : 2, \"avg_time\" : 100 } }\n      { \"_id\" : \"b\", \"value\" : { \"total_time\" : 230, \"count\" : 2, \"avg_time\" : 115 } }\n      { \"_id\" : \"c\", \"value\" : { \"total_time\" : 250, \"count\" : 2, \"avg_time\" : 125 } }\n      { \"_id\" : \"d\", \"value\" : { \"total_time\" : 110, \"count\" : 2, \"avg_time\" : 55 } }\n\n#. Add new documents to the ``usersessions`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "      :copyable: false\n\n      { \"_id\" : \"a\", \"value\" : { \"total_time\" : 330, \"count\" : 3, \"avg_time\" : 110 } }\n      { \"_id\" : \"b\", \"value\" : { \"total_time\" : 270, \"count\" : 3, \"avg_time\" : 90 } }\n      { \"_id\" : \"c\", \"value\" : { \"total_time\" : 360, \"count\" : 3, \"avg_time\" : 120 } }\n      { \"_id\" : \"d\", \"value\" : { \"total_time\" : 210, \"count\" : 3, \"avg_time\" : 70 } }\n\n#. Optional. To avoid having to modify the aggregation pipeline's\n   :pipeline:`$match` date condition each time you run, you can define\n   wrap the aggregation in a helper function:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/perform-incremental-map-reduce.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: javascript\n      \n      db.inventory.find(\n         { },\n         {\n            _id: 0,\n            item: 1,\n            status: {\n               $switch: {\n                  branches: [\n                     {\n                        case: { $eq: [ \"$status\", \"A\" ] },\n                        then: \"Available\"\n                     },\n                     {\n                        case: { $eq: [ \"$status\", \"D\" ] },\n                        then: \"Discontinued\"\n                     },\n                  ],\n                  default: \"No status found\"\n               }\n            },\n            area: {\n               $concat: [\n                  { $toString: { $multiply: [ \"$size.h\", \"$size.w\" ] } },\n                  \" \",\n                  \"$size.uom\"\n               ]\n            },\n            reportNumber: { $literal: 1 }\n         }\n      )\n\n   .. output::\n      :language: javascript\n\n      [\n         {\n            item: 'journal',\n            status: 'Available',\n            area: '294 cm',\n            reportNumber: 1\n         },\n         {\n            item: 'planner',\n            status: 'Discontinued',\n            area: '685.5 cm',\n            reportNumber: 1\n         },\n         {\n            item: 'notebook',\n            status: 'Available',\n            area: '93.5 in',\n            reportNumber: 1\n         },\n         {\n            item: 'paper',\n            status: 'Discontinued',\n            area: '93.5 in',\n            reportNumber: 1\n         },\n         {\n            item: 'postcard',\n            status: 'Available',\n            area: '152.5 cm',\n            reportNumber: 1\n         }\n      ]\n\n.. _project-fields-atlas-ui:\n\nProject Fields to Return from a Query with {+atlas+}\n-------------------------------------------------------------------\n\nThe example in this section uses the :atlas:`sample movies dataset \n</sample-data/sample-mflix/>`. To learn how to load the sample dataset \ninto your {+atlas+} deployment, see :atlas:`Load Sample Data \n</sample-data/#std-label-load-sample-data>`.\n\nTo project fields to return from a query in {+atlas+}, follow these\nsteps:\n\n.. procedure:: \n   :style: normal\n\n   .. include:: /includes/atlas-nav/steps-db-deployments-page.rst\n\n   .. step:: Navigate to the collection\n\n      .. include:: /includes/steps-nav-atlas-sample-movies.rst\n\n   .. step:: Specify the Filter field\n      \n      a. Click :guilabel:`More Options` on the right side of the\n         :guilabel:`Filter` field.\n      #. Specify the query filter.\n\n         .. include:: /includes/steps-specify-query-filter.rst\n\n",
    "language": "sql",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/project-fields-from-query-results.txt"
  },
  {
    "code": "   :copyable: false\n\n   2018-10-24T18:05:18.248-04:00 W STORAGE  [initandlisten] Detected unclean shutdown - mongod.lock is not empty.\n\n   ...\n\n   2018-10-24T17:24:53.122-04:00 E STORAGE  [initandlisten] Failed to get the cursor for uri: table:collection-2-6854866147293273505\n   2018-10-24T17:24:53.122-04:00 E STORAGE  [initandlisten] This may be due to missing data files. ...\n\n   ...\n\n   ***aborting after fassert() failure\n\nIn such cases, your :setting:`~storage.dbPath` contains a non-empty\n:file:`mongod.lock` file.\n\nThe following procedure uses :option:`mongod --repair` to recover from\nthese cases:\n\n.. warning::\n\n   Only use :option:`mongod --repair` if you have no other options.\n   The operation removes and does not save any corrupt data during the\n   repair process.\n\nFor the WiredTiger storage engine, :option:`mongod --repair`:\n\n- Rebuilds all indexes for collections with one or more inconsistent \n  indexes.\n\n- Discards corrupt data.\n\n- Creates empty/stub files for missing data/metadata files.\n\n.. _tutorial-repair-procedures:\n\nProcedure\n---------\n\n.. important::\n\n   Run the repair operation as the same user that normally runs the\n   :binary:`~bin.mongod` process to avoid changing the permissions of the\n   MongoDB data files.\n\n.. include:: /includes/steps/recover-data-with-repairpath.rst\n\n.. note::\n\n   If the repair fails to complete for any reason, you\n   must restart the instance with the :option:`--repair <mongod\n   --repair>` option to complete the repair.\n\n.. [#manual-removal]\n\n   Generally, you should not manually remove the ``mongod.lock`` file.\n   Instead, use the above procedure to recover the database. In dire\n   situations, you can remove the file, start the database using the\n   possibly corrupt files, and attempt to recover data from the\n   database. However, it is impossible to predict the state of the\n   database in these situations.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/recover-data-following-unexpected-shutdown.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n            \"msg\" : \"draining started successfully\",\n            \"state\" : \"started\",\n            \"shard\" : \"<shardName>\",\n            \"note\" : \"you need to drop or movePrimary these databases\", \n            \"dbsToMove\" : [\n               \"db1\",\n               \"db2\"\n            ],\n            \"ok\" : 1,\n            \"operationTime\" : Timestamp(1575398919, 2),\n            \"$clusterTime\" : {\n               \"clusterTime\" : Timestamp(1575398919, 2),\n               \"signature\" : {\n                  \"hash\" : BinData(0,\"Oi68poWCFCA7b9kyhIcg+TzaGiA=\"),\n                  \"keyId\" : NumberLong(\"6766255701040824328\")\n               }\n            }\n         }\n\n      The shard enters the ``draining`` state and the balancer begins\n      migrating chunks from the removed shard to other shards in the\n      cluster. These migrations happens slowly to avoid severe impact on\n      the overall cluster. Depending on your network capacity and the\n      amount of data, this operation can take from a few minutes to\n      several days to complete.\n\n      .. tip::\n\n         While the shard is in the ``draining`` state, you can use the\n         :ref:`reshardCollection\n         <reshardCollection-redistribute-data>` command to redistribute\n         data off of the removed shard.\n         \n         Moving data with ``reshardCollection`` can be faster than\n         waiting for the balancer to migrate chunks. The cluster ensures\n         that data is not placed on any draining shards. You can't run\n         ``moveCollection`` and ``reshardCollection`` operations\n         simultaneously.\n\n   .. step:: List sharded collection namespaces\n\n      To return a list of sharded collection namespaces, use the\n      :pipeline:`$shardedDataDistribution` stage and project the ``ns``\n      field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/remove-shards-from-cluster.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 2\n\n         {\n            msg: 'removeshard completed successfully',\n            state: 'completed',\n            shard: '<shardName>',\n            ok: 1,\n            '$clusterTime': {\n               clusterTime: Timestamp({ t: 1721941519, i: 7 }),\n               signature: {\n                  hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),\n                  keyId: Long('0')\n               }\n            },\n            operationTime: Timestamp({ t: 1721941519, i: 7 })\n         }\n\nLearn More\n----------\n\n- :ref:`sharding-procedure-add-member-to-shard`\n\n- :ref:`back-up-sharded-cluster-metadata`\n\n- :ref:`sharding-data-partitioning`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/remove-shards-from-cluster.txt"
  },
  {
    "code": "   :emphasize-lines: 6, 8, 11\n\n   security:\n     clusterAuthMode:      x509\n   net:\n     tls:\n       mode:               requireTLS\n       certificateKeyFile: /etc/mycerts/10gen-server1.pem\n       CAFile:             /etc/mycerts/ca.pem\n       clusterFile:        /etc/mycerts/10gen-cluster1.pem\n       clusterCAFile:      /etc/mycerts/ca.pem\n       clusterAuthX509:\n          attributes:      O=10gen, OU=10gen Server\n\nThis tutorial assumes that the new X.509 certificates meet\nmembership certificate and all other requirements and that\nthe cluster configuration identifies peer certificates\nusing Distinguished Name (DN) values.\n\nFor details, see :ref:`x509-member-certificate-requirements`.\n\nSteps\n-----\n\nThese steps update member certificates to use new X.509 certificates on a cluster\nconfigured with the :setting:`~net.tls.clusterAuthX509.attributes` setting.\n\nThe new certificates have Distinguished Names (DN) that change the \nOrganization (O) attributes from ``10gen`` to ``MongoDB`` and the\nOrganizational Unit (OU) attribute from ``10gen Server`` to ``MongoDB Server``.\n\n.. procedure::\n\n   .. step:: Update the TLS Cluster Membership Configuration\n\n      Update the configuration file of each server:\n\n      * Change :setting:`~net.tls.clusterAuthX509.attributes` setting to use\n        the values on the new certificate\n\n      * Set the :parameter:`tlsClusterAuthX509Override` parameter to use the\n        DN attributes of the old certificate.\n\n      For example: \n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-member-cert.txt"
  },
  {
    "code": "         :emphasize-lines: 9, 13\n\n         net:\n           tls:\n             mode:               requireTLS\n             certificateKeyFile: /etc/mycerts/mongodb-server1.pem\n             CAFile:             /etc/mycerts/ca.pem\n             clusterFile:        /etc/mycerts/mongodb-cluster1.pem\n             clusterCAFile:      /etc/mycerts/ca.pem\n             clusterAuthX509:\n                attributes:      O=MongoDB, OU=MongoDB Server\n         security:\n           clusterAuthMode: x509\n         setParameter:\n            tlsClusterAuthX509Override: { attributes: O=10gen, OU=10gen Server }\n\n   .. step:: Restart Secondary Cluster Members\n   \n      .. include:: /includes/procedure-replica-set-restart-secondaries\n\n      Secondary servers in the replica set now accept peer connections from\n      members using certificates with the new DN attributes.\n   \n   .. step:: Restart Primary Cluster Member\n   \n      .. include:: /includes/procedure-replica-set-restart-primary\n\n      The primary server in the replica set steps down and restarts as a\n      secondary that now accepts peer connections from members using\n      certificates with the new DN attributes.\n\n   .. step:: Update the TLS Certificates\n\n      Update the configuration file of each server:\n\n      * Change the :setting:`net.tls.certificateKeyFile` setting to use the \n        new certificate.\n\n      * Change the :setting:`net.tls.clusterFile` setting to use the \n        new certificate.\n\n      For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-member-cert.txt"
  },
  {
    "code": "         :emphasize-lines: 4, 6\n\n         net:\n           tls:\n             mode:               requireTLS\n             certificateKeyFile: /etc/mycerts/mongodb-server2.pem\n             CAFile:             /etc/mycerts/ca.pem\n             clusterFile:        /etc/mycerts/mongodb-cluster2.pem\n             clusterCAFile:      /etc/mycerts/ca.pem\n             clusterAuthX509:\n                attributes:      O=MongoDB, OU=MongoDB Server\n         security:\n           clusterAuthMode: x509\n         setParameter:\n            tlsClusterAuthX509Override: { attributes: O=10gen, OU=10gen Server }\n            \n\n   .. step:: Restart Secondary Cluster Members\n   \n      .. include:: /includes/procedure-replica-set-restart-secondaries\n\n      Secondary servers in the replica set now use the new X.509 certificates.\n   \n   .. step:: Restart Primary Cluster Member\n   \n      .. include:: /includes/procedure-replica-set-restart-primary\n\n      The primary server in the replica set steps down and restarts as a \n      secondary that uses the new X.509 certificate. \n\n   .. step:: Remove the DN Certification Override Configuration\n\n      With all members of the cluster now using the new X.509 certificate, \n      update the configuration file to remove the :setting:`setParameter` \n      settings for the :parameter:`tlsClusterAuthX509Override` parameter.\n\n      For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-member-cert.txt"
  },
  {
    "code": "   :emphasize-lines: 6, 8, 11\n\n   security:\n     clusterAuthMode:      x509\n   net:\n     tls:\n       mode:               requireTLS\n       certificateKeyFile: /etc/mycerts/10gen-server1.pem\n       CAFile:             /etc/mycerts/ca.pem\n       clusterFile:        /etc/mycerts/10gen-cluster1.pem\n       clusterCAFile:      /etc/mycerts/ca.pem\n       clusterAuthX509:\n          attributes:      O=MongoDB, OU=MongoDB Server\n\nThis tutorial assumes that the new X.509 certificates meet\nmembership certificate and all other requirements and that\nthe cluster configuration identifies peer certificates\nusing extension values.\n\nFor details, see :ref:`x509-member-certificate-requirements`.\n\nSteps\n-----\n\nThese steps update member certificates to use new X.509 certificates \non a cluster configured with the \n:setting:`~net.tls.clusterAuthX509.attributes` setting.\n\nInitially, the clusters identify members using DN values. \nWith the new certificates, the servers instead identify members\nusing the ``mongodb://example.mongodb.net`` extension value and ignore certificate attributes.\n\n.. procedure::\n\n\n   .. step:: Update the TLS Cluster Membership Configuration\n\n      Update the configuration file of each server:\n\n      * Change the :setting:`~net.tls.clusterAuthX509` setting to match \n        the new certificate by replacing the  \n        :setting:`~net.tls.clusterAuthX509.attributes` setting with the \n        the :setting:`~net.tls.clusterAuthX509.extensionValue` setting.\n\n      * Set the :parameter:`tlsClusterAuthX509Override` parameter to use the\n        DN attributes of the old certificate.\n\n      For example: \n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-to-extensionValue.txt"
  },
  {
    "code": "         :emphasize-lines: 9, 13\n\n         net:\n           tls:\n             mode:               requireTLS\n             certificateKeyFile: /etc/mycerts/mongodb-server1.pem\n             CAFile:             /etc/mycerts/ca.pem\n             clusterFile:        /etc/mycerts/mongodb-cluster1.pem\n             clusterCAFile:      /etc/mycerts/ca.pem\n             clusterAuthX509:\n                extensionValue:  mongodb://example.mongodb.net\n         security:\n           clusterAuthMode: x509\n         setParameter:\n            tlsClusterAuthX509Override: { attributes: O=MongoDB, OU=MongoDBServer }\n\n   .. step:: Restart Secondary Cluster Members\n   \n      .. include:: /includes/procedure-replica-set-restart-secondaries\n\n      Secondary servers in the replica set now accept peer connections from\n      members using certificates with the new extension values as well as \n      the old DN attributes.\n   \n   .. step:: Restart Primary Cluster Member\n   \n      .. include:: /includes/procedure-replica-set-restart-primary\n\n      The primary server in the replica set steps down and restarts as a\n      secondary that now accepts peer connections from members using\n      certificates with the new extension value as well as the old DN\n      attributes.\n\n   .. step:: Update the TLS Certificates\n\n      Update the configuration file of each server:\n\n      * Change the :setting:`net.tls.certificateKeyFile` setting to use the \n        new certificate.\n\n      * Change the :setting:`net.tls.clusterFile` setting to use the \n        new certificate.\n\n      For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-to-extensionValue.txt"
  },
  {
    "code": "         :emphasize-lines: 4, 6\n\n         net:\n           tls:\n             mode:               requireTLS\n             certificateKeyFile: /etc/mycerts/mongodb-server2.pem\n             CAFile:             /etc/mycerts/ca.pem\n             clusterFile:        /etc/mycerts/mongodb-cluster2.pem\n             clusterCAFile:      /etc/mycerts/ca.pem\n             clusterAuthX509:\n                extensionValue:  mongodb://example.mongodb.net\n         security:\n           clusterAuthMode: x509\n         setParameter:\n            tlsClusterAuthX509Override: { attributes: O=MongoDB, OU=MongoDB Server }\n         \n   .. step:: Restart Secondary Cluster Members\n   \n      .. include:: /includes/procedure-replica-set-restart-secondaries\n\n      Secondary servers in the replica set now use the new X.509 certificates.\n   \n   .. step:: Restart Primary Cluster Member\n   \n      .. include:: /includes/procedure-replica-set-restart-primary\n\n      The primary server in the replica set steps down and restarts as a \n      secondary that uses the new X.509 certificate. \n\n   .. step:: Remove the DN Certification Override Configuration\n\n      With all members of the cluster now using the new X.509 certificate, \n      update the configuration file to remove the :setting:`setParameter` \n      settings for the :parameter:`tlsClusterAuthX509Override` parameter.\n\n      For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/rotate-x509-to-extensionValue.txt"
  },
  {
    "code": "   :copyable: false\n\n   { seqNum: 1, seqType: null, type: 'null' },\n   { seqNum: 29, seqType: null, type: 'null' },\n   { seqNum: 2, seqType: 10, type: 'Int32' },\n   { seqNum: 28, seqType: 10, type: 'Int32' },\n   { seqNum: 3, seqType: Long(\"10\"), type: 'Long' },\n   { seqNum: 27, seqType: Long(\"10\"), type: 'Long' },\n   { seqNum: 4, seqType: Decimal128(\"10\"), type: 'Decimal128' },\n\n   // Output truncated\n\nThe sequence number ( ``seqNum`` ) index has values of the same type.\nUse the ``seqNum`` index to query the ``keyTypes`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/sort-results-with-indexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   { seqNum: 1, seqType: null, type: 'null' },\n   { seqNum: 2, seqType: 10, type: 'Int32' },\n   { seqNum: 3, seqType: Long(\"10\"), type: 'Long' },\n   { seqNum: 4, seqType: Decimal128(\"10\"), type: 'Decimal128' },\n   { seqNum: 5, seqType: 10, type: 'Double' },\n   { seqNum: 6, seqType: '10', type: 'String' },\n   { seqNum: 7, seqType: [ '1', '2', '3' ], type: 'Array' },\n\n   // Output truncated\n\nThe sequence type ( ``seqType`` ) index has values of the different\ntypes. Use the ``seqType`` index to query the ``keyTypes`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/sort-results-with-indexes.txt"
  },
  {
    "code": "   :copyable: false\n\n   { seqNum: 1, seqType: null, type: 'null' },\n   { seqNum: 29, seqType: null, type: 'null' },\n   { seqNum: 9, seqType: [ 1, 2, 3 ], type: 'Array' },\n   { seqNum: 21, seqType: [ 1, 2, 3 ], type: 'Array' },\n   { seqNum: 2, seqType: 10, type: 'Int32' },\n   { seqNum: 28, seqType: 10, type: 'Int32' },\n   { seqNum: 3, seqType: Long(\"10\"), type: 'Long' },\n   { seqNum: 27, seqType: Long(\"10\"), type: 'Long' },\n   { seqNum: 4, seqType: Decimal128(\"10\"), type: 'Decimal128' },\n   { seqNum: 26, seqType: Decimal128(\"10\"), type: 'Decimal128' },\n   { seqNum: 5, seqType: 10, type: 'Double' },\n   { seqNum: 25, seqType: 10, type: 'Double' },\n   { seqNum: 7, seqType: [ '1', '2', '3' ], type: 'Array' },\n   { seqNum: 23, seqType: [ '1', '2', '3' ], type: 'Array' },\n   { seqNum: 6, seqType: '10', type: 'String' },\n   { seqNum: 24, seqType: '10', type: 'String' },\n   { seqNum: 8, seqType: [ [ 1 ], [ 2 ], [ 3 ] ], type: 'Array' },\n   { seqNum: 22, seqType: [ [ 1 ], [ 2 ], [ 3 ] ], type: 'Array ' },\n   {\n     seqNum: 13,\n     seqType: ObjectId(\"6239e3922604d5a7478df071\"),\n     type: 'ObjectId'\n   },\n   { seqNum: 10, seqType: true, type: 'Boolean' },\n   {\n     seqNum: 12,\n     seqType: ISODate(\"2022-03-22T14:56:18.100Z\"),\n     type: 'Date'\n   },\n   {\n     seqNum: 11,\n     seqType: Timestamp({ t: 1647960978, i: 1 }),\n     type: 'Timestamp'\n   }\n\n- .. include:: /includes/sorting-arrays.rst\n- Numerical types (Int32, Long, Decimal128, Double) are equivalent when\n  compared with other types. \n- Within the Numbers BSON type, numerical types are sorted:\n\n  - Int32\n  - Long\n  - Decimal128\n  - Double\n\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/sort-results-with-indexes.txt"
  },
  {
    "code": "         :copyable: true\n\n         .. input::\n            :language: javascript\n\n            db.adminCommand( {\n               serverStatus: 1,\n            } ).shardingStatistics.configServerInShardCache\n\n         .. output::\n            :language: javascript\n\n            true\n\nLearn More\n----------\n\n- :ref:`config-shard-concept`\n- :dbcommand:`addShard`\n- :dbcommand:`transitionFromDedicatedConfigServer`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/start-a-sharded-cluster-with-config-shard.txt"
  },
  {
    "code": "         :copyable: false\n\n         [ { shard: 'shard01' } ]\n\n\nLearn More\n----------\n\n- :dbcommand:`abortMoveCollection`\n- :method:`sh.abortMoveCollection`\n- :ref:`moveable-collections`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/stop-moving-a-collection.txt"
  },
  {
    "code": "         :copyable: false\n         :emphasize-lines: 3\n\n         collections: {\n            'sales.us_accounts': {\n               shardKey: { account_number: 1 },\n               unique: false,\n               balancing: true,\n               chunkMetadata: [\n                 { shard: 'shard-0', nChunks: 1 },\n                 { shard: 'shard-1', nChunks: 1 }\n               ],\n               chunks: [\n                 { min: { _id: MinKey() }, max: { _id: Long('0') }, 'on shard': 'shard-0', 'last modified': Timestamp({ t: 1, i: 0 }) },\n                 { min: { _id: Long('0') }, max: { _id: MaxKey() }, 'on shard': 'shard-1', 'last modified': Timestamp({ t: 1, i: 1 }) }\n               ], \n               ... }\n             ... }\n \nLearn More\n----------\n\n- :dbcommand:`abortUnshardCollection`\n- :method:`sh.abortUnshardCollection()`\n- :ref:`unshard-collection-task`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/stop-unsharding-collection.txt"
  },
  {
    "code": "               :copyable: true\n\n               .. input::\n                  :language: javascript\n                  \n                  echo(\"test\")\n\n               .. output::\n                  :language: javascript\n                  :visible: false\n\n                  test\n\n         #. The following code example runs the ``isEven``\n            function stored in ``system.js`` in the ``$where`` \n            operator on the ``test_numbers`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/store-javascript-function-on-server.txt"
  },
  {
    "code": "               :copyable: true\n\n               .. input::\n                  :language: javascript\n                  \n                  db.test_numbers.find({\n                     $where: function () {\n                        return isEven(this.value);\n                     }\n                  })\n\n               .. output::\n                  :language: javascript\n                  :visible: false\n\n                  { \"_id\" : ObjectId(\"668d7be41b55bec1bf191499\"), \"value\" : 2 }\n                  { \"_id\" : ObjectId(\"668d7be41b55bec1bf19149b\"), \"value\" : 4 }\n                  { \"_id\" : ObjectId(\"668d7be41b55bec1bf19149d\"), \"value\" : 6 }  \n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/store-javascript-function-on-server.txt"
  },
  {
    "code": "      :copyable: false\n   \n      source: 192.0.2.2:27017\n      {\n        syncedTo: 'Mon Jan 31 2022 18:58:50 GMT+0000 (Coordinated Universal Time)',\n        replLag: '0 secs (0 hrs) behind the primary '\n      }\n      ---\n      source: 192.0.2.3:27017\n      {\n        syncedTo: 'Mon Jan 31 2022 18:58:05 GMT+0000 (Coordinated Universal Time)',\n        replLag: '45 secs (0 hrs) behind the primary '\n      }\n\n#. Run the :dbcommand:`serverStatus` command and use the \n   :serverstatus:`flowControl.isLagged` value to determine whether the\n   replica set has engaged flow control:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/troubleshoot-replica-sets.txt"
  },
  {
    "code": "      :copyable: false\n\n      false\n   \n   If flow control has not engaged, investigate the :term:`secondary`\n   to determine the cause of the replication lag, such as limitations in \n   the hardware, network, or application.\n\nFor information on flow control statistics, see:\n\n- :serverstatus:`flowControl <flowControl>`\n\n- :data:`$currentOp.waitingForFlowControl` and :data:`$currentOp.flowControlStats`\n\n- :data:`currentOp.waitingForFlowControl` and :data:`currentOp.flowControlStats`\n\nSlow Application of Oplog Entries\n---------------------------------\n\n.. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst\n\n.. _replica-set-troubleshooting-check-connection:\n\nTest Connections Between all Members\n------------------------------------\n\nAll members of a :term:`replica set` must be able to connect to every\nother member of the set to support replication. Always verify\nconnections in both \"directions.\"  Networking topologies and firewall\nconfigurations can prevent normal and required connectivity, which can\nblock replication.\n\n.. include:: /includes/fact-default-bind-ip.rst\n\nConsider the following example of a bidirectional test of networking:\n\n.. example:: Given a replica set with three members running on three separate\n   hosts:\n\n   - ``m1.example.net``\n   - ``m2.example.net``\n   - ``m3.example.net``\n\n   All three use the default port ``27017``.\n\n   1. Test the connection from ``m1.example.net`` to the other hosts\n      with the following operation set ``m1.example.net``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/troubleshoot-replica-sets.txt"
  },
  {
    "code": "   :emphasize-lines: 4\n   :copyable: false\n\n   [\n      { _id: 1, flavor: 'chocolate' },\n      { _id: 2, flavor: 'strawberry' },\n      { _id: 3, flavor: 'orange' }\n   ]\n\nAdditional Examples\n~~~~~~~~~~~~~~~~~~~\n\nSee also the various update method pages for additional examples:\n\n- :ref:`db.collection.updateOne <updateOne-example-agg>`\n\n- :ref:`db.collection.updateMany <updateMany-example-agg>`\n\n- :ref:`db.collection.findOneAndUpdate() <findOneAndUpdate-agg-pipeline>`\n\n- :ref:`db.collection.findAndModify() <findAndModify-agg-pipeline>`\n\n- :ref:`Bulk.find.update() <example-bulk-find-update-agg>`\n\n- :ref:`Bulk.find.updateOne() <example-bulk-find-update-one-agg>`\n\n- :ref:`Bulk.find.upsert() <bulk-find-upsert-update-agg-example>`\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/update-documents-with-aggregation-pipeline.txt"
  },
  {
    "code": "      :emphasize-lines: 6-8\n\n      net:\n         tls:\n            mode: requireTLS\n            certificateKeyFile: /etc/ssl/mongodb.pem\n            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem\n            clusterFile: \"/etc/ssl/myReplMembershipCertificateKeyFile.pem\"\n      security:\n         clusterAuthMode: sendKeyFile\n         keyFile: /my/securely/located/membershipkey\n      replication:\n         replSetName: myReplicaSet\n      net:\n         bindIp: localhost,mongodb0.example.net\n         port: 27017\n      systemLog:\n         destination: file\n         path: \"/var/log/mongodb/mongod.log\"\n         logAppend: true\n      storage:\n         dbPath: \"/var/lib/mongodb\"\n      processManagement:\n         fork: true\n\n   Update all nodes of the cluster to include the\n   :setting:`security.clusterAuthMode` and\n   :setting:`net.tls.clusterFile` settings before continuing.\n\n#. Connect to each node and use the\n   :dbcommand:`setParameter` command to update the :parameter:`clusterAuthMode`\n   to ``sendX509``. [#update-mode-alternative]_\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/upgrade-keyfile-to-x509.txt"
  },
  {
    "code": "      :emphasize-lines: 7\n\n      net:\n         tls:\n            mode: requireTLS\n            certificateKeyFile: /etc/ssl/mongodb.pem\n            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem\n            clusterFile: \"/etc/ssl/myReplMembershipCertificateKeyFile.pem\"\n      security.clusterAuthMode: x509\n      replication:\n         replSetName: myReplicaSet\n      net:\n         bindIp: localhost,mongodb0.example.net\n         port: 27017\n      systemLog:\n         destination: file\n         path: \"/var/log/mongodb/mongod.log\"\n         logAppend: true\n      storage:\n         dbPath: \"/var/lib/mongodb\"\n      processManagement:\n         fork: true\n\n.. seealso::\n\n   You can also configure :binary:`~bin.mongod` and\n   :binary:`~bin.mongos` using command-line options instead of the\n   configuration file:\n\n   - For :binary:`~bin.mongod`, see:\n     - :option:`--tlsMode <mongod --tlsMode>`\n     - :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>`\n     - :option:`--tlsCAFile <mongod --tlsCAFile>`\n     - :option:`--tlsClusterFile <mongod --tlsClusterFile>`\n     - :option:`--clusterAuthMode <mongod --clusterAuthMode>`\n     \n   - For  :binary:`~bin.mongos`, see:\n     - :option:`--tlsMode <mongos --tlsMode>`\n     - :option:`--tlsCertificateKeyFile <mongos --tlsCertificateKeyFile>`\n     - :option:`--tlsCAFile <mongos --tlsCAFile>`\n     - :option:`--tlsClusterFile <mongos --tlsClusterFile>`\n     - :option:`--clusterAuthMode <mongos --clusterAuthMode>`\n\n\n.. _upgrade-keyfile-to-x509-tls:\n\nUpdate (Using ``tls`` Options) Clusters Using Keyfile but Not TLS/SSL\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   The procedure uses the ``tls`` options. For procedures using the\n   ``ssl`` settings/options, see :ref:`upgrade-keyfile-to-x509-ssl`.\n\nFor clusters using keyfile authentication but not TLS/SSL, to upgrade\nto x.509 membership authentication and TLS/SSL connections:\n\n#. For each member of a cluster, add the following settings to the\n   :ref:`configuration file <conf-file>` and restart:\n\n   - :setting:`net.tls.mode`\n         Set to ``allowTLS``. This value allows the node to accept\n         both TLS/SSL and non-TLS/non-SSL incoming connections. Its\n         outgoing connections do not use TLS/SSL.\n\n   - :setting:`net.tls.certificateKeyFile`\n         Set to the path of the file that contains the TLS/SSL\n         certificate and key. The\n         :binary:`mongod` / :binary:`mongos` presents this file\n         to its clients to establish the instance's identity. Required\n         when using TLS/SSL.\n\n   - :setting:`net.tls.clusterFile`\n         Set to the appropriate path of the node's certificate key file\n         for membership authentication. The\n         :binary:`mongod` / :binary:`mongos` presents this file\n         to other members of the cluster to identify itself as a member.\n\n   - :setting:`net.tls.CAFile`\n         Set to the path of the file that contains the certificate\n         chain for verifying received certificates.\n\n   - :setting:`security.clusterAuthMode`\n         Set to ``sendKeyFile``. This allows each node continues to\n         send its keyfile to authenticate itself as a member. However,\n         each node can receive either a keyfile or an x.509 certificate\n         from other members to authenticate those members.\n\n   Include other :ref:`TLS/SSL options <configure-mongod-mongos-for-tls-ssl>` and\n   any other options as appropriate for your specific configuration.\n\n   For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/upgrade-keyfile-to-x509.txt"
  },
  {
    "code": "      :emphasize-lines: 1-8\n\n      net:\n         tls:\n            mode: allowTLS\n            certificateKeyFile: /etc/ssl/mongodb.pem\n            clusterFile: \"/etc/ssl/myReplMembershipCertificateKeyFile.pem\" \n            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem\n      security:\n         clusterAuthMode: sendKeyFile\n         keyFile: /my/securely/located/membershipkey\n      replication:\n         replSetName: myReplicaSet\n      net:\n         bindIp: localhost,mongodb0.example.net\n         port: 27017\n      systemLog:\n         destination: file\n         path: \"/var/log/mongodb/mongod.log\"\n         logAppend: true\n      storage:\n         dbPath: \"/var/lib/mongodb\"\n      processManagement:\n         fork: true\n\n   Upgrade all nodes of the cluster to include :setting:`net.tls.mode`,\n   :setting:`net.tls.certificateKeyFile`,\n   :setting:`net.tls.clusterFile`, and\n   :setting:`security.clusterAuthMode`.\n\n#. Connect to each node and use the\n   :dbcommand:`setParameter` command [#update-mode-alternative]_ to:\n   \n   a. Update the :parameter:`tlsMode`\n      to ``preferSSL``. With the :parameter:`tlsMode` set to\n      ``preferTLS``, the node accepts both TLS/SSL and non-TLS/non-SSL\n      incoming connections, and its outgoing connections use TLS/SSL.\n     \n   #. Update the :parameter:`clusterAuthMode` to ``sendX509``.\n      With the :parameter:`clusterAuthMode` set to ``sendX509``, each\n      node sends its :setting:`net.tls.clusterFile` to authenticate\n      itself as a member. However, each node continues to accept either\n      a keyfile or an x.509 certificate from other members to\n      authenticate those members.\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/upgrade-keyfile-to-x509.txt"
  },
  {
    "code": "      :emphasize-lines: 3,8\n\n      net:\n         tls:\n            mode: preferTLS\n            certificateKeyFile: /etc/ssl/mongodb.pem\n            clusterFile: \"/etc/ssl/myReplMembershipCertificateKeyFile.pem\" \n            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem\n      security:\n         clusterAuthMode: sendX509\n      replication:\n         replSetName: myReplicaSet\n      net:\n         bindIp: localhost,mongodb0.example.net\n         port: 27017\n      systemLog:\n         destination: file\n         path: \"/var/log/mongodb/mongod.log\"\n         logAppend: true\n      storage:\n         dbPath: \"/var/lib/mongodb\"\n      processManagement:\n         fork: true\n\n\n   .. note::\n   \n      At this point, \n      \n      - The nodes in the cluster use TLS/SSL connections. However, the\n        nodes can accept non-TLS/SSL connections from client\n        applications.\n      \n      - The nodes send their x.509 certificates for membership\n        authentication, but can accept either x.509 certificates or\n        keyfiles from other nodes to verify the other nodes' membership.\n      \n      To enforce TLS/SSL connections from client applications as well\n      as only accept x.509 for membership authentication, see next step.\n\n#. *Optional but recommended.* Update all nodes to use only ``TLS/SSL``\n   connections and only x.509 certificate for membership authentication.\n\n   .. important::\n\n      This TLS/SSL connection requirement applies to all connections;\n      that is, with the clients as well as with the members of the\n      cluster. That is, clients must specify TLS/SSL connections and\n      presents its certificate key file when connecting to the cluster.\n      See :ref:`mongo-connect-require-client-certificates-tls` for more\n      information on connecting with TLS/SSL. See also\n      :ref:`ssl-mongod-weak-certification`.\n\n   Update the :setting:`net.tls.mode` to ``requireTLS`` and\n   :setting:`security.clusterAuthMode` to ``x509``.\n\n   For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/upgrade-keyfile-to-x509.txt"
  },
  {
    "code": "      :emphasize-lines: 3,8\n\n      net:\n         tls:\n            mode: requireTLS\n            certificateKeyFile: /etc/ssl/mongodb.pem\n            clusterFile: \"/etc/ssl/myReplMembershipCertificateKeyFile.pem\" \n            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem\n      security:\n         clusterAuthMode: x509 \n      replication:\n         replSetName: myReplicaSet\n      net:\n         bindIp: localhost,mongodb0.example.net\n         port: 27017\n      systemLog:\n         destination: file\n         path: \"/var/log/mongodb/mongod.log\"\n         logAppend: true\n      storage:\n         dbPath: \"/var/lib/mongodb\"\n      processManagement:\n         fork: true\n\n.. seealso::\n\n   You can also configure :binary:`~bin.mongod` and\n   :binary:`~bin.mongos` using command-line options instead of the\n   configuration file:\n\n   - For :binary:`~bin.mongod`, see:\n     - :option:`--tlsMode <mongod --tlsMode>`\n     - :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>`\n     - :option:`--tlsCAFile <mongod --tlsCAFile>`\n     - :option:`--tlsClusterFile <mongod --tlsClusterFile>`\n     - :option:`--clusterAuthMode <mongod --clusterAuthMode>`\n     \n   - For  :binary:`~bin.mongos`, see:\n     - :option:`--tlsMode <mongos --tlsMode>`\n     - :option:`--tlsCertificateKeyFile <mongos --tlsCertificateKeyFile>`\n     - :option:`--tlsCAFile <mongos --tlsCAFile>`\n     - :option:`--tlsClusterFile <mongos --tlsClusterFile>`\n     - :option:`--clusterAuthMode <mongos --clusterAuthMode>`\n     \n.. _upgrade-to-x509-ssl:\n\nUpgrade Procedures (Using ``ssl`` Options)\n------------------------------------------\n\n.. note::\n\n   .. include:: /includes/fact-net-tls-ssl.rst\n\n   The procedures in this section use the ``ssl`` options. For\n   procedures using the ``tls`` options, see\n   :ref:`upgrade-to-x509-tls`.\n\n.. _upgrade-sslkeyfile-to-x509-ssl:\n\nClusters Currently Using TLS/SSL (Using ``ssl`` Options)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   The procedure uses the ``ssl`` options. For procedures using the\n   ``tls`` options, see :ref:`upgrade-sslkeyfile-to-x509-ssl`.\n\nFor clusters using TLS/SSL and keyfile authentication, to upgrade to x.509\ncluster authentication, use the following rolling upgrade process:\n\n#. For each node of a cluster, start the node with the option\n   :option:`--clusterAuthMode <mongod --clusterAuthMode>` set to ``sendKeyFile`` and the option\n   ``--sslClusterFile`` set to the appropriate path of the node's\n   certificate. Include other :doc:`TLS/SSL options\n   </tutorial/configure-ssl>` as well as any other options that are\n   required for your specific configuration. For example:\n\n",
    "language": "yaml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-mongodb-internal/source/tutorial/upgrade-keyfile-to-x509.txt"
  }
]
