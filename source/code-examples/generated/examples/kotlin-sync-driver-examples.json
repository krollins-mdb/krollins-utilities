[
  {
    "code": "   :copyable: true\n\n   import com.mongodb.client.model.Aggregates\n   import com.mongodb.client.model.Accumulators\n   import com.mongodb.client.model.Projections\n   import com.mongodb.client.model.Filters\n   import com.mongodb.client.model.mql.MqlValues\n\nTo access document fields in an expression, you must reference the\ncurrent document being processed by the aggregation pipeline by using the\n``current()`` method. To access the value of a\nfield, you must use the appropriately typed method, such as\n``getString()`` or ``getDate()``. When you specify the type for a field,\nyou ensure that the driver provides only those methods which are\ncompatible with that type. The following code shows how to reference a\nstring field called ``name``:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   current().getString(\"name\")\n\nTo specify a value in an operation, pass it to the ``of()`` constructor method to\nconvert it to a valid type. The following code shows how to reference a\nvalue of ``1.0``:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   of(1.0)\n\nTo create an operation, chain a method to your field or value reference.\nYou can build more complex operations by chaining multiple methods.\n\nThe following example creates an operation to find patients in New\nMexico who have visited the doctor’s office at least once. The operation\nperforms the following actions:\n\n- Checks if the size of the ``visitDates`` array value is greater than ``0``\n  by using the ``gt()`` method\n- Checks if the ``state`` field value is “New Mexico” by using the\n  ``eq()`` method\n\nThe ``and()`` method links these operations so that the pipeline stage\nmatches only documents that meet both criteria.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   current()\n       .getArray(\"visitDates\")\n       .size()\n       .gt(of(0))\n       .and(current()\n           .getString(\"state\")\n           .eq(of(\"New Mexico\")))\n\nWhile some aggregation stages, such as ``group()``, accept operations\ndirectly, other stages expect that you first include your operation in a\nmethod such as ``computed()`` or ``expr()``. These methods, which take\nvalues of type ``TExpression``, allow you to use your expressions in\ncertain aggregations.\n\nTo complete your aggregation pipeline stage, include your expression\nin an aggregates builder method. The following list provides examples of\nhow to include your expression in common aggregates builder methods:\n\n- ``match(expr(<expression>))``\n- ``project(fields(computed(\"<field name>\", <expression>)))``\n- ``group(<expression>)``\n\nTo learn more about these methods, see the :ref:`kotlin-sync-aggregation` guide.\n\nConstructor Methods\n-------------------\n\nYou can use these constructor methods to define values for use in {+language+} aggregation\nexpressions.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 40 60\n\n   * - Method\n     - Description\n\n   * - `current() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#current()>`__\n     - References the current document being processed by the aggregation pipeline.\n\n   * - `currentAsMap() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#currentAsMap()>`__\n     - References the current document being processed by the aggregation pipeline as a map value.\n\n   * - | `of() for MqlBoolean <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(boolean)>`__\n       | `of() for MqlNumber (double) <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(double)>`__\n       | `of() for MqlNumber (Decimal128) <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(org.bson.types.Decimal128)>`__\n       | `of() for MqlInteger (int) <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(int)>`__\n       | `of() for MqlInteger (long) <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(long)>`__\n       | `of() for MqlString <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(java.lang.String)>`__\n       | `of() for MqlDate <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(java.time.Instant)>`__\n       | `of() for MqlDocument <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#of(org.bson.conversions.Bson)>`__\n\n     - Returns an ``MqlValue`` type corresponding to the provided primitive.\n\n   * - `ofArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofArray(T...)>`__\n\n       | **Typed Variants**:\n       | `ofBooleanArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofBooleanArray(boolean...)>`__\n       | `ofDateArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofDateArray(java.time.Instant...)>`__\n       | `ofIntegerArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofIntegerArray(int...)>`__\n       | `ofNumberArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofNumberArray(double...)>`__\n       | `ofStringArray() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofStringArray(java.lang.String...)>`__\n\n     - Returns an array of ``MqlValue`` types corresponding to the provided array of primitives.\n\n   * - `ofEntry() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofEntry(com.mongodb.client.model.mql.MqlString,T)>`__\n     - Returns an entry value.\n\n   * - `ofMap() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofMap()>`__\n     - Returns an empty map value.\n\n   * - `ofNull() <{+core-api+}/com/mongodb/client/model/mql/MqlValues.html#ofNull()>`__\n     - Returns the null value as exists in the Query API.\n\n.. important::\n\n   When you provide a value to one of these methods, the driver treats\n   it literally. For example, ``of(\"$x\")`` represents the string value\n   ``\"$x\"``, rather than a field named ``x``.\n\nRefer to any of the sections under :ref:`Operations\n<kotlin-sync-aggregation-expression-ops-section>` for examples using these\nmethods.\n\n.. _kotlin-sync-aggregation-expression-ops-section:\n\nOperations\n----------\n\nThe following sections provide information and examples for\naggregation expression operations available in the driver.\nThe operations are categorized by purpose and functionality.\n\nEach section has a table that describes aggregation methods\navailable in the driver and corresponding expression operators in the\nQuery API. The method names link to API documentation and the\naggregation pipeline operator names link to descriptions and examples in\nthe Server manual documentation. While each method is effectively\nequivalent to the corresponding aggregation operator, they may differ in\nexpected parameters and implementation.\n\nThe example in each section uses the ``listOf()`` method to create a\npipeline from the aggregation stage. Then, each example passes the\npipeline to the ``aggregate()`` method of ``MongoCollection``.\n\n.. note::\n\n   The driver generates a Query API expression that may be different\n   from the Query API expression provided in each example. However,\n   both expressions will produce the same aggregation result.\n\n.. important::\n\n   The driver does not provide methods for all aggregation pipeline operators in\n   the Query API. To use an unsupported operation in an\n   aggregation, you must define the entire expression using the BSON ``Document``\n   type.\n   \n.. TODO Add to note once Kotlin Sync Document ata format page is written:\n.. To learn more about the ``Document`` type, see the :ref:`<kotlin-sync-document-format>` guide.\n\nArithmetic Operations\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform an arithmetic operation on a value of type ``MqlInteger`` or\n``MqlNumber`` using the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - | `abs() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#abs()>`__\n       | `abs() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#abs()>`__\n\n     - :manual:`$abs </reference/operator/aggregation/abs/>`\n\n   * - | `add() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#add(int)>`__\n       | `add() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#add(com.mongodb.client.model.mql.MqlNumber)>`__\n\n     - :manual:`$add </reference/operator/aggregation/add/>`\n\n   * - `divide() <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#divide(com.mongodb.client.model.mql.MqlNumber)>`__\n     - :manual:`$divide </reference/operator/aggregation/divide/>`\n\n   * - | `multiply() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#multiply(int)>`__\n       | `multiply() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#multiply(com.mongodb.client.model.mql.MqlNumber)>`__\n\n     - :manual:`$multiply </reference/operator/aggregation/multiply/>`\n\n   * - `round() <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#round()>`__\n     - :manual:`$round </reference/operator/aggregation/round/>`\n\n   * - | `subtract() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#subtract(int)>`__\n       | `subtract() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#subtract(com.mongodb.client.model.mql.MqlNumber)>`__\n\n     - :manual:`$subtract </reference/operator/aggregation/subtract/>`\n\nSuppose you have weather data for a specific year that includes the\nprecipitation measurement (in inches) for each day. You want to find the\naverage precipitation, in millimeters, for each month.\n\nThe ``multiply()`` operator multiplies the ``precipitation`` field by\n``25.4`` to convert the field value to millimeters. The ``avg()`` accumulator method\nreturns the average as the ``avgPrecipMM`` field. The ``group()`` method\ngroups the values by month given in each document's ``date`` field.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-arithmetic-aggregation\n   :end-before: end-arithmetic-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in the\nQuery API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $group: {\n       _id: { $month: \"$date\" },\n       avgPrecipMM: {\n           $avg: { $multiply: [\"$precipitation\", 25.4] } }\n   } } ]\n\nArray Operations\n~~~~~~~~~~~~~~~~\n\nYou can perform an array operation on a value of type ``MqlArray``\nusing the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `all() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#all(java.util.function.Function)>`__\n     - :manual:`$allElementsTrue </reference/operator/aggregation/allElementsTrue/>`\n\n   * - `any() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#any(java.util.function.Function)>`__\n     - :manual:`$anyElementTrue </reference/operator/aggregation/anyElementTrue/>`\n\n   * - `concat() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#concat(com.mongodb.client.model.mql.MqlArray)>`__\n     - :manual:`$concatArrays </reference/operator/aggregation/concatArrays/>`\n\n   * - `concatArrays() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#concatArrays(java.util.function.Function)>`__\n     - :manual:`$concatArrays </reference/operator/aggregation/concatArrays/>`\n\n   * - `contains() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#contains(T)>`__\n     - :manual:`$in </reference/operator/aggregation/in/>`\n\n   * - `distinct() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#distinct()>`__\n     - :manual:`$setUnion </reference/operator/aggregation/setUnion/>`\n\n   * - `elementAt() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#elementAt(int)>`__\n     - :manual:`$arrayElemAt </reference/operator/aggregation/arrayElemAt/>`\n\n   * - `filter() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#filter(java.util.function.Function)>`__\n     - :manual:`$filter </reference/operator/aggregation/filter/>`\n\n   * - `first() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#first()>`__\n     - :manual:`$first </reference/operator/aggregation/first/>`\n\n   * - `joinStrings() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#joinStrings(java.util.function.Function)>`__\n     - :manual:`$concat </reference/operator/aggregation/concat/>`\n\n   * - `last() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#last()>`__\n     - :manual:`$last </reference/operator/aggregation/last/>`\n\n   * - `map() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#map(java.util.function.Function)>`__\n     - :manual:`$map </reference/operator/aggregation/map/>`\n\n   * - `max() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#max(T)>`__\n     - :manual:`$max </reference/operator/aggregation/max/>`\n\n   * - `maxN() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#maxN(com.mongodb.client.model.mql.MqlInteger)>`__\n     - :manual:`$maxN </reference/operator/aggregation/maxN-array-element/>`\n\n   * - `min() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#min(T)>`__\n     - :manual:`$min </reference/operator/aggregation/min/>`\n\n   * - `minN() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#minN(com.mongodb.client.model.mql.MqlInteger)>`__\n     - :manual:`$minN </reference/operator/aggregation/minN-array-element/>`\n\n   * - `multiply() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#multiply(java.util.function.Function)>`__\n     - :manual:`$multiply </reference/operator/aggregation/multiply/>`\n\n   * - `size() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#size()>`__\n     - :manual:`$size </reference/operator/aggregation/size/>`\n\n   * - `slice() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#slice(int,int)>`__\n     - :manual:`$slice </reference/operator/aggregation/slice/>`\n\n   * - `sum() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#sum(java.util.function.Function)>`__\n     - :manual:`$sum </reference/operator/aggregation/sum/>`\n\n   * - `union() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#union(com.mongodb.client.model.mql.MqlArray)>`__\n     - :manual:`$setUnion </reference/operator/aggregation/setUnion/>`\n\n   * - `unionArrays() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#unionArrays(java.util.function.Function)>`__\n     - :manual:`$setUnion </reference/operator/aggregation/setUnion/>`\n\nSuppose you have a collection of movies, each of which contains an array\nof nested documents for upcoming showtimes. Each nested document\ncontains an array that represents the total number of seats in the\ntheater, where the first array entry is the number of premium seats and\nthe second entry is the number of regular seats. Each nested document\nalso contains the number of tickets that have already been bought for\nthe showtime. A document in this collection might resemble the\nfollowing:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ...,\n     \"movie\": \"Hamlet\",\n     \"showtimes\": [\n       {\n         \"date\": \"May 14, 2023, 12:00 PM\",\n         \"seats\": [ 20, 80 ],\n         \"ticketsBought\": 100\n       },\n       {\n         \"date\": \"May 20, 2023, 08:00 PM\",\n         \"seats\": [ 10, 40 ],\n         \"ticketsBought\": 34\n       }]\n   }\n\nThe ``filter()`` method displays only the results matching the provided\npredicate. In this case, the predicate uses ``sum()`` to calculate the\ntotal number of seats and compares that value to the number of ``ticketsBought``\nby using the ``lt()`` method. The ``project()`` method stores these\nfiltered results as a new ``availableShowtimes`` array field.\n\n.. tip::\n\n   You must specify the type of values that an array contains when using\n   the ``getArray()`` method to work with the values as any specific\n   type. For example, you must specify that an array contains integers\n   to perform calculations with those integers elsewhere in\n   your application.\n\n   The example in this section specifies that the ``seats`` array\n   contains values of type ``MqlDocument`` so that it can extract nested\n   fields from each array entry.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-array-aggregation\n   :end-before: end-array-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. note::\n\n   To improve readability, the previous example assigns intermediary values to\n   the ``totalSeats`` and ``isAvailable`` variables. If you don't assign\n   these intermediary values to variables, the code still produces\n   equivalent results.\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       availableShowtimes: {\n           $filter: {\n               input: \"$showtimes\",\n               as: \"showtime\",\n               cond: { $lt: [ \"$$showtime.ticketsBought\", { $sum: \"$$showtime.seats\" } ] }\n       } }\n   } } ]\n\nBoolean Operations\n~~~~~~~~~~~~~~~~~~\n\nYou can perform a boolean operation on a value of type ``MqlBoolean``\nusing the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `and() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#and(com.mongodb.client.model.mql.MqlBoolean)>`__\n     - :manual:`$and </reference/operator/aggregation/and/>`\n\n   * - `not() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#not()>`__\n     - :manual:`$not </reference/operator/aggregation/not/>`\n\n   * - `or() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#or(com.mongodb.client.model.mql.MqlBoolean)>`__\n     - :manual:`$or </reference/operator/aggregation/or/>`\n\nSuppose you want to classify very low or high weather temperature\nreadings (in degrees Fahrenheit) as extreme.\n\nThe ``or()`` operator checks to see if temperatures are extreme by comparing\nthe ``temperature`` field to predefined values by using the ``lt()`` and\n``gt()`` methods. The ``project()`` method records this result in the\n``extremeTemp`` field.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-boolean-aggregation\n   :end-before: end-boolean-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       extremeTemp: { $or: [ { $lt: [\"$temperature\", 10] },\n                             { $gt: [\"$temperature\", 95] } ] }\n   } } ]\n\nComparison Operations\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform a comparison operation on a value of type ``MqlValue``\nusing the methods described in this section.\n\n.. tip::\n\n   The ``cond()`` method is similar to the ternary operator in {+language+} and you\n   can use it for simple branches based on boolean values. Use\n   the ``switchOn()`` methods for more complex comparisons such as performing\n   pattern matching on the value type or other arbitrary checks on the value.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `eq() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#eq(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$eq </reference/operator/aggregation/eq/>`\n\n   * - `gt() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#gt(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$gt </reference/operator/aggregation/gt/>`\n\n   * - `gte() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#gte(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$gte </reference/operator/aggregation/gte/>`\n\n   * - `lt() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#lt(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$lt </reference/operator/aggregation/lt/>`\n\n   * - `lte() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#lte(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$lte </reference/operator/aggregation/lte/>`\n\n   * - | `max() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#max(com.mongodb.client.model.mql.MqlInteger)>`__\n       | `max() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#max(com.mongodb.client.model.mql.MqlNumber)>`__\n\n     - :manual:`$max </reference/operator/aggregation/max/>`\n\n   * - | `min() for MqlInteger <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#min(com.mongodb.client.model.mql.MqlInteger)>`__\n       | `min() for MqlNumber <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#min(com.mongodb.client.model.mql.MqlNumber)>`__\n\n     - :manual:`$min </reference/operator/aggregation/min/>`\n\n   * - `ne() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#ne(com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$ne </reference/operator/aggregation/ne/>`\n\nThe following example shows a pipeline that matches all the documents\nwhere the ``location`` field has the value ``\"California\"``:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-comparison-aggregation\n   :end-before: end-comparison-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $match: { location: { $eq: \"California\" } } } ]\n\nConditional Operations\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform a conditional operation using the methods described in\nthis section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `cond() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#cond(T,T)>`__\n     - :manual:`$cond </reference/operator/aggregation/cond/>`\n\n   * - `switchOn() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#switchOn(java.util.function.Function)>`__\n\n       | **Typed Variants**:\n       | `switchArrayOn() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#switchArrayOn(java.util.function.Function)>`__\n       | `switchBooleanOn() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#switchBooleanOn(java.util.function.Function)>`__\n       | `switchDateOn() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#switchDateOn(java.util.function.Function)>`__\n       | `switchDocumentOn() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#switchDocumentOn(java.util.function.Function)>`__\n       | `switchIntegerOn() <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#switchIntegerOn(java.util.function.Function)>`__\n       | `switchMapOn() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#switchMapOn(java.util.function.Function)>`__\n       | `switchNumberOn() <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#switchNumberOn(java.util.function.Function)>`__\n       | `switchStringOn() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#switchStringOn(java.util.function.Function)>`__\n\n     - :manual:`$switch </reference/operator/aggregation/switch/>`\n\nSuppose you have a collection of customers with their membership information.\nOriginally, customers were either members or not. Over time, membership levels\nwere introduced and used the same field. The information stored in this field\ncan be one of a few different types, and you want to create a standardized value\nindicating their membership level.\n\nThe ``switchOn()`` method checks each clause in order. If the value matches the\ntype indicated by the clause, then the clause determines the string value\ncorresponding to the membership level. If the original value is a string, it\nrepresents the membership level and that value is used. If the data type is a\nboolean, it returns either ``Gold`` or ``Guest`` for the membership level. If\nthe data type is an array, it returns the most recent string in the array which\nmatches the most recent membership level. If the ``member`` field is an\nunknown type, the ``switchOn()`` method provides a default value of ``Guest``.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-conditional-aggregation\n   :end-before: end-conditional-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       membershipLevel: {\n           $switch: {\n             branches: [\n               { case: { $eq: [ { $type: \"$member\" }, \"string\" ] }, then: \"$member\" },\n               { case: { $eq: [ { $type: \"$member\" }, \"bool\" ] }, then: { $cond: {\n                                                                              if: \"$member\",\n                                                                              then: \"Gold\",\n                                                                              else: \"Guest\" } } },\n               { case: { $eq: [ { $type: \"$member\" }, \"array\" ] }, then: { $last: \"$member\" } }\n             ],\n             default: \"Guest\" } }\n   } } ]\n\nConvenience Operations\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can apply custom functions to values of type\n``MqlValue`` using the methods described in this section.\n\nTo improve readability and allow for code reuse, you can move redundant\ncode into static methods. However, you cannot directly chain\nstatic methods in {+language+}. The ``passTo()`` method lets you chain values\ninto custom static methods.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `passTo() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#passTo(java.util.function.Function)>`__\n\n       | **Typed Variants**:\n       | `passArrayTo() <{+core-api+}/com/mongodb/client/model/mql/MqlArray.html#passArrayTo(java.util.function.Function)>`__\n       | `passBooleanTo() <{+core-api+}/com/mongodb/client/model/mql/MqlBoolean.html#passBooleanTo(java.util.function.Function)>`__\n       | `passDateTo() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#passDateTo(java.util.function.Function)>`__\n       | `passDocumentTo() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#passDocumentTo(java.util.function.Function)>`__\n       | `passIntegerTo() <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#passIntegerTo(java.util.function.Function)>`__\n       | `passMapTo() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#passMapTo(java.util.function.Function)>`__\n       | `passNumberTo() <{+core-api+}/com/mongodb/client/model/mql/MqlNumber.html#passNumberTo(java.util.function.Function)>`__\n       | `passStringTo() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#passStringTo(java.util.function.Function)>`__\n\n     - *No corresponding operator*\n\nSuppose you want to determine how a class is performing against some\nbenchmarks. You want to find the average final grade for each class and\ncompare it against the benchmark values.\n\nThe following custom method ``gradeAverage()`` takes an array of documents and\nthe name of an integer field shared across those documents. It calculates the\naverage of that field across all the documents in the provided array and\ndetermines the average of that field across all the elements in\nthe provided array. The ``evaluate()`` method compares a provided value to\ntwo provided range limits and generates a response string based on\nhow the values compare:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-convenience-aggregation-methods\n   :end-before: end-convenience-aggregation-methods\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. tip::\n\n   Using the ``passTo()`` method allows you to reuse\n   your custom methods for other aggregations. For example, you can\n   use the ``gradeAverage()`` method to find the average of grades for\n   groups of students filtered by entry year or district, not just their\n   class. Similarly, you could use the ``evaluate()`` method to evaluate\n   an individual student's performance or an entire school's performance.\n\nThe ``passArrayTo()`` method takes an array of all students and calculates the\naverage score by using the ``gradeAverage()`` method. Then, the\n``passNumberTo()`` method uses the ``evaluate()`` method to determine how the\nclasses are performing. This example stores the result as the ``evaluation``\nfield using the ``project()`` method.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-convenience-aggregation\n   :end-before: end-convenience-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       evaluation: { $switch: {\n           branches: [\n               { case: { $lte: [ { $avg: \"$students.finalGrade\" }, 70 ] },\n                 then: \"Needs improvement\"\n               },\n               { case: { $lte: [ { $avg: \"$students.finalGrade\" }, 85 ] },\n                 then: \"Meets expectations\"\n               }\n           ],\n           default: \"Exceeds expectations\" } }\n   } } ]\n\nConversion Operations\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform a conversion operation to convert between certain ``MqlValue``\ntypes using the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `asDocument() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#asDocument()>`__\n     - *No corresponding operator*\n\n   * - `asMap() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#asMap()>`__\n     - *No corresponding operator*\n\n   * - `asString() for MqlDate <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#asString(com.mongodb.client.model.mql.MqlString,com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$dateToString </reference/operator/aggregation/dateToString/>`\n\n   * - `asString() for MqlValue <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#asString()>`__\n     - :manual:`$toString </reference/operator/aggregation/toString/>`\n\n   * - `millisecondsAsDate() <{+core-api+}/com/mongodb/client/model/mql/MqlInteger.html#millisecondsAsDate()>`__\n     - :manual:`$toDate </reference/operator/aggregation/toDate/>`\n\n   * - `parseDate() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#parseDate()>`__\n     - :manual:`$dateFromString </reference/operator/aggregation/dateFromString/>`\n\n   * - `parseInteger() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#parseInteger()>`__\n     - :manual:`$toInt </reference/operator/aggregation/toInt/>`\n\nSuppose you want to have a collection of student data that includes\ntheir graduation years, which are stored as strings. You want to\ncalculate the year of their five-year reunion and store this value in a\nnew field.\n\nThe ``parseInteger()`` method converts the ``graduationYear`` to an integer\nso that ``add()`` can calculate the reunion year. The ``addFields()`` method\nstores this result as a new ``reunionYear`` field.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-convenience-aggregation\n   :end-before: end-convenience-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $addFields: {\n       reunionYear: {\n           $add: [ { $toInt: \"$graduationYear\" }, 5 ] }\n   } } ]\n\nDate Operations\n~~~~~~~~~~~~~~~\n\nYou can perform a date operation on a value of type ``MqlDate``\nusing the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `dayOfMonth() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#dayOfMonth(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$dayOfMonth </reference/operator/aggregation/dayOfMonth/>`\n\n   * - `dayOfWeek() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#dayOfWeek(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$dayOfWeek </reference/operator/aggregation/dayOfWeek/>`\n\n   * - `dayOfYear() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#dayOfYear(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$dayOfYear </reference/operator/aggregation/dayOfYear/>`\n\n   * - `hour() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#hour(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$hour </reference/operator/aggregation/hour/>`\n\n   * - `millisecond() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#millisecond(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$millisecond </reference/operator/aggregation/millisecond/>`\n\n   * - `minute() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#minute(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$minute </reference/operator/aggregation/minute/>`\n\n   * - `month() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#month(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$month </reference/operator/aggregation/month/>`\n\n   * - `second() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#second(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$second </reference/operator/aggregation/second/>`\n\n   * - `week() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#week(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$week </reference/operator/aggregation/week/>`\n\n   * - `year() <{+core-api+}/com/mongodb/client/model/mql/MqlDate.html#year(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$year </reference/operator/aggregation/year/>`\n\nSuppose you have data about package deliveries and want to match\ndeliveries that occurred on any Monday in the ``\"America/New_York\"`` time\nzone.\n\nIf the ``deliveryDate`` field contains any string values representing\nvalid dates, such as ``\"2018-01-15T16:00:00Z\"`` or ``\"Jan 15, 2018, 12:00\nPM EST\"``, you can use the ``parseDate()`` method to convert the strings\ninto date types.\n\nThe ``dayOfWeek()`` method determines which day of the week that a date\nis, then converts it to a number. The number assignment uses ``0`` to mean\nSunday when using the ``\"America/New_York\"`` timezone. The ``eq()``\nmethod compares this value to ``2``, or Monday.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-date-aggregation\n   :end-before: end-date-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $match: {\n       $expr: {\n           $eq: [ {\n               $dayOfWeek: {\n                   date: { $dateFromString: { dateString: \"$deliveryDate\" } },\n                   timezone: \"America/New_York\" }},\n               2\n           ] }\n   } } ]\n\nDocument Operations\n~~~~~~~~~~~~~~~~~~~\n\nYou can perform a document operation on a value of type ``MqlDocument``\nusing the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - | `getArray() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getArray(java.lang.String)>`__\n       | `getBoolean() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getBoolean(java.lang.String)>`__\n       | `getDate() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getDate(java.lang.String)>`__\n       | `getDocument() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getDocument(java.lang.String)>`__\n       | `getField() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getField(java.lang.String)>`__\n       | `getInteger() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getInteger(java.lang.String)>`__\n       | `getMap() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getMap(java.lang.String)>`__\n       | `getNumber() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getNumber(java.lang.String)>`__\n       | `getString() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#getString(java.lang.String)>`__\n     - :manual:`$getField </reference/operator/aggregation/getField/>`\n\n   * - `hasField() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#hasField(java.lang.String)>`__\n     - *No corresponding operator*\n\n   * - `merge() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#merge(com.mongodb.client.model.mql.MqlDocument)>`__\n     - :manual:`$mergeObjects </reference/operator/aggregation/mergeObjects/>`\n\n   * - `setField() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#setField(java.lang.String,com.mongodb.client.model.mql.MqlValue)>`__\n     - :manual:`$setField </reference/operator/aggregation/setField/>`\n\n   * - `unsetField() <{+core-api+}/com/mongodb/client/model/mql/MqlDocument.html#unsetField(java.lang.String)>`__\n     - :manual:`$unsetField </reference/operator/aggregation/unsetField/>`\n\nSuppose you have a collection of legacy customer data which includes\naddresses as child documents under the ``mailing.address`` field. You want\nto find all the customers who live in Washington state. A\ndocument in this collection might resemble the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ...,\n     \"customer.name\": \"Mary Kenneth Keller\",\n     \"mailing.address\":\n     {\n       \"street\": \"601 Mongo Drive\",\n       \"city\": \"Vasqueztown\",\n       \"state\": \"CO\",\n       \"zip\": 27017\n     }\n   }\n\nThe ``getDocument()`` method retrieves the ``mailing.address`` field as a\ndocument so the nested ``state`` field can be retrieved with the\n``getString()`` method. The ``eq()`` method checks if the value of the\n``state`` field is ``\"WA\"``.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-document-aggregation\n   :end-before: end-document-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [\n       { $match: {\n           $expr: {\n               $eq: [{\n                   $getField: {\n                       input: { $getField: { input: \"$$CURRENT\", field: \"mailing.address\"}},\n                       field: \"state\" }},\n                   \"WA\" ]\n   }}}]\n\nMap Operations\n~~~~~~~~~~~~~~\n\nYou can perform a map operation on a value of either type ``MqlMap`` or\n``MqlEntry`` using the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `entries() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#entries()>`__\n     - :manual:`$objectToArray </reference/operator/aggregation/objectToArray/>`\n\n   * - `get() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#get(com.mongodb.client.model.mql.MqlString)>`__\n     - *No corresponding operator*\n\n   * - `getKey() <{+core-api+}/com/mongodb/client/model/mql/MqlEntry.html#getKey()>`__\n     - *No corresponding operator*\n\n   * - `getValue() <{+core-api+}/com/mongodb/client/model/mql/MqlEntry.html#getValue()>`__\n     - *No corresponding operator*\n\n   * - `has() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#has(com.mongodb.client.model.mql.MqlString)>`__\n     - *No corresponding operator*\n\n   * - `merge() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#merge(com.mongodb.client.model.mql.MqlMap)>`__\n     - *No corresponding operator*\n\n   * - `set() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#set(com.mongodb.client.model.mql.MqlString,T)>`__\n     - *No corresponding operator*\n\n   * - `setKey() <{+core-api+}/com/mongodb/client/model/mql/MqlEntry.html#setKey(com.mongodb.client.model.mql.MqlString)>`__\n     - *No corresponding operator*\n\n   * - `setValue() <{+core-api+}/com/mongodb/client/model/mql/MqlEntry.html#setValue(T)>`__\n     - *No corresponding operator*\n\n   * - `unset() <{+core-api+}/com/mongodb/client/model/mql/MqlMap.html#unset(com.mongodb.client.model.mql.MqlString)>`__\n     - *No corresponding operator*\n\nSuppose you have a collection of inventory data where each document represents\nan individual item you're responsible for supplying. Each document contains a\nfield that is a map of all your warehouses and how many copies they\nhave in their inventory of the item. You want to determine the total number of\ncopies of items you have across all warehouses. A document in this\ncollection might resemble the following:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ...,\n     \"item\": \"notebook\"\n     \"warehouses\": [\n       { \"Atlanta\", 50 },\n       { \"Chicago\", 0 },\n       { \"Portland\", 120 },\n       { \"Dallas\", 6 }\n     ]\n   }\n\nThe ``entries()`` method returns the map entries in the ``warehouses``\nfield as an array. The ``sum()`` method calculates the total value of items\nbased on the values in the array retrieved with the ``getValue()`` method.\nThis example stores the result as the new ``totalInventory`` field using the\n``project()`` method.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-map-aggregation\n   :end-before: end-map-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       totalInventory: {\n           $sum: {\n             $getField: { $objectToArray: \"$warehouses\" },\n           } }\n   } } ]\n\nString Operations\n~~~~~~~~~~~~~~~~~\n\nYou can perform a string operation on a value of type ``MqlString``\nusing the methods described in this section.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `append() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#append(com.mongodb.client.model.mql.MqlString)>`__\n     - :manual:`$concat </reference/operator/aggregation/concat/>`\n\n   * - `length() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#length()>`__\n     - :manual:`$strLenCP </reference/operator/aggregation/strLenCP/>`\n\n   * - `lengthBytes() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#lengthBytes()>`__\n     - :manual:`$strLenBytes </reference/operator/aggregation/strLenBytes/>`\n\n   * - `substr() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#substr(int,int)>`__\n     - :manual:`$substrCP </reference/operator/aggregation/substrCP/>`\n\n   * - `substrBytes() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#substrBytes(int,int)>`__\n     - :manual:`$substrBytes </reference/operator/aggregation/substrBytes/>`\n\n   * - `toLower() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#toLower()>`__\n     - :manual:`$toLower </reference/operator/aggregation/toLower/>`\n\n   * - `toUpper() <{+core-api+}/com/mongodb/client/model/mql/MqlString.html#toUpper()>`__\n     - :manual:`$toUpper </reference/operator/aggregation/toUpper/>`\n\nSuppose you want to generate lowercase usernames for employees of a\ncompany from the employees' last names and employee IDs.\n\nThe ``append()`` method combines the ``lastName`` and ``employeeID`` fields into\na single username, while the ``toLower()`` method makes the entire username\nlowercase. This example stores the result as a new ``username`` field using\nthe ``project()`` method.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-string-aggregation\n   :end-before: end-string-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       username: {\n           $toLower: { $concat: [\"$lastName\", \"$employeeID\"] } }\n   } } ]\n\nType-Checking Operations\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can perform a type-check operation on a value of type ``MqlValue``\nusing the methods described in this section.\n\nThese methods do not return boolean values. Instead, you provide a default value\nthat matches the type specified by the method. If the checked value\nmatches the method type, the checked value is returned. Otherwise, the supplied\ndefault value is returned. To program branching logic based on the\ndata type, see ``switchOn()``.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Method\n     - Aggregation Pipeline Operator\n\n   * - `isArrayOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isArrayOr(com.mongodb.client.model.mql.MqlArray)>`__\n     - *No corresponding operator*\n\n   * - `isBooleanOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isBooleanOr(com.mongodb.client.model.mql.MqlBoolean)>`__\n     - *No corresponding operator*\n\n   * - `isDateOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isDateOr(com.mongodb.client.model.mql.MqlDate)>`__\n     - *No corresponding operator*\n\n   * - `isDocumentOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isDocumentOr(T)>`__\n     - *No corresponding operator*\n\n   * - `isIntegerOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isIntegerOr(com.mongodb.client.model.mql.MqlInteger)>`__\n     - *No corresponding operator*\n\n   * - `isMapOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isMapOr(com.mongodb.client.model.mql.MqlMap)>`__\n     - *No corresponding operator*\n\n   * - `isNumberOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isNumberOr(com.mongodb.client.model.mql.MqlNumber)>`__\n     - *No corresponding operator*\n\n   * - `isStringOr() <{+core-api+}/com/mongodb/client/model/mql/MqlValue.html#isStringOr(com.mongodb.client.model.mql.MqlString)>`__\n     - *No corresponding operator*\n\nSuppose you have a collection of rating data. An early version of the review\nschema allowed users to submit negative reviews without a star rating. You want\nconvert any of these negative reviews without a star rating to have the minimum\nvalue of 1 star.\n\nThe ``isNumberOr()`` method returns either the value of ``rating``, or\na value of ``1`` if ``rating`` is not a number or is null. The\n``project()`` method returns this value as a new ``numericalRating`` field.\n\nThe following code shows the pipeline for this aggregation:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-type-aggregation\n   :end-before: end-type-aggregation\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following code provides an equivalent aggregation pipeline in\nthe Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :copyable: true\n\n   [ { $project: {\n       numericalRating: {\n           $cond: { if: { $isNumber: \"$rating\" },\n                    then: \"$rating\",\n                    else: 1\n           } }\n   } } ]\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/agg-exp-ops.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\nBuild and Execute an Aggregation Pipeline\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo perform an aggregation on the documents in a collection, pass a list of aggregation\nstages to the ``aggregate()`` method.\n\nThis example outputs a count of the number of bakeries in each borough\nof New York City. The following code creates aggregation pipeline that contains the\nfollowing stages:\n\n- A :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents\n  in which the value of the ``cuisine`` field is ``\"Bakery\"``.\n\n- A :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching\n  documents by the ``borough`` field, producing a count of documents for each distinct\n  value of that field.\n\n.. TODO: uncomment when Aggregates Builder page is created\n\n.. .. note::\n\n..    The following example uses the builders pattern to implement the stages of an\n..    aggregation pipeline. To learn more about how to use the builders pattern, see\n..    :ref:`<aggregates-builders>`\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/aggregation.txt"
  },
  {
    "code": "   :start-after: start-user-class\n   :end-before: end-user-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following data class models the results returned by our query:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/builders.txt"
  },
  {
    "code": "   :start-after: start-result-class\n   :end-before: end-result-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nMongoDB Query API\n~~~~~~~~~~~~~~~~~\n\nThe following sample performs the query by using the MongoDB Query API:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/builders.txt"
  },
  {
    "code": "   :start-after: start-find\n   :end-before: end-find\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nBuilders\n~~~~~~~~\n\nThe following example performs the query by using the builder helpers:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/builders.txt"
  },
  {
    "code": "   :start-after: start-find-builders\n   :end-before: end-find-builders\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: Uncomment as pages get built\n\n.. Available Builders\n.. ------------------\n\n.. The following pages describe how to implement the different classes of builders\n.. available in the {+driver-short+}.\n\n.. - :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.\n.. - :ref:`Filters <filters-builders>` for building query filters.\n.. - :ref:`Indexes <indexes-builders>` for creating index keys.\n.. - :ref:`Projections <projections-builders>` for building projections. \n.. - :ref:`Sorts <sorts-builders>` for building sort criteria.\n.. - :ref:`Updates <updates-builders>` for building updates.\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/builders.txt"
  },
  {
    "code": "   :emphasize-lines: 1, 3\n\n   val uri = \"<connection string>\"\n   val settings = MongoClientSettings.builder()\n       .applyConnectionString(ConnectionString(uri))\n       .applyToSocketSettings { builder -> builder.connectTimeout(60000, TimeUnit.MILLISECONDS) }\n       .applyToSslSettings { builder -> builder.enabled(true) }\n       .build()\n   \n   val mongoClient = MongoClient.create(settings)\n\nConnection Options\n------------------\n\nThe following sections describe the connection options available in the\n{+driver-short+}. Each option shows the option-value pair you can use in a\nconnection URI and, if available, the driver method to set it within a\n``MongoClientSettings`` instance.\n\nNetwork Compression\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Connection Option\n     - Description\n     \n   * - **compressors**\n     - | The preferred compression types, in order, for wire-protocol messages sent to\n         or received from the server. The driver uses the first of these compression types\n         that the server supports.\n       |\n       | **Data Type**: comma-delimited string\n       | **MongoClientSettings**: ``compressorList(listOf(<MongoCompressor>))``\n       | **Connection URI**: ``compressors=snappy,zstd,zlib``\n\n   * - **zlibCompressionLevel**\n     - | The compression level for zlib to use. This option accepts\n         an integer value between ``-1`` and ``9``, corresponding to the\n         following settings:\n       | \n       | - **-1:** (Default). zlib uses its default compression level (usually ``6``).\n       | - **0:** No compression.\n       | - **1:** Fastest speed but lowest compression.\n       | - **9:** Best compression but slowest speed.\n       |\n       | **Data Type**: integer\n       | **Default**: ``-1``\n       | **MongoClientSettings**: ``compressorList(listOf(zlib.withProperty(MongoCompressor.LEVEL, 3)))``\n       | **Connection URI**: ``zlibCompressionLevel=3``\n\nTimeouts\n~~~~~~~~\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - Connection Option\n     - Description\n     \n   * - **connectTimeoutMS**\n     - | The time in milliseconds to attempt a connection before timing out.\n       |\n       | **Data Type**: integer\n       | **Default**: ``10000``\n       | **MongoClientSettings**:\n       \n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/connection-options.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-connect\n   :end-before: end-connect\n   :dedent:\n\nLocal Deployments\n-----------------\n\nTo connect to a local MongoDB deployment, use ``localhost`` as the hostname. By\ndefault, the ``mongod`` process runs on port 27017, though you can customize this for\nyour deployment.\n\nThe following code shows how to use the {+driver-short+} to connect to a local MongoDB\ndeployment:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/connection-targets.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-connect-local\n   :end-before: end-connect-local\n   :dedent:\n\nReplica Sets\n------------\n\nTo connect to a replica set, specify the hostnames (or IP addresses) and \nport numbers of the replica-set members.\n\nIf you aren't able to provide a full list of hosts in the replica set, you can \nspecify one or more of the hosts in the replica set and instruct the {+driver-short+} to \nperform automatic discovery to find the others. To instruct the driver to perform\nautomatic discovery, perform one of the following actions:\n\n- Specify the name of the replica set as the value of the ``replicaSet`` parameter.\n- Specify ``false`` as the value of the ``directConnection`` parameter.\n- Specify more than one host in the replica set.\n\nThe following examples show how to connect to a MongoDB replica set running on port\n``27017`` of three different hosts by using either the ``ConnectionString`` or\n``MongoClientSettings`` class. Select the tab that corresponds to your preferred class.\n\n.. tabs::\n\n   .. tab:: ConnectionString\n      :tabid: connectionstring\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/connection-targets.txt"
  },
  {
    "code": "         :language: kotlin\n         :start-after: start-connect-rs-connection-string\n         :end-before: end-connect-rs-connection-string\n         :dedent:\n\n   .. tab:: MongoClientSettings\n      :tabid: mongoclientsettings\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/connection-targets.txt"
  },
  {
    "code": "         :language: kotlin\n         :start-after: start-connect-rs-settings\n         :end-before: end-connect-rs-settings\n         :dedent:\n\n.. note::\n\n   The ``MongoClient`` constructor is *non-blocking*.\n   When you connect to a replica set, the constructor returns immediately while the\n   client uses background threads to connect to the replica set.\n   \n   If you construct a ``MongoClient`` and immediately print the string representation\n   of its ``nodes`` attribute, the list might be empty while the client connects to\n   the replica-set members.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/connection-targets.txt"
  },
  {
    "code": "   :start-after: start-connect-to-atlas-w-uri\n   :end-before: end-connect-to-atlas-w-uri\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nYou can also create a client with your desired configurations by passing a \n``MongoClientSettings`` object to the ``MongoClient.create()`` method.\n\nTo instantiate a ``MongoClientSettings`` object, use the builder method to \nspecify your connection string, using the ``applyConnectionString()`` method, \nand any other client options. Once you have your desired configuration, \ncall the ``build()`` method.\n\nYou can set the Stable API version client option to avoid breaking changes when \nyou upgrade to a new server version. To learn more about the Stable API feature, \nsee the :ref:`Stable API page <kotlin-sync-stable-api>`. \n\nThe following code shows how you can specify the connection string and the \nStable API client option when connecting to a MongoDB deployment on Atlas \nand verify that the connection is successful:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/mongoclient.txt"
  },
  {
    "code": "   :start-after: start-connect-to-atlas\n   :end-before: end-connect-to-atlas\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nAPI Documentation\n-----------------\n\nFor more information about creating a ``MongoClient`` object with the \n{+driver-short+}, see the following API documentation: \n\n- `MongoClient <{+api+}/mongodb-driver-kotlin-sync/com.mongodb.kotlin.client/-mongo-client/index.html>`__\n- `MongoClientSettings <{+core-api+}com/mongodb/MongoClientSettings.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/mongoclient.txt"
  },
  {
    "code": "   :start-after: start-enable-stable-api\n   :end-before: end-enable-stable-api\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nOnce you create a ``MongoClient`` instance with\na specified API version, all commands you run with the client use the specified\nversion. If you must run commands using more than one version of the \n{+stable-api+}, create a new ``MongoClient``.\n\n.. _stable-api-options:\n\nConfigure the {+stable-api+}\n----------------------------\n\nThe following table describes the parameters of the ``ServerApi`` class. You can use these\nparameters to customize the behavior of the {+stable-api+}.\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 25,75\n\n   * - Option Name\n     - Description\n\n   * - strict\n     - | **Optional**. When ``True``, if you call a command that isn't part of \n         the declared API version, the driver raises an exception.\n       |\n       | Default: **False**\n\n   * -  deprecationErrors\n     - | **Optional**. When ``True``, if you call a command that is deprecated in the \n         declared API version, the driver raises an exception.\n       |\n       | Default: **False**\n\nThe following code example shows how you can set the two options on an instance of ``ServerApi``\nby chaining methods on the ``ServerApi.Builder``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/stable-api.txt"
  },
  {
    "code": "   :start-after: start-stable-api-options\n   :end-before: end-stable-api-options\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTroubleshooting\n---------------\n\nUnrecognized field 'apiVersion' on server\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe {+driver-short+} raises this exception if you specify an API version and connect to a\nMongoDB server that doesn't support the {+stable-api+}. Ensure you're connecting to a\ndeployment running {+mdb-server+} v5.0 or later.\n\nProvided apiStrict:true, but the command count is not in API Version\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe {+driver-short+} raises this exception if your ``MongoClient`` runs an operation that\nisn't in the {+stable-api+} version you specified. To avoid this error, use an alternative\noperation supported by the specified {+stable-api+} version, or set the ``strict``\noption to ``False`` when constructing your ``ServerApi`` object.\n\nAPI Documentation\n-----------------\n\nFor more information about using the {+stable-api+} with the {+driver-short+}, see the \nfollowing API documentation: \n\n- `ServerApi <{+core-api+}/com/mongodb/ServerApi.html>`__\n- `ServerApi.Builder <{+core-api+}/com/mongodb/ServerApi.Builder.html>`__\n- `ServerApiVersion <{+core-api+}/com/mongodb/ServerApiVersion.html>`__\n- `ServerAddress <{+core-api+}/com/mongodb/ServerAddress.html>`__\n- `MongoClientSettings <{+core-api+}/com/mongodb/MongoClientSettings.html>`__\n- `MongoClientSettings.Builder <{+core-api+}/com/mongodb/MongoClientSettings.Builder.html>`__\n- `MongoClient <{+api+}/com.mongodb.kotlin.client/-mongo-client/index.html>`__\n- `MongoClient.create() <{+api+}/com.mongodb.kotlin.client/-mongo-client/-factory/create.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/stable-api.txt"
  },
  {
    "code": "         :start-after: start-tls-connection-string\n         :end-before: end-tls-connection-string\n         :language: kotlin\n         :copyable:\n         :dedent:\n\n   .. tab:: MongoClientSettings\n      :tabid: mongoclientsettings\n\n      To enable TLS within a ``MongoClientSettings`` instance, use the\n      ``applyToSslSettings()`` builder method. Set the ``enabled`` property to ``true``\n      in the ``SslSettings.Builder`` block, as shown in the following code:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/tls.txt"
  },
  {
    "code": "         :start-after: start-tls-mongo-client-settings\n         :end-before: end-tls-mongo-client-settings\n         :language: kotlin\n         :copyable:\n         :dedent:\n\n.. note:: Debugging TLS\n\n   If you experience trouble setting up your TLS connection, you can\n   use the ``-Djavax.net.debug=all`` system property to view helpful\n   log statements. See `Debugging SSL/TLS connections\n   <https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html>`__\n   in the Java language documentation for more information.\n\n.. _tls_configure-certificates:\n\nConfigure Certificates\n----------------------\n\n{+language+} applications that initiate TLS requests require access to\ncryptographic certificates that prove the application's identity and verify\nother applications with which the {+language+} application interacts. You can configure\naccess to these certificates in your application in the following ways:\n\n- Using a JVM trust store and JVM key store\n- Using a client-specific trust store and key store\n\n.. _kotlin-sync-tls-configure-jvm-truststore:\n\nConfigure the JVM Trust Store\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. note::\n\n   By default, the JRE includes many commonly used public certificates\n   from signing authorities such as `Let's Encrypt\n   <https://letsencrypt.org/>`__. As a result, you can enable TLS when connecting to a\n   :atlas:`MongoDB Atlas </>` instance, or any other\n   server whose certificate is signed by an authority in the JRE's default\n   certificate store, with TLS enabled without configuring the trust store.\n\nThe JVM trust store saves certificates that securely identify other\napplications with which your {+language+} application interacts. By using these\ncertificates, your application can prove that the connection to another\napplication is genuine and secure from tampering by third parties.\n\nIf your MongoDB instance uses a certificate that is signed by an\nauthority that is not present in the JRE's default certificate store,\nyour application must configure the following system properties to initiate\nTLS requests.\n\n- ``javax.net.ssl.trustStore``: Path to a trust store containing the client's TLS\n  certificates\n\n- ``javax.net.ssl.trustStorePassword``: Password to access the trust\n  store defined in ``javax.net.ssl.trustStore``\n\nThese properties ensure that your application can\nvalidate the TLS certificate presented by a connected MongoDB instance.\n\nYou can create a trust store by using the `keytool <https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html>`__\ncommand line tool from the JDK as shown in the following terminal command:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/tls.txt"
  },
  {
    "code": "   :start-after: start-disable-hostname-verification\n   :end-before: end-disable-hostname-verification\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. warning::\n\n   Disabling hostname verification makes your application insecure and potentially\n   vulnerable to expired certificates and foreign processes posing as valid client\n   instances.\n\n.. _kotlin-sync-tls-restrict-tls-1.2:\n\nRestrict Connections to TLS 1.2 Only\n------------------------------------\n\nTo restrict your application to use only the TLS 1.2 protocol, set the\n``jdk.tls.client.protocols`` system property to ``\"TLSv1.2\"``.\n\n.. note::\n\n   Java Runtime Environments (JREs) before Java 8 only enabled\n   the TLS 1.2 protocol in update releases. If your JRE has not enabled\n   the TLS 1.2 protocol, upgrade to a later release to connect by using\n   TLS 1.2.\n\n.. _kotlin-sync-tls-custom-sslContext:\n\nCustomize TLS Configuration through the Java SE SSLContext\n----------------------------------------------------------\n\nIf your TLS configuration requires customization, you can\nset the ``sslContext`` property of your ``MongoClient`` by\npassing an `SSLContext\n<https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLContext.html>`__\nobject to the ``context()`` method builder in the ``applyToSslSettings()`` block:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/tls.txt"
  },
  {
    "code": "   :start-after: start-ssl-context\n   :end-before: end-ssl-context\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nFor more information on the ``SSLContext`` class, see the API\ndocumentation for `SSL Context <https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html>`__.\n\nOnline Certificate Status Protocol (OCSP)\n-----------------------------------------\n\nOCSP is a standard used to check whether X.509 certificates have been\nrevoked. A certificate authority can add an X.509 certificate to the\nCertificate Revocation List (CRL) before the expiry time to invalidate\nthe certificate. When a client sends an X.509 certificate during the TLS\nhandshake, the CA's revocation server checks the CRL and returns a status\nof ``good``, ``revoked``, or ``unknown``.\n\nThe driver supports the following variations of OCSP:\n\n- Client-Driven OCSP\n- OCSP Stapling\n\nThe following sections describe the differences between them and how to enable\nthem for your application.\n\n.. note::\n\n   The {+driver-short+} uses the JVM arguments configured for the application\n   and cannot be overridden for a specific ``MongoClient`` instance.\n\nClient-Driven OCSP\n~~~~~~~~~~~~~~~~~~\n\nIn client-driven OCSP, the client sends the certificate in an OCSP request to\nan OCSP responder after receiving the certificate from the server. The OCSP\nresponder checks the status of the certificate with a certificate\nauthority (CA) and reports whether it's valid in a response sent to the\nclient.\n\nTo enable client-driven OCSP for your application, set the following JVM\nsystem properties:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 35 65\n\n   * - Property\n     - Value\n\n   * - ``com.sun.net.ssl.checkRevocation``\n     - Set this property to ``true`` to enable revocation checking.\n\n   * - ``ocsp.enable``\n     - Set this property to ``true`` to enable client-driven OCSP.\n\n.. warning::\n\n   If the OCSP responder is unavailable, the TLS support provided by the\n   JDK reports a \"hard fail\". This differs from the \"soft fail\" behavior of\n   the MongoDB Shell and some other drivers.\n\nOCSP Stapling\n~~~~~~~~~~~~~\n\nOCSP stapling is a mechanism in which the server must obtain the signed\ncertificate from the certificate authority (CA) and include it in a\ntime-stamped OCSP response to the client.\n\nTo enable OCSP stapling for your application, set the following JVM system\nproperties:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 50 50\n\n   * - Property\n     - Description\n\n   * - ``com.sun.net.ssl.checkRevocation``\n     - Set this property to ``true`` to enable revocation checking.\n\n   * - ``jdk.tls.client.enableStatusRequestExtension``\n     - | Set this property to ``true`` to enable OCSP stapling.\n       |\n       | If unset or set to ``false``, the connection can proceed regardless of the presence or status of the certificate revocation response.\n\nFor more information about OCSP, check out the following resources:\n\n- Oracle JDK 8 Documentation on `how to enable OCSP for an application <https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ocsp.html>`__\n- :rfc:`Official IETF specification for OCSP (RFC 6960) <6960>`\n\nAPI Documentation\n-----------------\n\nFor more information about any of the methods or types discussed in this guide,\nsee the following API documentation:\n\n- `ConnectionString <{+core-api+}/com/mongodb/ConnectionString.html>`__\n- `MongoClientSettings <{+core-api+}/com/mongodb/MongoClientSettings.html>`__\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect/tls.txt"
  },
  {
    "code": "   :language: kotlin\n   :copyable: true\n   :linenos:\n   :emphasize-lines: 6-8\n\nConnection\n----------\n\nThe following sections describe how to connect to different targets,\nsuch as a local instance of MongoDB or a cloud-hosted instance on Atlas.\n\nLocal Deployment\n~~~~~~~~~~~~~~~~\n\nThe following code shows the connection string to connect to a local\ninstance of MongoDB:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/connect.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-powerstatus-enum\n   :end-before: end-powerstatus-enum\n   :dedent:\n\nThe ``PowerStatusCodec`` class implements the ``Codec`` interface to convert\nthe {+language+} ``enum`` values to corresponding BSON boolean values. The\n``encode()`` method converts a ``PowerStatus`` value to a BSON boolean and the\n``decode()`` method performs the conversion in the opposite direction.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-powerstatus-codec\n   :end-before: end-powerstatus-codec\n   :dedent:\n\nYou can add an instance of ``PowerStatusCodec`` to your\n``CodecRegistry``. View the :ref:`CodecRegistry\n<kotlin-sync-codecregistry>` section of this page to learn how to include\nyour ``Codec`` in your registry.\n\nTo learn more about the classes and interfaces mentioned in this section, see the\nfollowing API documentation:\n\n- `Codec <{+java-api+}/apidocs/bson/org/bson/codecs/Codec.html>`__\n- `BsonWriter <{+java-api+}/apidocs/bson/org/bson/BsonWriter.html>`__\n- `BsonBinaryWriter <{+java-api+}/apidocs/bson/org/bson/BsonBinaryWriter.html>`__\n- `EncoderContext <{+java-api+}/apidocs/bson/org/bson/codecs/EncoderContext.html>`__\n- `BsonReader <{+java-api+}/apidocs/bson/org/bson/BsonReader.html>`__\n- `DecoderContext <{+java-api+}/apidocs/bson/org/bson/codecs/DecoderContext.html>`__\n- `BsonBinaryReader <{+java-api+}/apidocs/bson/org/bson/BsonBinaryReader.html>`__\n\n.. _kotlin-sync-codecregistry:\n\nCodecRegistry\n-------------\n\nA ``CodecRegistry`` is an immutable collection of ``Codec`` instances that\nencode and decode {+language+} classes. You can use any of the\nfollowing ``CodecRegistries`` class static factory methods to construct a\n``CodecRegistry`` from the ``Codec`` instances contained in the associated\ntypes:\n\n- ``fromCodecs()``: Creates a registry from ``Codec`` instances\n- ``fromProviders()``: Creates a registry from ``CodecProvider`` instances\n- ``fromRegistries()``: Creates a registry from ``CodecRegistry`` instances\n\nThe following code shows how to construct a ``CodecRegistry`` by using\nthe ``fromCodecs()`` method:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   val newRegistry = CodecRegistries.fromRegistries(\n       CodecRegistries.fromCodecs(MyEnumCodec()),\n       MongoClientSettings.getCodecRegistry()\n   )\n\nFor more information about the classes and interfaces in this section, see\nthe following API documentation:\n\n- `CodecProvider <{+java-api+}/apidocs/bson/org/bson/codecs/configuration/CodecProvider.html>`__\n- `getCodecRegistry() <{+java-api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#getCodecRegistry()>`__\n\nBsonTypeClassMap\n~~~~~~~~~~~~~~~~\n\nThe ``BsonTypeClassMap`` class contains a recommended mapping between BSON\nand {+language+} types. You can use this class in your custom ``Codec`` or\n``CodecProvider`` to help you manage which {+language+} types to decode your BSON\ntypes to. It also contains container classes that implement ``Iterable``\nor ``Map`` such as the ``Document`` class.\n\nYou can add or modify the ``BsonTypeClassMap`` default mapping by passing a\n``Map`` containing new or replacement entries.\n\nThe following code shows how to retrieve the {+language+} class type\nthat corresponds to the BSON array type in the default ``BsonTypeClassMap``\ninstance:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-monolight-class\n   :end-before: end-monolight-class\n   :dedent:\n\nThis class contains the following fields that each require a\ncorresponding ``Codec`` to handle encoding and decoding:\n\n- ``powerStatus``: Describes whether the device light is ``\"ON\"`` or ``\"OFF\"``.\n  For this field, use the :ref:`PowerStatusCodec\n  <kotlin-sync-powerstatus-codec>` which converts the ``PowerStatus``\n  enum values to BSON booleans.\n\n- ``colorTemperature``: Describes the color of the device light in\n  kelvins as an ``Int`` value. For this field, use the ``IntegerCodec``\n  provided in the BSON library.\n\nThe following code shows how to implement a ``Codec`` for the\n``Monolight`` class. The constructor expects an instance of\n``CodecRegistry`` from which it retrieves the ``Codec`` instances needed\nto encode and decode the class fields:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-monolight-codec\n   :end-before: end-monolight-codec\n   :dedent:\n\nTo ensure that the ``Codec`` instances for the fields are available for\nthe ``Monolight`` class, implement a custom ``CodecProvider`` as shown\nin the following code example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-monolight-provider\n   :end-before: end-monolight-provider\n   :dedent:\n\nAfter defining the conversion logic, you can perform the following actions:\n\n- Store instances of ``Monolight`` in MongoDB\n- Retrieve documents from MongoDB as instances of ``Monolight``\n\nThe following code assigns the ``MonolightCodecProvider`` to the\n``MongoCollection`` instance by passing it to the\n``withCodecRegistry()`` method. The example class also inserts and\nretrieves data by using the ``Monolight`` class:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/codecs.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-kserializer\n   :end-before: end-kserializer\n   :dedent:\n\nThe following code shows the ``PaintOrder`` data class in which the\n``orderDate`` field has an annotation that specifies the custom\nserializer class defined in the preceding code:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-ks-dataclass\n   :end-before: end-ks-dataclass\n   :emphasize-lines: 5\n   :dedent:\n\nTo learn more about the methods and classes mentioned in this section,\nsee the following API documentation:\n\n- `KSerializer\n  <{+kotlin-docs+}/api/kotlinx.serialization/kotlinx-serialization-core/kotlinx.serialization/-k-serializer/>`__\n  in the {+language+} documentation\n\n- `Instant\n  <{+kotlin-docs+}/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-instant/>`__ in the {+language+} documentation\n\n- `BsonEncoder\n  <{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-bson-encoder/index.html>`__\n\n- `BsonDecoder\n  <{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-bson-decoder/index.html>`__\n\n.. _kotlin-sync-custom-codec:\n\nCustomize the Serializer Configuration\n--------------------------------------\n\nYou can use the ``KotlinSerializerCodec`` class from the ``org.bson.codecs.kotlinx`` \npackage to create a codec for your ``@Serializable`` data classes and \ncustomize what the driver stores in MongoDB.\n\nUse the ``BsonConfiguration`` class to define the configuration,\nwhich can include whether to encode defaults, encode nulls, or define\nclass discriminators.\n\nTo create a custom codec, your project must have the ``bson-kotlinx``\ndependency. See the :ref:`kotlin-sync-add-serialization` section of this\nguide for installation instructions.\n\nYou can define your codec by using the `KotlinSerializerCodec.create()\n<{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-kotlin-serializer-codec/-companion/index.html>`__\nmethod, then you can add the codec to the registry.\n\nCustom Codec Example\n~~~~~~~~~~~~~~~~~~~~\n\nThe following example shows how to create a codec by using the \n``KotlinSerializerCodec.create()`` method and then configure it to *not*\nencode defaults:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-codec\n   :end-before: end-codec\n   :dedent:\n\nTo learn more about the methods and classes mentioned in this section,\nsee the following API documentation:\n\n- `KotlinSerializerCodec\n  <{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-kotlin-serializer-codec/index.html>`__\n\n- `KotlinSerializerCodec.create()\n  <{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-kotlin-serializer-codec/-companion/create.html>`__\n\n- `BsonConfiguration\n  <{+java-api+}/apidocs/bson-kotlinx/bson-kotlinx/org.bson.codecs.kotlinx/-bson-configuration/index.html>`__\n \n.. _kotlin-sync-polymorphic:\n\nPolymorphic Serialization\n-------------------------\n\nThe {+driver-short+} natively supports serialization and deserialization\nof polymorphic classes. When you mark a sealed interface and data\nclasses that inherit that interface with the ``@Serializable``\nannotation, the driver uses a ``KSerializer`` implementation to handle\nconversion of your types to and from BSON.\n\nWhen you insert an instance of a polymorphic data class into MongoDB,\nthe driver adds the field ``_t``, the\ndiscriminator field. The value of this field is the data class name.\n\nPolymorphic Data Classes Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example creates an interface and two data classes that\ninherit that interface. In the data classes, the ``id`` field is marked\nwith the annotations described in the\n:ref:`kotlin-sync-data-class-annotation` section:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-poly-classes\n   :end-before: end-poly-classes\n   :dedent:\n\nThen, you can perform operations with data classes as usual. The\nfollowing example parametrizes the collection with the ``Person``\ninterface, then performs operations with the polymorphic classes\n``Teacher`` and ``Student``. When you retrieve documents, the driver\nautomatically detects the type based on the discriminator value and\ndeserializes them accordingly.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/data-formats/serialization.kt\n      :language: kotlin\n      :start-after: start-poly-operations\n      :end-before: end-poly-operations\n      :dedent:\n\n   .. output::\n      :language: console\n\n      Retrieving by using data classes\n      Teacher(id=..., name=Vivian Lee, department=History)\n      Student(id=..., name=Kate Parker, grade=10)\n      \n      Retrieving by using Person interface\n      Teacher(id=..., name=Vivian Lee, department=History)\n      Student(id=..., name=Kate Parker, grade=10)\n      \n      Retrieving as Document type\n      Document{{_id=..., _t=Teacher, name=Vivian Lee, department=History}}\n      Document{{_id=..., _t=Student, name=Kate Parker, grade=10}}\n\n.. _kotlin-sync-datetime-serialization:\n\nSerialize Dates and Times\n-------------------------\n\nIn this section, you can learn about using {+language+} serialization to\nwork with date and time types.\n\nkotlinx-datetime Library\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n``kotlinx-datetime`` is a {+language+} library that offers\na high level of control over how your date and time values\nare serialized. To use the library, add the ``kotlinx-datetime``\ndependency to your project's dependency list.\n\nSelect from the following tabs to see how to add the ``kotlinx-datetime``\ndependency to your project by using the :guilabel:`Gradle` and\n:guilabel:`Maven` package managers:\n\n.. tabs::\n\n   .. tab::\n      :tabid: Gradle\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "         :caption: build.gradle.kts\n\n         implementation(\"org.jetbrains.kotlinx:kotlinx-datetime:{+kotlinx-dt-version+}\")\n\n   .. tab::\n      :tabid: Maven\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "         :caption: pom.xml\n\n         <dependency>\n             <groupId>org.jetbrains.kotlinx</groupId>\n             <artifactId>kotlinx-datetime-jvm</artifactId>\n             <version>{+kotlinx-dt-version+}</version>\n         </dependency>\n\nTo learn more about this library, see the :github:`kotlinx-datetime repository\n</Kotlin/kotlinx-datetime>` on GitHub.\n\nExample Data Class with Dates and Times\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter you add the library dependency, you can implement serializers from\nthe ``kotlinx-datetime`` library that map your data class field values\nto the expected types in BSON.\n\nIn this example, the driver serializes the fields of\nthe ``Appointment`` data class with the following behavior:\n\n- ``name``: The driver serializes the value as a string.\n\n- ``date``:  The driver uses the ``kotlinx-datetime`` serializer\n  because the field has the ``@Contextual`` annotation. ``LocalDate``\n  values are serialized as BSON dates.\n\n- ``time``: The driver serializes the value as a string because it does\n  not have the ``@Contextual`` annotation. This is the default\n  serialization behavior for ``LocalTime`` values.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-datetime-data-class\n   :end-before: end-datetime-data-class\n   :dedent:\n\nThe following example inserts an instance of the ``Appointment`` data\nclass into the ``appointments`` collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-datetime-insertone\n   :end-before: end-datetime-insertone\n   :dedent:\n\nIn MongoDB, the ``LocalDate`` value is stored as a BSON date, and the\n``time`` field is stored as a string by default serialization:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/serialization.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-create-time-series\n   :end-before: end-create-time-series\n   :dedent:\n\nTo verify that you successfully created the time series collection, run\nthe ``listCollections()`` method on the database and print the results:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/time-series.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/data-formats/time-series.kt\n      :language: kotlin\n      :start-after: start-print-time-series\n      :end-before: end-print-time-series\n      :dedent:\n\n   .. output::\n\n      {\n        \"name\": \"october2024\",\n        \"type\": \"timeseries\",\n        \"options\": {\n          \"timeseries\": {\n            \"timeField\": \"temperature\",\n            \"granularity\": \"seconds\",\n            \"bucketMaxSpanSeconds\": 3600\n          }\n        },\n        \"info\": {\n          \"readOnly\": false\n        }\n     }\n     ...\n\n.. _kotlin-sync-time-series-store:\n\nStore Time Series Data\n----------------------\n\nYou can insert data into a time series collection by using the ``insertOne()``\nor ``insertMany()`` methods and specifying the measurement, timestamp, and metadata\nin each inserted document.\n\n.. tip::\n\n  To learn more about inserting documents into a collection, see the :ref:`kotlin-sync-write-insert`\n  guide.\n\nExample\n~~~~~~~\n\nThis example inserts New York City temperature data into the ``october2024``\ntime series collection created in the :ref:`Create a Time Series Collection example\n<kotlin-sync-time-series-create-example>`. Each document contains the following fields:\n\n- ``temperature``, which stores temperature measurements in degrees Fahrenheit\n- ``location``, which stores location metadata\n- ``timestamp``, which stores the time of the measurement collection\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/time-series.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-insert-time-series-data\n   :end-before: end-insert-time-series-data\n   :dedent:\n\n.. _kotlin-sync-time-series-query:\n\nQuery Time Series Data\n----------------------\n\nYou can use the same syntax and conventions to query data stored in a time \nseries collection as you use when performing read or aggregation operations on\nother collections. To learn more about these operations, see\nthe :ref:`Additional Information <kotlin-sync-time-series-addtl-info>` section.\n\n.. _kotlin-sync-time-series-addtl-info:\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts mentioned in this guide, see the\nfollowing {+mdb-server+} manual entries:\n\n- :manual:`Time Series </core/timeseries-collections/>`\n- :manual:`Create and Query a Time Series Collection </core/timeseries/timeseries-procedures/>`\n- :manual:`Set Granularity for Time Series Data </core/timeseries/timeseries-granularity/>`\n\nTo learn more about performing read operations, see :ref:`kotlin-sync-read`.\n\nTo learn more about performing aggregation operations, see the :ref:`kotlin-sync-aggregation`\nguide.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods mentioned in this guide, see the following\nAPI documentation:\n\n- `createCollection() <{+api+}/com.mongodb.kotlin.client/-mongo-database/create-collection.html>`__\n- `listCollections() <{+api+}/com.mongodb.kotlin.client/-mongo-database/list-collections.html>`__\n- `insertOne() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/insert-one.html>`__\n- `insertMany() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/insert-many.html>`__\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/data-formats/time-series.txt"
  },
  {
    "code": "         :language: kotlin\n         :caption: DemoDataClassExample.kt\n\n      .. note::\n      \n         This example uses a {+language+} data class to model MongoDB data.\n\n   .. step:: Run the Application\n\n      When you run the application, it prints the details\n      of a movie document that matches the query, as shown in the\n      following output:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "         :copyable: false\n         \n         Movie(title=Before Sunrise, year=1995, directors=[Richard Linklater])\n\n      If you don't see any output or receive an error, check whether you\n      included the proper connection string in your application. Also, confirm\n      that you successfully loaded the sample dataset into your MongoDB Atlas cluster.\n\n      After completing this step, you have a working application that uses\n      the {+driver-short+} to connect to your MongoDB cluster, run a query on the\n      sample data, and print out the result.\n\n   .. step:: Use the Document Class to Model Data (Alternative)\n\n      The preceding step demonstrates how to run a query on a sample\n      collection to retrieve data by using a {+language+} data class. This section\n      shows how to use the `Document <https://mongodb.github.io/mongo-java-driver/{+version-number+}/apidocs/bson/org/bson/Document.html>`__\n      class to store and retrieve data from MongoDB.\n\n      In a file called ``DemoDocumentExample.kt``, paste the following sample\n      code to run a query on your sample dataset in MongoDB Atlas. Replace the\n      value of the ``<connection URI string>`` placeholder with your\n      MongoDB Atlas connection string:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "         :caption: DemoDocumentExample.kt\n         :language: kotlin\n\n      When you run the application, it prints the details\n      of a movie document that matches the query, as shown in the\n      following output:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "         :copyable: false\n      \n         Document{{_id=..., plot=A young man and woman ..., genres=[Drama, Romance], ...}}\n\n      If you don't see any output or receive an error, check whether you\n      included the proper connection string in your application. Also, confirm\n      that you successfully loaded the sample dataset into your MongoDB\n      Atlas cluster.\n\nAfter you complete these steps, you have a working application that\nuses the driver to connect to your MongoDB deployment, runs a query on\nthe sample data, and prints out the result.\n\n.. include:: /includes/get-started/quickstart-troubleshoot.rst\n\n.. TODO add after output .. tip:: Data Classes\n.. \n..    To learn more about using data classes to store and retrieve data,\n..    see the :ref:`fundamentals-data-classes` guide.\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/get-started/connect-to-mongodb.txt"
  },
  {
    "code": "   :caption: build.gradle.kts\n\n   implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-core:{+serialization-version+}\")\n   implementation(\"org.mongodb:bson-kotlinx:{+full-version+}\")\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/data-formats/serialization-gradle-versioned.rst"
  },
  {
    "code": "   :caption: pom.xml\n   \n   <dependency>\n       <groupId>org.jetbrains.kotlinx</groupId>\n       <artifactId>kotlinx-serialization-core</artifactId>\n       <version>{+serialization-version+}</version>\n   </dependency>\n   <dependency>\n       <groupId>org.mongodb</groupId>\n       <artifactId>bson-kotlinx</artifactId>\n       <version>{+full-version+}</version>\n   </dependency>\n",
    "language": "xml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/data-formats/serialization-maven-versioned.rst"
  },
  {
    "code": "   :caption: build.gradle.kts\n   :copyable: true\n\n   dependencies {\n       implementation(\"org.mongodb:mongodb-driver-kotlin-sync:{+full-version+}\")\n   }\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/kotlin-sync-driver-gradle-versioned.rst"
  },
  {
    "code": "  :caption: pom.xml\n  :copyable: true\n\n  <dependencies>\n      <dependency>\n          <groupId>org.mongodb</groupId>\n          <artifactId>mongodb-driver-kotlin-sync</artifactId>\n          <version>{+full-version+}</version>\n      </dependency>\n  </dependencies>\n",
    "language": "xml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/kotlin-sync-driver-maven-versioned.rst"
  },
  {
    "code": "   :caption: build.gradle.kts\n   :copyable: true\n\n   implementation(\"org.mongodb:bson-kotlinx:{+full-version+}\")\n   // OR\n   implementation(\"org.mongodb:bson-kotlin:{+full-version+}\")\n   \n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/serialization-libs-gradle-versioned.rst"
  },
  {
    "code": "   :caption: pom.xml\n   :copyable: true\n\n   <dependency>\n       <groupId>org.mongodb</groupId>\n       <artifactId>bson-kotlinx</artifactId>\n       <version>{+full-version+}</version>\n   </dependency>\n   <!--OR-->\n   <dependency>\n       <groupId>org.mongodb</groupId>\n       <artifactId>bson-kotlin</artifactId>\n       <version>{+full-version+}</version>\n   </dependency>\n  \n",
    "language": "xml",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/includes/serialization-libs-maven-versioned.rst"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-create-search-index\n   :end-before: end-create-search-index\n   :dedent:\n\nThe following code example shows how to create Atlas Search and\nVector Search indexes in one call:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-create-search-indexes\n   :end-before: end-create-search-indexes\n   :dedent:\n\nTo learn more about the syntax used to define Atlas Search indexes, see the\n:atlas:`Review Atlas Search Index Syntax </atlas-search/index-definitions>` guide\nin the Atlas documentation.\n\n.. _kotlin-sync-atlas-search-index-list:\n\nList Search Indexes\n-------------------\n\nYou can use the\n`listSearchIndexes() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/list-search-indexes.html>`__\nmethod to return all Atlas Search indexes in a collection.\n\nThe following code example shows how to print a list of the search indexes in\na collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-list-search-indexes\n   :end-before: end-list-search-indexes\n   :dedent:\n\n.. _kotlin-sync-atlas-search-index-update:\n\nUpdate a Search Index\n---------------------\n\nYou can use the\n`updateSearchIndex() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/update-search-index.html>`__\nmethod to update an Atlas Search index.\n\nThe following code shows how to update a search index:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-update-search-indexes\n   :end-before: end-update-search-indexes\n   :dedent:\n\n.. _kotlin-sync-atlas-search-index-drop:\n\nDelete a Search Index\n---------------------\n\nYou can use the\n`dropSearchIndex() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/drop-search-index.html>`__\nmethod to delete an Atlas Search index.\n\nThe following code shows how to delete a search index from a collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-drop-search-index\n   :end-before: end-drop-search-index\n   :dedent:\n\nAdditional Information\n----------------------\n\nTo learn more about MongoDB Atlas Search, see the :atlas:`Atlas Search Indexes </atlas-search/atlas-search-overview/>`\ndocumentation.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/atlas-search-index.txt"
  },
  {
    "code": "   :start-after: start-movie-class\n   :end-before: end-movie-class\n   :language: kotlin\n   :copyable:\n\nCreate a Compound Index\n-----------------------\n\nThe following example creates a compound index on the ``type`` and ``genre`` fields, with\nboth fields indexed in ascending order:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/compound-index.txt"
  },
  {
    "code": "   :start-after: start-index-compound\n   :end-before: end-index-compound\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following is an example of a query that uses the index created in\nthe preceding code sample:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/compound-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.kt\n      :start-after: start-index-compound-query\n      :end-before: end-index-compound-query\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Movie(id=573a1392f29313caabcda755, title=China Seas, type=movie, genres=[Action, Drama, Adventure], ...)\n      Movie(id=573a1392f29313caabcd9ca6, title=Scarface, type=movie, genres=[Action, Crime, Drama], ... )\n      Movie(id=573a1392f29313caabcdb258, title=The Hurricane, type=movie, genres=[Action, Drama, Romance], ...)\n      Movie(id=573a1391f29313caabcd820b, title=Beau Geste, type=movie, genres=[Action, Adventure, Drama], ...)\n      ...\n\nAdditional Information\n----------------------\n\nTo learn more about compound indexes, see :manual:`Compound Indexes </core/index-compound>`\nin the {+mdb-server+} manual.\n\nTo learn about effective indexing strategies using compound indexes, see\n:manual:`The ESR Rule </tutorial/equality-sort-range-rule>` in the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods discussed in this guide, see the following API\ndocumentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `filter() <{+api+}/com.mongodb.kotlin.client/-find-iterable/filter.html>`__\n- `sort() <{+api+}/com.mongodb.kotlin.client/-find-iterable/sort.html>`__\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/compound-index.txt"
  },
  {
    "code": "   :start-after: start-movie-class\n   :end-before: end-movie-class\n   :language: kotlin\n   :copyable:\n\nCreate Single Field Index\n-------------------------\n\nThe following example creates an index in ascending order on the ``title`` field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/single-field-index.txt"
  },
  {
    "code": "   :start-after: start-index-single\n   :end-before: end-index-single\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe following is an example of a query that is covered by the index created in the preceding code example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/single-field-index.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/indexes/indexes.kt\n      :start-after: start-index-single-query\n      :end-before: end-index-single-query\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Movie(id=573a1398f29313caabceb515, title=Batman, ...)\n\nAdditional Information\n----------------------\n\nTo learn more about single field indexes, see :manual:`Single Field Indexes </core/index-single>`\nin the {+mdb-server+} manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods discussed in this guide, see the following API\ndocumentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `filter() <{+api+}/com.mongodb.kotlin.client/-find-iterable/filter.html>`__\n- `sort() <{+api+}/com.mongodb.kotlin.client/-find-iterable/sort.html>`__\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes/single-field-index.txt"
  },
  {
    "code": "   :language: kotlin\n   :copyable:\n   :linenos:\n   :emphasize-lines: 20-22\n\nSingle Field Index\n------------------\n\nThe following example creates an ascending index on the specified field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-single-field\n   :end-before: end-single-field\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about single field indexes, see the :ref:`kotlin-sync-single-field-index` guide.\n\nCompound Index\n--------------\n\nThe following example creates a compound index on the specified fields:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-compound\n   :end-before: end-compound\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about compound indexes, see the :ref:`kotlin-sync-compound-index` guide.\n\nMultikey Index\n--------------\n\nThe following example creates a multikey index on the specified array-valued field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-multikey\n   :end-before: end-multikey\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO To learn more about multikey indexes, see the :ref:`kotlin-sync-multikey-index`\n.. guide.\n\nGeospatial Index\n----------------\n\nThe following example creates a 2dsphere index on the specified field that contains\nGeoJSON objects:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-geo\n   :end-before: end-geo\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about geospatial indexes, see the :ref:`kotlin-sync-geospatial-index`\n.. guide.\n\nUnique Index\n------------\n\nThe following example creates a unique index on the specified field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-unique\n   :end-before: end-unique\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about unique indexes, see the :ref:`kotlin-sync-unique-index`\n.. guide.\n\nWildcard Index\n--------------\n\nThe following example creates a wildcard index in the specified collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-wildcard\n   :end-before: end-wildcard\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about wildcard indexes, see the :ref:`kotlin-sync-wildcard-index`\n.. guide.\n\nClustered Index\n---------------\n\nThe following example creates a new collection with a clustered index on the ``_id``\nfield:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-clustered\n   :end-before: end-clustered\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about clustered indexes, see the :ref:`kotlin-sync-clustered-index`\n.. guide.\n\nAtlas Search Index Management\n-----------------------------\n\nThe following sections contain code examples that describe how to manage Atlas Search\nindexes.\n\nTo learn more about Atlas Search indexes, see the :ref:`kotlin-sync-atlas-search-index`\nguide.\n\nCreate Search Index\n~~~~~~~~~~~~~~~~~~~\n\nThe following example creates an Atlas Search index on the specified field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-search-create\n   :end-before: end-search-create\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about creating serach indexes, see the :ref:`kotlin-sync-atlas-search-index-create`\nguide.\n\nList Search Indexes\n~~~~~~~~~~~~~~~~~~~\n\nThe following example prints a list of Atlas Search indexes in the specified collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-search-list\n   :end-before: end-search-list\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about listing search indexes, see the :ref:`kotlin-sync-atlas-search-index-list`\nguide.\n\nUpdate Search Indexes\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example updates an existing Atlas Search index with the specified\nnew index definition:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-search-update\n   :end-before: end-search-update\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about updating search indexes, see the :ref:`kotlin-sync-atlas-search-index-update`\nguide.\n\nDelete Search Indexes\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example deletes an Atlas Search index with the specified name:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-search-delete\n   :end-before: end-search-delete\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about deleting search indexes, see the :ref:`kotlin-sync-atlas-search-index-drop`\nguide.\n\nText Index\n----------\n\nThe following example creates a text index on the specified string field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-text\n   :end-before: end-text\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about text indexes, see the :ref:`kotlin-sync-text-index`\n.. guide.\n\nDelete an Index\n---------------\n\nThe following example deletes an index with the specified name:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-remove\n   :end-before: end-remove\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. TODO: To learn more about removing indexes, see :ref:`kotlin-sync-indexes-remove`\n.. in the Work with Indexes guide.\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/indexes.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\nOpen a Change Stream\n--------------------\n\nTo open a change stream, call the ``watch()`` method. The instance on which you\ncall the ``watch()`` method on determines the scope of events that the change\nstream listens for. You can call the ``watch()`` method on instances of the following\nclasses:\n\n- ``MongoClient``: To monitor all changes in the MongoDB deployment\n- ``MongoDatabase``: To monitor changes in all collections in the database\n- ``MongoCollection``: To monitor changes in the collection\n\nOpen a Change Stream Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example opens a change stream on the ``restaurants`` collection\nand prints changes as they occur:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-open-change-stream\n   :end-before: end-open-change-stream\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo begin watching for changes, run the application. Then, in a separate\napplication or shell, perform a write operation on the ``restaurants`` collection. The\nfollowing example updates a document in which the value of the ``name`` is ``\"Blarney Castle\"``:\n\n.. _kotlin-sync-change-stream-update:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-update-for-change-stream\n   :end-before: end-update-for-change-stream\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nWhen you update the collection, the change stream application prints the change\nas it occurs. The printed change event resembles the\nfollowing:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-change-stream-pipeline\n   :end-before: end-change-stream-pipeline\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about modifying your change stream output, see the\n:manual:`Modify Change Stream Output\n</changeStreams/#modify-change-stream-output>` section in the {+mdb-server+}\nmanual.\n\nModify watch() Behavior\n-----------------------\n\nYou can modify the ``watch()`` by chaining methods to the ``ChangeStreamIterable``\nobject returned by the ``watch()`` method call. If you don't specify any options, the\ndriver does not customize the operation.\n\nThe following table describes methods you can use to customize the behavior\nof ``watch()``:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``batchSize()``\n     - | Sets the number of documents to return per batch.\n\n   * - ``collation()``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``comment()``\n     - | Specifies a comment to attach to the operation.\n\n   * - ``fullDocument()``\n     - | Sets the ``fullDocument`` value. To learn more, see the\n         :ref:`<kotlin-sync-change-stream-pre-post-image>` section of this document.\n\n   * - ``fullDocumentBeforeChange()``\n     - | Sets the ``fullDocumentBeforeChange`` value. To learn more, see the\n         :ref:`<kotlin-sync-change-stream-pre-post-image>` section of this document.\n\n   * - ``maxAwaitTime()``\n     - | Sets the maximum await execution time on the server for this operation, in\n         milliseconds.\n\nFor a complete list of methods you can use to configure the ``watch()`` method, see\nthe `ChangeStreamIterable <{+api+}/com.mongodb.kotlin.client/-change-stream-iterable/index.html>`__\nAPI documentation.\n\n.. _kotlin-sync-change-stream-pre-post-image:\n\nInclude Pre-Images and Post-Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. important::\n\n   You can enable pre-images and post-images on collections only if your\n   deployment uses MongoDB v6.0 or later.\n\nBy default, when you perform an operation on a collection, the\ncorresponding change event includes only the delta of the fields\nmodified by that operation. To see the full document before or after a\nchange, chain the ``fullDocumentBeforeChange()`` or the ``fullDocument()``\nmethods to the ``watch()`` method.\n\nThe **pre-image** is the full version of a document *before* a change. To include the\npre-image in the change stream event, pass one of the following options to the\n``fullDocumentBeforeChange()`` method:\n\n- ``FullDocumentBeforeChange.WHEN_AVAILABLE``: The change event includes a pre-image of the\n  modified document for change events only if the pre-image is available.\n- ``FullDocumentBeforeChange.REQUIRED``: The change event includes a pre-image of the\n  modified document for change events. If the pre-image is not available, the\n  driver raises an error.\n\nThe **post-image** is the full version of a document *after* a change. To include the\npost-image in the change stream event, pass one of the following options to the \n``fullDocument()`` method:\n\n- ``FullDocument.UPDATE_LOOKUP``: The change event includes a copy of the entire changed\n  document from some time after the change.\n- ``FullDocument.WHEN_AVAILABLE``: The change event includes a post-image of the\n  modified document for change events only if the post-image is available.\n- ``FullDocument.REQUIRED``: The change event includes a post-image of the\n  modified document for change events. If the post-image is not available, the\n  driver raises an error.\n\nThe following example calls the ``watch()`` method on a collection and includes the post-image\nof updated documents in the results by specifying the ``fullDocument`` parameter:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-change-stream-post-image\n   :end-before: end-change-stream-post-image\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nWith the change stream application running, updating a document in the\n``restaurants`` collection by using the :ref:`preceding update example\n<kotlin-sync-change-stream-update>` prints a change event resembling the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/change-streams.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\n.. _kotlin-sync-accurate-count:\n\nRetrieve an Accurate Count\n--------------------------\n\nUse the ``countDocuments()`` method to count the number of documents that are in a\ncollection. To count the number of documents that match specified search\ncritera, pass a query filter to the ``countDocuments()`` method.\n\nTo learn more about specifying a query, see :ref:`kotlin-sync-specify-query`.\n\nCount All Documents\n~~~~~~~~~~~~~~~~~~~\n\nTo return a count of all documents in the collection, call the ``countDocuments()`` method\nwith no arguments, as shown in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/count.txt"
  },
  {
    "code": "   :start-after: start-count-options\n   :end-before: end-count-options\n   :language: kotlin\n   :dedent:\n\n.. _kotlin-sync-estimated-count:\n\nRetrieve an Estimated Count\n---------------------------\n\nUse the ``estimatedDocumentCount()`` method to retrieve an estimate of the number of\ndocuments in a collection. The method estimates the amount of documents based on\ncollection metadata, which can be faster than performing an accurate count.\n\nThe following example prints the estimated number of documents in a collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/count.txt"
  },
  {
    "code": "   :start-after: start-estimated-count-options\n   :end-before: end-estimated-count-options\n   :language: kotlin\n   :dedent:\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `countDocuments() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/count-documents.html>`__\n- `estimatedDocumentCount() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/estimated-document-count.html>`__\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/count.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\n.. _kotlin-sync-cursors-iterate:\n\nAccess Cursor Contents Iteratively\n----------------------------------\n\nTo iterate over the contents of a cursor, use the ``forEach()`` method, as shown in the\nfollowing example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :start-after: start-cursor-iterate\n   :end-before: end-cursor-iterate\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nAlternatively, use the ``use()`` method to implement a loop on the cursor:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :start-after: start-cursor-iterate-alternative\n   :end-before: end-cursor-iterate-alternative\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. note::\n\n   By default, MongoDB closes a cursor when the client has exhausted all the\n   results in the cursor. The examples in this guide explicitly close cursors by using the\n   ``close()`` method.\n\nRetrieve Documents Individually\n-------------------------------\n\nRetrieve documents from a cursor individually by calling the ``next()`` method.\n\nThe following example finds all documents in a collection with a ``name`` value\nof ``\"Dunkin' Donuts\"``. It then prints the first document in the cursor by calling the\n``next()`` method.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/cursors.kt\n      :start-after: start-cursor-next\n      :end-before: end-cursor-next\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(id=5eb3d668b31de5d588f42c66, name=Dunkin' Donuts)\n\nRetrieve All Documents\n----------------------\n\n.. warning::\n\n   If the number and size of documents returned by your query exceeds available\n   application memory, your program will crash. If you expect a large result\n   set, :ref:`access your cursor iteratively <kotlin-sync-cursors-iterate>`.\n\nTo retrieve all documents from a cursor, convert the cursor into a ``List`` as\nshown in the following example:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :copyable:\n\n   .. input:: /includes/read/cursors.kt\n      :start-after: start-cursor-list\n      :end-before: end-cursor-list\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(id=5eb3d668b31de5d588f42c66, name=Dunkin' Donuts)\n      Restaurant(id=5eb3d668b31de5d588f42ca0, name=Dunkin' Donuts)\n      Restaurant(id=5eb3d668b31de5d588f42b08, name=Dunkin' Donuts)\n      Restaurant(id=5eb3d668b31de5d588f42cd7, name=Dunkin' Donuts)\n      ...\n\nTailable Cursors\n----------------\n\nWhen querying on a :manual:`capped collection </core/capped-collections/>`, you\ncan use a **tailable cursor** that remains open after the client exhausts the\nresults in a cursor. To create a tailable cursor with capped collection,\nspecify ``CursorType.TailableAwait`` to the ``cursorType`` method of a\n``FindIterable`` object.\n\nThe following example creates a tailable cursor on a capped collection:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :start-after: start-tailable-cursor\n   :end-before: end-tailable-cursor\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about tailable cursors and their usage, see the :manual:`Tailable Cursors guide\n</core/tailable-cursors/>` in the {+mdb-server+} manual.\n\nTroubleshooting\n---------------\n\n\"*CursorNotFound* cursor id not valid at server\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCursors in MongoDB can timeout on the server if they've been open for\na long time without any operations being performed on them. This can\nlead to a ``CursorNotFound`` exception when you try to iterate through the cursor.\n\nAPI Documentation\n-----------------\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `find() <{+api+}/mongodb-driver-kotlin-sync/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `FindIterable <{+api+}/mongodb-driver-kotlin-sync/com.mongodb.kotlin.client/-find-iterable/index.html>`__\n- `MongoCursor <{+api+}/mongodb-driver-kotlin-sync/com.mongodb.kotlin.client/-mongo-cursor/index.html>`__\n- `CursorType <{+core-api+}/com/mongodb/CursorType.html>`__\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/cursors.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\n``distinct()`` Method\n---------------------\n\nTo retrieve the distinct values for a specified field, call the ``distinct()``\nmethod and pass in the name of the field you want to find distinct values for.\n\nRetrieve Distinct Values Across a Collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example retrieves the distinct values of the ``borough`` field in\nthe ``restaurants`` collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/distinct.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\nProjection Types\n----------------\n\nYou can use a projection to specify which fields to include in a return\ndocument, or to specify which fields to exclude.\n\nWhen specifying certain fields to include in a projection, all other fields are implicitly\nexcluded (except the ``_id`` field, which is included by default). You cannot combine\ninclusion and exclusion statements in a single projection, unless you are excluding the\n``_id`` field.\n\nTo remove the ``_id`` field from the returned document, you must\n:ref:`explicitly exclude it <kotlin-sync-project-exclude-id>`.\n\nSpecify Fields to Include\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the following syntax to specify the fields to include in the result:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/project.kt\n      :start-after: start-project\n      :end-before: end-project\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(id=5eb3d668b31de5d588f429e2, name=Emerald Pub, borough=Manhattan, cuisine=American)\n      Restaurant(id=5eb3d668b31de5d588f432dd, name=Emerald Pub, borough=Queens, cuisine=American)\n\n.. _kotlin-sync-project-exclude-id:\n\nExclude the ``_id`` Field\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen specifying fields to include, you can also exclude the ``_id`` field from\nthe returned document.\n\nThe following example runs the same query as the preceding example, but\nexcludes the ``_id`` field from the projection:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/project.kt\n      :start-after: start-project-exclude\n      :end-before: end-project-exclude\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(id=null, name=Emerald Pub, borough=Manhattan, cuisine=American)\n      Restaurant(id=null, name=Emerald Pub, borough=Queens, cuisine=American)\n\nAdditional Information\n----------------------\n\nTo learn more about projections, see the :manual:`Project Fields guide\n</tutorial/project-fields-from-query-results/>` in the MongoDB Server Manual.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `projection() <{+api+}/com.mongodb.kotlin.client/-find-iterable/projection.html>`__\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/project.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\n.. _kotlin-sync-retrieve-find:\n\nFind Documents\n--------------\n\nThe ``find()`` method retrieves documents from a collection. This\nmethod takes a **query filter** and returns all matching documents. A query filter is a\ndocument that specifies the criteria that the driver uses to match documents from the\ncollection.\n\nTo learn more about query filters, see the :ref:`kotlin-sync-specify-query` guide.\n\nFind Documents Example\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``find()`` method to find all documents in which the\nvalue of the ``cuisine`` field is ``\"Spanish\"``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/retrieve.txt"
  },
  {
    "code": "   :start-after: start-find\n   :end-before: end-find\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe ``find()`` operation in the preceding example returns a ``FindIterable`` object,\nwhich you can iterate through by using the ``forEach()`` method, as shown in the following\nexample:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/retrieve.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/retrieve.kt\n      :start-after: start-find-iterate\n      :end-before: end-find-iterate\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Restaurant(name=Tropicoso Club, cuisine=Spanish)\n      Restaurant(name=Beso, cuisine=Spanish)\n      Restaurant(name=Sabor Latino Restaurant, cuisine=Spanish)\n      ...\n\n.. note:: Find All Documents\n \n   To find all documents in a collection, pass an empty filter to the ``find()`` method:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/retrieve.txt"
  },
  {
    "code": "      :start-after: start-find-all\n      :end-before: end-find-all\n      :language: kotlin\n      :copyable:\n      :dedent:\n\nModify Find Behavior\n~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``find()`` method by chaining methods to\nthe ``find()`` method call. The following table describes commonly used methods used for\nmodifying queries:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``batchSize()`` \n     - | Limits the number of documents to return per batch. To learn more about\n         batch size, see :manual:`cursor.batchSize() </reference/method/cursor.batchSize/>`\n         in the MongoDB Server manual.\n\n   * - ``collation()`` \n     - | Sets the collation options for the query. \n\n   * - ``comment()`` \n     - | Specifies a string to attach to the query. This can help you trace and interpret the\n         operation in the server logs and in profile data. To learn more about query comments, \n         see :manual:`$comment </reference/operator/query/comment/>` in the MongoDB Server\n         manual.\n   \n   * - ``hint()`` \n     - | Specifies the index to use for the query.\n\n   * - ``limit()``\n     - | Limits the number of documents to be returned from the query.\n\n   * - ``maxTime()`` \n     - | Sets the maximum execution time on the server for this operation.\n\n   * - ``skip()``\n     - | Sets the number of documents to skip.\n\n   * - ``sort()``\n     - | Defines the sort criteria to apply to the query.\n\nThe following example chains the ``limit()`` and ``maxTime()`` methods to limit the\nnumber of documents returned by the query to ``10`` and set a maximum execution time of\n``10000`` milliseconds on the operation:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/retrieve.txt"
  },
  {
    "code": "   :start-after: start-modified-find\n   :end-before: end-modified-find\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nFor a full list of methods that modify the behavior of ``find()``, see the `API documentation <{+api+}/com.mongodb.kotlin.client/-find-iterable/index.html>`__\nfor the ``FindIterable`` class.\n\nAdditional Information\n----------------------\n\nTo learn more about query filters, see :ref:`kotlin-sync-specify-query`.\n\nTo view runnable code examples that retrieve documents by using the {+driver-short+}, see\n:ref:`kotlin-sync-read`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this guide, see the following\nAPI documentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `FindIterable <{+api+}/com.mongodb.kotlin.client/-find-iterable/index.html>`__\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/retrieve.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\nThe following code example shows how to create a database and collection, then\ninsert the sample documents into your collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :start-after: start-sample-data\n   :end-before: end-sample-data\n   :language: kotlin\n   :dedent:\n   :copyable:\n\nExact Match\n-----------\n\nLiteral value queries return documents with an exact match to your query filter.\n\nThe following example specifies a query filter as a parameter to the ``find()``\nmethod. The code returns all documents with a ``color`` field value of ``\"yellow\"``.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-exact\n      :end-before: end-find-exact\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=2, name=bananas, quantity=7, rating=4, color=yellow, type=[cavendish])\n      Fruit(id=4, name=pineapples, quantity=3, rating=5, color=yellow, type=null)\n\nComparison Operators\n--------------------\n\nComparison operators evaluate a document field value against a specified value\nin your query filter. The following is a list of common comparison operators:\n\n- ``$gt``: Greater than\n- ``$lte``: Less than or Equal\n- ``$ne``: Not equal\n\nTo view a full list of comparison operators, see the :manual:`Comparison Query Operators\n</reference/operator/query-comparison/>` guide in the MongoDB Server manual.\n\nThe following example specifies a comparison operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents with a\n``rating`` field value greater than ``2``.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-comparison\n      :end-before: end-find-comparison\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=1, name=apples, quantity=5, rating=3, color=red, type=[fuji, honeycrisp])\n      Fruit(id=2, name=bananas, quantity=7, rating=4, color=yellow, type=[cavendish])\n      Fruit(id=4, name=pineapples, quantity=3, rating=5, color=yellow, type=null)\n\nLogical Operators\n-----------------\n\nLogical operators match documents by using logic applied to the results of two or\nmore sets of expressions. The following is a list of logical operators: \n\n- ``$and``, which returns all documents that match the conditions of *all* clauses\n- ``$or``, which returns all documents that match the conditions of *one* clause\n- ``$nor``, which returns all documents that *do not* match the conditions of any clause\n- ``$not``, which returns all documents that *do not* match the expression\n\nTo learn more about logical operators, see the :manual:`Logical Query Operators\n</reference/operator/query-logical/>` guide in the MongoDB Server manual.\n\nThe following example specifies a logical operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents with a\n``quantity`` field value greater than ``5`` **or** a ``color`` field value of\n``\"yellow\"``.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-logical\n      :end-before: end-find-logical\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=2, name=bananas, quantity=7, rating=4, color=yellow, type=[cavendish])\n      Fruit(id=3, name=oranges, quantity=6, rating=2, color=null, type=[naval, mandarin])\n      Fruit(id=4, name=pineapples, quantity=3, rating=5, color=yellow, type=null)\n\nArray Operators\n---------------\n\nArray operators match documents based on the value or quantity of elements in an\narray field. The following is a list of available array operators:\n\n- ``$all``, which returns documents with arrays that contain all elements in the query\n- ``$elemMatch``, which returns documents if an element in their array field matches all conditions in the query\n- ``$size``, which returns all documents with arrays of a specified size\n\nTo learn more about array operators, see the :manual:`Array Query Operators\n</reference/operator/query-array/>` guide in the MongoDB Server manual.\n\nThe following example specifies an array operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents with a\n``type`` array field containing exactly ``2`` elements.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-array\n      :end-before: end-find-array\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=1, name=apples, quantity=5, rating=3, color=red, type=[fuji, honeycrisp])\n      Fruit(id=3, name=oranges, quantity=6, rating=2, color=null, type=[naval, mandarin])\n\nElement Operators\n-----------------\n\nElement operators query data based on the presence or type of a field.\n\nTo learn more about element operators, see the :manual:`Element Query Operators\n</reference/operator/query-element/>` guide in the MongoDB Server manual.\n\nThe following example specifies an element operator in a query filter as a\nparameter to the ``find()`` method. The code returns all documents that have a\n``color`` field.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-element\n      :end-before: end-find-element\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=1, name=apples, quantity=5, rating=3, color=red, type=[fuji, honeycrisp])\n      Fruit(id=2, name=bananas, quantity=7, rating=4, color=yellow, type=[cavendish])\n      Fruit(id=4, name=pineapples, quantity=3, rating=5, color=yellow, type=null)\n\nEvaluation Operators\n--------------------\n\nEvaluation operators return data based on evaluations of either individual\nfields or the entire collection's documents.\n\nThe following is a list of common evaluation operators:\n\n- ``$text``, which performs a text search on the documents\n- ``$regex``, which returns documents that match a specified regular expression\n- ``$mod``, which performs a :wikipedia:`modulo <w/index.php?title=Modulo&oldid=1226348145>`\n  operation on the value of a field and returns documents where the remainder is a specified\n  value\n\nTo view a full list of evaluation operators, see the :manual:`Evaluation Query Operators\n</reference/operator/query-evaluation/>` guide in the MongoDB Server manual.\n\nThe following example specifies an evaluation operator in a query filter as a\nparameter to the ``find()`` method. The code uses a regular expression to return\nall documents with a ``name`` field value that has at least two consecutive\n``\"p\"`` characters.\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-a-query.kt\n      :start-after: start-find-evaluation\n      :end-before: end-find-evaluation\n      :language: kotlin\n      :dedent:\n   \n   .. output::\n      :visible: false\n\n      Fruit(id=1, name=apples, quantity=5, rating=3, color=red, type=[fuji, honeycrisp])\n      Fruit(id=4, name=pineapples, quantity=3, rating=5, color=yellow, type=null)\n\nAdditional Information\n----------------------\n\nTo learn more about querying documents, see the :manual:`Query Documents\n</tutorial/query-documents/>` guide in the MongoDB Server manual.\n\nTo learn more about retrieving documents with the {+driver-short+}, see\n:ref:`kotlin-sync-retrieve`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-a-query.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n\n.. _kotlin-sync-limit:\n\nLimit\n-----\n\nTo specify the maximum number of documents returned from a read operation,\ncall the ``limit()`` method.\n\nThe following example finds all restaurants that have a ``cuisine`` field value\nof ``\"Italian\"`` and limits the results to 5 documents:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-documents-to-return.kt\n      :start-after: start-limit\n      :end-before: end-limit\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(name=Philadelphia Grille Express, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=Isle Of Capri Resturant, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=Marchis Restaurant, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=Crystal Room, borough=Staten Island, cuisine=Italian)\n      Restaurant(name=Forlinis Restaurant, borough=Manhattan, cuisine=Italian)\n\n.. tip::\n\n   The preceding example returns the first five documents returned by the query in\n   :manual:`natural order </reference/glossary/#std-term-natural-order>`. The following\n   section describes how to return the documents in a specified sort order.\n\n.. _kotlin-sync-sort:\n\nSort\n----\n\nTo return documents in a specified order, call the ``sort()`` method. The ``sort()``\nmethod takes a sort direction as a parameter. To specify the sort direction,\nuse the ``Sorts.ascending()`` or ``Sorts.descending()`` method. The ``Sorts.ascending()``\nmethod sorts values from lowest to highest, and the ``Sorts.descending()`` method sorts\nvalues from highest to lowest. If you don't specify a sort direction, ``sort()`` returns\nthe documents in ascending order.\n\nThe following example returns all documents with a ``cuisine`` field value of\n``\"Italian\"``, sorted by the value of the ``name`` field in ascending order:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-documents-to-return.kt\n      :start-after: start-sort\n      :end-before: end-sort\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(name=(Lewis Drug Store) Locanda Vini E Olii, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=101 Restaurant And Bar, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=44 Sw Ristorante & Bar, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=900 Park, borough=Bronx, cuisine=Italian)\n      Restaurant(name=A Voce, borough=Manhattan, cuisine=Italian)\n      ...\n\n.. _kotlin-sync-skip:\n\nSkip\n----\n\nTo skip a specified number of documents before returning your query results,\ncall the ``skip()`` method and pass in the number of documents to skip. The\n``skip()`` method ignores the specified number of documents in your query\nresults and returns the rest.\n\nThe following example returns all documents that have a ``cuisine`` field value\nof ``\"Italian\"`` and skips the first 10 documents:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-documents-to-return.kt\n      :start-after: start-skip\n      :end-before: end-skip\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(name=San Pietro, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=Manetta's Ristorante, borough=Queens, cuisine=Italian)\n      Restaurant(name=Salvi Restaurant, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=Tommaso Restaurant, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=Da Rosina Restaurant, borough=Manhattan, cuisine=Italian)\n      ...\n\nCombine Limit, Sort, and Skip\n-----------------------------\n\nYou can combine the ``limit()``, ``sort()``, and ``skip()`` methods in a single\noperation. This allows you to set a maximum number of sorted documents to\nreturn, skipping a specified number of documents before returning.\n\nThe following example returns documents with the ``cuisine`` field value of\n``\"Italian\"``. The results are sorted in alphabetical order, skipping the first\n10 documents and limiting the results to 5 documents:\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/read/specify-documents-to-return.kt\n      :start-after: start-limit-sort-skip\n      :end-before: end-limit-sort-skip\n      :language: kotlin\n      :dedent:\n\n   .. output::\n      :visible: false\n\n      Restaurant(name=Acqua, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=Acqua Restaurant, borough=Manhattan, cuisine=Italian)\n      Restaurant(name=Acqua Santa, borough=Brooklyn, cuisine=Italian)\n      Restaurant(name=Acquista Trattoria, borough=Queens, cuisine=Italian)\n      Restaurant(name=Acquolina Catering, borough=Manhattan, cuisine=Italian)\n\n.. note::\n\n   The order in which you call these methods doesn't change the documents\n   that are returned. The driver automatically reorders the calls to perform the\n   sort and skip operations first, and the limit operation afterward.\n\nAdditional Information\n----------------------\n\nFor more information about specifying a query, see :ref:`kotlin-sync-specify-query`.\n\nFor more information about retrieving documents, see :ref:`kotlin-sync-retrieve`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__\n- `limit() <{+api+}/com.mongodb.kotlin.client/-find-iterable/limit.html>`__\n- `sort() <{+api+}/com.mongodb.kotlin.client/-find-iterable/sort.html>`__\n- `skip() <{+api+}/com.mongodb.kotlin.client/-find-iterable/skip.html>`__\n\n",
    "language": "kotlin",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read/specify-documents-to-return.txt"
  },
  {
    "code": "    :language: kotlin\n    :copyable:\n    :linenos:\n    :emphasize-lines: 20-22\n\n.. tip::\n\n  For instructions about how to install the {+driver-short+}, see :ref:`<kotlin-sync-download-install>`.\n\nFind Documents\n--------------\n\nThe following example retrieves a list of documents that match the criteria specified by the\ngiven filter:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-find\n   :end-before: end-find\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``find()`` method, see the :ref:`kotlin-sync-retrieve-find` guide.\n\nCount Documents in a Collection\n-------------------------------\n\nThe following example returns the number of documents in the specified collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-count-all\n   :end-before: end-count-all\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``countDocuments()`` method, see the\n:ref:`kotlin-sync-accurate-count` section of the Count Documents guide.\n\nCount Documents Returned from a Query\n-------------------------------------\n\nThe following example returns the number of documents that match the criteria specified by\nthe given filter:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-count-query\n   :end-before: end-count-query\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``countDocuments()`` method, see the\n:ref:`kotlin-sync-accurate-count` section of the Count Documents guide.\n\nEstimated Document Count\n------------------------\n\nThe following example returns an approximate number of documents in the specified\ncollection based on collection metadata:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-estimated-count\n   :end-before: end-estimated-count\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``estimatedDocumentCount()`` method, see the\n:ref:`kotlin-sync-estimated-count` section of the Count Documents guide.\n\nRetrieve Distinct Values\n------------------------\n\nThe following example returns all distinct values of the specified field name in a given\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-distinct\n   :end-before: end-distinct\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``distinct()`` method, see the\n:ref:`kotlin-sync-distinct` guide.\n\nMonitor Data Changes\n--------------------\n\nThe following example creates a change stream for a given collection and prints out\nsubsequent change events in that collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "   :start-after: start-watch\n   :end-before: end-watch\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``watch()`` method, see the\n:ref:`kotlin-sync-change-streams` guide.\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/read.txt"
  },
  {
    "code": "         :language: kotlin\n         :start-after: start-default-cred-string\n         :end-before: end-default-cred-string\n         :dedent:\n      \n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the default authentication mechanism by using the\n      ``MongoCredential`` class, use the ``createCredential()`` method.\n      Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :start-after: start-default-mongo-cred\n         :end-before: end-default-mongo-cred\n         :dedent:\n\nFor more information about using SCRAM with MongoDB, see the \n:manual:`SCRAM </core/security-scram/>` section of the {+mdb-server+} manual.\n\n.. _kotlin-sync-auth-scramsha256:\n\nSCRAM-SHA-256\n-------------\n\n.. note::\n\n   ``SCRAM-SHA-256`` is the default authentication method for {+mdb-server+} \n   versions 4.0 and later.\n\n``SCRAM-SHA-256``, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__, \nis a Salted Challenge Response Authentication Mechanism\n(SCRAM) that uses your username and password, encrypted with the ``SHA-256``\nalgorithm, to authenticate your user.\n\nThe following code snippets show how to specify the authentication mechanism by\nusing the following placeholders:\n\n* ``db_username``: Your MongoDB database username.\n* ``db_password``: Your MongoDB database user's password.\n* ``hostname``: The network address of your MongoDB deployment, accessible by your client.\n* ``port``: The port number of your MongoDB deployment.\n* ``authenticationDb``: The MongoDB database that contains your user's\n  authentication data. If you omit this parameter, the driver uses the\n  default value ``admin``.\n\nSelect the :guilabel:`Connection String` or the :guilabel:`MongoCredential`\ntab below for instructions and sample code for specifying this authentication\nmechanism:\n\n.. tabs::\n\n   .. tab::\n      :tabid: Connection String\n\n      To specify the ``SCRAM-SHA-256`` authentication mechanism by using a\n      connection string, assign the ``authMechanism`` parameter the value\n      ``SCRAM-SHA-256`` in your connection string. Your code to instantiate\n      a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-scramsha256-cred-string\n         :end-before: end-scramsha256-cred-string\n\n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the default authentication mechanism by using the\n      ``MongoCredential`` class, use the\n      `createScramSha256Credential() <{+core-api+}/com/mongodb/MongoCredential.html#createScramSha256Credential(java.lang.String,java.lang.String,char[])>`__\n      method. Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-scramsha256-mongo-cred\n         :end-before: end-scramsha256-mongo-cred\n\n.. _kotlin-sync-auth-scramsha1:\n\nSCRAM-SHA-1\n-----------\n\n.. note::\n   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions\n   {+mdb-server+} versions 3.6 and earlier.\n\n``SCRAM-SHA-1``, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__, \nis a Salted Challenge Response Authentication Mechanism (SCRAM) that uses your\nusername and password, encrypted with the ``SHA-1`` algorithm, to authenticate\nyour user.\n\nThe following code snippets show how to specify the authentication mechanism \nby using the following placeholders:\n\n* ``db_username``: Your MongoDB database username.\n* ``db_password``: Your MongoDB database user's password.\n* ``hostname``: The network address of your MongoDB deployment, accessible by your client.\n* ``port``: The port number of your MongoDB deployment.\n* ``authenticationDb``: The MongoDB database that contains your user's\n  authentication data. If you omit this parameter, the driver uses the\n  default value ``admin``.\n\nSelect the :guilabel:`Connection String` or the :guilabel:`MongoCredential`\ntab below for instructions and sample code for specifying this authentication\nmechanism:\n\n.. tabs::\n\n   .. tab::\n      :tabid: Connection String\n\n      To specify the ``SCRAM-SHA-1`` authentication mechanism by using a\n      connection string, assign the ``authMechanism`` parameter the value\n      ``SCRAM-SHA-1`` in your connection string. Your code to instantiate\n      a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-scramsha1-cred-string\n         :end-before: end-scramsha1-cred-string\n\n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the default authentication mechanism by using the\n      ``MongoCredential`` class, use the\n      `createScramSha1Credential() <{+core-api+}/com/mongodb/MongoCredential.html#createScramSha1Credential(java.lang.String,java.lang.String,char[])>`__\n      method. Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-scramsha1-mongo-cred\n         :end-before: end-scramsha1-mongo-cred\n\n.. _kotlin-sync-auth-x509:\n\nMONGODB-X509\n------------\n\nThe ``MONGODB-X509`` authentication mechanism uses\n:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to\nauthenticate your user. When you specify the ``X.509``\nauthentication mechanism, the server authenticates the connection by using\nthe subject name of the client certificate.\n\nThe following code snippets show how to specify the authentication mechanism \nby using the following placeholders:\n\n* ``hostname``: The network address of your MongoDB deployment, accessible by your client.\n* ``port``: The port number of your MongoDB server.\n* ``authenticationDb``: The MongoDB database that contains your user's\n  authentication data. If you omit this parameter, the driver uses the\n  default value ``admin``.\n\nSelect the :guilabel:`Connection String` or the :guilabel:`MongoCredential`\ntab below for instructions and sample code for specifying this authentication\nmechanism:\n\n.. tabs::\n\n   .. tab::\n      :tabid: Connection String\n\n      To specify the ``X.509`` authentication mechanism by using a connection\n      string, assign the ``authMechanism`` parameter the value ``MONGODB-X509``\n      and enable TLS by assigning the ``tls``\n      parameter a ``true`` value. Your code to instantiate a ``MongoClient``\n      should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after:  start-x509-connect-string\n         :end-before: end-x509-connect-string\n      \n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the ``X.509`` authentication mechanism by using the\n      ``MongoCredential`` class, use the\n      `createMongoX509Credential() <{+core-api+}/com/mongodb/MongoCredential.html#createMongoX509Credential(java.lang.String)>`__\n      method. Also, enable TLS by calling the\n      `applyToSslSettings() <{+core-api+}/com/mongodb/MongoClientSettings.Builder.html#applyToSslSettings(com.mongodb.Block)>`__\n      method and setting the ``enabled`` property to ``true`` in the\n      `SslSettings.Builder <{+core-api+}/com/mongodb/connection/SslSettings.Builder.html>`__\n      block. Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after:  start-x509-mcred\n         :end-before: end-x509-mcred\n\nFor additional information on configuring your application to use\ncertificates as well as TLS/SSL options, see the\n:ref:`TLS/SSL guide <kotlin-sync-tls>`.\n\n.. _kotlin-sync-auth-aws:\n\nMONGODB-AWS\n-----------\n\n.. note::\n\n   The MONGODB-AWS authentication mechanism is available for MongoDB\n   deployments on MongoDB Atlas.\n\nThe ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services\nIdentity and Access Management (AWS IAM) credentials to authenticate your\nuser. To learn more about configuring MongoDB Atlas, see the\n:atlas:`Set Up Authentication with AWS IAM </security/aws-iam-authentication>`\nguide.\n\nTo instruct the driver to use this authentication mechanism, you can either\nspecify ``MONGODB-AWS`` as a parameter in the connection string or call\nthe ``MongoCredential.createAwsCredential()`` factory method.\n\nIn the following sections, you can learn different ways to specify the \n``MONGODB-AWS`` authentication mechanism and provide your AWS IAM credentials.\n\nThese sections contain code examples that use the following placeholders:\n\n* ``awsKeyId``: The value of your AWS access key ID\n* ``awsSecretKey``: The value of your AWS secret access key\n* ``atlasUri``: The network address of your MongoDB Atlas deployment\n* ``hostname``: The hostname of your MongoDB Atlas deployment\n* ``port``: The port of your MongoDB Atlas deployment\n* ``awsSessionToken``: The value of your AWS session token\n\n.. _kotlin-mongodb-aws-sdk:\n\nAWS SDK \n~~~~~~~\n\n.. note:: End of Support for AWS SDK for Java v1\n\n   The AWS SDK for Java v1 will reach end of support on December 31, 2025. \n   AWS recommends migrating to AWS SDK for Java v2. For more information, \n   see the `end of support announcement \n   <https://aws.amazon.com/blogs/developer/announcing-end-of-support-for-aws-sdk-for-java-v1-x-on-december-31-2025/>`__ \n   on the AWS site.\n\nAWS provides software development kits (SDKs) for Java v1 and v2.\nThe AWS SDK offers the following features:\n\n- Multiple options for obtaining credentials\n- Credential caching, which helps your application avoid rate limiting\n- Credential provider management for use with the `Elastic Kubernetes Service <https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html>`__\n\nTo use the AWS SDK for ``MONGODB-AWS`` authentication, you must\nperform the following steps:\n\n1. Specify the authentication mechanism.\n#. Add the SDK as a dependency to your project.\n#. Supply your credentials by using one of the methods in the credential\n   provider chain.\n\nTo specify the ``MONGODB-AWS`` authentication mechanism by using a ``MongoCredential``\nobject, call the ``MongoCredential.createAwsCredential()`` factory method\nand add the ``MongoCredential`` instance to your ``MongoClient``, as shown\nin the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-sdk-mcred\n   :end-before: end-aws-sdk-mcred\n   :emphasize-lines: 1, 9\n\nTo specify the ``MONGODB-AWS`` authentication mechanism in the connection string, \nadd it as a parameter, as shown in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-sdk-cred-string\n   :end-before: end-aws-sdk-cred-string\n\nTo add the AWS SDK as a dependency to your project, see the following\nAWS documentation for the version you need:\n\n- For the **AWS SDK for Java v2**, see the `Setting Up <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup.html>`__\n  guide.\n- For the **AWS SDK for Java v1**, see the `Getting Started <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/getting-started.html>`__\n  guide.\n\n.. note::\n\n   For the AWS SDK for Java v2, the Java driver currently tests by using the\n   ``software.amazon.awssdk:auth:2.18.9`` dependency.\n\n   For the AWS SDK for Java v1, the Java driver currently tests by using the\n   ``com.amazonaws:aws-java-sdk-core:1.12.337`` dependency.\n\nTo supply your credentials, see the following AWS documentation for the\nversion you need:\n\n- To learn more about the **AWS SDK for Java v2** class the driver uses to\n  get the credentials, see the `DefaultCredentialsProvider <https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/DefaultCredentialsProvider.html>`__\n  API documentation.\n\n  Learn how to supply your credentials to this class from the\n  `Use the default credential provider chain <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html#credentials-chain>`__\n  section.\n\n- To learn more about the **AWS SDK for Java v1** class the driver uses to\n  get the credentials, see the `DefaultAWSCredentialsProviderChain <https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html>`__\n  API documentation.\n\n  Learn how to supply your credentials to this class from the\n  `Using the Default Credential Provider Chain <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>`__\n  section.\n\n.. note::\n\n   If you include both v1 and v2 of the AWS SDK for Java in your project,\n   you must use the v2 methods to supply your credentials.\n\n.. _kotlin-mongodb-aws-env-variables:\n\nSpecify Your Credentials in the Environment\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can provide your AWS IAM credentials by instructing the driver to\nuse the ``MONGODB-AWS`` authentication mechanism and by setting the\nappropriate environment variables.\n\nTo use the environment variables to supply your credentials, you must perform\nthe following:\n\n1. Specify the authentication mechanism.\n#. Add the appropriate environment variables.\n\nYou can specify the ``MONGODB-AWS`` authentication mechanism by using a \n``MongoCredential`` object or in the connection string.\n\nTo specify the authentication mechanism by using a ``MongoCredential`` object,\ncall the ``MongoCredential.createAwsCredential()`` factory method and add the\n``MongoCredential`` instance to your ``MongoClient``, as shown in the following\nexample:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-env-mcred\n   :end-before: end-aws-env-mcred\n   :emphasize-lines: 1, 9\n\nTo specify the ``MONGODB-AWS`` authentication mechanism in the connection \nstring, add it as a parameter as shown in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-env-cred-string\n   :end-before: end-aws-env-cred-string\n\nThe next examples show how to provide your credentials by setting environment\nvariables for the following types of authentication:\n\n- Programmatic access keys\n- ECS container credentials\n- EC2 container credentials\n\nThe following example shows how you can set your **programmatic access keys**\nin environment variables by using ``bash`` or a similar shell:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-mcred\n   :end-before: end-aws-mcred\n   :emphasize-lines: 1, 9\n\nIf you need to specify an AWS session token, pass it to the\n`withMechanismProperty() <{+core-api+}/com/mongodb/MongoCredential.html#withMechanismProperty(java.lang.String,T)>`__\nmethod, as shown in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-mcred-wmechprop\n   :end-before: end-aws-mcred-wmechprop\n   :emphasize-lines: 1, 2, 10\n\nTo refresh your credentials, you can declare a ``Supplier`` lambda expression\nthat returns new credentials, as shown in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-lambda-expression\n   :end-before: end-aws-lambda-expression\n   :emphasize-lines: 4-6, 9\n\nIf you must provide AWS IAM credentials in a connection string, you can add \nit to your ``MongoClientSettings`` object by calling the `applyConnectionString() <{+core-api+}/com/mongodb/MongoClientSettings.Builder.html#applyConnectionString(com.mongodb.ConnectionString)>`__\nmethod:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after:  start-aws-apply-connect-string\n   :end-before: end-aws-apply-connect-string\n   :emphasize-lines: 2, 5\n\nAdditional Information\n----------------------\n\nTo learn more about authenticating to MongoDB, see\n:manual:`Authentication </core/authentication/>` in the {+mdb-server+} manual.\n\nTo learn more about managing users of your MongoDB deployment, see\n:manual:`Users </core/security-users/>` in the {+mdb-server+} manual.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/authentication.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after:  start-gssapi-connect-string\n         :end-before: end-gssapi-connect-string\n\n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the GSSAPI authentication mechanism using the\n      ``MongoCredential`` class, use the ``createGSSAPICredential()``\n      method. Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after:  start-gssapi-mongo-cred\n         :end-before: end-gssapi-mongo-cred\n\nIn order to acquire a\n`Kerberos ticket <https://docs.oracle.com/en/java/javase/11/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosTicket.html>`__,\nthe GSSAPI Java libraries require you to specify the realm and Key Distribution\nCenter (KDC) system properties. See the sample settings in the following example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-gssapi-properties-connect-string\n         :end-before: end-gssapi-properties-connect-string\n\n   .. tab::\n      :tabid: MongoCredential\n\n      To specify one of the GSSAPI additional properties, call the\n      ``withMechanismProperty()`` method on your ``MongoCredential``\n      instance and pass the property name and value as parameters. Use the\n      property name constants defined in the ``MongoCredential`` class:\n\n      - `SERVICE_NAME_KEY <{+core-api+}/com/mongodb/MongoCredential.html#SERVICE_NAME_KEY>`__\n      - `CANONICALIZE_HOST_NAME_KEY <{+core-api+}/com/mongodb/MongoCredential.html#CANONICALIZE_HOST_NAME_KEY>`__\n      - `JAVA_SUBJECT_KEY <{+core-api+}/com/mongodb/MongoCredential.html#JAVA_SUBJECT_KEY>`__\n      - `JAVA_SASL_CLIENT_PROPERTIES_KEY <{+core-api+}/com/mongodb/MongoCredential.html#JAVA_SASL_CLIENT_PROPERTIES_KEY>`__\n      - `JAVA_SUBJECT_PROVIDER_KEY <{+core-api+}/com/mongodb/MongoCredential.html#JAVA_SUBJECT_PROVIDER_KEY>`__\n\n      Select the **SERVICE_NAME_KEY** or **JAVA_SUBJECT_KEY** tab to\n      see sample code to instantiate a ``MongoCredential`` that uses GSSAPI and\n      the selected property:\n\n      .. tabs::\n\n         .. tab::\n            :tabid: SERVICE_NAME_KEY\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "               :language: kotlin\n               :dedent:\n               :start-after: start-gssapi-service-name-key\n               :end-before: end-gssapi-service-name-key     \n\n         .. tab::\n            :tabid: JAVA_SUBJECT_KEY\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "               :language: kotlin\n               :dedent:\n               :start-after: start-gssapi-java-subject-key\n               :end-before: end-gssapi-java-subject-key      \n\nBy default, the Kotlin driver caches Kerberos tickets by ``MongoClient`` instance.\nIf your deployment needs to frequently create and destroy ``MongoClient`` instances,\nyou can change the default Kerberos ticket caching behavior to cache by process\nto improve performance.\n\n.. tabs::\n   :hidden:\n\n   .. tab::\n      :tabid: Connection String\n\n      To cache Kerberos tickets by process, you must use the ``MongoCredential`` authentication\n      mechanism, as the connection string authentication mechanism does not support the ``JAVA_SUBJECT_PROVIDER``\n      mechanism property. If you would like to cache Kerberos tickets by process, select the :guilabel:`MongoCredential`\n      tab to learn how to accomplish this.\n\n   .. tab::\n      :tabid: MongoCredential\n\n      To cache Kerberos tickets by process, you must specify the ``JAVA_SUBJECT_PROVIDER``\n      mechanism property and provide a\n      `KerberosSubjectProvider <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/KerberosSubjectProvider.html#%3Cinit%3E()>`__\n      in your ``MongoCredential`` instance. The code to configure the Kotlin driver to cache Kerberos tickets\n      by process should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-gssapi-java-subject-provider\n         :end-before: end-gssapi-java-subject-provider\n\n.. note::\n\n   On Windows, Oracle's JRE uses `LSA <https://docs.microsoft.com/en-us/windows/win32/secauthn/lsa-authentication>`__\n   rather than `SSPI <https://docs.microsoft.com/en-us/windows/win32/secauthn/sspi>`__\n   in its implementation of GSSAPI which limits interoperability with\n   Windows Active Directory and implementations of single sign-on. See the\n   following articles for more information:\n\n   - `JDK-8054026 <https://bugs.openjdk.java.net/browse/JDK-8054026>`__\n   - `JDK-6722928 <https://bugs.openjdk.java.net/browse/JDK-6722928>`__\n   - `SO 23427343 <https://stackoverflow.com/questions/23427343/cannot-retrieve-tgt-despite-allowtgtsessionkey-registry-entry>`__\n\n.. _plain-auth-mechanism:\n\nLDAP (PLAIN)\n------------\n\n*Available in MongoDB Enterprise Edition 3.4 and later.*\n\nYou can authenticate to a Lightweight Directory Access Protocol (LDAP)\nserver using your directory server username and password.\n\n.. tip::\n\n   The authentication mechanism is named ``PLAIN`` instead of ``LDAP`` since it\n   authenticates using the `PLAIN Simple Authentication and Security Layer\n   (SASL) defined in RFC-4616 <https://tools.ietf.org/html/rfc4616>`_.\n\nYou can specify this authentication mechanism by setting the ``authMechanism``\nparameter to ``PLAIN`` and including your LDAP username and password in the\n:manual:`connection string </reference/connection-string/>`.\n\nThe following code snippets show how to specify the authentication mechanism,\nusing the following placeholders:\n\n* ``LDAP username``: Your LDAP username\n* ``password``: Your LDAP user's password\n* ``hostname``: The network address of your MongoDB deployment, accessible by your client\n* ``port``: The port number of your MongoDB deployment\n\nSelect the :guilabel:`Connection String` or the :guilabel:`MongoCredential`\ntab below for instructions and sample code for specifying this authentication\nmechanism:\n\n.. tabs::\n\n   .. tab::\n      :tabid: Connection String\n\n      To specify the LDAP (PLAIN) authentication mechanism using a connection\n      string:\n\n      - Assign the ``authMechanism`` URL parameter to the value ``PLAIN``\n      - *(optional)* Assign the ``authSource`` URL parameter to the value ``$external``\n\n      .. note::\n\n         If you specify the ``PLAIN`` mechanism, you cannot assign\n         ``authSource`` to any value other than ``$external``.\n\n      Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-ldap-connect-string \n         :end-before: end-ldap-connect-string\n      \n   .. tab::\n      :tabid: MongoCredential\n\n      To specify the LDAP (PLAIN) authentication mechanism using the\n      ``MongoCredential`` class, use the ``createPlainCredential()``\n      method. Your code to instantiate a ``MongoClient`` should resemble the following:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-ldap-mongo-cred\n         :end-before: end-ldap-mongo-cred\n\n.. _kotlin-oidc:\n\nMONGODB-OIDC\n------------\n\n.. important::\n\n   The MONGODB-OIDC authentication mechanism requires {+mdb-server+} v7.0 or later running\n   on a Linux platform.\n\nThe following sections describe how to use the MONGODB-OIDC\nauthentication mechanism to authenticate to various platforms.\n\nFor more information about the MONGODB-OIDC authentication mechanism, see\n:manual:`OpenID Connect Authentication </core/security-oidc/>` and\n:manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`\nin the MongoDB Server manual.\n\n.. _kotlin-mongodb-oidc-azure-imds:\n\nAzure IMDS\n~~~~~~~~~~\n\nIf your application runs on an Azure VM, or otherwise uses the\n`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__\n(IMDS), you can authenticate to MongoDB by using the {+driver-short+}'s built-in Azure\nsupport.\n\nYou can specify Azure IMDS OIDC authentication either by \nusing a ``MongoCredential`` instance or by specifying your credentials\nin the connection string.\n\nSelect from the :guilabel:`Connection String` or :guilabel:`MongoCredential` tabs to\nsee the corresponding syntax.\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: mongodb-azure-imds-connection-string\n    \n      Replace the ``<percent-encoded audience>`` placeholder in the\n      following code with the percent-encoded value of the audience server\n      parameter configured on your MongoDB deployment.\n\n      The comma (``,``) character and its encoding (``%2C``) are\n      reserved, and using these characters in a value causes the\n      driver to interpret commas as delimiters of key-value pairs.\n      You must specify values that contain commas in a ``MongoCredential`` instance, as\n      demonstrated in the :guilabel:`MongoCredential` tab.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-oidc-azure-connect-str  \n         :end-before: end-oidc-azure-connect-str\n\n   .. tab:: MongoCredential\n      :tabid: mongodb-azure-mongo-credential\n\n      Replace the ``<OIDC principal>`` placeholder with the client ID or application ID of the\n      Azure managed identity or enterprise application. Replace the ``<audience>``\n      placeholder with the value of the\n      ``audience`` server parameter configured on your MongoDB deployment.\n      \n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-oidc-azure-mongo-cred\n         :end-before: end-oidc-azure-mongo-cred\n\n.. _kotlin-mongodb-oidc-gcp-imds:\n\nGCP IMDS\n~~~~~~~~\n\nIf your application runs on a Google Compute Engine VM, or otherwise uses the\n`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,\nyou can authenticate to MongoDB by using the {+driver-short+}'s built-in GCP\nsupport.\n\nYou can specify GCP IMDS OIDC authentication either by \nusing a ``MongoCredential`` instance or by specifying your credentials\nin the connection string.\n\nSelect from the :guilabel:`Connection String` or :guilabel:`MongoCredential` tabs to\nsee the corresponding syntax.\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: mongodb-gcp-imds-connection-string\n    \n      Replace the ``<percent-encoded audience>`` placeholder in the\n      following code with the percent-encoded value of the audience server\n      parameter configured on your MongoDB deployment.\n\n      The comma (``,``) character and its encoding (``%2C``) are\n      reserved, and using these characters in a value causes the\n      driver to interpret commas as delimiters of key-value pairs.\n      You must specify values that contain commas in a ``MongoCredential`` instance, as\n      demonstrated in the :guilabel:`MongoCredential` tab.\n     \n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-oidc-gcp-connect-str\n         :end-before: end-oidc-gcp-connect-str\n\n   .. tab:: MongoCredential\n      :tabid: mongodb-gcp-mongo-credential\n\n      Replace the ``<audience>`` placeholder with the value of the\n      ``audience`` server parameter configured on your MongoDB deployment.\n      \n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "         :language: kotlin\n         :dedent:\n         :start-after: start-oidc-gcp-mongo-cred\n         :end-before: end-oidc-gcp-mongo-cred\n\nCustom Callback\n~~~~~~~~~~~~~~~\n\nThe {+driver-short+} doesn't offer built-in support for all platforms, including\nAzure Functions and Azure Kubernetes Service (AKS). Instead, you\nmust define a custom callback to use OIDC to authenticate from these platforms.\nTo do so, use the ``\"OIDC_CALLBACK\"`` authentication property, as shown in the following\ncode example:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after: start-oidc-custom-callback\n   :end-before: end-oidc-custom-callback\n\nThe value of the ``\"OIDC_CALLBACK\"`` property must be a lambda or other implementation\nof the ``OidcCallback`` functional interface that accepts an ``OidcCallbackContext``\nas a parameter and returns an ``OidcCallbackResult``.\n\nThe following example uses an example callback to retrieve an OIDC token from a file\nnamed ``\"access-token.dat\"`` in the local file system:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "   :language: kotlin\n   :dedent:\n   :start-after: start-oidc-custom-callback-ex\n   :end-before: end-oidc-custom-callback-ex\n\nAPI Documentation\n-----------------\n\nTo learn more about the classes and methods for authenticating your application \nwith {+driver-short+}, see the following API documentation:\n\n- `MongoClient.create() <{+api+}/com.mongodb.kotlin.client/-mongo-client/-factory/index.html>`__\n- `MongoClient <{+api+}/com.mongodb.kotlin.client/-mongo-client/index.html>`__\n- `MongoClientSettings.Builder <{+java-api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html>`__\n- `MongoCredential <{+java-api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/security/enterprise-auth.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-remove-index\n   :end-before: end-remove-index\n   :dedent:\n\n.. note::\n\n   You cannot remove a single field from a compound text index. You must\n   drop the entire index and create a new one to update the indexed\n   fields.\n\nDelete All Indexes\n~~~~~~~~~~~~~~~~~~\n\nYou can drop all indexes by calling the ``dropIndexes()`` method on your collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/work-with-indexes.txt"
  },
  {
    "code": "   :language: kotlin\n   :start-after: start-remove-all-indexes\n   :end-before: end-remove-all-indexes\n   :dedent:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `createIndex() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/create-index.html>`__\n- `createIndexes() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/create-indexes.html>`__\n- `dropIndex() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/drop-index.html>`__\n- `dropIndexes() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/drop-indexes.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/work-with-indexes.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nDefine the Write Operations\n---------------------------\n\nFor each write operation you want to perform, create a corresponding\ninstance of one of the following operation classes that inherit from the\ngeneric ``WriteModel`` class:\n\n- ``InsertOneModel``\n- ``UpdateOneModel``\n- ``UpdateManyModel``\n- ``ReplaceOneModel``\n- ``DeleteOneModel``\n- ``DeleteManyModel``\n\nThen, pass a list of these instances to the ``bulkWrite()`` method.\n\nThe following sections show how to create and use instances of the\npreceding classes. The :ref:`kotlin-sync-bulkwrite-method` section\ndemonstrates how to pass a list of models to the ``bulkWrite()`` method\nto perform the bulk operation.\n\nInsert Operations\n~~~~~~~~~~~~~~~~~\n\nTo perform an insert operation, create an ``InsertOneModel`` instance and specify\nthe document you want to insert.\n\nThe following example creates an instance of ``InsertOneModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-insert-one\n   :end-before: end-bulk-insert-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo insert multiple documents, create an instance of ``InsertOneModel``\nfor each document.\n\n.. important::\n\n   When performing a bulk operation, the ``InsertOneModel`` cannot\n   insert a document with an ``_id`` that already exists in the\n   collection. In this situation, the driver throws a\n   ``MongoBulkWriteException``.\n\nUpdate Operations\n~~~~~~~~~~~~~~~~~\n\nTo update a document, create an instance of ``UpdateOneModel`` and pass\nthe following arguments:\n\n- A **query filter** that specifies the criteria used to match documents in your collection\n- The update operation you want to perform. For more information about update\n  operations, see the :manual:`Field Update Operators\n  </reference/operator/update-field/>` guide in the {+mdb-server+} manual.\n\nAn ``UpdateOneModel`` instance specifies an update for *the first*\ndocument that matches your query filter.\n\nThe following example creates an instance of ``UpdateOneModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-one\n   :end-before: end-bulk-update-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo update multiple documents, create an instance of ``UpdateManyModel`` and pass\nthe same arguments as for ``UpdateOneModel``. The ``UpdateManyModel``\nclass specifies updates for *all* documents that match your query\nfilter.\n\nThe following example creates an instance of ``UpdateManyModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-update-many\n   :end-before: end-bulk-update-many\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nReplace Operations\n~~~~~~~~~~~~~~~~~~\n\nA replace operation removes all fields and values of a specified document and\nreplaces them with new fields and values that you specify. To perform a\nreplace operation, create an instance of ``ReplaceOneModel`` and pass a\nquery filter and the fields and values you want to replace the matching\ndocument with.\n\nThe following example creates an instance of ``ReplaceOneModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-replace-one\n   :end-before: end-bulk-replace-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo replace multiple documents, you must create an instance of\n``ReplaceOneModel`` for each document.\n\nDelete Operations\n~~~~~~~~~~~~~~~~~\n\nTo delete a document, create an instance of ``DeleteOneModel`` and pass a\nquery filter specifying the document you want to delete. A\n``DeleteOneModel`` instance provides instructions to delete\nonly *the first* document that matches your query filter.\n\nThe following example creates an instance of ``DeleteOneModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-one\n   :end-before: end-bulk-delete-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo delete multiple documents, create an instance of ``DeleteManyModel`` and pass a\nquery filter specifying the document you want to delete. An instance of\n``DeleteManyModel`` provides instructions to remove *all* documents that\nmatch your query filter.\n\nThe following example creates an instance of ``DeleteManyModel``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-delete-many\n   :end-before: end-bulk-delete-many\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. _kotlin-sync-bulkwrite-method:\n\nPerform the Bulk Operation\n--------------------------\n\nAfter you define a model instance for each operation you want to perform,\npass a list of these instances to the ``bulkWrite()`` method.\nBy default, the method runs the operations in the order\nspecified by the list of models.\n\nThe following example performs multiple write operations by using the\n``bulkWrite()`` method:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-bulk-write-unordered\n   :end-before: end-bulk-write-unordered\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nIf any of the write operations in an unordered bulk write fail, the {+driver-short+}\nreports the errors only after attempting all operations.\n\n.. note::\n\n   Unordered bulk operations do not guarantee an order of execution. The\n   order can differ from the way you list them to optimize the runtime.\n\nReturn Value\n------------\n\nThe ``bulkWrite()`` method returns a ``BulkWriteResult`` object. You can\naccess the following information from a ``BulkWriteResult`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``wasAcknowledged()``\n     - | Indicates if the server acknowledged the write operation.\n         \n   * - ``getDeletedCount()``\n     - | The number of documents deleted, if any.\n\n   * - ``getInsertedCount()``\n     - | The number of documents inserted, if any.\n\n   * - ``getInserts()``\n     - | The list of inserted documents, if any.\n\n   * - ``getMatchedCount()``\n     - | The number of documents matched for an update, if applicable.\n\n   * - ``getModifiedCount()``\n     - | The number of documents modified, if any.\n\n   * - ``getUpserts()``\n     - | The list of upserted documents, if any.\n\nAdditional Information\n----------------------\n\nTo learn how to perform individual write operations, see the following guides:\n\n- :ref:`kotlin-sync-write-insert`\n- :ref:`kotlin-sync-write-update`\n- :ref:`kotlin-sync-write-delete`\n\n.. - :ref:`kotlin-sync-write-replace`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `bulkWrite() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/bulk-write.html>`__\n- `InsertOneModel <{+core-api+}/com/mongodb/client/model/InsertOneModel.html>`__\n- `UpdateOneModel <{+core-api+}/com/mongodb/client/model/UpdateOneModel.html>`__\n- `UpdateManyModel <{+core-api+}/com/mongodb/client/model/UpdateManyModel.html>`__\n- `ReplaceOneModel <{+core-api+}/com/mongodb/client/model/ReplaceOneModel.html>`__\n- `DeleteOneModel <{+core-api+}/com/mongodb/client/model/DeleteOneModel.html>`__\n- `DeleteManyModel <{+core-api+}/com/mongodb/client/model/DeleteManyModel.html>`__\n- `BulkWriteOptions <{+core-api+}/com/mongodb/client/model/BulkWriteOptions.html>`__\n- `BulkWriteResult <{+core-api+}/com/mongodb/bulk/BulkWriteResult.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/bulk-write.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nDelete Operations\n-----------------\n\nYou can perform delete operations in MongoDB by using the following methods:\n\n- ``deleteOne()``, which deletes *the first document* that matches the search criteria\n- ``deleteMany()``, which deletes *all documents* that match the search criteria\n\nEach delete method requires a **query filter** document, which specifies the\nsearch criteria that determine which documents to select for removal.\nTo learn more about query filters, see the :ref:`kotlin-sync-specify-query` guide.\n\nDelete One Document\n~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``deleteOne()`` method to remove a\ndocument in which the value of the ``name`` field is ``\"Happy Garden\"``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-one\n   :end-before: end-delete-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nDelete Multiple Documents\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``deleteMany()`` method to remove all documents\nin which the value of the ``borough`` field is ``\"Brooklyn\"`` and the\nvalue of the ``name`` field is ``\"Starbucks\"``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-many\n   :end-before: end-delete-many\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nCustomize the Delete Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``deleteOne()`` and ``deleteMany()`` methods optionally accept a\n``DeleteOptions`` parameter, which represents options you can use to\nconfigure the delete operation. If you don't specify any\noptions, the driver performs the delete operation with default settings.\n\nThe following table describes the setter methods that you can use to\nconfigure a ``DeleteOptions`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``collation()``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``hint()``\n     - | Specifies the index to use when matching documents.\n         For more information, see the :manual:`hint statement </reference/command/delete/#std-label-deletes-array-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``hintString()``\n     - | Specifies the index as a string to use when matching documents.\n         For more information, see the :manual:`hint statement </reference/command/delete/#std-label-deletes-array-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``let()``\n     - | Provides a map of parameter names and values to set top-level\n         variables for the operation. Values must be constant or closed\n         expressions that don't reference document fields. For more information,\n         see the :manual:`let statement\n         </reference/command/delete/#std-label-delete-let-syntax>` in the\n         {+mdb-server+} manual.\n\n   * - ``comment()``\n     - | Sets a comment to attach to the operation. For more\n         information, see the :manual:`delete command\n         fields </reference/command/delete/#command-fields>` guide in the\n         {+mdb-server+} manual for more information.\n\nModify Delete Example\n`````````````````````\n\nThe following code creates options and uses the ``comment()`` method to\nadd a comment to the delete operation. Then, the example uses the\n``deleteMany()`` method to delete all documents in the ``restaurants``\ncollection in which the value of the ``name`` field includes the string\n``\"Red\"``.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-delete-options\n   :end-before: end-delete-options\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. tip::\n\n   If you use the the ``deleteOne()`` method in the preceding example\n   instead of the ``deleteMany()`` method, the driver deletes only the\n   first document that matches the query filter.\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``deleteOne()`` and ``deleteMany()`` methods each return a\n``DeleteResult`` instance. You can access the following information from\na ``DeleteResult`` instance:\n\n- ``deletedCount``, which indicates the number of documents deleted\n- ``wasAcknowledged()``, which returns ``true`` if the server\n  acknowledges the result\n\nIf the query filter does not match any documents, the driver doesn't delete any\ndocuments and the value of ``deletedCount`` is ``0``.\n\n.. note::\n\n   If the ``wasAcknowledged()`` method returns ``false``, trying to\n   access the ``deletedCount`` property results in an\n   ``InvalidOperation`` exception. The driver cannot \n   determine these values if the server does not acknowledge the write\n   operation.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `deleteOne() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/delete-one.html>`__\n- `deleteMany() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/delete-many.html>`__\n- `DeleteResult <{+core-api+}/com/mongodb/client/result/DeleteResult.html>`__\n\n.. .. _kotlin-sync-delete-instruqt-lab:\n\n.. .. instruqt:: /mongodb-docs/tracks/...\n..    :title: deleteMany() Lesson\n..    :drawer:\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/delete.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nThe ``_id`` Field\n-----------------\n\nIn a MongoDB collection, each document *must* contain an ``_id`` field\nthat has a unique value.\n\nMongoDB allows you to manage this field in two ways:\n\n- You can set this field for each document yourself, ensuring each\n  ``_id`` field value is unique.\n- You can let the driver automatically generate a unique ``ObjectId``\n  value for each document ``_id``. If you do not manually set an\n  ``_id`` value for a document, the driver populates the field\n  with an ``ObjectId``.\n\nUnless you can guarantee uniqueness, we recommend\nletting the driver automatically generate ``_id`` values.\n\n.. note:: Duplicate _id Errors\n\n   Setting duplicate ``_id`` values in a collection violates unique\n   index constraints, which causes the driver to return a ``WriteError`` from\n   the ``insertOne()`` method or a ``BulkWriteError`` from the\n   ``insertMany()`` method.\n\nTo learn more about the ``_id`` field, see the\n:manual:`Unique Indexes </core/index-unique/>` guide in the\n{+mdb-server+} manual.\n\nTo learn more about document structure and rules, see the\n:manual:`Documents </core/document>` guide in the {+mdb-server+} manual.\n\nInsert One Document\n-------------------\n\nTo add a single document to a MongoDB collection, call the ``insertOne()``\nmethod and pass the document you want to add.\n\nThe following example inserts a document into the ``restaurants``\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/insert.txt"
  },
  {
    "code": "   :start-after: start-insert-one\n   :end-before: end-insert-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nInsert Multiple Documents\n-------------------------\n\nTo add multiple documents to a MongoDB collection, user the ``insertMany()``\nmethod and pass a list of documents you want to add.\n\nThe following example inserts a list of documents into the\n``restaurants`` collection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/insert.txt"
  },
  {
    "code": "   :start-after: start-insert-many\n   :end-before: end-insert-many\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nModify Insert Behavior\n----------------------\n\nThe ``insertOne()`` method optionally accepts an ``InsertOneOptions``\nparameter that sets options to configure the insert operation.\nIf you don't specify any options, the driver performs the insert\noperation with default settings. Pass options as the last parameter to\nthe ``insertOne()`` method.\n\nThe following table describes the setter methods that you can use to\nconfigure an ``InsertOneOptions`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``bypassDocumentValidation()``\n     - | If set to ``true``, allows the driver to ignore\n         :manual:`document-level validation </core/schema-validation>`. \n       | Defaults to ``false``.\n\n   * - ``comment()``\n     - | Sets a comment to attach to the operation. For more information, see the :manual:`insert command\n         fields </reference/command/insert/#command-fields>` guide in the\n         {+mdb-server+} manual for more information.\n\nYou can set the preceding settings on the ``insertMany()`` method\nby configuring an ``InsertManyOptions`` instance. You can also use the\n``ordered()`` method setter method to specify the order in which the driver\ninserts documents into MongoDB:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``ordered()``\n     - | If set to ``true``, the driver sends documents to the\n         server in the order provided. If an error occurs, the driver\n         cancels all remaining insert operations. \n       | Defaults to ``true``.\n\nPass options as the last parameter to the ``insertMany()`` method.\n\nModify Insert Example\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following code uses the ``bypassDocumentValidation()`` method to\nset the option to ignore document validation rules. Then, the example uses the\n``insertMany()`` method to add new documents to the ``restaurants``\ncollection.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/insert.txt"
  },
  {
    "code": "   :start-after: start-insert-opts\n   :end-before: end-insert-opts\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nReturn Value\n------------\n\nThe ``insertOne()`` method returns an ``InsertOneResult`` instance, and\nthe ``insertMany()`` method returns an ``InsertManyResult`` instance.\n\nYou can use the following methods to retrieve information from\nan ``InsertOneResult`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``getInsertedId()``\n     - Indicates the ``_id`` value of the inserted document.\n\n   * - ``wasAcknowledged()``\n     - Returns ``true`` if the server acknowledges the result.\n\nYou can use the following methods to retrieve information from\nan ``InsertOneResult`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``getInsertedIds()``\n     - Indicates the ``_id`` values of the inserted documents.\n\n   * - ``wasAcknowledged()``\n     - Returns ``true`` if the server acknowledges the result.\n\n.. note::\n\n   If the ``wasAcknowledged()`` method returns ``false``, trying to\n   access the ``_id`` values results in an\n   ``InvalidOperation`` exception. The driver cannot \n   determine these values if the server does not acknowledge the write\n   operation.\n\nAdditional Information\n----------------------\n\nFor runnable code examples that demonstrate how to insert documents by\nusing the {+driver-short+}, see :ref:`kotlin-sync-write`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `insertOne() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/insert-one.html>`__\n- `insertMany() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/insert-many.html>`__\n- `InsertOneOptions <{+core-api+}/com/mongodb/client/model/InsertOneOptions.html>`__\n- `InsertManyOptions <{+core-api+}/com/mongodb/client/model/InsertManyOptions.html>`__\n- `InsertOneResult <{+core-api+}/com/mongodb/client/result/InsertOneResult.html>`__\n- `InsertManyResult <{+core-api+}/com/mongodb/client/result/InsertManyResult.html>`__\n\n.. .. instruqt:: \n..    :title: insertOne() Lesson\n..    :drawer:\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/insert.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nReplace Operation\n-----------------\n\nYou can perform a replace operation in MongoDB by using the\n``replaceOne()`` method. This method removes all fields except the\n``_id`` field from the first document that matches the query filter. It\nthen adds the fields and values you specify to the empty document.\n\nRequired Parameters\n~~~~~~~~~~~~~~~~~~~\n\nYou must pass the following parameters to the ``replaceOne()`` method:\n\n- **Query filter**, which matches which documents to update. To learn\n  more about query filters, see the :ref:`kotlin-sync-specify-query`\n  guide.\n\n- **Replacement document**, which specifies the fields and values that\n  you want to replace the existing fields and values with.\n\nReplace One Document\n--------------------\n\nThe following example uses the ``replaceOne()`` method to replace the\nfields and values of a document in which the value of the ``name`` field\nvalue is ``\"Primola Restaurant\"``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/replace.txt"
  },
  {
    "code": "   :start-after: start-replace-one\n   :end-before: end-replace-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\n.. important::\n\n   The values of ``_id`` fields are immutable. If your replacement\n   document specifies a value for the ``_id`` field, it must be the same\n   as the ``_id`` value of the existing document or the driver raises a\n   ``WriteError``.\n\nCustomize the Replace Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``replaceOne()`` method optionally accepts\na parameter that sets options to configure the replace operation.\nIf you don't specify any options, the driver performs the replace\noperation with default settings.\n\nThe following table describes the setter methods that you can use to\nconfigure an ``ReplaceOptions`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``upsert()``\n     - | Specifies whether the replace operation performs an upsert operation if no \n         documents match the query filter. For more information, see :manual:`upsert\n         behavior </reference/method/db.collection.replaceOne/#upsert>`\n         in the {+mdb-server+} manual.\n       | Defaults to ``false``\n\n   * - ``bypassDocumentValidation()``\n     - | Specifies whether the update operation bypasses document validation. This lets you \n         update documents that don't meet the schema validation requirements, if any \n         exist. For more information about schema validation, see :manual:`Schema\n         Validation </core/schema-validation/#schema-validation>` in the MongoDB\n         Server manual.\n       | Defaults to ``false``.\n\n   * - ``collation()``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``hint()``\n     - | Sets the index to use when matching documents. \n         For more information, see the :manual:`hint statement\n         </reference/method/db.collection.replaceOne/#std-label-replace-one-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``let()``\n     - | Provides a map of parameter names and values to set top-level\n         variables for the operation. Values must be constant or closed\n         expressions that don't reference document fields.\n\n   * - ``comment()``\n     - | Sets a comment to attach to the operation.\n\nThe following code sets the ``upsert`` option to ``true``, which instructs the\ndriver to insert a new document that has the fields and values specified\nin the replacement document if the query filter doesn't match any\nexisting documents:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/replace.txt"
  },
  {
    "code": "   :start-after: start-replace-options\n   :end-before: end-replace-options\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``replaceOne()`` method returns an ``UpdateResult`` \nobject. You can use the following methods to access information from\nan ``UpdateResult`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``getMatchedCount()``\n     - | Returns the number of documents that matched the query filter, regardless of\n         how many updates were performed.\n\n   * - ``getModifiedCount()``\n     - | Returns the number of documents modified by the update operation. If an updated\n         document is identical to the original, it is not included in this\n         count.\n         \n   * - ``wasAcknowledged()``\n     - | Returns ``true`` if the server acknowledged the result.\n\n   * - ``getUpsertedId()``\n     - | Returns the ``_id`` value of the document that was upserted\n         in the database, if the driver performed an upsert.\n\nAdditional Information \n----------------------\n\nTo view a runnable code example that demonstrates how to replace a\ndocument, see :ref:`kotlin-sync-write`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `replaceOne() <{+api+}/mongodb-driver-kotlin-sync/com.mongodb.kotlin.client/-mongo-collection/replace-one.html>`__\n- `UpdateResult <{+core-api+}/com/mongodb/client/result/UpdateResult.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/replace.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nMethods\n-------\n\nCreate a ``ClientSession`` by using the ``startSession()`` method on your ``MongoClient``\ninstance. You can then modify the session state by using the methods provided by\nthe ``ClientSession``. The following table describes the methods you can use to\nmanage your transaction:\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``startTransaction()``\n     - | Starts a new transaction, configured with the given options, on\n         this session. Returns an error if there is already\n         a transaction in progress for the session. To learn more about\n         this method, see the :manual:`startTransaction() page\n         </reference/method/Session.startTransaction/>`  in the Server manual.\n       |\n       | **Parameter**: ``TransactionOptions``\n\n   * - ``abortTransaction()``\n     - | Ends the active transaction for this session. Returns an\n         error if there is no active transaction for the session or the\n         transaction has been committed or ended. To learn more about\n         this method, see the :manual:`abortTransaction() page\n         </reference/method/Session.abortTransaction/>`  in the Server manual.\n       |\n\n   * - ``commitTransaction()``\n     - | Commits the active transaction for this session. Returns an\n         error if there is no active transaction for the session or if the\n         transaction was ended. To learn more about\n         this method, see the :manual:`commitTransaction() page\n         </reference/method/Session.commitTransaction/>`  in the Server manual.\n\n   * - ``withTransaction()``\n     - | Starts a transaction on this session and runs the given function within \n         a transaction.\n       |\n       | **Parameters**: transaction body function, ``TransactionOptions``\n\nExample\n-------\n\nThe following example demonstrates how to create a session, create a\ntransaction, and insert documents into a collection in one transaction\nthrough the following steps:\n\n1. Create a session from the client by using the ``startSession()`` method.\n#. Define the ``insertRestaurantsInTransaction()`` method to insert multiple \n   documents into the ``restaurants`` collection. \n#. Use the ``withTransaction()`` method to start a transaction. The ``withTransaction()`` \n   method runs the insert operations and commits the transaction. If any \n   operation results in errors, ``withTransaction()`` cancels the transaction.\n#. Close the connection to the server by using the ``MongoClient.close()`` method.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/transactions.txt"
  },
  {
    "code": "   :start-after: start-transaction\n   :end-before: end-transaction\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nIf you require more control over your transactions, you can use the ``startTransaction()``\nmethod. You can use this method with the ``commitTransaction()`` and ``abortTransaction()``\nmethods described in the preceding section to manually manage the transaction lifecycle. \n\n.. sharedinclude:: dbx/transactions-parallelism.rst\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts mentioned in this guide, see the following pages in \nthe Server manual:\n\n- :manual:`Transactions </core/transactions/>`\n- :manual:`Server Sessions </reference/server-sessions>`\n- :manual:`Read Isolation, Consistency, and Recency </core/read-isolation-consistency-recency/#causal-consistency>`\n\nTo learn more about ACID compliance, see the :website:`What are ACID\nProperties in Database Management Systems? </basics/acid-transactions>`\narticle on the MongoDB website.\n\n.. _kotlin-sync-api-docs-transaction:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the types or methods discussed in this\nguide, see the following API documentation:\n\n- `ClientSession <{+api+}/com.mongodb.kotlin.client/-client-session/index.html>`_\n- `abortTransaction() <{+api+}/com.mongodb.kotlin.client/-client-session/abort-transaction.html>`_\n- `commitTransaction() <{+api+}/com.mongodb.kotlin.client/-client-session/commit-transaction.html>`_\n- `startTransaction() <{+api+}/com.mongodb.kotlin.client/-client-session/start-transaction.html>`_\n- `withTransaction() <{+api+}/com.mongodb.kotlin.client/-client-session/with-transaction.html>`_\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/transactions.txt"
  },
  {
    "code": "   :start-after: start-data-class\n   :end-before: end-data-class\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nUpdate Operations\n-----------------\n\nYou can update documents in MongoDB by using the following methods:\n\n- ``updateOne()``, which updates *the first document* that matches the search criteria\n- ``updateMany()``, which updates *all documents* that match the search criteria\n\nEach update method requires the following parameters:\n\n- **Query filter**, which matches which documents to update. To learn\n  more about query filters, see the :ref:`kotlin-sync-specify-query`\n  guide.\n\n- **Update document**, which specifies the update operator, or the kind of update to\n  perform, and the fields and values to be updated. For a list of update\n  operators and their usages, see the :manual:`Field Update Operators\n  guide page</reference/operator/update-field/>` in the {+mdb-server+} manual.\n\nUpdate One Document\n~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``updateOne()`` method to update the\n``name`` value of a document from ``\"Happy Garden\"`` to ``\"Mountain\nHouse\"``:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-one\n   :end-before: end-update-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nUpdate Many Documents\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example uses the ``updateMany()`` method to update all documents\nin which the ``name`` value is ``\"Starbucks\"``. The update renames the\n``address`` field to ``location``.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-many\n   :end-before: end-update-many\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nCustomize the Update Operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``updateOne()`` and ``updateMany()`` methods optionally accept\na parameter that sets options to configure the update operation.\nIf you don't specify any options, the driver performs update\noperations with default settings.\n\nThe following table describes the setter methods that you can use to\nconfigure an ``UpdateOptions`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``upsert()``\n     - | Specifies whether the update operation performs an upsert operation if no \n         documents match the query filter. For more information, see the :manual:`upsert\n         statement </reference/command/update/#std-label-update-command-upsert>`\n         in the {+mdb-server+} manual.\n       | Defaults to ``false``\n\n   * - ``bypassDocumentValidation()``\n     - | Specifies whether the update operation bypasses document validation. This lets you \n         update documents that don't meet the schema validation requirements, if any \n         exist. For more information about schema validation, see :manual:`Schema\n         Validation </core/schema-validation/#schema-validation>` in the MongoDB\n         Server manual.\n       | Defaults to ``false``.\n\n   * - ``collation()``\n     - | Specifies the kind of language collation to use when sorting\n         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`\n         in the {+mdb-server+} manual.\n\n   * - ``arrayFilters()``\n     - | Provides a list of filters that you specify to select which\n         array elements the update applies to.\n\n   * - ``hint()``\n     - | Sets the index to use when matching documents. \n         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`\n         in the {+mdb-server+} manual.\n\n   * - ``let()``\n     - | Provides a map of parameter names and values to set top-level\n         variables for the operation. Values must be constant or closed\n         expressions that don't reference document fields. For more information,\n         see the :manual:`let statement\n         </reference/command/update/#std-label-update-let-syntax>` in the\n         {+mdb-server+} manual.\n\n   * - ``comment()``\n     - | Sets a comment to attach to the operation. For more\n         information, see the :manual:`update command\n         fields </reference/command/update/#update>` guide in the\n         {+mdb-server+} manual for more information.\n\nModify Update Example\n`````````````````````\n\nThe following code uses the ``updateOne()`` method to match documents\nin which the ``name`` field value is ``\"Sunrise Pizzeria\"``. It then\nsets the ``borough`` value in the first matching document to\n``\"Queens\"`` and the ``cuisine`` value to ``\"Italian\"``.\n\nBecause the ``upsert`` option is set to ``true``, the driver inserts a\nnew document that has the fields and values specified in the update\ndocument if the query filter doesn't match any existing documents.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/update.txt"
  },
  {
    "code": "   :start-after: start-update-options\n   :end-before: end-update-options\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``updateOne()`` and ``updateMany()`` methods each return an ``UpdateResult`` \nobject. You can use the following methods to access information from\nan ``UpdateResult`` instance:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``getMatchedCount()``\n     - | Returns the number of documents that matched the query filter, regardless of\n         how many updates were performed.\n\n   * - ``getModifiedCount()``\n     - | Returns the number of documents modified by the update operation. If an updated\n         document is identical to the original, it is not included in this\n         count.\n         \n   * - ``wasAcknowledged()``\n     - | Returns ``true`` if the server acknowledged the result.\n\n   * - ``getUpsertedId()``\n     - | Returns the ``_id`` value of the document that was upserted\n         in the database, if the driver performed an upsert.\n\n.. note::\n\n   If the ``wasAcknowledged()`` method returns ``false``, trying to\n   access other information from the ``UpdateResult`` instance results in an\n   ``InvalidOperation`` exception. The driver cannot \n   determine these values if the server does not acknowledge the write\n   operation.\n\nAdditional Information \n----------------------\n\nTo view runnable code examples that demonstrate how to update documents by\nusing the {+driver-short+}, see :ref:`kotlin-sync-write`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API documentation:\n\n- `updateOne() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/update-one.html>`__\n- `updateMany() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/update-many.html>`__\n- `UpdateOptions <{+core-api+}/com/mongodb/client/model/UpdateOptions.html>`__\n- `UpdateResult <{+core-api+}/com/mongodb/client/result/UpdateResult.html>`__\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write/update.txt"
  },
  {
    "code": "   :language: kotlin\n   :copyable:\n   :linenos:\n   :emphasize-lines: 20-22\n\nInsert One\n----------\n\nThe following code shows how to insert a single document into a\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-insert-one\n   :end-before: end-insert-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``insertOne()`` method, see the :ref:`Insert Documents\n<kotlin-sync-write-insert>` guide.\n\nInsert Multiple\n---------------\n\nThe following code shows how to insert multiple documents into a\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-insert-multiple\n   :end-before: end-insert-multiple\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``insertMany()`` method, see the :ref:`Insert Documents\n<kotlin-sync-write-insert>` guide.\n\nUpdate One\n----------\n\nThe following code shows how to update a single document in a\ncollection by creating or editing a field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-update-one\n   :end-before: end-update-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``updateOne()`` method, see the\n:ref:`Update Documents <kotlin-sync-write-update>` guide.\n\nUpdate Multiple\n---------------\n\nThe following code shows how to update multiple documents in a\ncollection by creating or editing a field:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-update-multiple\n   :end-before: end-update-multiple\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``updateMany()`` method, see the\n:ref:`Update Documents <kotlin-sync-write-update>` guide.\n\nReplace One\n-----------\n\nThe following code shows how to replace a single document in a\ncollection with a new document:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-replace-one\n   :end-before: end-replace-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``replaceOne()`` method, see the\n:ref:`Replace Documents <kotlin-sync-write-replace>` guide.\n\nDelete One\n----------\n\nThe following code shows how to delete a single document in a\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-delete-one\n   :end-before: end-delete-one\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``deleteOne()`` method, see the\n:ref:`Delete Documents <kotlin-sync-write-delete>` guide.\n\nDelete Multiple\n---------------\n\nThe following code shows how to delete multiple documents in a\ncollection:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-delete-multiple\n   :end-before: end-delete-multiple\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``deleteMany()`` method, see the\n:ref:`Delete Documents <kotlin-sync-write-delete>` guide.\n\nBulk Write\n----------\n\nThe following code shows how to perform multiple write operations in a\nsingle bulk operation:\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  },
  {
    "code": "   :start-after: start-bulk-write\n   :end-before: end-bulk-write\n   :language: kotlin\n   :copyable:\n   :dedent:\n\nTo learn more about the ``bulkWrite()`` method, see the\n:ref:`Bulk Write <kotlin-sync-bulk-write>` guide.\n\n",
    "language": "kotlin",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-kotlin-sync/source/write-operations.txt"
  }
]
