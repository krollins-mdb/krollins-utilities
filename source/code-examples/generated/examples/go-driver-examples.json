[
  {
    "code": "   :copyable: false\n\n   Error: couldn't connect to server 127.0.0.1:27017\n\nThe following sections describe methods that may help resolve the issue.\n\n.. _golang-troubleshooting-connection-string-port:\n\nCheck Connection String\n~~~~~~~~~~~~~~~~~~~~~~~\n\nVerify that the hostname and port number in the connection string are both\naccurate. In the sample error message, the hostname is ``127.0.0.1`` and the\nport is ``27017``. The default port value for a MongoDB instance is\n``27017``, but you can configure MongoDB to communicate on another port.\n\n.. _golang-troubleshooting-connection-firewall:\n\nConfigure Firewall\n~~~~~~~~~~~~~~~~~~\n\nAssuming that your MongoDB deployment uses the default port, verify that port\n``27017`` is open in your firewall. If your deployment uses a different port,\nverify the correct port is open in your firewall.\n\n.. warning::\n\n   Do not open a port in your firewall unless you are sure that it is the port\n   used by your MongoDB instance.\n\nAuthentication Error\n--------------------\n\nThe {+driver-short+} can fail to connect to a MongoDB instance if\nthe authorization is not configured correctly. In these cases, the driver raises\nan error message similar to one of the following messages:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   Command failed with error 18 (AuthenticationFailed): 'Authentication\n   failed.' on server localhost:27017.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   connection() error occurred during connection handshake: auth error:\n   sasl conversation error: unable to authenticate using mechanism\n   \"SCRAM-SHA-256\": (AuthenticationFailed) Authentication failed.\n\nThe following sections describe methods that may help resolve the issue.\n\n.. _golang-troubleshooting-connection-string-auth:\n\nCheck Connection String\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAn invalid connection string is the most common cause of authentication\nissues when attempting to connect to MongoDB.\n\n.. tip::\n\n   For more information about connection strings,\n   see :ref:`Connection URI <golang-connection-uri>` in the Connection Guide.\n\nIf your connection string contains a username and password, ensure that they\nare in the correct format.\n\n.. note::\n\n   If the username or password includes any of the following characters, they\n   must be `percent encoded <https://tools.ietf.org/html/rfc3986#section-2.1>`__:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: true\n\n   uri := \"mongodb://<db_username>:<db_password>@<hostname>:<port>/?authSource=users\"\n   client, err := mongo.Connect(options.Client().ApplyURI(uri))\n\nError Sending Message\n---------------------\n\nWhen the driver fails to send a command after you make a request,\nit often displays the following general error message:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   com.mongodb.MongoSocketWriteException: Exception sending message\n\nThe following sections describe methods that may help resolve the issue.\n\nCheck Connection String\n~~~~~~~~~~~~~~~~~~~~~~~\n\nVerify that the connection string in your app is accurate. For more information\nabout verifying your connection string, see\n:ref:`Connection Error <golang-troubleshooting-connection-string-port>`\nand :ref:`Authentication Error <golang-troubleshooting-connection-string-auth>`.\n\nVerify the Authentication Mechanism\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMake sure you are using the correct authentication mechanism and credentials.\nFor more information about authentication errors, see\n:ref:`Authentication Error <golang-troubleshooting-connection-auth-mechanism>`.\n\nVerify User Is in Authentication Database\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nVerify the user is in the correct authentication database. For more\ninformation about the authentication database, see\n:ref:`Authentication Error <golang-troubleshooting-connection-admin>`.\n\nConfigure Firewall\n~~~~~~~~~~~~~~~~~~\n\nThe firewall must have an open port for communicating with the MongoDB\ninstance. For more information about configuring the firewall, see\n:ref:`Connection Error <golang-troubleshooting-connection-firewall>`.\n\n.. _golang-troubleshooting-connection-number-connections:\n\nCheck the Number of Connections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach ``Client`` instance supports a maximum number of concurrent open\nconnections in its connection pool. The configuration parameter ``maxPoolSize``\ndefines this value and is set to ``100`` by default. If there are already a\nnumber of open connections equal to ``maxPoolSize``, the server waits until\na connection becomes available. If this wait time exceeds the ``maxIdleTimeMS``\nvalue, the driver responds with an error. For more information about how\nconnection pooling works, see\n:ref:`How Does Connection Pooling Work in the Go Driver? <golang-faq-connection-pool>`\nin the FAQ.\n\nTimeout Error\n-------------\n\nSometimes when you send a request through the driver to the server, the request\ntimes out. When this happens, you might receive an error message\nsimilar to the following message:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: false\n\n   timed out while checking out a connection from connection pool: context canceled\n\nIf you receive this error, try the following methods to resolve the\nissue.\n\nSet Timeout Option\n~~~~~~~~~~~~~~~~~~\n\nThe ``Client`` supports a single ``Timeout`` option that controls the amount of\ntime a single operation can take to execute. You can set this value by using\nthe ``SetTimeout()`` method or by specifying the ``timeoutMS`` option in your\nconnection string. \n\nThe following example sets the single timeout value to 5 seconds using the\nconnection string option:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/connection-troubleshooting.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n      :emphasize-lines: 3\n\n      bsonDocument := bson.D{{\"hello\", \"world\"}}\n\n      jsonBytes, err := bson.MarshalExtJSON(bsonDocument, true, false)\n      if err != nil {\n          panic(err)\n      }\n\n      fmt.Println(string(jsonBytes))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"hello\":\"world\"}\n\nTo learn more about conversions between BSON and Go types, see the\n:ref:`golang-bson` guide.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/faq.txt"
  },
  {
    "code": "   :start-after: start-tea-struct\n   :end-before: end-tea-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this section, load the sample data into the\n``tea`` collection in the ``db`` database by using the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/aggregation.txt"
  },
  {
    "code": "   :start-after: begin insert docs\n   :end-before: end insert docs\n   :language: go\n   :dedent:\n\nEach document contains information about the tea type, the available toppings, and\nthe price.\n\nAverage Rating\n~~~~~~~~~~~~~~\n\nThe following example calculates and displays the average rating and\nnumber of ratings for each tea category.\n\nThe aggregation pipeline uses the ``$group`` stage to group the\ndocuments by the ``category`` field, calculates the average using the\n``$avg`` expression operator, and counts the number of documents using\nthe ``$sum`` expression operator.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/aggregation.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-snippets/aggregation.go\n      :start-after: begin average\n      :end-before: end average\n      :language: go\n      :dedent:\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Average price of black tea options: $6.075\n      Number of black tea options: 4 \n\n      Average price of green tea options: $5.70\n      Number of green tea options: 4  \n\nOmit Fields in Results\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example matches documents where you can get milk foam as a\ntopping and lists the two cheapest options.\n\nThe aggregation pipeline contains the following stages:\n\n- ``$match`` stage to match documents where the ``toppings`` field contains \"milk foam\"\n- ``$unset`` stage to omit the ``_id`` and ``category`` fields\n- ``$sort`` stage to sort the ``price`` and ``toppings`` in ascending order\n- ``$limit`` stage to show the first two documents\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/aggregation.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-snippets/aggregation.go\n      :start-after: begin unset\n      :end-before: end unset\n      :language: go\n      :dedent:\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Tea: Hojicha \n      Toppings: lemon, ginger, milk foam \n      Price: $5.55 \n      \n      Tea: Gyokuro \n      Toppings: berries, milk foam \n      Price: $5.65 \n\nAdditional Information\n----------------------\n\nTo learn more about the terms mentioned, see the following\nguides:\n\n- :manual:`Expression Operators </reference/operator/aggregation/>`\n- :manual:`Aggregation Pipeline </core/aggregation-pipeline/>`\n- :manual:`Aggregation Stages </meta/aggregation-quick-reference/#stages>`\n- :manual:`Operator Expressions </meta/aggregation-quick-reference/#operator-expressions>`\n- :manual:`Aggregation Pipeline Limits </core/aggregation-pipeline-limits/>`\n\nTo view more aggregation examples, see the following guides:\n\n- :ref:`Count <golang-count-aggregation>`\n- :ref:`Limit <golang-limit-aggregation>`\n- :ref:`Skip <golang-skip-aggregation>`\n- :ref:`Text <golang-search-text-aggregation>`\n\nTo learn more about the ``Aggregate()`` method and its behavior, see\n:ref:`Retrieve Data <golang-retrieve-aggregation>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n- `AggregateOptions <{+api+}/mongo/options#AggregateOptions>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/aggregation.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   credential := options.Credential{\n      AuthMechanism: \"SCRAM-SHA-256\",\n      AuthSource: \"<authenticationDb>\",\n      Username: \"<db_username>\",\n      Password: \"<db_password>\",\n   }\n   clientOpts := options.Client().ApplyURI(\"mongodb://<hostname>:<port>\").\n      SetAuth(credential)\n\n   client, err := mongo.Connect(clientOpts)\n\n.. _golang-scram-sha-1-auth-mechanism:\n.. _golang-sha-1:\n\n``SCRAM-SHA-1``\n~~~~~~~~~~~~~~~\n\n.. important::\n\n   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions\n   3.0, 3.2, 3.4, and 3.6.\n\n``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your\nusername and password, encrypted using the ``SHA-1`` algorithm, to authenticate\nyour user.\n\nTo specify the ``SCRAM-SHA-1`` authentication mechanism, assign the\n``AuthMechanism`` option the value ``\"SCRAM-SHA-1\"``:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "   :emphasize-lines: 2\n\n   credential := options.Credential{\n      AuthMechanism: \"SCRAM-SHA-1\",\n      AuthSource: \"<authenticationDb>\",\n      Username: \"<db_username>\",\n      Password: \"<db_password>\",\n   }\n   clientOpts := options.Client().ApplyURI(\"mongodb://<hostname>:<port>\").\n      SetAuth(credential)\n\n   client, err := mongo.Connect(clientOpts)\n\n.. _golang-mongodb-cr:\n\n``MONGODB-CR``\n~~~~~~~~~~~~~~\n\n``MONGODB-CR`` is a challenge-response authentication mechanism that uses your\nusername and password to authenticate your user.\n\n.. important::\n\n   This authentication mechanism was deprecated starting in MongoDB 3.6\n   and is no longer supported as of MongoDB 4.0.\n\n.. _golang-mongodb-aws:\n\n``MONGODB-AWS``\n~~~~~~~~~~~~~~~\n\n.. important::\n\n   The MONGODB-AWS authentication mechanism is available only in MongoDB\n   versions 4.4 and later.\n\nThe ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services\nIdentity and Access Management (AWS IAM) credentials to authenticate your\nuser.\n\nTo connect to a MongoDB instance with ``MONGODB-AWS`` authentication enabled,\nspecify the ``MONGODB-AWS`` authentication mechanism.\n\nThe driver checks for your credentials in the following sources in the order\nthey are listed:\n\n1. Connection string\n#. Environment variables\n#. Web identity token file\n#. AWS ECS endpoint specified in the ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``\n   environment variable\n#. AWS EC2 endpoint. For more information, see `IAM Roles for Tasks\n   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`_.\n\n.. important::\n   \n   The driver obtains the credentials only from the first source in which they are found.\n   For example, if you specify your AWS credentials in the connection string, the\n   driver ignores any credentials that you have specified in environment variables.\n\n.. tabs::\n\n   .. tab:: Connection String\n      :tabid: connection string\n\n      .. tip::\n\n         The following examples set the appropriate credentials by using the ``SetAuth()`` \n         method. You can also specify these credentials by using the ``ApplyURI()`` \n         method. If you use the ``ApplyURI()`` method you must URL encode the username \n         and password to ensure they are correctly parsed.\n   \n      To connect to your MongoDB instance using your AWS IAM credentials, perform the\n      following steps:\n\n      - Assign the ``AuthMechanism`` option the value ``MONGODB-AWS``\n      - Assign the ``Username`` option the value of your ``accessKeyID``\n      - Assign the ``Password`` option the value of your ``secretAccessKey``\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "         :language: go\n\n      If you must specify an AWS session token, use the temporary\n      credentials returned from an `assume role request <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__.\n      \n      To use temporary credentials, assign the value of your ``sessionToken`` to \n      the ``AuthMechanismProperties`` option:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "         :language: go\n\n   .. tab:: Environment Variables\n      :tabid: environment variables\n\n      To authenticate to your MongoDB instance using AWS credentials stored in\n      environment variables, use a shell to set the variables as follows:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "         :language: go\n\n   .. tab:: Web Identity Token File\n      :tabid: web-identity-token-file\n\n      You can use the OpenID Connect (OIDC) token obtained from a web identity provider to authenticate\n      to Amazon Elastic Kubernetes Service (EKS) or other services.\n      To use an OIDC token, create a file that contains your token, then \n      set the absolute path to this file in an environment variable by using\n      a shell as shown in the following example:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "         :language: go\n\n.. _golang-x509:\n\n``X.509``\n~~~~~~~~~\n\nThe ``X.509`` authentication mechanism uses\n:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to\nauthenticate your user, identified by the relative distinguished names\n(RDNs) of your client certificate. When you specify the ``X.509``\nauthentication mechanism, the server authenticates the connection using\nthe paths of the following files:\n\n- ``tlsCAFile`` which contains either a single or a bundle of certificate authorities to trust when making a TLS connection\n- ``tlsCertificateKeyFile`` which references the path to the client certificate file or the client private key file\n\nTo specify the ``X.509`` authentication mechanism, perform the\nfollowing:\n\n- Assign the ``tlsCAFile`` the path to its file in the connection string\n- Assign the ``tlsCertificateKeyFile`` the path to its file in the connection string\n- Assign the ``AuthMechanism`` option the value ``\"MONGODB-X509\"``\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "   :emphasize-lines: 4-5, 7\n\n   caFilePath := \"<cafile_path>\"\n   certificateKeyFilePath := \"<client_certificate_path>\"\n\n   uri := \"mongodb://<hostname>:<port>/?tlsCAFile=%s&tlsCertificateKeyFile=%s\"\n   uri = fmt.Sprintf(uri, caFilePath, certificateKeyFilePath)\n   credential := options.Credential{\n      AuthMechanism: \"MONGODB-X509\",\n   }\n\n   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)\n\n..\n  To learn more about configuring your application to use\n  certificates as well as TLS/SSL options, see\n  :ref:`golang-tls-ssl-guide`.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/auth.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           \"_id\" : ObjectId(\"...\"),\n           \"first_name\" : \"Arthur\",\n           \"street\" : \"1 Lakewood Way\",\n           \"city\" : \"Elwood City\",\n           \"state\" : \"PA\",\n           \"age\" : 8\n         }\n\n      In this example, struct tags make the driver:\n\n      - Set custom BSON field names such as ``first_name``\n      - Omit the empty ``LastName`` field\n      - Flatten the nested struct and bring all fields up to the top\n        level\n\n      .. tabs::\n\n   .. tab:: No Struct Tags\n      :tabid: no-struct-tags\n\n      The following example demonstrates how the {+driver-short+} marshals\n      a struct without any struct tags:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/bson.txt"
  },
  {
    "code": "         :copyable: false\n\n         {\n           \"_id\" : ObjectId(\"...\"),\n           \"firstname\" : \"Arthur\",\n           \"lastname\" : \"\",\n           \"address\": {\n                        \"street\" : \"1 Lakewood Way\",\n                        \"city\" : \"Elwood City\",\n                        \"state\" : \"PA\"\n                      },\n           \"age\" : 8\n         }\n\n      Without struct tags, the driver:\n\n      - Sets the lowercase of the struct fields as the BSON field names\n      - Includes an empty ``lastname`` field\n      - Stores the ``Address`` field as a nested value\n\nBSON Options\n------------\n\nYou can specify BSON options to adjust the marshalling and unmarshalling behavior of\nyour ``Client`` instance. To set BSON options on your ``Client``, create and configure\na ``BSONOptions`` instance.\n \nThis example performs the following actions:\n\n- Creates a ``BSONOptions`` instance by configuring the following settings:\n  \n  - Sets the ``UseJSONStructTags`` field to ``true``, which instructs the driver\n    to use the ``\"json\"`` struct tag if a ``\"bson\"`` struct tag is not specified\n  - Sets the ``NilSliceAsEmpty`` field to ``true``, which instructs the driver\n    to marshal ``nil`` Go slices as empty BSON arrays\n\n- Passes the ``BSONOptions`` instance to the ``SetBSONOptions()`` helper method to specify\n  a ``ClientOptions`` instance\n- Creates a ``Client`` to apply the specified BSON marshalling and unmarshalling behavior\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/bson.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"db\").Collection(\"students\")\n      filter := bson.D{{\"age\", 8}}\n\n      var result bson.D\n      err := coll.FindOne(context.TODO(), filter).Decode(&result)\n\n      fmt.Println(result)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      [{_id ObjectID(\"...\")} {first_name Arthur} {street 1 Fern Way} {city Elwood City} {state PA} {age 8}]\n\nThe ``Cursor`` type also uses the ``All()`` method, which unmarshals all\ndocuments stored in the cursor into an array at the same time.\n\nThe ``bson`` package includes a family of ``Marshal()`` and ``Unmarshal()``\nmethods that work with BSON-encoded data of ``[]byte`` type.\n\nThe following code demonstrates how you can unmarshal BSON back into a\nuser-defined struct by using methods from the ``bson`` package:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/bson.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      type Item struct {\n         Category string\n         Quantity int32\n      }\n\n      doc, err := bson.Marshal(bson.D{{\"category\", \"plate\"}, {\"quantity\", 6}})\n\n      var test Item\n      err = bson.Unmarshal(doc, &test)\n\n      fmt.Printf(\"Unmarshalled Struct:\\n%+v\\n\", test)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Unmarshalled Struct:\n      {Category:plate Quantity:6}\n\n.. note::\n\n   You can use the ``Raw`` type to retrieve elements from a BSON\n   document byte slice without unmarshalling it to a Go type. This type\n   allows you to look up individual elements without unmarshalling\n   the entire BSON document.\n\nTo learn more about the marshalling and unmarshalling methods used with the\n``Cursor`` type, see the `Cursor API documentation <{+api+}/mongo#Cursor>`__\n\nTo learn more about the marshalling and unmarshalling methods in the\n``bson`` package, see the `bson API documentation\n<{+api+}/bson#hdr-Marshalling_and_Unmarshalling>`_\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/bson.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"name\", bson.D{{\"$lt\", \"Infinite Jest\"}}}}\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []bson.D\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n\n      for _, result := range results {\n         res, _ := bson.MarshalExtJSON(result, false, false)\n         fmt.Println(string(res))\n      } \n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Emma\",\"length\":\"474\"}\n      {\"name\":\"Cryptonomicon\",\"length\":\"918\"}\n      {\"name\":\"Ça\",\"length\":\"1138\"}\n\nWithout specifying a default ``books`` collation, the ``Find()`` method would follow default\nbinary collation rules to determine the ``name`` values that precede ``\"Infinite Jest\"``. These\nrules place words beginning with \"Ç\" after those beginning with \"I\". The output would resemble\nthe following:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/collations.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"name\":\"Emma\",\"length\":\"474\"}\n   {\"name\":\"Cryptonomicon\",\"length\":\"918\"}\n\nTo learn more about the ``Find()`` method, see :ref:`golang-retrieve`.\n\n.. _golang-index-collation:\n\nSet a Collation on an Index \n---------------------------\n\nYou can apply a collation when you create a new index on a collection. The index stores\nan ordered representation of the documents in the collection, so your MongoDB instance\ndoesn't perform the ordering for sorting operations in-memory. \n\nTo use the index in an operation, your operation must use the same collation as the one\nspecified in the index. Additionally, ensure that the operation is covered by the index that\ncontains the collation. Set a collation through an ``IndexOptions`` object and pass this object\nas an argument to the ``CreateOne()`` method.\n\nExample\n~~~~~~~\n\nAfter creating the ``books`` collection and applying a default collation, as shown in the\n:ref:`golang-create-collection` section, you cannot change the collection's default collation.\nHowever, you can create an index for the collection with a different collation. \n\nThe following example uses the ``CreateOne()`` method to create an ascending index on the\n``name`` field and specifies a new collation with an ``\"en_US\"`` locale:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/collations.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n       myCollation := &options.Collation{Locale: \"en_US\"}\n       opts := options.Index().SetCollation(myCollation)\n\n       indexModel := mongo.IndexModel{\n         Keys:    bson.D{{\"name\", 1}},\n         Options: opts,\n       }\n\n       name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n       if err != nil {\n         panic(err)\n       }\n       fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n       Name of Index Created: name_1\n\n.. _golang-op-collation:\n\nSet a Collation on an Operation\n-------------------------------\n\nOperations that read, update, and delete documents from a collection can use collations.\nApplying a collation to an operation overrides any default collation previously defined\nfor a collection. \n\nIf you apply a new collation to an operation that differs from an index's collation,\nyou cannot use that index. As a result, the operation may not perform as well as one\nthat is covered by an index. For more information on the disadvantages of sorting operations\nnot covered by an index, see :manual:`Using Indexes to Sort Query Results </tutorial/sort-results-with-indexes/>`.\nSee the :manual:`MongoDB manual </reference/collation/#collation-document>` for a list of\noperations that support collation.\n\nExample\n~~~~~~~\n\nYou can use operations that support collation to update and query documents in the \n``books`` collection. \n\nThe following example uses the ``Find()`` method to return documents in which the ``length`` \nvalue is greater than ``\"1000\"``. The ``NumericOrdering`` collation field has a value of\n``true`` to ensure that values are sorted in numerical order rather than alphabetical\norder:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/collations.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"length\", bson.D{{\"$gt\", \"1000\"}}}}\n      myCollation := &options.Collation{Locale: \"en_US\", NumericOrdering: true}\n      opts := options.Find().SetCollation(myCollation)\n\n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      if err != nil {\n         panic(err)\n      }\n      \n      var results []bson.D\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n      \n      for _, result := range results {\n         res, _ := bson.MarshalExtJSON(result, false, false)\n         fmt.Println(string(res))\n      } \n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Les Misérables\",\"length\":\"1462\"}\n      {\"name\":\"Infinite Jest\",\"length\":\"1104\"}\n      {\"name\":\"Ça\",\"length\":\"1138\"}\n\nWithout specifying a collation with a ``NumericOrdering`` field set to ``true``, the\nsame ``Find()`` operation compares ``length`` values as strings. In this case, the\noutput resembles the following:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/collations.txt"
  },
  {
    "code": "   :copyable: false\n   \n   {\"name\":\"Emma\",\"length\":\"474\"}\n   {\"name\":\"Les Misérables\",\"length\":\"1462\"}\n   {\"\"name\":\"Infinite Jest\",\"length\":\"1104\"}\n   {\"name\":\"Cryptonomicon\",\"length\":\"918\"}\n   {\"name\":\"Ça\",\"length\":\"1138\"}\n\nAdditional Information\n----------------------\n\nTo learn more about the ``Find()`` method, see the :ref:`golang-retrieve` guide.\n\nTo learn more about collations, visit the following manual pages:\n\n- :manual:`Collation </reference/collation/#collation-document>`\n- :manual:`Collation Locales and Default Parameters </reference/collation-locales-defaults/#supported-languages-and-locales>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods discussed in this guide, see the following\nAPI Documentation:\n\n- `Collation <{+api+}/mongo/options#Collation>`__\n- `CreateCollectionOptions <{+api+}/mongo/options#CreateCollectionOptions>`__\n- `IndexModel <{+api+}/mongo#IndexModel>`__\n- `CreateOne() <{+api+}/mongo#IndexView.CreateOne>`__\n- `IndexOptions <{+api+}/mongo/options#IndexOptions>`__\n- `UpdateOptions <{+api+}/mongo/options#UpdateOptions>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/collations.txt"
  },
  {
    "code": "   :language: go\n\n.. tip::\n\n   Follow the :ref:`Quick Start guide <golang-connect-to-your-cluster>`\n   to retrieve your Atlas connection string.\n\n.. note::\n\n   To learn about connecting to Atlas Serverless, see the\n   :ref:`Serverless Instance Limitations page\n   <atlas-serverless-drivers>` to identify the minimum driver version\n   required.\n\n--------------------------------\nOther Ways to Connect to MongoDB\n--------------------------------\n\nIf you are connecting to a single MongoDB server instance or replica set\nthat is not hosted on Atlas, see the following sections to find out how to\nconnect.\n\nConnect to a MongoDB Server on Your Local Machine\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. include:: /includes/localhost-connection.rst\n\nTo test whether you can connect to your server, replace the connection\nstring with your localhost connection string in the preceding code example.\n\nConnect to a Replica Set\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA MongoDB replica set deployment is a group of connected instances that\nstore the same set of data. This configuration provides data\nredundancy and high data availability.\n\nTo connect to a replica set deployment, specify the hostname and port numbers\nof each instance, separated by commas, and the replica set name as the value\nof the ``replicaSet`` parameter in the connection string. In the following\nexample, the hostnames are ``host1``, ``host2``, and ``host3``, and the\nport numbers are all ``27017``. The replica set name is ``myRS``.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/connection-guide.txt"
  },
  {
    "code": "   :emphasize-lines: 1, 5\n\n   uri := \"mongodb://user:pass@sample.host:27017/?timeoutMS=5000\"\n   client, err := mongo.Connect(options.Client().ApplyURI(uri))\n   \n   ...\n   coll.InsertOne(context.Background(), doc)\n\nOperation Timeout\n^^^^^^^^^^^^^^^^^\n\nThe following example shows how to set an operation-level timeout in a\nContext, which takes priority over a client-level timeout you might have\nset:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/connection-options.txt"
  },
  {
    "code": "         :emphasize-lines: 1\n\n         opts := options.Client().ApplyURI(\"mongodb://localhost:27017/?compressors=snappy,zlib,zstd\")\n         client, _ := mongo.Connect(opts)\n\n   .. tab:: ClientOptions\n      :tabid: mongoclientoptions\n\n      To enable compression by specifying a `ClientOptions\n      <{+api+}/mongo/options#ClientOptions>`__ instance, pass one or more\n      compression algorithms to the ``SetCompressors()`` method as a string\n      array:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/network-compression.txt"
  },
  {
    "code": "         :emphasize-lines: 1\n\n         opts := options.Client().SetCompressors([]string{\"snappy\", \"zlib\", \"zstd\"})\n         client, _ := mongo.Connect(opts)\n\nSpecify compression algorithms by using the following strings:\n\n- ``\"snappy\"`` for `Snappy <https://google.github.io/snappy/>`__ compression\n- ``\"zlib\"`` for `Zlib <https://zlib.net/>`__ compression\n- ``\"zstd\"`` for `Zstandard <https://github.com/facebook/zstd/>`__ compression\n\n.. _compression-dependencies:\n\nCompression Algorithm Dependencies\n----------------------------------\n\nTo add the Snappy compression algorithm to your application, run the\nfollowing code: \n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/network-compression.txt"
  },
  {
    "code": "         :emphasize-lines: 1\n\n         uri := \"mongodb://<hostname>:<port>?tls=true\"\n         opts := options.Client().ApplyURI(uri)\n         client, _ := mongo.Connect(opts)\n\n   .. tab:: ClientOptions\n      :tabid: clientoptions tls true\n      \n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/tls.txt"
  },
  {
    "code": "         :emphasize-lines: 2\n         \n         uri := \"<connection string>\"\n         opts := options.Client().ApplyURI(uri).SetTLSConfig(&tls.Config{})\n         client, _ := mongo.Connect(opts)\n\n.. note::\n   \n   If your connection string uses a DNS SRV record by including\n   the ``mongodb+srv`` prefix, TLS is enabled on your connection by\n   default.\n\nTo view a full list of client options, see :ref:`golang-connection-options`.\n\n.. _golang-configure-tls-certificates:\n\nConfigure Certificates\n----------------------\n\nTo successfully initiate a TLS request, your application must present \ncryptographic certificates to prove its identity. Your application's\ncertificates must be stored as PEM files to enable TLS when connecting.\n\n.. important::\n\n   For production use, we recommend that your MongoDB deployment use valid\n   certificates generated and signed by the same certificate authority.\n   For testing, your deployment can use self-signed certificates.\n\nThe following list describes the components that your client must\npresent to establish a TLS-enabled connection:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 30 70\n\n   * - TLS Component\n     - Description\n\n   * - Certificate Authority (CA)\n     - One or more certificate authorities to\n       trust when making a TLS connection.\n\n   * - Client Certificate\n     - A digital certificate that allows the server to verify the identity\n       of your application to establish an encrypted network connection.\n\n   * - Certificate Key\n     - The client certificate private key file. This key is often\n       included within the certificate file itself.\n\n   * - Passphrase\n     - The password to decrypt the private client key if it is encrypted.\n\n.. _golang-client-tls-connect:\n\nReference Certificates in a Client\n----------------------------------\n\nYou must reference your certificates in your ``ClientOptions``\nobject so that the server can validate them before the client connects.\nWe recommend that you set the ``TLSConfig`` field of your\n``ClientOptions`` instance to a ``Config`` struct to configure your\nTLS connection. ``Config`` structs are native to Go and allow you to keep\nall your TLS options in a single reusable object.\n\nTo create a ``Config`` instance, import the ``crypto/tls`` and\n``crypto/x509`` packages. Next, create a ``Config`` struct instance and\nset the relevant struct fields for your configuration.\n\nWithin your ``Config`` instance, you can set optional\nfields to configure TLS on your connection. For **testing purposes**,\nyou can set the ``InsecureSkipVerify`` field to ``true``.\n   \n.. warning::\n\n   Setting the ``InsecureSkipVerify`` field to ``true`` disables\n   both certificate and hostname validation.\n   \n   Specifying this option in a production environment makes\n   your application insecure and potentially\n   vulnerable to expired certificates and foreign processes posing\n   as valid client instances.\n\nTo learn more about the ``Config`` struct, see the `tls.Config API\ndocumentation <https://pkg.go.dev/crypto/tls#Config>`__.\n\n.. _golang-tls-config-full-example:\n\nExample\n~~~~~~~\n\nThis example performs the following actions to create a ``Config``\ninstance and a ``Client`` instance with TLS enabled:\n\n1. Creates variables to reference the certificate filepaths\n\n#. Creates a CA file pool by using the ``x509.NewCertPool()`` method\n   and appends the contents of the CA file\n\n#. Loads the client certificate files by using the\n   ``tls.LoadX509KeyPair()`` method\n\n#. Instantiates a ``Config`` struct and sets the ``RootCAs`` and\n   ``Certificates`` fields\n\n#. Passes the ``Config`` instance to the ``SetTLSConfig()`` method to\n   set the ``TLSConfig`` field of the ``ClientOptions``\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/tls.txt"
  },
  {
    "code": "   :language: go\n\n.. _golang-tls-addtl-info:\n\nAdditional Information\n----------------------\n\nTo learn more about enabling TLS on a connection, see the\nfollowing Server manual documentation:\n\n- :manual:`TLS/SSL (Transport Encryption) </core/security-transport-encryption/>`\n- :manual:`TLS/SSL Configuration for Clients </tutorial/configure-ssl-clients/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods and types mentioned in this\nguide, see the following API documentation:\n\n- `ClientOptions <{+api+}/mongo/options#ClientOptions>`__\n- `SetTLSConfig() <{+api+}/mongo/options#ClientOptions.SetTLSConfig>`__\n- `tls package <https://pkg.go.dev/crypto/tls>`__\n- `x509 package <https://pkg.go.dev/crypto/x509>`__\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/connections/tls.txt"
  },
  {
    "code": "   :emphasize-lines: 2, 5\n\n    opts := options.Client()\n    opts.SetConnectTimeout(1*time.Second)\n    client, err := mongo.Connect(opts)\n\n    ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n    defer cancel()\n    client.Database(\"<db>\").Collection(\"<collection>\").InsertOne(ctx, bson.D{{\"x\",1}})\n\nSocket Read and Write\n~~~~~~~~~~~~~~~~~~~~~\n\nWhen the driver retrieves a connection for an operation, it sets the\nsocket’s read or write deadline to either the Context deadline or socket\ntimeout, whichever is shorter.\n\nIf you cancel the Context after the execution of the ``Read()`` or\n``Write()`` method but before its deadline, the behavior of the driver\ndiffers based on version.\n\nThe driver generates a separate goroutine to listen for Context\ncancellation when the ``Read()`` or ``Write()`` method is in progress.\nIf the goroutine detects a cancellation, it closes the connection. The\npending ``Read()`` or ``Write()`` method returns an error which the\ndriver overwrites with the ``context.Canceled`` error.\n\n.. important::\n\n    In versions prior to 1.5.0, the driver doesn't detect the Context\n    cancellation and waits for the ``Read()`` or ``Write()`` method to\n    return.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/context.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the\n``db.courses`` collection with the following\nsnippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/compound-operations.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\nEach document contains a description of a university course that\nincludes the course title and maximum enrollment, corresponding to\nthe ``title`` and ``enrollment`` fields in each document.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\n.. _golang-find-and-delete:\n\nFind and Delete\n---------------\n\nThe ``FindOneAndDelete()`` method finds the first document that matches\nthe specified query filter and deletes it. The method returns a\n``SingleResult`` containing the deleted document.\n\n.. note:: \n\n   The ``FindOneAndDelete()`` method is an atomic operation, which means it prevents\n   any other write operations from changing the matching document until it\n   completes. The ``deleteOne()`` method is also an atomic operation, but differs from\n   ``FindOneAndDelete()`` in that you cannot specify a sort order for the\n   matched documents. \n\n   To find a document and delete it in separate operations, call the\n\t ``findOne()`` method followed by the ``deleteOne()`` method.\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``FindOneAndDelete()`` method by\npassing in a ``FineOneAndDeleteOptions``. If you don't specify a\n``FineOneAndDeleteOptions``, the driver uses the default values for each\noption.\n\nThe ``FineOneAndDeleteOptions`` type allows you to configure options\nwith the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.\n       | Default: ``nil``\n\n   * - ``SetProjection()``\n     - | The fields to include in the document returned.\n       | Default: ``nil``\n\n   * - ``SetSort()``\n     - | The sort fields and directions to order the documents matched. \n       | Default: ``nil``\n\n   * - ``SetHint()``\n     - | The index to use to scan for documents.\n       | Default: ``nil``\n\nExample\n```````\n\nThe following example uses the ``FindOneAndDelete()`` method \nto match and delete the first document where the ``enrollment`` \nfield value is less than 20:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/compound-operations.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"enrollment\", bson.D{{\"$lt\", 20}}}}\n\n      var deletedDoc Course\n      err := coll.FindOneAndDelete(context.TODO(), filter).Decode(&deletedDoc)\n      if err != nil {\n         panic(err)\n      }\n\n      res, _ := bson.MarshalExtJSON(deletedDoc, false, false)\n      fmt.Println(string(res))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Animal Communication\",\"enrollment\":18}\n\n.. _golang-find-and-update:\n\nFind and Update\n---------------\n\nThe ``FindOneAndUpdate()`` method finds the first document that matches\nthe specified query filter and updates it according to the update\ndocument. The method returns a ``SingleResult`` containing the matched\ndocument.\n\n.. note:: \n\n   The ``FindOneAndUpdate()`` method is an atomic operation, which means it prevents\n   any other write operations from changing the matching document until it\n   completes. The ``updateOne()`` method is also an atomic operation, but differs from\n   ``FindOneAndUpdate()`` in that you cannot specify a sort order for the\n   matched documents. \n\n   To find a document and update it in separate operations, call \n   the ``findOne()`` method followed by the ``updateOne()`` method. \n \nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``FindOneAndUpdate()`` method by\npassing in a ``FineOneAndUpdateOptions``. If you don't specify a\n``FineOneAndUpdateOptions``, the driver uses the default values for each\noption.\n\nThe ``FineOneAndUpdateOptions`` type allows you to configure options\nwith the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetArrayFilters()``\n     - | The array elements the update applies to.\n       | Default: ``nil``\n\n   * - ``SetBypassDocumentValidation()``\n     - | Whether to allow the write operation to opt-out of :manual:`document level validation </core/schema-validation>`.\n       | Default: ``false``\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.\n       | Default: ``nil``\n\n   * - ``SetProjection()``\n     - | The fields to include in the document returned.\n       | Default: ``nil``\n\n   * - ``SetReturnDocument()``\n     - | Whether to return the original or updated document in the ``SingleResult``. \n       | Default: ``options.Before``\n\n   * - ``SetSort()``\n     - | The sort fields and directions to order the documents matched. \n       | Default: ``nil``\n\n   * - ``SetUpsert()``\n     - | Whether to insert a new document if the query filter doesn't match any documents. \n       | Default: ``false``\n\n   * - ``SetHint()``\n     - | The index to use to scan for documents.\n       | Default: ``nil``\n\nExample\n```````\n\nThe following example uses the ``FindOneAndUpdate()`` method to \nperform the following actions in order:\n\n- Matches the first document where the ``title`` field value includes \"Modern\"\n- Updates the matched document's ``enrollment`` field value to ``32``\n- Returns the updated document\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/compound-operations.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"title\", bson.D{{\"$regex\", \"Modern\"}}}}\n      update := bson.D{{\"$set\", bson.D{{\"enrollment\", 32}}}}\n      opts := options.FindOneAndUpdate().SetReturnDocument(options.After)\n      \n      var updatedDoc Course\n      err := coll.FindOneAndUpdate(context.TODO(), filter, update, opts).Decode(&updatedDoc)\n      if err != nil {\n          panic(err)\n      }\n      \n      res, _ := bson.MarshalExtJSON(updatedDoc, false, false)\n      fmt.Println(string(res))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Early Modern Philosophy\",\"enrollment\":32}\n\n.. _golang-find-and-replace:\n\nFind and Replace\n----------------\n\nThe ``FindOneAndReplace()`` method finds the first document that\nmatches the specified query filter and replaces it with the replacement\ndocument. The method returns a ``SingleResult`` containing the matched\ndocument.\n\n.. note:: \n\n   This method differs from the ``ReplaceOne()`` method.\n   ``FindOneAndReplace()`` performs a find and replace as a single\n   operation, and eliminates the possibility of someone altering a\n   document between both operations.\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``FindOneAndReplace()`` method by\npassing in a ``FineOneAndReplaceOptions``. If you don't specify a\n``FineOneAndReplaceOptions``, the driver uses the default values for each\noption.\n\nThe ``FineOneAndReplaceOptions`` type allows you to configure options\nwith the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetBypassDocumentValidation()``\n     - | Whether to allow the write operation to opt-out of :manual:`document level validation </core/schema-validation>`.\n       | Default: ``false``\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.\n       | Default: ``nil``\n\n   * - ``SetProjection()``\n     - | The fields to include in the document returned.\n       | Default: ``nil``\n\n   * - ``SetReturnDocument()``\n     - | Whether to return the original or replaced document in the ``SingleResult``. \n       | Default: ``nil``\n\n   * - ``SetSort()``\n     - | The sort fields and directions to order the documents matched. \n       | Default: ``nil``\n\n   * - ``SetUpsert()``\n     - | Whether to insert a new document if the query filter doesn't match any documents. \n       | Default: ``false``\n\n   * - ``SetHint()``\n     - | The index to use to scan for documents.\n       | Default: ``nil``\n\nExample\n```````\n\nThe following example uses the ``FindOneAndReplace()`` method to \nperform the following actions in order:\n\n- Matches the first document where the ``title`` is \"Representation Theory\"\n- Replaces the matched document with a new document where the ``title``\n  is \"Combinatorial Theory\" and the ``enrollment`` is ``35``\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/compound-operations.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"title\", \"Representation Theory\"}}\n      replacement := Course{Title: \"Combinatorial Theory\", Enrollment: 35}\n      \n      var outdatedDoc Course\n      err := coll.FindOneAndReplace(context.TODO(), filter, replacement).Decode(&previousDoc)\n      if err != nil {\n          panic(err)\n      }\n      \n      res, _ := bson.MarshalExtJSON(outdatedDoc, false, false)\n      fmt.Println(string(res))\n      \n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Representation Theory\",\"enrollment\":40}\n\nAdditional Information\n----------------------\n\nTo learn more about performing the operations mentioned, see the\nfollowing guides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-retrieve`\n- :ref:`golang-delete-guide`\n- :ref:`golang-change-document`\n- :ref:`Access Data in a SingleResult <golang-bson-unmarshalling>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `FindOneAndDelete() <{+api+}/mongo#Collection.FindOneAndDelete>`__\n- `FindOneAndDeleteOptions <{+api+}/mongo/options#FindOneAndDeleteOptions>`__\n- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__\n- `FindOneAndUpdateOptions <{+api+}/mongo/options#FindOneAndUpdateOptions>`__\n- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__\n- `FindOneAndReplaceOptions <{+api+}/mongo/options#FindOneAndReplaceOptions>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/compound-operations.txt"
  },
  {
    "code": "   :start-after: begin struct\n   :end-before: end struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load these documents into the\n``courses`` collection in the ``db`` database by using the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title and maximum enrollment, corresponding to\nthe ``title`` and ``enrollment`` fields in each document.\n\n.. note::\n\n   Each example output shows truncated ``_data``, ``clusterTime``, and\n   ``ObjectID`` values because the driver generates them uniquely.\n\nOpen a Change Stream\n--------------------\n\nTo open a change stream, use the ``Watch()`` method. The ``Watch()`` method requires a context\nparameter and a pipeline parameter. To return all changes, pass in an\nempty ``Pipeline`` object.\n\nExample\n~~~~~~~\n\nThe following example opens a change stream on the ``courses`` collection and\noutputs all changes:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin open stream\n   :end-before: end open stream\n\nIf you modify the ``courses`` collection in a separate program or shell, this code prints\nyour changes as they occur. Inserting a document with a ``title`` value\nof ``\"Advanced Screenwriting\"`` and an ``enrollment`` value of ``20``\nresults in the following change event:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :copyable: false\n\n   map[_id:map[_data:...] clusterTime: {...} documentKey:map[_id:ObjectID(\"...\")]\n   fullDocument:map[_id:ObjectID(\"...\") enrollment:20 title:Advanced Screenwriting] ns:\n   map[coll:courses db:db] operationType:insert]\n\nModify the Change Stream Output\n-------------------------------\n\nUse the pipeline parameter to modify the change stream output. This parameter allows you to\nonly watch for certain change events. Format the pipeline parameter as an array of documents,\nwith each document representing an aggregation stage.\n\nYou can use the following pipeline stages in this parameter:\n\n- ``$addFields``\n- ``$match``\n- ``$project``\n- ``$replaceRoot``\n- ``$replaceWith``\n- ``$redact``\n- ``$set``\n- ``$unset``\n\nExample\n~~~~~~~\n\nThe following example opens a change stream on the ``db`` database but only watches for\nnew delete operations:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin delete events\n   :end-before: end delete events\n\n.. note::\n\n   The ``Watch()`` method was called on the ``db`` database, so the code outputs\n   new delete operations on any collection within this database.\n\nModify the Behavior of ``Watch()``\n----------------------------------\n\nUse the ``options`` parameter to modify the behavior of the ``Watch()`` method.\n\nYou can specify the following options for the ``Watch()`` method:\n\n- ``ResumeAfter``\n- ``StartAfter``\n- ``FullDocument``\n- ``FullDocumentBeforeChange``\n- ``BatchSize``\n- ``MaxAwaitTime``\n- ``Collation``\n- ``StartAtOperationTime``\n- ``Comment``\n- ``ShowExpandedEvents``\n- ``StartAtOperationTime``\n- ``Custom``\n- ``CustomPipeline``\n\nFor more information on these options, visit the\n:manual:`MongoDB Server manual </reference/method/db.collection.watch/>`.\n\nPre- and Post-Images\n~~~~~~~~~~~~~~~~~~~~\n\nWhen you perform any CRUD operation on a collection, by default, the\ncorresponding change event document contains only the delta of the fields modified\nby the operation. You can see the full document before and after a\nchange, in addition to the delta, by specifying settings in the ``options``\nparameter of the ``Watch()`` method.\n\nIf you want to see a document's post-image, the full version of the\ndocument after a change, set the ``FullDocument`` field of the\n``options`` parameter to one of the following values:\n\n- ``UpdateLookup``: The change event document includes a copy of the\n  entire changed document.\n- ``WhenAvailable``: The change event document includes a post-image of\n  the modified document for change events if the\n  post-image is available.\n- ``Required``: The output is the same as for ``WhenAvailable``, but the\n  driver raises a server-side error if the post-image is not available.\n\nIf you want to see a document's pre-image, the full version of the\ndocument before a change, set the ``FullDocumentBeforeChange`` field of the\n``options`` parameter to one of the following values:\n\n- ``WhenAvailable``: The change event document includes a pre-image of\n  the modified document for change events if the\n  pre-image is available.\n- ``Required``: The output is the same as for ``WhenAvailable``, but the\n  driver raises a server-side error if the pre-image is not available.\n\n.. important::\n\n   To access document pre- and post-images, you must enable\n   ``changeStreamPreAndPostImages`` for the collection. See the\n   :manual:`MongoDB Server manual\n   </reference/command/collMod/#change-streams-with-document-pre--and-post-images>` for instructions and more\n   information.\n\n.. note::\n\n   There is no pre-image for an inserted document and no post-image for\n   a deleted document.\n\nExample\n~~~~~~~\n\nThe following example calls the ``Watch()`` method on the ``courses`` collection. It\nspecifies a value for the ``FullDocument`` field of the ``options`` parameter to\noutput a copy of the entire modified document, instead of only the changed fields:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin full document\n   :end-before: end full document\n\nUpdating the ``enrollment`` value of the document with the\n``title`` of ``\"World Fiction\"`` from ``35`` to ``30`` results in the\nfollowing change event:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"_id\": {\"_data\": \"...\"},\"operationType\": \"update\",\"clusterTime\": {\"$timestamp\":\n   {\"t\":\"...\",\"i\":\"...\"}},\"fullDocument\": {\"_id\":\n   {\"$oid\":\"...\"},\"title\": \"World Fiction\",\"enrollment\":\n   {\"$numberInt\":\"30\"}}, \"ns\": {\"db\": \"db\",\"coll\": \"courses\"},\"documentKey\": {\"_id\":\n   {\"$oid\":\"...\"}}, \"updateDescription\": {\"updatedFields\": {\"enrollment\": {\"$numberInt\":\"30\"}},\n   \"removedFields\": [],\"truncatedArrays\": []}}\n\nWithout specifying the ``FullDocument`` option, the same update operation no longer\noutputs the ``\"fullDocument\"`` value in the change event document.\n\nAdditional Information\n----------------------\n\nFor a runnable example of a change stream, see :ref:`golang-usageex-monitor-changes`.\n\nFor more information on change streams, see :manual:`Change Streams </changeStreams/>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the ``Watch()`` method, visit the following API documentation links:\n\n- `Watch() for collections <{+api+}/mongo#Collection.Watch>`__\n- `Watch() for databases <{+api+}/mongo#Database.Watch>`__\n- `Watch() for clients <{+api+}/mongo#Client.Watch>`__\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/changestream.txt"
  },
  {
    "code": "   :start-after: start-tea-struct\n   :end-before: end-tea-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the ``tea`` collection in the ``db``\ndatabase with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insert docs\n   :end-before: end insert docs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document describes a tea type and its rating. These items\ncorrespond to the ``type`` and ``rating`` fields.\n\n.. _golang-accurate-count:\n\nAccurate Count\n--------------\n\nTo count the number of documents that match your query filter, use the\n``CountDocuments()`` method. If you pass an empty query filter, this method\nreturns the total number of documents in the collection.\n\n.. tip::\n\n   When you use ``CountDocuments()`` to return the total number of documents in a\n   collection, MongoDB performs a collection scan. You can avoid a collection scan and\n   improve the performance of this method by using a :manual:`hint\n   </reference/method/cursor.hint>` to take advantage of the built-in index on\n   the ``_id`` field. Use this technique only when calling ``CountDocuments()``\n   with an empty query parameter.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "      :emphasize-lines: 1, 3\n\n      opts := options.Count().SetHint(\"_id_\")\n\n      count, err := coll.CountDocuments(context.TODO(), bson.D{}, opts)\n      if err != nil {\n   \t   panic(err)\n      }\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``CountDocuments()`` by passing in a\n``CountOptions`` type. If you don't specify any options, the driver uses\nits default values.\n\nThe ``CountOptions`` type allows you to configure options with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.  \n       | Default: ``nil``\n\n   * - ``SetHint()`` \n     - | The index to use to scan for documents to count. \n       | Default: ``nil``\n\n   * - ``SetLimit()`` \n     - | The maximum number of documents to count. \n       | Default: ``0`` \n\n   * - ``SetSkip()`` \n     - | The number of documents to skip before counting.\n       | Default: ``0``\n\nExample \n```````\n\nThe following example counts the number of documents where the\n``rating`` is less than ``6``:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"rating\", bson.D{{\"$lt\", 6}}}}\n      \n      count, err := coll.CountDocuments(context.TODO(), filter)\n      if err != nil {\n          panic(err)\n      }\n      fmt.Printf(\"Number of documents with a rating less than six: %d\\n\", count)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents with a rating less than six: 4\n\n.. _golang-count-aggregation:\n\nAggregation\n-----------\n\nYou can also include the :manual:`$count </reference/operator/aggregation/count/>`\nstage to count the number of documents in an aggregation pipeline.\n\nExample\n~~~~~~~\n\nThe following example performs the following actions:\n\n- Counts the number of documents in which the value of the ``rating`` field is greater\n  than ``5``\n- Assigns the count to the ``counted_documents`` field\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      matchStage := bson.D{{\"$match\", bson.D{{\"rating\", bson.D{{\"$gt\", 5}}}}}}\n      countStage := bson.D{{\"$count\", \"counted_documents\"}}\n\n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, countStage})\n      if err != nil {\n         panic(err)\n      }\n\n      var results []bson.D\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n      for _, result := range results {\n         fmt.Println(result)\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      [{counted_documents 5}]\n\n.. _golang-estimated-count:\n\nEstimated Count\n---------------\n\nTo estimate the number of documents in your collection, use the\n``EstimatedDocumentCount()`` method. \n\n.. note:: \n\n    The ``EstimatedDocumentCount()`` method is quicker than the\n    ``CountDocuments()`` method because it uses the collection's\n    metadata rather than scanning the entire collection. \n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``EstimatedDocumentCount()`` by passing\nin an ``EstimatedDocumentCountOptions`` type. If you don't specify any\noptions, the driver uses its default values.\n\nThe ``EstimatedDocumentCountOptions`` type allows you to configure\noptions by using the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetComment()``\n     - | Sets a comment to attach to the count operation.\n       | Default: ``nil``\n\nExample\n```````\n\nThe following example estimates the number of documents in the\n``tea`` collection:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      count, err := coll.EstimatedDocumentCount(context.TODO())\n      if err != nil {\n         panic(err)\n      }\n      fmt.Printf(\"Estimated number of documents in the tea collection: %d\\n\", count)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Estimated number of documents in the tea collection: 9\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-skip`\n- :ref:`golang-limit`\n- :ref:`golang-aggregation` \n- :ref:`golang-collations`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__\n- `CountOptions <{+api+}/mongo/options#CountOptions>`__\n- `EstimatedDocumentCount() <{+api+}/mongo#Collection.EstimatedDocumentCount>`__\n- `EstimatedDocumentCountOptions <{+api+}/mongo/options#EstimatedDocumentCountOptions>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/count.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin cursor def\n   :end-before: end cursor def\n\nIn the examples in this guide, the driver unmarshals documents held in\nthe ``cursor`` variable to a sample ``MyStruct`` struct.\n\n.. important::\n\n   A cursor is not `goroutine <https://www.golang-book.com/books/intro/10>`__ safe. Do not use the same cursor in\n   multiple goroutines at the same time.\n\n.. _golang-individual-documents:\n\nRetrieve Documents Individually\n-------------------------------\n\nTo retrieve documents from your cursor individually while blocking the\ncurrent goroutine, use the ``Next()`` method.\n\nThe method returns a document if all of the following conditions are met:\n\n- A document is currently or will later be available.\n- The driver didn't throw any errors.\n- The context didn't expire.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/cursor.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin cursor next\n   :end-before: end cursor next\n\nTailable Cursor\n~~~~~~~~~~~~~~~\n\nTo attempt retrieving a document from a :manual:`tailable cursor\n</core/tailable-cursors/>`, use the ``TryNext()`` method.\n\nThe method returns a document if all of the following conditions are met:\n\n- A document is currently available.\n- The driver didn't throw any errors.\n- The context didn't expire.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/cursor.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin cursor try next\n   :end-before: end cursor try next\n\n.. _golang-all-documents:\n\nRetrieve All Documents\n----------------------\n\nTo populate an array with all of your query results, use the ``All()``\nmethod:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/cursor.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin cursor all\n   :end-before: end cursor all\n\n.. important:: Memory\n\n   If the number and size of documents returned by your query exceeds\n   available application memory, your program will crash. If you except\n   a large result set, you should :ref:`consume your cursor iteratively\n   <golang-individual-documents>`.\n\nClose the Cursor\n----------------\n\nWhen your application no longer requires a cursor, close the cursor\nwith the ``Close()`` method. This method frees the resources your cursor\nconsumes in both the client application and the MongoDB server.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/cursor.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin close\n   :end-before: end close\n\n.. note:: \n\n   Close the cursor when you :ref:`retrieve documents individually\n   <golang-individual-documents>` because those methods make a cursor\n   :manual:`tailable </core/tailable-cursors/>`.\n\nAdditional Information\n----------------------\n\nTo learn more about the operations discussed in this guide, see the\nfollowing guides:\n\n- :ref:`golang-retrieve`\n- :ref:`golang-query-document`\n- :ref:`golang-bson`\n- :manual:`Tailable Cursors </core/tailable-cursors/>`\n\n.. - Fundamentals > BSON page\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about cursors and how to access their elements, see\nthe following API Documentation:\n\n- `Cursor <{+api+}/mongo#Cursor>`__\n- `Cursor.All() <{+api+}/mongo#Cursor.All>`__\n- `Cursor.Next() <{+api+}/mongo#Cursor.Next>`__\n- `Cursor.TryNext() <{+api+}/mongo#Cursor.TryNext>`__\n- `Cursor.Decode() <{+api+}/mongo#Cursor.Decode>`__\n- `Cursor.RemainingBatchLength() <{+api+}/mongo#Cursor.RemainingBatchLength>`__\n- `Cursor.ID() <{+api+}/mongo#Cursor.ID>`__\n- `Cursor.Err() <{+api+}/mongo#Cursor.Err>`__\n- `Cursor.Close() <{+api+}/mongo#Cursor.Close>`__\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/cursor.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nTo run the example, load the sample data into the\n``db.courses`` collection with the following\nsnippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insert docs\n   :end-before: end insert docs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title, department, and enrollment. These items\ncorrespond to the ``title``, ``department``, and ``enrollment`` fields\nin each document.\n\nDistinct\n--------\n\nTo retrieve distinct values for a specified field across a single\ncollection, pass the following parameters to the ``Distinct()``\nmethod:\n\n- The field name for which you want to retrieve the distinct values \n- A ``non-nil`` query filter specifying which documents to match\n\n.. tip::\n\n   If you specify an empty query filter, the ``Distinct()`` method\n   searches for distinct values across all documents in a collection.\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of the ``Distinct()`` method by\npassing in a ``DistinctOptions``. If you don't specify a\n``DistinctOptions``, the driver uses the default values for each\noption.\n\nThe ``DistinctOptions`` type allows you to configure options\nwith the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.  \n       | Default: ``nil``\n\n   * - ``SetComment()``\n     - | Sets a comment to attach to the distinct operation.\n       | Default: ``nil``\n\nExample\n```````\n\nThe following example matches documents with an ``enrollment`` field\nvalue less than ``50`` and prints the distinct values\nof the ``department`` field by using the ``Distinct()`` method: \n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-snippets/CRUD/distinctValues.go\n      :start-after: begin distinct\n      :end-before: end distinct\n      :language: go\n      :dedent:\n\n   .. output::\n      :language: none\n      :visible: false\n\n      [English Geology]\n\nAdditional Information\n----------------------\n\nFor a runnable example that retrieves distinct values, see :ref:`golang-distinct-usage-example`.\n\nTo learn about constructing a query filter, see :ref:`golang-query-document`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Distinct() <{+api+}/mongo#Collection.Distinct>`__\n- `DistinctOptions <{+api+}/mongo/options#DistinctOptions>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/distinct.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the\n``db.courses`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title and maximum enrollment, corresponding to\nthe ``title`` and ``enrollment`` fields in each document.\n\nLimit\n-----\n\nTo limit the number of documents returned from a query, pass the\nnumber of documents you want returned to the ``SetLimit()`` method of\nthe read operation's options.\n\nThe following read operations take an options object as a parameter:\n\n- ``Find()``\n- ``CountDocuments()``\n- ``GridFSBucket.Find()``\n\nIf the limit is ``0`` or exceeds the number of matched\ndocuments, the method returns all the documents. If the limit is a\nnegative number, the method uses the absolute value of the negative\nnumber as the limit and closes the cursor after retrieving\ndocuments.\n\nExample\n~~~~~~~\n\nThe following example shows how to return two documents that have an\n``enrollment`` field value greater than 20:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"enrollment\", bson.D{{\"$gt\", 20}}}}\n      opts := options.Find().SetLimit(2)\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Concepts in Topology\",\"enrollment\":35}\n      {\"title\":\"Ancient Greece\",\"enrollment\":100}\n\nMultiple Options\n----------------\n\nThe driver performs the limit behavior last regardless of the order in which you set\nany other options.\n\nExample\n~~~~~~~\n\nThe following example performs a ``Find()`` operation with the following behavior:\n\n- Sorts the results in descending order on the ``enrollment`` field\n- Skips the first document\n- Returns the first two of the remaining documents\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{}\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}}).SetLimit(2).SetSkip(1)\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Physiology I\",\"enrollment\":60}\n      {\"title\":\"Concepts in Topology\",\"enrollment\":35}\n\n.. tip::\n\n   Using any of the following option configurations also produces the same result:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "      :copyable: false\n\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}}).SetSkip(1).SetLimit(2)\n      opts := options.Find().SetLimit(2).SetSort(bson.D{{\"enrollment\", -1}}).SetSkip(1)\n      opts := options.Find().SetLimit(2).SetSkip(1).SetSort(bson.D{{\"enrollment\", -1}})\n      opts := options.Find().SetSkip(1).SetSort(bson.D{{\"enrollment\", -1}}).SetLimit(2)\n      opts := options.Find().SetSkip(1).SetLimit(2).SetSort(bson.D{{\"enrollment\", -1}})\n\n.. _golang-limit-aggregation:\n\nAggregation\n-----------\n\nYou can also include the :manual:`$limit </reference/operator/aggregation/limit/>`\nstage to specify a limit in an aggregation pipeline.\n\nExample\n~~~~~~~\n\nThe following example shows how to return three documents:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      limitStage := bson.D{{\"$limit\", 3}}\n      \n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{limitStage})\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Romantic Era Music\",\"enrollment\":15}\n      {\"title\":\"Concepts in Topology\",\"enrollment\":35}\n      {\"title\":\"Ancient Greece\",\"enrollment\":100}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-retrieve`\n- :ref:`golang-sort-results`\n- :ref:`golang-skip`\n- :ref:`golang-aggregation`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `FindOptions.SetLimit() <{+api+}/mongo/options#FindOptions.SetLimit>`__\n- `FindOptions.SetSort() <{+api+}/mongo/options#FindOptions.SetSort>`__\n- `FindOptions.SetSkip() <{+api+}/mongo/options#FindOptions.SetSkip>`__\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__\n- `GridFSBucket.Find() <{+api+}/mongo#GridFSBucket.Find>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/limit.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` directs the\ndriver to exclude fields when unmarshalling based on your projection\nspecification.\n\nTo run the examples in this guide, load the sample data into the\n``db.courses`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title, course ID, and maximum enrollment, corresponding to\nthe ``title``, ``course_id``, and ``enrollment`` fields in each document.\n\nProjection\n----------\n\nA projection specifies which fields to return in matched documents. The\nprojection document contains field names with a ``1`` to include the\ncorresponding field or ``0`` to exclude it. If you are using an aggregation framework,\nyou can also specify a projection to include newly computed fields.\n\nYou can specify a projection by passing a projection document to the ``SetProjection()``\nmethod. The following operations take an options object as a parameter:\n\n- ``Find()``\n- ``FindOne()``\n- ``FindOneAndDelete()``\n- ``FindOneAndReplace()``\n- ``FindOneAndUpdate()``\n\n.. tip::\n\n   If you don't specify a projection, the operation returns all\n   the fields in matched documents.\n\nExclude a Field\n~~~~~~~~~~~~~~~\n\nTo exclude a field, pass the field you want to exclude with a ``0`` to\nthe ``SetProjection()`` method. The driver includes all fields that are\nnot explicitly excluded in the projection document, if you specify any\nfields to exclude.\n\nExample\n```````\n\nThe following example excludes the ``course_id`` and ``enrollment``\nfields from the matched documents returned by the ``Find()`` method:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{}\n      opts := options.Find().SetProjection(bson.D{{\"course_id\", 0}, {\"enrollment\", 0}})\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Primate Behavior\"}\n      {\"title\":\"Revolution and Reform\"}\n\nInclude a Field\n~~~~~~~~~~~~~~~\n\nTo include a field, pass the field you want to include with a ``1`` to\nthe ``SetProjection()`` method. The driver excludes all fields that are\nnot explicitly included in the projection document, if you specify any\nfields to include.\n\n.. _golang-include-projection:\n\nExample\n```````\n\nThe following example includes only the ``title`` and ``enrollment`` fields\nfrom the matched documents returned by the ``Find()`` method:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{}\n      opts := options.Find().SetProjection(bson.D{{\"title\", 1}, {\"enrollment\", 1}})\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Primate Behavior\",\"enrollment\":40}\n      {\"title\":\"Revolution and Reform\",\"enrollment\":12}\n\nAggregation\n~~~~~~~~~~~\n\nYou can also create a :manual:`$project </reference/operator/aggregation/project/>`\nstage to specify a projection in an aggregation pipeline.\n\nExample\n```````\n\nThe following example includes only the ``title`` and ``course_id`` fields\nfrom the matched documents returned by the ``Aggregate()`` method:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      projectStage := bson.D{{\"$project\", bson.D{{\"title\", 1}, {\"course_id\", 1}}}}\n      \n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{projectStage})\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Primate Behavior\",\"course_id\":\"PSY2030\"}\n      {\"title\":\"Revolution and Reform\",\"course_id\":\"HIST3080\"}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-retrieve`\n- :ref:`golang-compound-operations`\n- :ref:`golang-aggregation`\n\nTo learn about projecting text scores from your text search, see :ref:`golang-search-text`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `FindOptions.SetProjection() <{+api+}/mongo/options#FindOptions.SetProjection>`__\n- `FindOne() <{+api+}/mongo#Collection.FindOne>`__\n- `FindOneAndDelete() <{+api+}/mongo#Collection.FindOneAndDelete>`__\n- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__\n- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/project.txt"
  },
  {
    "code": "   :copyable: false\n\n   filter := bson.D{{\"<field>\", \"<value>\"}}\n\nMatch criteria with a query operator use the following format:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: false\n\n   filter := bson.D{{\"<field>\", bson.D{{\"<operator>\", \"<value>\"}}}}\n\nThe following sections use :ref:`literal values <golang-literal-values>`\nand :ref:`query operators <golang-query-operators>` with the ``Find()``\nmethod to match a subset of documents.\n\nSample Data\n~~~~~~~~~~~\n\nThe examples in this section use the following ``Tea`` struct as a model for documents\nin the ``tea`` collection:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :start-after: start-tea-struct\n   :end-before: end-tea-struct\n   :language: go\n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` omits the corresponding \nfield from the inserted document when left empty.\n\nTo run the examples in this guide, load the sample data into the ``tea`` collection in\nthe ``db`` database with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insert docs\n   :end-before: end insert docs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document describes a tea type, its rating, and the vendors that\ncarry that variety. These items correspond to the ``type``, ``rating``, and\n``vendor`` fields.\n\n.. _golang-literal-values:\n\nLiteral Values\n--------------\n\nLiteral value query filters return documents with an exact match to your\nmatch criteria.\n\n.. tip::\n\n   If you specify an empty query filter, CRUD operations match all the\n   documents in a collection.\n\nExample\n~~~~~~~\n\nThe following example matches documents where the ``type`` is \"Oolong\":\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"type\", \"Oolong\"}}\n      \n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"Oolong\",\"rating\":7,\"vendor\":[\"C\"]}\n\n.. tip::\n\n   Literal value queries return the same value as the ``$eq``\n   comparison operator. For example, the following query filters produce\n   the same result:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"rating\", bson.D{{\"$lt\", 7}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"English Breakfast\",\"rating\":6}\n      {\"type\":\"Assam\",\"rating\":5}\n\nFor a full list of comparison operators, see the :manual:`Comparison\nQuery Operators </reference/operator/query-comparison/>` page.\n\nLogical\n-------\n\nLogical operators require at least two match criteria. They check if\ndocuments meet all, at lease one, or none of the specified criteria.\nCommon logical operators include ``$and`` where all match criteria must\nbe true, and ``$or`` where at least one of the match criteria must be\ntrue.\n\nExample\n~~~~~~~\n\nThe following example matches documents where the ``rating`` is greater\nthan ``7`` and less than or equal to ``10``:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{\n         {\"$and\",\n            bson.A{\n               bson.D{{\"rating\", bson.D{{\"$gt\", 7}}}},\n               bson.D{{\"rating\", bson.D{{\"$lte\", 10}}}},\n            },\n         },\n      }\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"Masala\",\"rating\":10,\"vendor\":[\"A\",\"C\"]}\n      {\"type\":\"Earl Grey\",\"rating\":8,\"vendor\":[\"A\",\"B\"]}\n\nFor a full list of logical operators, see the :manual:`Logical\nQuery Operators </reference/operator/query-logical/>` page.\n\n.. tip::\n\n   Multiple match criteria resembling an ``$eq`` comparison operator in\n   a literal query return the same value as the ``$and`` logical\n   operator. For example, the following query filters produce the same result:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"vendor\", bson.D{{\"$exists\", false}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"English Breakfast\",\"rating\":6}\n      {\"type\":\"Assam\",\"rating\":5}\n\nFor a full list of element operators, see the :manual:`Element\nQuery Operators </reference/operator/query-element/>` page.\n\nEvaluation\n----------\n\nEvaluation operators analyze values in a document based on the\nspecified value in your match criteria. Common evaluation operators\ninclude ``$regex`` where a field's value must match the specified\nregular expression and ``$text`` where the field's value must contain\nthe specified string.\n\nExample\n~~~~~~~\n\nThe following example matches documents where the ``type`` begins with\nthe letter \"E\":\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"type\", bson.D{{\"$regex\", \"^E\"}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"English Breakfast\",\"rating\":6}\n      {\"type\":\"Earl Grey\",\"rating\":8,\"vendor\":[\"A\",\"B\"]}\n\nFor a full list of evaluation operators, see the :manual:`Evaluation\nQuery Operators </reference/operator/query-evaluation/>` page.\n\nArray\n-----\n\nArray operators check the values or amount of elements in an array field.\n\nExample\n~~~~~~~\n\nThe following example matches documents where the ``vendor`` contains \"C\":\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"vendor\", bson.D{{\"$all\", bson.A{\"C\"}}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"Masala\",\"rating\":10,\"vendor\":[\"A\",\"C\"]}\n      {\"type\":\"Oolong\",\"rating\":7,\"vendor\":[\"C\"]}\n\nFor a full list of array operators, see the :manual:`Array\nQuery Operators </reference/operator/query-array/>` page.\n\nBitwise\n-------\n\nBitwise operators convert a numeric field from a base-10 (decimal)\nnumber into the corresponding base-2 (binary) number. They check whether\nthe value in a document has the same bits set as the value in your match\ncriteria.\n\nExample\n~~~~~~~\n\nThe following example matches documents where the ``rating`` has the same\nbits set as ``6`` (which is \"00000110\"):\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"rating\", bson.D{{\"$bitsAllSet\", 6}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Tea\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"type\":\"English Breakfast\",\"rating\":6}\n      {\"type\":\"Oolong\",\"rating\":7,\"vendor\":[\"C\"]}\n\nFor a full list of bitwise operators, see the :manual:`Bitwise\nQuery Operators </reference/operator/query-bitwise/>` page.\n\nAdditional Information\n----------------------\n\nFor information on specifying a geospatial query, see the guide on\n:ref:`Geospatial Data <golang-geo>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types used in this\nguide, see the following API Documentation:\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `Cursor <{+api+}/mongo#Cursor>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/query-document.txt"
  },
  {
    "code": "   :start-after: start-tea-struct\n   :end-before: end-tea-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load these documents into the\n``tea`` collection in the ``db`` database by using the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insert docs\n   :end-before: end insert docs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document describes the tea variety a customer ordered, their\nrating, and the date of the order. These descriptions correspond to the\n``item``, ``rating``, and ``date_ordered`` fields.\n\n.. _golang-retrieve-find:\n\nFind Operations\n---------------\n\nUse **find operations** to retrieve data from MongoDB. Find operations\nconsist of the ``Find()`` and ``FindOne()`` methods.\n\nFind All Documents\n~~~~~~~~~~~~~~~~~~\n\nThe ``Find()`` method expects you to pass a ``Context`` type and a\nquery filter. The method returns *all* documents that match the filter\nas a ``Cursor`` type.\n\nFor an example that uses the ``Find()`` method, see the :ref:`golang-find-example`\nsection of this page. To learn how to access data by using a cursor, see\nthe :ref:`golang-cursor` guide.\n\nFind One Document\n~~~~~~~~~~~~~~~~~\n\nThe ``FindOne()`` method expects you to pass a ``Context`` type and a\nquery filter. The method returns *the first document* that matches the\nfilter as a ``SingleResult`` type.\n\nFor an example that uses the ``FindOne()`` method, see the\n:ref:`golang-find-one-example` section of this page. For an example that\nuses ``FindOne()`` and queries by using a specific ``ObjectId`` value, see\nthe :ref:`golang-find-one-by-id` section of this page.\n\nTo learn how to access data from a ``SingleResult`` type, see\n:ref:`golang-bson-unmarshalling` in the BSON guide.\n\n.. _golang-retrieve-options:\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``Find()`` and ``FindOne()`` by passing\nin a ``FindOptions`` and ``FindOneOptions`` type respectively. If you\ndon't specify any options, the driver uses the default values for each\noption.\n\nYou can configure the commonly used options in both types with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()`` \n     - | The type of language collation to use when sorting results.  \n       | Default: ``nil``\n\n   * - ``SetLimit()`` \n     - | The maximum number of documents to return. \n       | Default: ``0`` \n       | This option is not available for ``FindOneOptions``. The\n        ``FindOne()`` method internally uses ``SetLimit(-1)``.\n\n   * - ``SetProjection()`` \n     - | The fields to include in the returned documents. \n       | Default: ``nil``\n\n   * - ``SetSkip()`` \n     - | The number of documents to skip.\n       | Default: ``0``\n\n   * - ``SetSort()`` \n     - | The field and type of sort to order the matched documents. You can specify an ascending or descending sort.\n       | Default: none\n\n.. _golang-find-example:\n\nFind Example\n````````````\n\nThe following example passes a context, filter, and ``FindOptions`` to\nthe ``Find()`` method, which performs the following actions:\n\n- Matches documents where the ``rating`` value is between ``5`` and\n  ``9`` (exclusive)\n- Sorts the matched documents in ascending order by ``date_ordered``\n  \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "  :copyable: true\n\n  .. input:: /includes/fundamentals/code-snippets/CRUD/retrieve.go\n      :start-after: begin find docs\n      :end-before: end find docs\n      :language: go\n      :dedent:\n\n  .. output::\n      :language: none\n      :visible: false\n\n      {\"item\":\"Sencha\",\"rating\":7,\"date_ordered\":\"2009-11-18T05:00:00Z\"}\n      {\"item\":\"Masala\",\"rating\":8,\"date_ordered\":\"2009-12-01T05:00:00Z\"}\n\n.. _golang-find-one-example:\n\nFind One Example\n````````````````\n\nThe following example passes a context, filter, and ``FindOneOptions``\nto the ``FindOne()`` method, which performs the following actions:\n\n- Matches documents where the ``date_ordered`` value is on or before November\n  30, 2009\n- Skips the first two matched documents\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "  :copyable: true\n\n  .. input:: /includes/fundamentals/code-snippets/CRUD/retrieve.go\n      :start-after: begin find one docs\n      :end-before: end find one docs\n      :language: go\n      :dedent:\n\n  .. output::\n      :language: none\n      :visible: false\n\n      {\"item\":\"Masala\",\"rating\":9,\"date_ordered\":\"2009-11-12T05:00:00Z\"}\n\n.. _golang-find-one-by-id:\n\nFind One by ObjectId Example\n````````````````````````````\n\nThis example defines an ``id`` variable with a value of type ``ObjectId``\nand uses ``id`` to specify a query filter. The filter matches a document\nwith an ``_id`` field value that corresponds to the ``id`` variable.\nThis example queries for the following document based on its ``_id`` value:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :copyable: false\n   :emphasize-lines: 2\n\n    {\n        _id: ObjectId('65170b42b99efdd0b07d42de'),\n        item: \"Hibiscus\",\n        rating : 4,\n        date_ordered : 2009-12-18T05:00:00.000+00:00\n    }\n\nThe following code passes the filter and a ``FindOneOptions`` instance\nas parameters to the ``FindOne()`` method to perform the following actions:\n\n- Match the document with the specified ``ObjectId`` value\n- Project only the ``Item`` and ``Rating`` fields of the matched document\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "  :copyable: true\n\n  .. input:: /includes/fundamentals/code-snippets/CRUD/retrieve.go\n      :start-after: begin objectid\n      :end-before: end objectid\n      :language: go\n      :dedent:\n\n  .. output::\n      :language: none\n      :visible: false\n\n      {\"item\":\"Hibiscus\",\"rating\":4}\n\n.. note::\n\n   The {+driver-short+} automatically generates a unique ``ObjectId``\n   value for each document's ``_id`` field, so your ``ObjectId`` value\n   might differ from the preceding code example. For more information\n   about the ``_id`` field, see the :ref:`_id Field <golang-insert-id>`\n   section of the Insert a Document page.\n\n.. _golang-retrieve-aggregation:\n\nAggregation Operations\n----------------------\n\nUse **aggregation operations** to retrieve and transform data from\nMongoDB. Perform aggregation operations using the ``Aggregate()``\nmethod.\n\nAggregation\n~~~~~~~~~~~\n\nThe ``Aggregate()`` method expects you to pass a ``Context`` type and\nan **aggregation pipeline**. An aggregation pipeline defines how to\ntransform data through stages. Some of the stages are matching\ndocuments, renaming fields, and grouping values.\n\nThe method returns the resulting documents in a ``Cursor`` type. If\nyou omit the :manual:`$match </reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match>`\nstage, the pipeline proceeds using all documents in the collection.\n\nTo learn how to access data in a cursor, see :ref:`golang-cursor`.\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nThe ``Aggregate()`` method optionally takes an ``AggregateOptions``\ntype, which represents options you can use to modify its behavior. If\nyou don't specify any options, the driver uses the default values for\neach option.\n\nThe ``AggregateOptions`` type allows you to configure options with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetAllowDiskUse()`` \n     - | Whether to write to temporary files.\n       | Default: ``false``\n\n   * - ``SetBatchSize()`` \n     - | The number of documents to return in each batch.  \n       | Default: none\n\n   * - ``SetBypassDocumentValidation()`` \n     - | Whether to allow the write to opt-out of document level validation.\n       | Default: ``false``\n\n   * - ``SetCollation()`` \n     - | The type of language collation to use when sorting results.  \n       | Default: ``nil``\n\n   * - ``SetMaxAwaitTime()`` \n     - | The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.\n       | Default: ``nil``\n\n   * - ``SetComment()`` \n     - | An arbitrary string or document that allows you to trace the operation through the database profiler, currentOp, and logs.\n       | Default: ``\"\"``\n\n   * - ``SetHint()`` \n     - | The index to use to scan for documents to retrieve.\n       | Default: ``nil``\n\n   * - ``SetLet()`` \n     - | Specifies parameters for the aggregate expression, which improves command readability by separating the variables from the query text.\n       | Default: none\n\nExample\n```````\n\nThe following example passes a context and an aggregation pipeline that\nperforms the following actions:\n\n- Groups reviews by item ordered\n- Calculates the average rating for each item\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "  :copyable: true\n\n  .. input:: /includes/fundamentals/code-snippets/CRUD/retrieve.go\n      :start-after: begin aggregate docs\n      :end-before: end aggregate docs\n      :language: go\n      :dedent:\n\n  .. output::\n      :language: none\n      :visible: false\n\n      Sencha had an average rating of 8.5 \n      Hibiscus had an average rating of 4 \n      Masala had an average rating of 9\n\nTo learn more about how to construct an aggregation pipeline, see\nthe MongoDB server manual page on :manual:`Aggregation\n</core/aggregation-pipeline/>`.\n\nAdditional Information\n----------------------\n\nFor runnable examples of the find operations, see the following usage\nexamples:\n\n- :ref:`golang-find-one`\n- :ref:`golang-find-multiple`\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-cursor`\n- :ref:`golang-skip`\n- :ref:`golang-sort-results`\n- :ref:`golang-limit`\n- :ref:`golang-project`\n- :ref:`golang-aggregation`\n- :ref:`golang-collations`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `FindOne() <{+api+}/mongo#Collection.FindOne>`__\n- `SingleResult <{+api+}/mongo#SingleResult>`__\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `FindOptions <{+api+}/mongo/options#FindOptions>`__\n- `FindOneOptions <{+api+}/mongo/options#FindOneOptions>`__\n- `Cursor <{+api+}/mongo#Cursor>`__\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n- `AggregateOptions <{+api+}/mongo/options#AggregateOptions>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/retrieve.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load these documents into the\n``db.courses`` collection with the following\nsnippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/skip.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title and maximum enrollment, corresponding to\nthe ``title`` and ``enrollment`` fields.\n\nSkip\n----\n\nTo skip a specified number of returned results from a query, pass the\nnumber of documents you want to skip to the ``SetSkip()`` method of\nthe read operation's options.\n\nThe following read operations take an options object as a parameter:\n\n- ``Find()``\n- ``FindOne()``\n- ``CountDocuments()``\n- ``GridFSBucket.Find()``\n\nIf the number of documents exceeds the number of matched documents for a\nquery, that query returns no documents.\n\n.. tip::\n\n   Passing in a negative number to the ``SetSkip()`` method results\n   in a runtime error.\n\nFind operations return documents in a natural order that is not sorted\non any field. To avoid skipping random documents, use the ``SetSort()``\nmethod to sort documents on a field with unique values before setting a\nskip option.\n\nExample\n~~~~~~~\n\nThe following example performs a ``Find()`` operation with the following\nbehavior:\n\n- Sorts the results in ascending order on the ``enrollment`` field\n- Skips the first two documents\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/skip.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", 1}}).SetSkip(2)\n      \n      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Plate Tectonics\",\"enrollment\":45}\n      {\"title\":\"Abstract Algebra\",\"enrollment\":60}\n\n.. _golang-skip-aggregation:\n\nAggregation\n-----------\n\nYou can also include the :manual:`$skip </reference/operator/aggregation/skip/>`\nstage in an aggregation pipeline to skip documents.\n\nExample\n~~~~~~~\n\nThe following example performs an ``Aggregate()`` operation with the following\nbehavior:\n\n- Sorts the results in descending order on the ``enrollment`` field\n- Skips the first document\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/skip.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      sortStage := bson.D{{\"$sort\", bson.D{{\"enrollment\", -1}}}}\n      skipStage := bson.D{{\"$skip\", 1}}\n      \n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage, skipStage})\n      if err != nil {\n          panic(err)\n      }\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Plate Tectonics\",\"enrollment\":45}\n      {\"title\":\"World Fiction\",\"enrollment\":35}\n      {\"title\":\"Modern Poetry\",\"enrollment\":12}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-retrieve`\n- :ref:`golang-sort-results`\n- :ref:`golang-aggregation`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `FindOptions.SetSkip() <{+api+}/mongo/options#FindOptions.SetSkip>`__\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__\n- `GridFSBucket.Find() <{+api+}/mongo#GridFSBucket.Find>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/skip.txt"
  },
  {
    "code": "   :start-after: start-course-struct\n   :end-before: end-course-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the\n``db.courses`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nEach document contains a description of a university course that\nincludes the course title and maximum enrollment, corresponding to\nthe ``title`` and ``enrollment`` fields in each document.\n\nSort Direction\n--------------\n\nTo specify the order of your results, pass an interface specifying the\nsort fields and direction to the ``SetSort()`` method of an operation's options.\n\nThe following operations take options as a parameter:\n\n- ``Find()``\n- ``FindOne()``\n- ``FindOneAndDelete()``\n- ``FindOneAndUpdate()``\n- ``FindOneAndReplace()``\n- ``GridFSBucket.Find()``\n\nYou can set an **ascending** or **descending** sort direction.\n\nAscending\n~~~~~~~~~\n\nAn ascending sort orders your results from smallest to largest. To\nspecify this sort, pass the field you want to sort by and ``1`` to the\n``SetSort()`` method.\n\n.. tip::\n\n   With an ascending sort, the method orders values of type\n   ``Boolean`` from ``false`` *to* ``true``, ``String`` type values\n   from *a to z* and numeric type values from *negative infinity to\n   positive infinity*.\n\nExample \n```````\n\nThe following example specifies an ascending sort on the ``enrollment`` field:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{}\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", 1}})\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Modern Poetry\",\"enrollment\":12}\n      {\"title\":\"World Fiction\",\"enrollment\":35}\n      {\"title\":\"Plate Tectonics\",\"enrollment\":35}\n      {\"title\":\"Abstract Algebra\",\"enrollment\":60}\n\nDescending\n~~~~~~~~~~\n\nA descending sort orders your results from largest to smallest. To\nspecify this sort, pass the field you want to sort by and ``-1`` to the\n``SetSort()`` method.\n\n.. tip::\n\n   With an descending sort, the method orders values of type\n   ``Boolean`` from ``true`` *to* ``false``, ``String`` type values\n   from *z to a* and numeric type values from *positive infinity to\n   negative infinity*.\n\nExample\n```````\n\nThe following example specifies a descending sort on the ``enrollment`` field:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{}\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}})\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Abstract Algebra\",\"enrollment\":60}\n      {\"title\":\"World Fiction\",\"enrollment\":35}\n      {\"title\":\"Plate Tectonics\",\"enrollment\":35}\n      {\"title\":\"Modern Poetry\",\"enrollment\":12}\n\nHandling Ties\n~~~~~~~~~~~~~\n\nA tie occurs when two or more documents have identical values in the\nfield you are using to sort your results. MongoDB does not guarantee\norder if ties occur. \n\nFor example, in the sample data, there is a tie for ``enrollment`` in\nthe following documents:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"title\":\"World Fiction\",\"enrollment\":35}\n   {\"title\":\"Plate Tectonics\",\"enrollment\":35}\n\nYou can sort on additional fields to resolve ties in the original sort.\nIf you want to guarantee a specific order for documents, select sort fields\nthat do not result in ties.\n\nExample\n```````\n\nThe following example specifies a descending sort on the ``enrollment`` field,\nthen an ascending sort on the ``title`` field:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n\n      filter := bson.D{}\n      opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}, {\"title\", 1}})\n      \n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      \n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Abstract Algebra\",\"enrollment\":60}\n      {\"title\":\"Plate Tectonics\",\"enrollment\":35}\n      {\"title\":\"World Fiction\",\"enrollment\":35}\n      {\"title\":\"Modern Poetry\",\"enrollment\":12}\n\nAggregation\n~~~~~~~~~~~\n\nYou can also include the :manual:`$sort </reference/operator/aggregation/sort/>`\nstage to specify a  sort in an aggregation pipeline.\n\nExample\n```````\n\nThe following example specifies a descending sort on the ``enrollment``\nfield, then an ascending sort on the ``title`` field:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      sortStage := bson.D{{\"$sort\", bson.D{{\"enrollment\", -1}, {\"title\", 1}}}}\n\n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage})\n      if err != nil {\n          panic(err)\n      }\n\n      var results []Course\n      if err = cursor.All(context.TODO(), &results); err != nil {\n          panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"title\":\"Abstract Algebra\",\"enrollment\":60}\n      {\"title\":\"Plate Tectonics\",\"enrollment\":35}\n      {\"title\":\"World Fiction\",\"enrollment\":35}\n      {\"title\":\"Modern Poetry\",\"enrollment\":12}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-retrieve`\n- :ref:`golang-compound-operations`\n- :ref:`golang-aggregation`\n\nTo learn about sorting text scores from your text search, see :ref:`golang-search-text`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `FindOptions.SetSort() <{+api+}/mongo/options#FindOptions.SetSort>`__\n- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__\n- `FindOne() <{+api+}/mongo#Collection.FindOne>`__\n- `FindOneAndDelete() <{+api+}/mongo#Collection.FindOneAndDelete>`__\n- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__\n- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__\n- `GridFSBucket.Find() <{+api+}/mongo#GridFSBucket.Find>`__\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/sort.txt"
  },
  {
    "code": "   :start-after: start-dish-struct\n   :end-before: end-dish-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the\n``db.menu`` collection with the following\nsnippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insert docs\n   :end-before: end insert docs\n\nEach document contains the ``name`` and ``description`` of a dish on a\nrestaurant's menu.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nText Index\n~~~~~~~~~~\n\nYou must create a **text index** before running a text search. A text\nindex specifies the string or string array field on which to run a text\nsearch.\n\nThe examples in the following sections run text searches on the\n``description`` field of documents in the ``menu`` collection. To enable text searches on\nthe ``description`` field, create a text index with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin text index\n   :end-before: end text index\n\n.. _golang-text-search:\n\nText Search\n-----------\n\nA text search retrieves documents that contain a **term** or a\n**phrase** in the text indexed fields. A term is a sequence of\ncharacters that excludes whitespace characters. A phrase is a sequence\nof terms with any number of whitespace characters.\n\nTo perform a text search, use the ``$text`` evaluation query operator,\nfollowed by the ``$search`` field in your query filter. The ``$text`` operator\nperforms a text search on the text indexed fields. The ``$search`` field\nspecifies the text to search in the text indexed fields.\n\nQuery filters for text searches use the following format:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"$text\", bson.D{{\"$search\", \"herb\"}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Dish\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Kale Tabbouleh\",\"description\":\"A bright, herb-based salad. A perfect starter for vegetarians and vegans.\"}\n      {\"name\":\"Herbed Whole Branzino\",\"description\":\"Grilled whole fish stuffed with herbs and pomegranate seeds. Serves 3-4.\"}\n\n.. tip::\n\n   Although the search term was \"herb\", the method also matches\n   descriptions containing \"herbs\" because a MongoDB text index uses suffix\n   stemming to match similar words. To learn more about how\n   MongoDB matches terms, see :manual:`Index Entries\n   </core/index-text/#index-entries>`.\n\nSearch by a Phrase\n~~~~~~~~~~~~~~~~~~\n\nTo search for a phrase, specify the phrase with escaped quotes as a\nstring in your query filter. If you don't add escaped quotes around the\nphrase, the ``Find()`` method runs a :ref:`term search <golang-term-search>`.\n\n.. tip::\n\n   Escaped quotes are a backslash character followed by a double quote\n   character.\n\nExample\n```````\n\nThe following example runs a text search for descriptions that contain the\nphrase \"serves 2\":\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"$text\", bson.D{{\"$search\", \"\\\"serves 2\\\"\"}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Dish\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Shepherd's Pie\",\"description\":\"A vegetarian take on the classic dish that uses lentils as a base. Serves 2.\"}\n      {\"name\":\"Garlic Butter Trout\",\"description\":\"Baked trout seasoned with garlic, lemon, dill, and, of course, butter. Serves 2.\"}\n\nSearch with Terms Excluded\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor each term or phrase you want to exclude from your text search,\nspecify the term or phrase prefixed with a minus sign as a string in\nyour query filter.\n\n.. important::\n\n   You must search for at least one term if you want to exclude\n   terms from your search. If you don't search for any terms, the\n   ``Find()`` method doesn't return any documents.\n\nExample\n```````\n\nThe following example runs a text search for descriptions that contain the\nterm \"vegan\", but do not contain the term \"tofu\":\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"$text\", bson.D{{\"$search\", \"vegan -tofu\"}}}}\n\n      cursor, err := coll.Find(context.TODO(), filter)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Dish\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Kale Tabbouleh\",\"description\":\"A bright, herb-based salad. A perfect starter for vegetarians and vegans.\"}\n\nSort by Relevance\n~~~~~~~~~~~~~~~~~\n\nA text search assigns a numerical text score to indicate how closely\neach result matches the string in your query filter. To reveal the text\nscore in your output, use a projection to retrieve the ``textScore``\nmetadata. You can sort the text score in descending order by specifying\na sort on the ``textScore`` metadata.\n\nExample\n```````\n\nThe following example performs the following actions:\n\n- Runs a text search for descriptions that contain the term \"vegetarian\"\n- Sorts the results in descending order based on their text score\n- Includes only the ``name`` and ``score`` fields in the final output document\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"$text\", bson.D{{\"$search\", \"vegetarian\"}}}}\n      sort := bson.D{{\"score\", bson.D{{\"$meta\", \"textScore\"}}}}\n      projection := bson.D{{\"name\", 1}, {\"score\", bson.D{{\"$meta\", \"textScore\"}}}, {\"_id\", 0}}\n      opts := options.Find().SetSort(sort).SetProjection(projection)\n\n      cursor, err := coll.Find(context.TODO(), filter, opts)\n      if err != nil {\n         panic(err)\n      }\n\n      var results []bson.D\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n      for _, result := range results {\n         res, _ := bson.MarshalExtJSON(result, false, false)\n         fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Green Curry\",\"score\":0.8999999999999999}\n      {\"name\":\"Kale Tabbouleh\",\"score\":0.5625}\n      {\"name\":\"Shepherd's Pie\",\"score\":0.5555555555555556}\n\n.. _golang-search-text-aggregation:\n\nAggregation\n-----------\n\nYou can also include the ``$text`` evaluation query operator in the\n:manual:`$match </reference/operator/aggregation/match/>` stage to\nperform a text search in an aggregation pipeline.\n\nMatch a Search Term\n~~~~~~~~~~~~~~~~~~~\n\nThe following example runs a text search for descriptions that contain the term \"herb\":\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      matchStage := bson.D{{\"$match\", bson.D{{\"$text\", bson.D{{\"$search\", \"herb\"}}}}}}\n\n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage})\n      if err != nil {\n         panic(err)\n      }\n\n      var results []Dish\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Kale Tabbouleh\",\"description\":\"A bright, herb-based salad. A perfect starter for vegetarians and vegans.\"}\n      {\"name\":\"Herbed Whole Branzino\",\"description\":\"Grilled whole fish stuffed with herbs and pomegranate seeds. Serves 3-4.\"}\n\nSort by Relevance\n~~~~~~~~~~~~~~~~~\n\nThe following example performs the following actions:\n\n- Runs a text search for descriptions that contain the term \"vegetarian\"\n- Sorts the results in descending order based on their text score\n- Includes only the ``name`` and ``score`` fields in the final output document\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      matchStage := bson.D{{\"$match\", bson.D{{\"$text\", bson.D{{\"$search\", \"vegetarian\"}}}}}}\n      sortStage := bson.D{{\"$sort\", bson.D{{\"score\", bson.D{{ \"$meta\", \"textScore\" }}}}}}\n      projectStage := bson.D{{\"$project\", bson.D{{\"name\", 1}, {\"score\", bson.D{{ \"$meta\", \"textScore\" }}}, {\"_id\", 0}}}}\n\n      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, sortStage, projectStage})\n      if err != nil {\n         panic(err)\n      }\n\n      var results []bson.D\n      if err = cursor.All(context.TODO(), &results); err != nil {\n         panic(err)\n      }\n      for _, result := range results {\n          res, _ := bson.MarshalExtJSON(result, false, false)\n          fmt.Println(string(res))\n      }\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"name\":\"Green Curry\",\"score\":0.8999999999999999}\n      {\"name\":\"Kale Tabbouleh\",\"score\":0.5625}\n      {\"name\":\"Shepherd's Pie\",\"score\":0.5555555555555556}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-sort-results`\n- :ref:`golang-project`\n- :manual:`Text Indexes </core/index-text/>`\n- :manual:`$text </reference/operator/query/text/>`\n- :manual:`$meta </reference/operator/aggregation/meta/>`\n- :ref:`golang-aggregation`\n- :ref:`golang-indexes`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `FindOptions.SetSort() <{+api+}/mongo/options#FindOptions.SetSort>`__\n- `FindOptions.SetProjection() <{+api+}/mongo/options#FindOptions.SetProjection>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/read-operations/text.txt"
  },
  {
    "code": "   :start-after: start-book-struct\n   :end-before: end-book-struct\n   :language: go\n   :dedent:\n\nTo run the examples in this guide, load the sample data into the\n``db.books`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\nEach document contains a description of a book that\nincludes the title, author, and page length corresponding to\nthe ``title``, ``author``, and ``length`` fields in each document.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nBulk Write\n----------\n\nTo perform a bulk operation, pass an array of :ref:`WriteModel\n<golang-write-model>` documents to the ``BulkWrite()`` method.\n\nModify Behavior\n~~~~~~~~~~~~~~~\n\nThe ``BulkWrite()`` method optionally takes a ``BulkWriteOptions``\ntype, which represents options you can use to modify its behavior. If\nyou don't specify a ``BulkWriteOptions``, the driver uses the default\nvalues for each option.\n\nThe ``BulkWriteOptions`` type allows you to configure options with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetBypassDocumentValidation()`` \n     - | Whether to allow the write to opt-out of document level validation.\n       | Default: ``false``\n\n   * - ``SetOrdered()``\n     - | Whether to stop performing write operations after an error occurs. \n       | Default: ``true``\n\nReturn Values\n~~~~~~~~~~~~~\n\nThe ``BulkWrite()`` method returns a ``BulkWriteResult`` type, which\ncontains information about the bulk operation if it's successful. The\n``BulkWriteResult`` type contains the following properties:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Property\n     - Description\n\n   * - ``InsertedCount``\n     - The number of documents inserted.\n\n   * - ``MatchedCount``\n     - The number of documents matched by the :ref:`query filter <golang-query-filter-definition>` in update and replace operations.\n\n   * - ``ModifiedCount``\n     - The number of documents modified by update and replace operations.\n\n   * - ``DeletedCount``\n     - The number of documents deleted.\n   \n   * - ``UpsertedCount`` \n     - The number of documents :ref:`upserted <golang-upsert-definition>` by update and replace operations.\n\n   * - ``UpsertedIDs`` \n     - A map of an operation index to the ``_id`` of each :ref:`upserted <golang-upsert-definition>` document.\n\n.. _golang-write-model:\n\nOperations\n----------\n\nA ``WriteModel`` represents an insert, replace, update, or delete operation.\n\nInsert\n~~~~~~\n\nTo perform an insert operation, create an ``InsertOneModel`` specifying\nthe document you want to insert. To insert multiple documents, create an\n``InsertOneModel`` for each document you want to insert.\n\nThe ``InsertOneModel`` allows you to specify its behavior with the\nfollowing method:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetDocument()`` \n     - | The document to insert.\n\nExample\n```````\n\nThis following example creates two ``InsertOneModel`` instances to\ninsert two documents:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin bulk insert model\n   :end-before: end bulk insert model\n\nReplace\n~~~~~~~\n\nTo perform a replace operation, create a ``ReplaceOneModel`` specifying\nthe document you want to replace and a :ref:`replacement document\n<golang-replacement-document>`. To replace multiple documents, create a\n``ReplaceOneModel`` for each document you want to replace.\n\nThe ``ReplaceOneModel`` allows you to specify its behavior with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()`` \n     - | The type of language collation to use when sorting results.\n\n   * - ``SetFilter()`` \n     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to replace.\n\n   * - ``SetHint()`` \n     - | The index to use to scan for documents.\n\n   * - ``SetReplacement()`` \n     - | The document to replace the matched document with.\n\n   * - ``SetUpsert()`` \n     - | Whether to insert a new document if the :ref:`query filter <golang-query-filter-definition>` doesn't match any documents.\n\nExample\n```````\n\nThe following example creates a ``ReplaceOneModel`` to replace a\ndocument where the ``title`` is \"Lucy\" with a new document:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin bulk replace model\n   :end-before: end bulk replace model\n\nUpdate\n~~~~~~\n\nTo perform an update operation, create an ``UpdateOneModel`` specifying\nthe document you want to update and an :ref:`update document\n<golang-update-document>`. To update multiple documents, use the\n``UpdateManyModel``.\n\nThe ``UpdateOneModel`` and ``UpdateManyModel`` allow you to specify\ntheir behavior with the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetArrayFilters()`` \n     - | The array elements the update applies to.\n\n   * - ``SetCollation()`` \n     - | The type of language collation to use when sorting results.\n\n   * - ``SetFilter()`` \n     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to update.\n\n   * - ``SetHint()`` \n     - | The index to use to scan for documents.\n\n   * - ``SetUpdate()`` \n     - | The modifications to apply on the matched documents.\n\n   * - ``SetUpsert()`` \n     - | Whether to insert a new document if the :ref:`query filter <golang-query-filter-definition>` doesn't match any documents.\n\nExample\n```````\n\nThe following example creates an ``UpdateOneModel`` to decrement a\ndocument's ``length`` by ``15`` if the ``author`` is \"Elena Ferrante\":\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin bulk update model\n   :end-before: end bulk update model\n\nDelete\n~~~~~~\n\nTo perform a delete operation, create a ``DeleteOneModel`` specifying\nthe document you want to delete. To delete multiple documents, use the\n``DeleteManyModel``. \n\nThe ``DeleteOneModel`` and ``DeleteManyModel`` allow you to specify\ntheir behavior with the following methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetCollation()`` \n     - | The type of language collation to use when sorting results.\n\n   * - ``SetFilter()`` \n     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to delete.\n\n   * - ``SetHint()`` \n     - | The index to use to scan for documents.\n\nExample\n```````\n\nThe following example creates a ``DeleteManyModel`` to delete\ndocuments where the ``length`` is greater than ``300``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin bulk delete model\n   :end-before: end bulk delete model\n\nExecution Order\n---------------\n\nThe ``BulkWrite()`` method allows you to specify if you want to\nexecute the bulk operations as ordered or unordered in its\n``BulkWriteOptions``. \n\nOrdered\n~~~~~~~\n\nBy default, the ``BulkWrite()`` method executes bulk operations in\norder you added them and stops if an error occurs.\n\n.. tip::\n\n   This is equivalent to specifying ``true`` in the ``SetOrdered()``\n   method: \n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      models := []mongo.WriteModel{\n        mongo.NewInsertOneModel().SetDocument(Book{Title: \"Middlemarch\", Author: \"George Eliot\", Length: 904}),\n        mongo.NewInsertOneModel().SetDocument(Book{Title: \"Pale Fire\", Author: \"Vladimir Nabokov\", Length: 246}),\n        mongo.NewReplaceOneModel().SetFilter(bson.D{{\"title\", \"My Brilliant Friend\"}}).\n      \t  SetReplacement(Book{Title: \"Atonement\", Author: \"Ian McEwan\", Length: 351}),\n        mongo.NewUpdateManyModel().SetFilter(bson.D{{\"length\", bson.D{{\"$lt\", 200}}}}).\n      \t  SetUpdate(bson.D{{\"$inc\", bson.D{{\"length\", 10}}}}),\n        mongo.NewDeleteManyModel().SetFilter(bson.D{{\"author\", bson.D{{\"$regex\", \"Jam\"}}}}),\n      }\n      opts := options.BulkWrite().SetOrdered(false)\n      \n      results, err := coll.BulkWrite(context.TODO(), models, opts)\n      if err != nil {\n         panic(err)\n      }\n      \n      fmt.Printf(\"Number of documents inserted: %d\\n\", results.InsertedCount)\n      fmt.Printf(\"Number of documents replaced or updated: %d\\n\", results.ModifiedCount)\n      fmt.Printf(\"Number of documents deleted: %d\\n\", results.DeletedCount)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents inserted: 2\n      Number of documents replaced or updated: 2\n      Number of documents deleted: 1\n\nThe following documents are present in the ``books`` collection after\nthe bulk operation:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"title\":\"Atonement\",\"author\":\"Ian McEwan\",\"length\":351}\n   {\"title\":\"Middlemarch\",\"author\":\"George Eliot\",\"length\":904}\n   {\"title\":\"Pale Fire\",\"author\":\"Vladimir Nabokov\",\"length\":246}\n\nAdditional Information\n----------------------\n\nFor a runnable example on performing a bulk operation, see\n:ref:`golang-bulk-ops-usage-example`.\n\nRelated Operations\n~~~~~~~~~~~~~~~~~~\n\nTo learn more about performing the operations mentioned, see the\nfollowing guides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-insert-guide`\n- :ref:`golang-change-document`\n- :ref:`golang-delete-guide`\n- :manual:`Bulk Write Operations </core/bulk-write-operations/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `BulkWrite() <{+api+}/mongo#Collection.BulkWrite>`__\n- `BulkWriteOptions <{+api+}/mongo/options#BulkWriteOptions>`__\n- `BulkWriteResult <{+api+}/mongo#BulkWriteResult>`__\n- `NewInsertOneModel() <{+api+}/mongo#NewUpdateOneModel>`__\n- `NewReplaceOneModel() <{+api+}/mongo#NewReplaceOneModel>`__\n- `NewReplaceOneModel() <{+api+}/mongo#NewReplaceOneModel>`__\n- `NewUpdateOneModel() <{+api+}/mongo#NewUpdateOneModel>`__\n- `NewUpdateManyModel() <{+api+}/mongo#NewReplaceOneModel>`__\n- `NewDeleteOneModel() <{+api+}/mongo#NewReplaceOneModel>`__\n- `NewDeleteManyModel() <{+api+}/mongo#NewReplaceOneModel>`__\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/bulk.txt"
  },
  {
    "code": "   :start-after: start-book-struct\n   :end-before: end-book-struct\n   :language: go\n   :dedent:\n\nTo run the example in this guide, load the sample data into the\n``db.books`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\nEach document contains a description of a book that\nincludes the title, author, and page length corresponding to\nthe ``title``, ``author``, and ``length`` fields in each document.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nDelete Operations\n-----------------\n\nUse **delete operations** to remove data from MongoDB. Delete operations\nconsist of the following methods:\n\n- ``DeleteOne()``, which deletes *the first document* that matches the filter\n- ``DeleteMany()``, which deletes *all* documents that match the filter\n\n.. tip::\n\n   If one document matches your filter when running the ``DeleteMany()``\n   method, it's equivalent to running the ``DeleteOne()`` method.\n\nParameters\n~~~~~~~~~~\n\nThe ``DeleteOne()`` and ``DeleteMany()`` methods expect you to pass a\n``Context`` type and a ``non-nil`` query filter specifying which\ndocuments to match.\n\nThey both optionally take a ``DeleteOptions`` type as a third parameter,\nwhich represents options you can use to configure the delete operation.\nIf you don't specify a ``DeleteOptions``, the driver uses the default\nvalues for each option.\n\nThe ``DeleteOptions`` type allows you to configure options with the\nfollowing methods:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``SetHint()``\n     - | The index to use to scan for documents to delete.\n       | Default: ``nil``\n\n   * - ``SetCollation()``\n     - | The type of language collation to use when sorting results.\n       | Default: ``nil``\n\nReturn Value\n~~~~~~~~~~~~\n\nThe ``DeleteOne()`` and ``DeleteMany()`` methods return a\n``DeleteResult`` type. This type contains the ``DeletedCount`` property,\nwhich states the number of documents deleted. If there are no matches to\nyour filter, no document gets deleted and ``DeletedCount`` is ``0``.\n\nExample\n```````\n\nThe following example performs the following with the ``DeleteMany()``\nmethod:\n\n- Matches and deletes documents where the ``length`` is greater than ``300``\n- Instructs the method to use the ``_id`` as the index\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"length\", bson.D{{\"$gt\", 300}}}}\n      opts := options.Delete().SetHint(bson.D{{\"_id\", 1}})\n\n      result, err := coll.DeleteMany(context.TODO(), filter, opts)\n      if err != nil {\n         panic(err)\n      }\n\n      fmt.Printf(\"Number of documents deleted: %d\\n\", result.DeletedCount)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents deleted: 2\n\n.. tip::\n\n   If the preceding example used the ``DeleteOne()`` method instead of\n   ``DeleteMany()``, the driver would delete the first of the two\n   matched documents.\n\nAdditional Information\n----------------------\n\nFor runnable examples of the delete operations, see the following usage\nexamples:\n\n- :ref:`golang-delete-one`\n- :ref:`golang-delete-many`\n\nTo learn more about performing the operations mentioned, see the\nfollowing guides:\n\n- :ref:`golang-query-document`\n\nTo learn about how the driver uses Context, see :ref:`golang-context`.\n\nTo learn more about specifying hints, see :ref:`golang-indexes`.\n\nTo learn more about collations, see :ref:`golang-collations`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `DeleteOne() <{+api+}/mongo#Collection.DeleteOne>`__\n- `DeleteMany() <{+api+}/mongo#Collection.DeleteMany>`__\n- `DeleteOptions <{+api+}/mongo/options#DeleteOptions>`__\n- `DeleteResult <{+api+}/mongo#DeleteResult>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/delete.txt"
  },
  {
    "code": "   :start-after: start-drink-struct\n   :end-before: end-drink-struct\n   :language: go\n   :dedent:\n\nThe ``truncate`` :ref:`struct tag<golang-struct-tags>` allows the driver\nto truncate types such as ``float64`` to ``int32`` when unmarshalling.\n\nTo run the examples in this guide, load the sample data into the\n``db.drinks`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/embedded-arrays.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\nEach document contains a description of a drink that\nincludes the drink's description, available sizes in ounces, and available\npreparation styles, corresponding to the ``description``, ``sizes``, and\n``styles`` fields in each document.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nThe following examples use the ``FindOneAndUpdate()`` method to\nretrieve and update a document and to return the state of the document\nafter the update occurs. If you want to update multiple documents with\nan array field, use the ``UpdateMany()`` method.\n\nSpecify Array Elements\n----------------------\n\nTo specify which array elements to update, use a **positional\noperator**. Positional operators can specify the :ref:`first <golang-first-element>`,\n:ref:`multiple <golang-multiple-elements>`, or :ref:`all <golang-all-elements>`\narray elements to update.\n\nTo specify array elements with a positional operator, use **dot\nnotation**. Dot notation is a property access syntax for navigating\narray elements and fields of an embedded document.\n\n.. _golang-first-element:\n\nFirst Array Element\n~~~~~~~~~~~~~~~~~~~\n\nTo update the first array element that matches your query filter, use\nthe positional ``$`` operator. The query filter must be for the array\nfield.\n\nExample\n```````\n\nThis example performs the following actions:\n\n- Matches array elements in ``sizes`` where the value is less than or\n  equal to ``16``.\n- Decrements the first array value matched by ``2``.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/embedded-arrays.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"sizes\", bson.D{{\"$lte\", 16}}}}\n      update := bson.D{{\"$inc\", bson.D{{\"sizes.$\", -2}}}}\n      opts := options.FindOneAndUpdate().\n          SetReturnDocument(options.After)\n      \n      var updatedDoc Drink\n      err := coll.FindOneAndUpdate(context.TODO(), filter, update, opts).Decode(&updatedDoc)\n      if err != nil {\n          panic(err)\n      }\n      \n      res, _ := bson.MarshalExtJSON(updatedDoc, false, false)\n      fmt.Println(string(res))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"description\":\"Matcha Latte\",\"sizes\":[10,16,20],\"styles\":[\"iced\",\"hot\",\"extra hot\"]}\n\n.. note::\n\n   The query filter matches the values ``12`` and ``16``. Since the\n   operation matches ``12`` first, it is decremented. If you want to update\n   both matched values, see :ref:`golang-multiple-elements`.\n\n.. _golang-multiple-elements:\n\nMultiple Array Elements\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo update multiple array elements that match your query filter, use the\nfiltered positional ``$[<identifier>]`` operator. You must include an\narray filter in your update operation to specify which array elements to\nupdate.\n\nThe ``<identifier>`` is the name you use within your array filter. This\nvalue must begin with a lowercase letter and only contain alphanumeric\ncharacters.\n\nExample\n```````\n\nThis example performs the following actions:\n\n- Creates an array filter with an identifier called ``hotOptions`` to match\n  array elements that contain \"hot\".\n- Applies the array filter using the ``SetArrayFilters()`` method.\n- Removes these array elements.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/embedded-arrays.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      identifier := []interface{}{bson.D{{\"hotOptions\", bson.D{{\"$regex\", \"hot\"}}}}}\n      update := bson.D{{\"$unset\", bson.D{{\"styles.$[hotOptions]\", \"\"}}}}\n      opts := options.FindOneAndUpdate().\n          SetArrayFilters(options.ArrayFilters{Filters: identifier}).\n          SetReturnDocument(options.After)\n      \n      var updatedDoc Drink\n      err := coll.FindOneAndUpdate(context.TODO(), bson.D{}, update, opts).Decode(&updatedDoc)\n      if err != nil {\n          panic(err)\n      }\n      \n      res, _ := bson.MarshalExtJSON(updatedDoc, false, false)\n      fmt.Println(string(res))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"description\":\"Matcha Latte\",\"sizes\":[12,16,20],\"styles\":[\"iced\",\"\",\"\"]}\n\n.. _golang-all-elements:\n\nAll Array Elements\n~~~~~~~~~~~~~~~~~~\n\nTo update all the array elements, use the all positional ``$[]`` operator.\n\n.. note::\n\n   If you specify a query filter for the array field, the positional\n   ``$[]`` operator ignores the query filter and updates all the array\n   elements.\n\nExample\n```````\n\nThis example multiplies every array element in ``sizes`` by ``29.57``\nto convert from ounces to milliliters:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/embedded-arrays.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      update := bson.D{{\"$mul\", bson.D{{\"sizes.$[]\", 29.57}}}}\n      opts := options.FindOneAndUpdate().\n          SetReturnDocument(options.After)\n      \n      var updatedDoc Drink\n      err := coll.FindOneAndUpdate(context.TODO(), bson.D{}, update, opts).Decode(&updatedDoc)\n      if err != nil {\n          panic(err)\n      }\n      \n      res, _ := bson.MarshalExtJSON(updatedDoc, false, false)\n      fmt.Println(string(res))\n\n   .. output::\n      :language: none\n      :visible: false\n\n      {\"description\":\"Matcha Latte\",\"sizes\":[354,473,591],\"styles\":[\"iced\",\"hot\",\"extra hot\"]}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations discussed in this guide, see the\nfollowing guides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-compound-operations`\n- :ref:`golang-change-document`\n- :manual:`Positional $ Operator </reference/operator/update/positional/>`\n- :manual:`Positional $[] Operator </reference/operator/update/positional-all/>`\n- :manual:`Positional $[\\<identifier\\>] Operator </reference/operator/update/positional-filtered/>`\n- :manual:`Dot Notation </core/document/#std-label-document-dot-notation>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__\n- `FindOneAndUpdateOptions.SetReturnDocument() <{+api+}/mongo/options#FindOneAndUpdateOptions.SetReturnDocument>`__\n- `FindOneAndUpdateOptions.SetArrayFilters() <{+api+}/mongo/options#FindOneAndUpdateOptions.SetArrayFilters>`__\n- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/embedded-arrays.txt"
  },
  {
    "code": "   :start-after: start-book-struct\n   :end-before: end-book-struct\n   :language: go\n   :dedent:\n\nThe following example creates and inserts a document into the\n``books`` collection using the ``InsertOne()`` method:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"db\").Collection(\"books\")\n      doc := Book{Title: \"Atonement\", Author: \"Ian McEwan\"}\n\n      result, err := coll.InsertOne(context.TODO(), doc)\n\n      fmt.Printf(\"Inserted document with _id: %v\\n\", result.InsertedID)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Inserted document with _id: ObjectID(\"...\")\n\nModify ``InsertOne`` Behavior\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nYou can modify the behavior of ``InsertOne()`` by constructing and passing\nan optional ``InsertOneOptions`` struct.  The available options to set with\n``InsertOneOptions`` are:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :class: compatibility-large\n\n   * - Option\n     - Description\n\n   * - ``BypassDocumentValidation``\n     - | If ``true``, allows the write to opt-out of :manual:`document level validation </core/schema-validation>`.\n\n       | Default: ``false``\n\nConstruct an ``InsertOneOptions`` as follows:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :start-after: // begin insertOneOpts\n   :end-before: // end insertOneOpts\n   :language: go\n   :copyable:\n   :dedent:\n\nInsert Multiple Documents\n-------------------------\n\nUse the ``InsertMany()`` method to insert multiple documents into a\ncollection.\n\nUpon successful insertion, the ``InsertMany()`` method returns an ``InsertManyResult``\ninstance that contains the ``_id`` fields of the inserted documents.\n\nExample\n~~~~~~~\n\nThe following example creates and inserts multiple documents into the\n``books`` collection using the ``InsertMany()`` method:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   Documents inserted: 3\n   Inserted document with _id: ObjectID(\"...\")\n   Inserted document with _id: ObjectID(\"...\")\n   Inserted document with _id: ObjectID(\"...\")\n\nModify ``InsertMany`` Behavior\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the behavior of ``InsertMany()`` by constructing\nand passing an optional ``InsertManyOptions`` struct. The available options\nto set with ``InsertManyOptions`` are:\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :class: compatibility-large\n\n   * - Option\n     - Description\n\n   * - ``BypassDocumentValidation``\n     - | If ``true``, allows the write to opt-out of :manual:`document level validation </core/schema-validation>`.\n\n       | Default: ``false``\n\n   * - ``Ordered``\n     - | If ``true``, the driver sends documents to the server in the order provided.\n         If an error occurs, the driver and server end all remaining insert operations.\n         To learn more, see :ref:`golang-ordered-behavior`.\n\n       | Default: ``false``\n\nConstruct an ``InsertManyOptions`` as follows:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :start-after: // begin insertManyOpts\n   :end-before: // end insertManyOpts\n   :language: go\n   :copyable:\n   :dedent:\n\n.. _golang-ordered-behavior:\n\n``Ordered`` Behavior\n~~~~~~~~~~~~~~~~~~~~\n\nAssume you want to insert the following documents:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   { \"_id\": 1, \"title\": \"Where the Wild Things Are\" }\n   { \"_id\": 2, \"title\": \"The Very Hungry Caterpillar\" }\n   { \"_id\": 1, \"title\": \"Blueberries for Sal\" }\n   { \"_id\": 3, \"title\": \"Goodnight Moon\" }\n\nIf you attempt to insert these documents with default ``InsertManyOptions``, a\n``BulkWriteException`` occurs at the third document because of the repeated\n``_id`` value, but the documents before the error-producing document still get\ninserted into your collection.\n\n.. note::\n\n   You can get an acknowledgement of successful document insertion even\n   if a BulkWriteException occurs:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "      :copyable: true\n   \n      .. input::\n         :language: go\n   \n         type Book struct {\n             ID    int `bson:\"_id\"`\n             Title string\n         }\n\n         ...\n\n         docs := []interface{}{\n             Book{ID: 1, Title: \"Where the Wild Things Are\"},\n             Book{ID: 2, Title: \"The Very Hungry Caterpillar\"},\n             Book{ID: 1, Title: \"Blueberries for Sal\"},\n             Book{ID: 3, Title: \"Goodnight Moon\"},\n         }\n   \n         result, err := coll.InsertMany(context.TODO(), docs)\n         if err != nil {\n             fmt.Printf(\"A bulk write error occurred, but %v documents were still inserted.\\n\", len(result.InsertedIDs))\n         }\n   \n         for _, id := range result.InsertedIDs {\n             fmt.Printf(\"Inserted document with _id: %v\\n\", id)\n         }\n   \n      .. output::\n         :language: none\n         :visible: false\n   \n         A bulk write error occurred, but 2 documents were still inserted.\n         Inserted document with _id: 1\n         Inserted document with _id: 2\n   \n   After running the preceding code, your collection contains the following documents:\n   \n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "      :copyable: false\n   \n      { \"_id\": 1, \"title\": \"Where the Wild Things Are\" }\n      { \"_id\": 2, \"title\": \"The Very Hungry Caterpillar\" }\n\n\nAdditional Information\n----------------------\n\nFor runnable examples of the insert operations, see the following usage\nexamples:\n\n- :ref:`golang-insert-one`\n- :ref:`golang-insert-many`\n\nTo learn more about performing the operations mentioned, see the\nfollowing guides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-bulk`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `WriteError <{+api+}/mongo#WriteError>`__\n- `InsertOne() <{+api+}/mongo#Collection.InsertOne>`__\n- `InsertOneResult <{+api+}/mongo#InsertOneResult>`__\n- `InsertMany() <{+api+}/mongo#Collection.InsertMany>`__\n- `InsertManyResult <{+api+}/mongo#InsertManyResult>`__\n- `BulkWriteException <{+api+}/mongo#BulkWriteException>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/insert.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 2158,\n      \"name\" : \"Mary Shelley\",\n      \"department\" : \"Marketing\",\n      \"role\" : \"Marketing Analyst\",\n      \"bonus\" : 2500,\n      ...\n   }\n\nThe following example uses the ``UpdateByID()`` method to:\n\n- Match the document where the ``_id`` value is 2158.\n- Set the ``name`` field to \"Mary Wollstonecraft Shelley\" and the\n  ``role`` field to \"Marketing Director\".\n- Increment the value of the ``bonus`` field by 2000.\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"_id\", 2158}}\n      update := bson.D{{\"$set\", bson.D{{\"name\", \"Mary Wollstonecraft Shelley\"},\n         {\"role\", \"Marketing Director\"}}}, {\"$inc\", bson.D{{\"bonus\", 2000}}}}\n\n      result, err := collection.UpdateOne(context.TODO(), filter, update)\n      fmt.Printf(\"Documents matched: %v\\n\", result.MatchedCount)\n      fmt.Printf(\"Documents updated: %v\\n\", result.ModifiedCount)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Documents matched: 1\n      Documents updated: 1\n\nThe following shows the updated document resulting from the preceding update operation:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 2158,\n      \"name\" : \"Mary Wollstonecraft Shelley\",\n      \"department\" : \"Marketing\",\n      \"role\" : \"Marketing Director\",\n      \"bonus\" : 4500,\n      ...\n   }\n\n.. _golang-replacement-document:\n\nReplace\n-------\n\nUse the ``ReplaceOne()`` method to replace a single document.\n\nParameters\n~~~~~~~~~~\n\n``ReplaceOne()`` expects a **replacement document**, which is the document\nthat you want to take the place of an existing document. Replacement\ndocuments use the following format:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 2056,\n      \"item\" : \"Mug\",\n      \"brand\" : \"Simply Ceramics\",\n      \"price\" : 2.99,\n      \"material\" : \"Glass\"\n   }\n\nThe following example uses the ``ReplaceOne()`` method to substitute\nthis document with one that contains an ``item`` field with a\nvalue of \"Cup\" and a ``quantity`` field with a value of 107:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"_id\", 2056}}\n      replacement := bson.D{{\"item\", \"Cup\"}, {\"quantity\", 107}}\n\n      result, err := collection.ReplaceOne(context.TODO(), filter, replacement)\n      fmt.Printf(\"Documents matched: %v\\n\", result.MatchedCount)\n      fmt.Printf(\"Documents replaced: %v\\n\", result.ModifiedCount)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Documents matched: 1\n      Documents replaced: 1\n\nThe replaced document contains the contents of the replacement document\nand the immutable ``_id`` field as follows:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : 2056,\n      \"item\" : \"Cup\",\n      \"quantity\" : 107\n   }\n\nAdditional Information\n----------------------\n\nFor runnable examples of the update and replace operations, see the\nfollowing usage examples:\n\n- :ref:`golang-update-one`\n- :ref:`golang-update-many`\n- :ref:`golang-replace`\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-upsert`\n- :ref:`golang-compound-operations`\n- :manual:`Update Operators </reference/operator/update/#update-operators>`\n\nTo learn more about updating array elements, see :ref:`golang-update-arrays`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `WriteError <{+api+}/mongo#WriteError>`__\n- `UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__\n- `UpdateByID() <{+api+}/mongo#Collection.UpdateByID>`__\n- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__\n- `UpdateResult <{+api+}/mongo#UpdateResult>`__\n- `ReplaceOne() <{+api+}/mongo#Collection.ReplaceOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/modify.txt"
  },
  {
    "code": "   :start-after: start-plant-struct\n   :end-before: end-plant-struct\n   :language: go\n   :dedent:\n\nTo run the example in this guide, load the sample data into the\n``db.plants`` collection with the following snippet:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/upsert.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin insertDocs\n   :end-before: end insertDocs\n\nEach document contains a description of an individual plant that\nincludes the species, plant ID, and height corresponding to\nthe ``species``, ``plant_id``, and ``height`` fields in each document.\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\nUpsert\n------\n\nApplications use insert and update operations to store and modify data.\nSometimes, you must choose between an insert and an update operation\ndepending on whether the document exists. MongoDB simplifies this\ndecision for us with an **upsert** option.\n\n.. _golang-upsert-definition:\n\nAn upsert performs one of the following actions:\n\n- Updates documents that match your query filter\n- Inserts a new document if there are no matches to your query filter\n\nYou can specify an upsert by passing ``true`` to the ``SetUpsert()``\nmethod in the options of the following write operation methods:\n\n- ``UpdateOne()``\n- ``UpdateByID()``\n- ``UpdateMany()``\n- ``ReplaceOne()``\n- ``FindOneAndUpdate()``\n- ``FindOneAndReplace()``\n\n.. tip::\n\n   If you don't specify an upsert, no change occurs in the write\n   operation when zero documents match your query filter. This is\n   equivalent to passing ``false`` to the ``SetUpsert()`` method.\n\nExample\n~~~~~~~\n\nThe following example performs the following actions:\n\n- Matches documents where the ``species`` is \"Ledebouria socialis\" and\n  the ``plant_id`` is ``3``\n- Updates the ``height`` of the matched document to ``8.3``\n- Inserts this document if there are no matches to the query filter\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/upsert.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      filter := bson.D{{\"species\", \"Ledebouria socialis\"}, {\"plant_id\", 3}}\n      update := bson.D{{\"$set\", bson.D{{\"species\", \"Ledebouria socialis\"}, {\"plant_id\", 3}, {\"height\", 8.3}}}}\n      opts := options.Update().SetUpsert(true)\n      \n      result, err := coll.UpdateOne(context.TODO(), filter, update, opts)\n      if err != nil {\n          panic(err)\n      }\n      \n      fmt.Printf(\"Number of documents updated: %v\\n\", result.ModifiedCount)\n      fmt.Printf(\"Number of documents upserted: %v\\n\", result.UpsertedCount)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Number of documents updated: 0\n      Number of documents upserted: 1\n\nIf you query the ``plants`` collection to view all documents, you can\nsee that since the query filter did not match any documents, a new\ndocument was inserted with the specified fields:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/upsert.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\"species\":\"Polyscias fruticosa\",\"plant_id\":1,\"height\":27.6}\n   {\"species\":\"Polyscias fruticosa\",\"plant_id\":2,\"height\":34.9}\n   {\"species\":\"Ledebouria socialis\",\"plant_id\":1,\"height\":11.4}\n   {\"species\":\"Ledebouria socialis\",\"plant_id\":3,\"height\":8.3}\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`golang-query-document`\n- :ref:`golang-change-document`\n- :ref:`golang-compound-operations`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types mentioned in this\nguide, see the following API Documentation:\n\n- `UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__\n- `UpdateByID() <{+api+}/mongo#Collection.UpdateByID>`__\n- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__\n- `ReplaceOne() <{+api+}/mongo#Collection.ReplaceOne>`__\n- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__\n- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__\n- `UpdateOptions.SetUpsert() <{+api+}/mongo/options#UpdateOptions.SetUpsert>`__\n- `ReplaceOptions.SetUpsert() <{+api+}/mongo/options#ReplaceOptions.SetUpsert>`__\n- `UpdateResult <{+api+}/mongo#UpdateResult>`__\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-operations/upsert.txt"
  },
  {
    "code": "   :emphasize-lines: 2-7,11-12\n   \n   uri := \"mongodb://<hostname>:<port>\"\n   journal := false\n   cliWC := &writeconcern.WriteConcern{\n       W: 2,\n       Journal: &journal,\n   }\n   clOpts := options.Client().ApplyURI(uri).SetWriteConcern(cliWC)\n   client, err := mongo.Connect(clOpts)\n   ...\n   \n   collWC := writeconcern.Majority()\n   collOpts := options.Collection().SetWriteConcern(collWC)\n   coll := client.Database(\"db\").Collection(\"myColl\", collOpts)\n\nRead Concern\n------------\n\nThe read concern option allows you to determine which data the client\nreturns from a query. The default read concern level is \"local\", meaning\nthat the client returns the instance’s most recent data, with no guarantee that\nthe data has been written to a majority of the replica set members.\n\nOptions\n~~~~~~~\n\nThe {+driver-long+} provides the ``readconcern`` package, which lets\nyou specify the read concern for a replica set. Set the read concern using the\n``SetReadConcern()`` method with a ``ReadConcern`` type. The ``ReadConcern``\ntype has the following methods to specify the read concern:\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``Available()``\n     - The query returns data from the instance\n       with no guarantee that the data has been written to a majority of\n       the replica set members. For more information, see the\n       :rapid:`Read Concern specification </reference/read-concern-available/#mongodb-readconcern-readconcern.-available->`.\n\n   * - ``Linearizable()``\n     - The query returns data that reflects all\n       successful writes issued with a write concern of ``majority`` and\n       acknowledged prior to the start of the read operation. For more information, see the\n       :rapid:`Read Concern specification </reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable->`.\n\n   * - ``Local()``\n     - The query returns the instance’s most recent\n       data. For more information, see the\n       :rapid:`Read Concern specification </reference/read-concern-local/#mongodb-readconcern-readconcern.-local->`.\n\n   * - ``Majority()``\n     - The query returns the instance’s most recent\n       data acknowledged as having been written to a majority of members\n       in the replica set. For more information, see the\n       :rapid:`Read Concern specification </reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority->`.\n\n   * - ``Snapshot()``\n     - The query returns a complete copy of the\n       data in a ``mongod`` instance at a specific point in time. Only\n       available for operations within multi-document transactions. For more information, see the\n       :rapid:`Read Concern specification </reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot->`.\n\nExample\n~~~~~~~\n\nThe following code shows how you can specify a read concern of\n\"majority\". The code then selects a ``Collection``\nwith this option.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-read-pref.txt"
  },
  {
    "code": "   :emphasize-lines: 1-2\n\n   rc := readconcern.Majority()\n   opts := options.Collection().SetReadConcern(rc)\n   database := client.Database(\"db\")\n   coll := database.Collection(\"myCollection\", opts)\n\n.. _golang-read-pref:\n\nRead Preference\n---------------\n\nThe read preference option specifies how the MongoDB client routes read\noperations to the members of a replica set. By default, an application\ndirects its read operations to the primary member in a replica set.\n\nRead preference consists of the read preference mode and, optionally, a\n:rapid:`tag set list </core/read-preference-tags/>`, the\n:rapid:`maxStalenessSeconds </core/read-preference-staleness/>` option, and the\n:rapid:`hedged read </core/read-preference-hedge-option/>` option.\n\nOptions\n~~~~~~~\n\nThe {+driver-long+} provides the ``readpref`` package, which lets\nyou specify the read preference for a replica set. Set the read preference using the\n``SetReadPreference()`` method with a ``ReadPref`` type. The ``ReadPref``\ntype has the following methods to specify the read preference:\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - Method\n     - Description\n\n   * - ``Nearest()``\n     - The client reads from a random eligible replica set member,\n       primary or secondary, based on a specified latency threshold. For more information, see the\n       :rapid:`Read Preference Server manual entry </core/read-preference/#mongodb-readmode-nearest>`.\n\n   * - ``Primary()``\n     - The client reads from the current replica set primary node. For more information, see the\n       :rapid:`Read Preference Server manual entry </core/read-preference/#mongodb-readmode-primary>`.\n\n   * - ``PrimaryPreferred()``\n     - The client reads from the primary node in most situations. If the primary is\n       unavailable, operations read from secondary members. For more\n       information, see the :rapid:`Read Preference Server manual entry </core/read-preference/#mongodb-readmode-primaryPreferred>`.\n\n   * - ``Secondary()``\n     - The client reads from the secondary members of the replica set. For more information, see the\n       :rapid:`Read Preference Server manual entry </core/read-preference/#mongodb-readmode-secondary>`.\n\n   * - ``SecondaryPreferred()``\n     - The client reads from the secondary nodes in most situations. If the secondaries are\n       unavailable, operations read from the primary member. For more information, see the\n       :rapid:`Read Preference Server manual entry </core/read-preference/#mongodb-readmode-secondaryPreferred>`.\n\n.. tip::\n\n   You can alternatively specify a read preference in your connection\n   string. See the :manual:`Server manual entry on Read Preference\n   Options </reference/connection-string/#read-preference-options>` for\n   more information.\n\nExample\n~~~~~~~\n\nThe following code shows how you can specify a read preference to read\nfrom secondary nodes. The code then selects a ``Database``\nwith this option.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-read-pref.txt"
  },
  {
    "code": "   :emphasize-lines: 1-2\n\n   rp := readpref.Secondary()\n   opts := options.Database().SetReadPreference(rp)\n   database := client.Database(\"db\", opts)\n\nAdditional Information\n----------------------\n\nFor more information about the concepts in this guide, see the following\nServer documentation:\n\n- :ref:`Connection Guide <golang-connection-guide>`\n- :rapid:`Write Concern for Replica Sets </core/replica-set-write-concern/>`\n- :rapid:`Read Concern </reference/read-concern/>`\n- :rapid:`Read Preference </core/read-preference/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `WriteConcern <{+api+}/mongo/writeconcern#WriteConcern>`__\n- `ReadConcern <{+api+}/mongo/readconcern#ReadConcern>`__\n- `ReadPref <{+api+}/mongo/readpref#ReadPref>`__\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/crud/write-read-pref.txt"
  },
  {
    "code": "            :dedent:\n            :language: go\n            :copyable: true\n            :start-after: start-azure-imds-client\n            :end-before: end-azure-imds-client\n            :emphasize-lines: 9-11\n\n   .. tab:: Connection String\n      :tabid: connectionstring\n\n      Include the following connection options in your connection string:\n\n      - ``username``: If you're using an Azure managed identity, set this to the client ID\n        of the managed identity. If you're using a service principal to represent an\n        enterprise application, set this to the application ID of the service principal. \n      - ``authMechanism``: Set to ``MONGODB-OIDC``.\n      - ``authMechanismProperties``: Set to\n        ``ENVIRONMENT:azure,TOKEN_RESOURCE:<audience>``.\n        Replace the ``<audience>`` placeholder with the\n        value of the ``audience`` parameter configured on your MongoDB deployment. \n        \n      The following code example shows how to set these options in\n      your connection string:\n        \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "            :language: go\n            :dedent:\n            :copyable: true\n            :start-after: start-gcp-imds-client\n            :end-before: end-gcp-imds-client\n            :emphasize-lines: 9-10\n\n   .. tab:: Connection String\n      :tabid: connectionstring\n\n      Include the following connection options in your connection string:\n\n      - ``authMechanism``: Set to ``MONGODB-OIDC``.\n      - ``authMechanismProperties``: Set to\n        ``ENVIRONMENT:gcp,TOKEN_RESOURCE:<audience>``.\n        Replace the ``<audience>`` placeholder with the\n        value of the ``audience`` parameter configured on your MongoDB deployment.\n\n      The following code example shows how to set these options in your connection string:\n      \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "      :language: go\n      :dedent:\n      :copyable: true\n      :start-after: start-custom-callback\n      :end-before: end-custom-callback\n\nThen, you can create a ``Credential`` struct that uses the EKS callback\nfunction that you defined:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "      :language: go\n      :dedent:\n      :copyable: true\n      :start-after: start-credential-callback\n      :end-before: end-credential-callback\n      :emphasize-lines: 6\n\n.. _golang-mongodb-oidc-azure-envs:\n\nOther Azure Environments\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application runs on Azure Functions, App Service Environment (ASE), or Azure\nKubernetes Service (AKS), you can use the `azidentity\n<https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity>`__\nmodule to fetch authentication credentials. \n\nFirst, install the ``azidentity`` module by running the\nfollowing command:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "   :language: go\n   :copyable: true\n   :dedent:\n   :start-after: start-callback\n   :end-before: end-callback\n\nThen, you can create a ``Credential`` struct that uses the the GKE\ncallback function that you defined:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "   :language: go\n   :copyable: true\n   :dedent:\n   :start-after: start-credential-callback\n   :end-before: end-credential-callback\n   :emphasize-lines: 6\n\nAdditional Information\n----------------------\n\nTo learn more about the concepts in this guide, see the following documentation:\n\n- :manual:`MongoDB Server Support for Kerberos Authentication </core/kerberos/>`\n- :manual:`MongoDB Server Support for LDAP Proxy Authentication </core/security-ldap/>`\n- :atlas:`Authentication and Authorization with OIDC/OAuth 2.0 </security-oidc/>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `Credential <{+api+}/mongo/options#Credential>`__ type\n- `SetAuth() <{+api+}/mongo/options#ClientOptions.SetAuth>`__ method\n- `OIDCCredential <{+api+}/mongo/options#OIDCCredential>`__ type\n- `OIDCCallback <{+api+}/mongo/options#OIDCCallback>`__ function\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/enterprise-auth.txt"
  },
  {
    "code": "   :copyable: False\n\n   []float64{-73.986805, 40.7620853}\n\n.. important:: Longitude then Latitude\n\n  GeoJSON orders coordinates as **longitude** first and **latitude** second.\n  This may be surprising as geographic coordinate system conventions generally list\n  latitude first and longitude second. Make sure to check what format any other\n  tools you are working with use. Popular tools such as OpenStreetMap and Google\n  Maps list coordinates as latitude first and longitude second.\n\n\nTypes\n`````\n\nYour GeoJSON object's type determines the geometric shape it represents. Geometric shapes are\nmade up of positions.\n\nHere are some common GeoJSON types and how you can specify them with positions:\n\n- ``Point``: a single position. The following ``Point`` represents the location of\n  the MongoDB Headquarters:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/geo.txt"
  },
  {
    "code": "     :copyable: False\n\n     bson.D{\n         {\"name\", \"MongoDB HQ\"},\n         {\"location\", bson.D{\n             {\"type\", \"Point\"},\n             {\"coordinates\", []float64{-73.986805, 40.7620853}},\n         }},\n     }\n\n- ``LineString``: an array of two or more positions that forms a series of line\n  segments. A ``LineString`` can represent a path, route, border, or any other linear\n  geospatial data. The following ``LineString`` represents a segment of\n  `the Great Wall of China <https://commons.wikimedia.org/wiki/File:GreatWallChina4.png>`__:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/geo.txt"
  },
  {
    "code": "     :copyable: False\n\n     bson.D{\n         {\"name\", \"Great Wall of China\"},\n         {\"location\", bson.D{\n             {\"type\", \"LineString\"},\n             {\"coordinates\", [][]float64{\n                 {116.572, 40.430},\n                 {116.570, 40.434},\n                 {116.567, 40.436},\n                 {116.566, 40.441},\n             }}},\n         },\n     }\n\n- ``Polygon``: an array of positions in which the first and last\n  position are the same and enclose some space. The following\n  ``Polygon`` represents `the land within Vatican City\n  <https://commons.wikimedia.org/wiki/File:Vatican_City_map_EN.png>`__:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/geo.txt"
  },
  {
    "code": "     :copyable: False\n\n     bson.D{\n         {\"name\", \"Vatican City\"},\n         {\"location\", bson.D{\n             {\"type\", \"Polygon\"},\n             {\"coordinates\", [][][]float64{{\n                 {12.446086, 41.901977},\n                 {12.457952, 41.901559},\n                 {12.455375, 41.907351},\n                 {12.449863, 41.905186},\n                 {12.446086, 41.901977},\n             }}},\n         }},\n     }\n\n\nTo learn more about the GeoJSON types you can use in MongoDB, see the\n:manual:`GeoJSON manual entry </reference/geojson/>`.\n\nFor definitive information on GeoJSON, see the\n`official IETF specification <https://datatracker.ietf.org/doc/html/rfc7946>`__.\n\nLegacy Coordinate Pairs\n~~~~~~~~~~~~~~~~~~~~~~~\n\nUse legacy coordinate pairs to store data that represents geospatial information\non a two-dimensional Euclidean plane.\n\n\nYour field should contain an array of two values in which the first represents\nthe ``x`` axis value and the second represents the ``y`` axis value.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/geo.txt"
  },
  {
    "code": "   :copyable: False\n\n   bson.D{{\"center\", []int16{0, 0}}}\n\n\nFor more information on legacy coordinate pairs, see the\n:manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`.\n\n.. _golang-geospatial-indexes:\n\nGeospatial Indexes\n------------------\n\nTo enable querying on geospatial data, you must create an index that\ncorresponds to the data format. The following index types enable geospatial\nqueries:\n\n- ``2dsphere`` for GeoJSON data\n- ``2d`` for legacy coordinate pairs\n\n2dsphere\n~~~~~~~~\nTo query data stored in the GeoJSON format, add the field containing\nboth the ``type`` and ``coordinates`` to a ``2dsphere`` index. The\nfollowing example creates a ``2dsphere`` index on the ``location`` field:\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/geo.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      file, err := os.Open(\"home/documents/file.txt\")\n      uploadOpts := options.GridFSUpload().SetMetadata(bson.D{{\"metadata tag\", \"first\"}})\n\n      objectID, err := bucket\n         .UploadFromStream(\n            \"file.txt\",\n            io.Reader(file),\n            uploadOpts\n         )\n      if err != nil {\n         panic(err)\n      }\n\n      fmt.Printf(\"New file uploaded with ID %s\", objectID)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      New file uploaded with ID ...\n\nUpload with an Output Stream\n````````````````````````````\n\nTo upload a file with an output stream, use the ``OpenUploadStream()`` method\nand include the following parameters:\n\n- File name\n- ``opts`` parameter to modify the behavior of ``OpenUploadStream()``\n\nThe following code example opens an upload stream on a GridFS bucket and sets\nthe number of bytes in each chunk in the options parameter. Then, it calls\nthe ``Write()`` method on the content of ``file.txt`` to write its content to\nthe stream:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/gridfs.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin OpenUploadStream example\n   :end-before: end OpenUploadStream example\n\n.. _golang-retrieve-info:\n\nRetrieve File Information\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can retrieve file metadata stored in the ``files`` collection of the GridFS\nbucket. Each document in the ``files`` collection contains the following\npieces of information:\n\n- File ID\n- File length\n- Maximum chunk size\n- Upload date and time\n- File name\n- ``metadata`` document that stores any other information\n\nTo retrieve file data, call the ``Find()`` method on a ``GridFSBucket``\ninstance. You can pass a query filter as an argument to ``Find()`` to match\nonly certain file documents.\n\n.. note::\n\n   You must pass a query filter to the ``Find()`` method. To retrieve all\n   documents in the ``files`` collection, pass an empty query filter to ``Find()``.\n\nThe following example retrieves the file name and length of documents in\nwhich the ``length`` value is greater than ``1500``:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/gridfs.txt"
  },
  {
    "code": "      :copyable: false\n\n      name_1_age_-1\n\n   MongoDB uses this index when you sort your data by either:\n\n   - ``name`` ascending, ``age`` descending\n   - ``name`` descending, ``age`` ascending\n\n   Specifying a sort order of ``name`` and :guilabel:`age` ascending or :guilabel:`name` and ``age``\n   descending requires an in-memory sort.\n\n   To learn how to ensure your index covers your query criteria and\n   projection, see :manual:`Query Coverage\n   </core/query-optimization/#covered-query>`.\n\nOperational Considerations\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo improve your query performance, create indexes on fields that appear\noften in your queries and operations that return sorted results. Track\nindex memory and disk usage for capacity planning since\neach index that you add consumes disk space and memory. In addition,\nwhen a write operation updates an indexed field, MongoDB\nalso must update the related index.\n\nSince MongoDB supports dynamic schemas, your application can query\nagainst fields with unknown or arbitrary names. MongoDB 4.2\nintroduced :manual:`wildcard indexes </core/index-wildcard/>` to help\nsupport these queries. Wildcard indexes are not designed to replace\nworkload-based index planning.\n\nTo learn more about designing your data model and choosing indexes\nappropriate for your application, see :manual:`Indexing Strategies\n</applications/indexes>` and :manual:`Data Modeling and Indexes\n</core/data-model-operations/#indexes>`.\n\nIndex Types\n-----------\n\nMongoDB supports several index types to support querying your data. The\nfollowing sections describe and show how to create the most common index\ntypes. To view a full list of index types, see :manual:`Indexes </indexes/>`.\n\n.. _golang-single-field-index:\n\nSingle Field Indexes\n~~~~~~~~~~~~~~~~~~~~\n\nSingle field indexes holds a reference to a field within a\ncollection's documents.\n\nThis index improves single field queries and sort performance, and\nsupports TTL indexes that automatically remove documents from a\ncollection after a certain amount of time.\n\n.. note::\n\n   The ``_id_`` index is an example of a single field index. This index\n   is automatically created on the ``_id`` field when you create a new\n   collection.\n\nExample\n```````\n\nThe following example creates an index in ascending order on the\n``title`` field in the ``sample_mflix.movies`` collection:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"sample_mflix\").Collection(\"movies\")\n      indexModel := mongo.IndexModel{\n          Keys: bson.D{{\"title\", 1}},\n      }\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n          panic(err)\n      }\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Name of Index Created: title_1\n\n.. _golang-compound-index:\n\nCompound Indexes\n~~~~~~~~~~~~~~~~\n\nCompound indexes hold a reference to multiple fields within a\ncollection's documents. This index improves query and sort performance.\n\nExample\n```````\n\nThe following example creates a compound index on the ``fullplot`` and\n``title`` fields in the ``sample_mflix.movies`` collection:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"sample_mflix\").Collection(\"movies\")\n      indexModel := mongo.IndexModel{\n          Keys: bson.D{\n              {\"fullplot\", -1},\n              {\"title\", 1}\n          }\n      }\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n          panic(err)\n      }\n\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Name of Index Created: fullplot_-1_title_1\n\nMultikey Indexes (Indexes on Array Fields)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMultikey indexes use the same syntax as a\n:ref:`single field index <golang-single-field-index>` and a\n:ref:`compound index <golang-compound-index>`. This index improves the\nperformance of queries that specify an array field as an index.\n\nExample\n```````\n\nThe following example creates a multikey index on the ``cast``\nfield in the ``sample_mflix.movies`` collection:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"sample_mflix\").Collection(\"movies\")\n      indexModel := mongo.IndexModel{\n          Keys: bson.D{{\"cast\", -1}}\n      }\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n          panic(err)\n      }\n\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Name of Index Created: cast_-1\n\n.. _golang-clustered-indexes:\n\nClustered Indexes\n~~~~~~~~~~~~~~~~~\n\nClustered indexes improve the performance of insert, update, and delete\noperations on **clustered collections**. Clustered collections store\ndocuments ordered by the clustered index key value.\n\nTo create a clustered index, specify the clustered index option with the\n``_id`` field as the key and the unique field as ``true`` when you\ncreate your collection.\n\nExample\n```````\n\nThe following example creates a clustered index on the ``_id`` field in\nthe ``db.tea`` collection:\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   db := client.Database(\"db\")\n   cio := bson.D{{\"key\", bson.D{{\"_id\", 1}}}, {\"unique\", true}}\n   opts := options.CreateCollection().SetClusteredIndex(cio)\n\n   db.CreateCollection(context.TODO(), \"tea\", opts)\n\n.. _golang-text-indexes:\n\nText Indexes\n~~~~~~~~~~~~\n\nText indexes support text search queries on string content. This index\nrequires a string field or an array of strings. MongoDB supports text\nsearch for several languages. You can specify the default language as an\noption when creating the index.\n\nA collection can only contain one text index. If you want to create a\ntext index for multiple text fields, you must create a :ref:`compound\nindex <golang-compound-index>`. The text search runs on all the text fields\nwithin the compound index.\n\n.. tip::\n\n   Text indexes differ from the more powerful\n   :atlas:`Atlas full text search indexes </atlas-search>`.\n   We recommend Atlas search for Atlas users.\n\nExample\n```````\n\nThe following example creates a text index on the ``plot`` field with\n``italian`` as the default language in the ``sample_mflix.movies``\ncollection:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      coll := client.Database(\"sample_mflix\").Collection(\"movies\")\n      indexModel := mongo.IndexModel{Keys: bson.D{{\"plot\", \"text\"}, {\"default_language\", \"italian\"}}}\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n         panic(err)\n      }\n\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Name of Index Created: plot_text\n\n.. _golang-geo-indexes:\n\nGeospatial Indexes\n~~~~~~~~~~~~~~~~~~\n\nMongoDB supports queries containing geospatial coordinate data by using\n**2dsphere indexes**. A ``2dsphere`` index must be in a GeoJSON objects\nfield.\n\nThis index allows you to perform the following:\n\n- Query geospatial data for inclusion, intersection, and proximity.\n- Calculation of distances on a Euclidean plane and for working with the\n  \"legacy coordinate pairs\" syntax used in MongoDB 2.2 and earlier.\n\nExample\n```````\n\nThe ``location.geo`` field in a document from the\n``sample_mflix.theaters`` collection is a GeoJSON Point object that\ndescribes the coordinates of the theater:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :emphasize-lines: 13-16\n\n   {\n      \"_id\" : ObjectId(\"59a47286cfa9a3a73e51e75c\"),\n      \"theaterId\" : 104,\n      \"location\" : {\n         \"address\" : {\n            \"street1\" : \"5000 W 147th St\",\n            \"city\" : \"Hawthorne\",\n            \"state\" : \"CA\",\n            \"zipcode\" : \"90250\"\n         },\n         \"geo\" : {\n            \"type\" : \"Point\",\n            \"coordinates\" : [\n               -118.36559,\n               33.897167\n            ]\n         }\n      }\n   }\n\nThe following example creates a ``2dsphere`` index on the ``location.geo`` field:\n\n.. important::\n\n   Attempting to create a geospatial index on a field that is covered by\n   a geospatial index results in an error.\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      indexModel := mongo.IndexModel{\n          Keys: bson.D{{\"location.geo\", \"2dsphere\"}}\n      }\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n          panic(err)\n      }\n\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      location.geo_2dsphere\n\n.. _golang-unique-indexes:\n\nUnique Indexes\n~~~~~~~~~~~~~~\n\nUnique indexes ensure that the indexed fields do not store duplicate\nvalues. By default, MongoDB creates a unique index on the ``_id`` field\nduring the creation of a collection.\n\nTo create a unique index, specify the field or combination of fields\nthat you want to prevent duplication on and set the ``unique`` option to\n``true``.\n\nExample\n```````\n\nThe following example creates a unique, descending index on the ``theaterId`` field:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input::\n      :language: go\n\n      indexModel := mongo.IndexModel{\n          Keys: bson.D{{\"theaterId\", -1}},\n          Options: options.Index().SetUnique(true),\n      }\n      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)\n      if err != nil {\n          panic(err)\n      }\n\n      fmt.Println(\"Name of Index Created: \" + name)\n\n   .. output::\n      :language: none\n      :visible: false\n\n      Name of Index Created: theaterId_-1\n\n.. _golang-remove-index:\n\nRemove an Index\n---------------\n\nYou can delete any index from a collection except the default unique index on the\n``_id`` field. To remove an index, pass the name of your index to the\n``DropOne()`` method.\n\nThe following example removes an index called ``title_1``\nfrom the ``sample_mflix.movies`` collection:\n\n",
    "language": "javascript",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/indexes.txt"
  },
  {
    "code": "   :emphasize-lines: 8\n   \n   loggerOptions := options.\n   \tLogger().\n   \tSetComponentLevel(options.LogComponentCommand, options.LogLevelDebug)\n\n   clientOptions := options.\n   \tClient().\n   \tApplyURI(uri).\n   \tSetLoggerOptions(loggerOptions)\n\n   client, err := mongo.Connect(clientOptions)\n\nConfigure a Logger\n------------------\n\nTo create a ``LoggerOptions`` object, call the ``options.Logger()``\nmethod. The following table describes how to set properties on\na ``LoggerOptions`` type to configure your logger. The first column lists\nthe ``LoggerOptions`` properties, the second column describes the\nproperties, and the third column lists the corresponding setter method and\nparameters for each property:\n\n.. list-table::\n   :widths: 31 38 31\n   :header-rows: 1\n\n   * - Property\n     - Description\n     - Setter Method\n\n   * - | ``ComponentLevels``\n       |\n       | **Type**: ``map[LogComponent]LogLevel``\n     - | A mapping of components to log severity levels. The driver uses the\n         ``LogLevel`` for each ``LogComponent`` to determine if the log\n         message is generated.\n       |\n       | To learn more about the ``LogComponent`` and ``LogLevel`` types, see\n         the :ref:`Log Components and Severity Levels <golang-logging-component-severity>`\n         section of this guide.\n     - | ``SetComponentLevel()``\n       |\n       | **Parameters**: ``LogComponent``, ``LogLevel``\n\n   * - | ``Sink``\n       |\n       | **Type**: ``LogSink``\n     - | The logging interface that the driver uses to log messages.\n         The ``LogSink`` type is an interface that you can implement to\n         provide a custom sink or integrate a third-party\n         logger for the driver's logs. If you don't set this\n         property, the driver uses the standard logging library.\n       |\n       | To learn more, see the :ref:`Use a Custom Logger\n         <golang-logging-custom>` and :ref:`Integrate Third-Party\n         Loggers <golang-logging-thirdparty>` sections of this guide.\n     - | ``SetSink()``\n       |\n       | **Parameter**: ``LogSink``\n\n   * - | ``MaxDocumentLength``\n       |\n       | **Type**: ``uint``\n       | **Default**: ``1000``\n     - | The maximum length in bytes of each log message that the driver emits. If the\n         message is larger than this value, the driver\n         truncates it and appends ellipses to the partial log message.\n     - | ``SetMaxDocumentLength()``\n       |\n       | **Parameter**: ``uint``\n\n.. tip:: Write Logs to a Specific File\n   \n   By default, the standard logger logs messages to your console (``stderr``). You can\n   specify a logging destination by setting the ``MONGODB_LOG_PATH``\n   environment variable to ``stdout`` or a filepath.\n\n.. _golang-logging-component-severity:\n\nLog Components and Severity Levels\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo specify the components that the driver logs against, set the\n``LogComponent`` type. The following table describes built-in\nspecifications for ``LogComponent``:\n\n.. list-table::\n   :widths: 30 40 30\n   :header-rows: 1\n\n   * - Setting\n     - Description\n     - Enumeration Value\n\n   * - ``LogComponentAll``\n     - Enables logging for all components\n     - ``0``\n\n   * - ``LogComponentCommand``\n     - Enables command monitor logging\n     - ``1``\n\n   * - ``LogComponentTopology``\n     - Enables topology logging\n     - ``2``\n\n   * - ``LogComponentServerSelection``\n     - Enables server selection logging\n     - ``3``\n\n   * - ``LogComponentConnection``\n     - Enables connection services logging\n     - ``4``\n\nYou can specify the log component by using either the setting name\nor its enumeration value. The following code shows equivalent ways\nof enabling command monitoring:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "   :copyable: false\n\n   // Using named value\n   comp := options.LogComponentCommand\n\n   // Using enumeration\n   comp := options.LogComponent(1)\n\nTo specify the log severity level, set the ``LogLevel``\ntype. The following code shows how to enable logging at the\n``LevelDebug`` level:\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "   :copyable: false\n\n   lvl := options.LogLevelDebug\n\n.. important::\n\n   The {+driver-short+} currently emits only ``LevelDebug`` level\n   messages, but it supports other specifications for ``LogLevel``. To\n   learn more, see the `LogLevel <{+api+}/mongo/options#LogLevel>`__ API\n   documentation.\n\nExample\n~~~~~~~\n\nThis example shows how to configure the standard logger with the\nfollowing specifications:\n\n- The maximum document length is ``25`` bytes.\n- The log component is ``LogComponentCommand``.\n- The logging severity level is ``LevelDebug``.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :emphasize-lines: 1-4, 10\n   :start-after: start-standard-logger\n   :end-before: end-standard-logger\n\nThe following code performs an insert operation, which generates log\nmessages:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "   :copyable: false\n\n   .. input:: /includes/fundamentals/code-snippets/logging.go\n      :language: go\n      :dedent:\n      :start-after: start-insert\n      :end-before: end-insert\n\n   .. output::\n      :language: console\n      :visible: false\n\n      {\"command\":\"{\\\"insert\\\": \\\"testColl\\\",\\\"or...\",\"commandName\":\"insert\",\"databaseName\":\"db\",\"driverConnectionId\":1,\"message\":\"Command started\",\"operationId\":0,\"requestId\":13,\"serverConnectionId\":97377,\"serverHost\":\"...\",\"serverPort\":27017,\"timestamp\":...}\n      {\"commandName\":\"insert\",\"driverConnectionId\":1,\"durationMS\":19,\"message\":\"Command succeeded\",\"operationId\":0,\"reply\":\"{\\\"n\\\": {\\\"$numberInt\\\":\\\"1\\\"},...\",\"requestId\":13,\"serverConnectionId\":97377,\"serverHost\":\"...\",\"serverPort\":27017,\"timestamp\":...}\n\n.. _golang-logging-custom:\n\nUse a Custom Logger\n-------------------\n\nIf the standard logging library does not meet your needs, you can\nimplement a custom logger. By customizing your logging configuration,\nyou have more control over the content, format, and frequency of log messages.\n\nTo use a custom logger, define a logger struct and implement the\n``Info()`` and ``Error()`` methods for the struct. Next, set the logger as\nthe ``LogSink`` for your ``Client`` by calling the ``SetSink()`` method on\nyour ``LoggerOptions`` instance.\n\nExample\n~~~~~~~\n\nThis example demonstrates how to define and implement a custom logger.\n\n.. procedure::\n\n   .. step:: Define the ``CustomLogger`` struct.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :language: go\n         :dedent:\n         :start-after: start-customlogger-struct\n         :end-before: end-customlogger-struct\n      \n      .. note::\n\n         The preceding code example uses a ``Mutex`` type in the\n         ``CustomLogger`` struct to ensure atomic writes and prevent\n         race conditions. Setting a ``Mutex`` makes your logger safe for\n         concurrent use by multiple goroutines.\n\n   .. step:: Implement the ``Info()`` and ``Error()`` methods with custom log message formatting.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :language: go\n         :dedent:\n         :start-after: start-customlogger-funcs\n         :end-before: end-customlogger-funcs\n\n   .. step:: Assign a ``Writer`` to your logger and set it as the ``Sink`` for your ``Client``.\n\n      In this example, the logger logs commands and connection\n      events at the ``LevelDebug`` level:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :language: go\n         :dedent:\n         :start-after: start-set-customlogger\n         :end-before: end-set-customlogger\n\n   .. step:: Perform an operation.\n\n      The following code performs an insert operation, which generates log\n      messages:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :copyable: false\n\n         .. input:: /includes/fundamentals/code-snippets/logging.go\n            :language: go\n            :dedent:\n            :start-after: start-insert\n            :end-before: end-insert\n\n         .. output::\n            :language: console\n            :visible: false\n\n            level: 1 DEBUG, message: Connection pool created\n            level: 1 DEBUG, message: Connection pool ready\n            level: 1 DEBUG, message: Connection pool created\n            level: 1 DEBUG, message: Connection pool ready\n            level: 1 DEBUG, message: Connection pool created\n            level: 1 DEBUG, message: Connection pool ready\n            level: 1 DEBUG, message: Connection checkout started\n            level: 1 DEBUG, message: Connection created\n            level: 1 DEBUG, message: Connection ready\n            level: 1 DEBUG, message: Connection checked out\n            level: 1 DEBUG, message: Command started\n            level: 1 DEBUG, message: Command succeeded\n            level: 1 DEBUG, message: Connection checked in\n\n.. _golang-logging-thirdparty:\n\nIntegrate Third-Party Loggers\n-----------------------------\n\nThere are many third-party logging packages available in Go. To use\na third-party logger in your application, create a logger and assign it\nas the sink in your ``LoggerOptions`` instance.\n\nExample\n~~~~~~~\n\nThis example demonstrates how to integrate ``logrus``,\na third-party logging package, into your application.\n\n.. procedure::\n\n   .. step:: Install the necessary packages.\n\n      Run the following ``go get`` commands in your terminal to download\n      the ``logrus`` packages required for this example:\n      \n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :language: go\n         :dedent:\n         :start-after: start-make-logrus\n         :end-before: end-make-logrus\n\n   .. step:: Set the logger as the ``Sink`` for your ``Client``.\n\n      In the following code example, the logger is configured to log\n      commands at the ``LevelDebug`` level.\n      \n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :language: go\n         :dedent:\n         :start-after: start-set-thirdparty-logger\n         :end-before: end-set-thirdparty-logger\n\n   .. step:: Perform operations.\n\n      The following code performs some CRUD operations, which generate log\n      messages:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "         :copyable: false\n\n         .. input:: /includes/fundamentals/code-snippets/logging.go\n            :language: go\n            :dedent:\n            :start-after: start-log-operations\n            :end-before: end-log-operations\n\n         .. output::\n            :language: console\n            :visible: false\n\n            {\n              \"command\": \"{\\\"insert\\\": \\\"testColl\\\", ...}\",\n              \"commandName\": \"insert\",\n              \"databaseName\": \"db\",\n              ...\n              \"level\": \"debug\",\n              \"message\": \"Command started\",\n              \"msg\": \"Command started\",\n              ...\n              \"time\": \"2023-07-06 10:23:42\"\n            }\n            {\n              \"commandName\": \"insert\",\n              ...\n              \"level\": \"debug\",\n              \"message\": \"Command succeeded\",\n              \"msg\": \"Command succeeded\",\n              ...\n              \"time\": \"2023-07-06 10:23:42\"\n            }\n            {\n              \"command\": \"{\\\"delete\\\": \\\"testColl\\\", ...}\",\n              \"commandName\": \"delete\",\n              \"databaseName\": \"db\",\n              ...\n              \"level\": \"debug\",\n              \"message\": \"Command started\",\n              \"msg\": \"Command started\",\n              ...\n              \"time\": \"2023-07-06 10:23:42\"\n            }\n            {\n              \"commandName\": \"delete\",\n              ...\n              \"level\": \"debug\",\n              \"message\": \"Command succeeded\",\n              \"msg\": \"Command succeeded\",\n              ...\n              \"time\": \"2023-07-06 10:23:42\"\n            }\n\n.. tip:: Logging Packages\n\n   You can find more information on third-party logging packages in their\n   respective GitHub repositories:\n   \n   - :github:`logrus <sirupsen/logrus>`\n   - :github:`zap <uber-go/zap>`\n   - :github:`zerolog <rs/zerolog>`\n   \n   To see full code examples that integrate these loggers, see the\n   :github:`logging tests in the {+driver-short+} Github repository <mongodb/mongo-go-driver/tree/master/examples/_logger>`.\n\nAdditional Information\n----------------------\n\nFor more information about setting client options, see the\n:ref:`golang-connection-guide`.\n\n.. tip:: Monitoring\n\n   In addition to logging, you can enable server selection and\n   topology monitoring in your application. To learn more, see the\n   :ref:`golang-monitoring` Fundamentals guide.\n\n.. _golang-logging-api:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the types or methods discussed in this\nguide, see the following API Documentation:\n\n- `SetLoggerOptions() <{+api+}/mongo/options#ClientOptions.SetLoggerOptions>`__\n- `LoggerOptions <{+api+}/mongo/options#LoggerOptions>`__\n- `LogSink <{+api+}/mongo/options#LogSink>`__\n- `SetComponentLevel() <{+api+}/mongo/options#LoggerOptions.SetComponentLevel>`__\n- `SetMaxDocumentLength() <{+api+}/mongo/options#LoggerOptions.SetMaxDocumentLength>`__\n- `SetSink() <{+api+}/mongo/options#LoggerOptions.SetSink>`__\n- `LogComponent <{+api+}/mongo/options#LogComponent>`__\n- `LogLevel <{+api+}/mongo/options#LogLevel>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/logging.txt"
  },
  {
    "code": "   :copyable: false\n      \n   *event.ServerDescriptionChangedEvent\n   {\n       \"Address\": \"...\",\n       \"TopologyID\": \"...\",\n       \"PreviousDescription\": {\n           \"Addr\": \"...\",\n           \"Arbiters\": null,\n           \"AverageRTT\": 0,\n           \"AverageRTTSet\": false,\n           \"Compression\": null,\n           \"CanonicalAddr\": \"...\",\n           \"ElectionID\": \"...\",\n           \"HeartbeatInterval\": 0,\n           \"HelloOK\": false,\n           \"Hosts\": null,\n           \"LastError\": null,\n           \"LastUpdateTime\": \"...\",\n           \"LastWriteTime\": \"...\",\n           \"MaxBatchCount\": 0,\n           \"MaxDocumentSize\": 0,\n           \"MaxMessageSize\": 0,\n           \"Members\": null,\n           \"Passives\": null,\n           \"Passive\": false,\n           \"Primary\": \"...\",\n           \"ReadOnly\": false,\n           \"ServiceID\": null,\n           \"SessionTimeoutMinutes\": 0,\n           \"SetName\": \"...\",\n           \"SetVersion\": 0,\n           \"Tags\": null,\n           \"TopologyVersion\": null,\n           \"Kind\": 0,\n           \"WireVersion\": null\n       },\n       \"NewDescription\": {\n           \"Addr\": \"...\",\n           \"Arbiters\": null,\n           \"AverageRTT\": ...,\n           \"AverageRTTSet\": true,\n           \"Compression\": null,\n           \"CanonicalAddr\": \"...\",\n           \"ElectionID\": \"...\",\n           \"HeartbeatInterval\": ...,\n           \"HelloOK\": true,\n           \"Hosts\": [...],\n           \"LastError\": null,\n           \"LastUpdateTime\": \"...\",\n           \"LastWriteTime\": \"...\",\n           \"MaxBatchCount\": ...,\n           \"MaxDocumentSize\": ...,\n           \"MaxMessageSize\": ...,\n           \"Members\": [...],\n           \"Passives\": null,\n           \"Passive\": false,\n           \"Primary\": \"...\",\n           \"ReadOnly\": false,\n           \"ServiceID\": null,\n           \"SessionTimeoutMinutes\": 30,\n           \"SetName\": \"...\",\n           \"SetVersion\": 9,\n           \"Tags\": [...],\n           \"TopologyVersion\": {...},\n           \"Kind\": 10,\n           \"WireVersion\": {...}\n       }\n   }\n\n.. _golang-monitoring-kind-field:\n\n``Kind`` Field Value\n````````````````````\n\nThe ``Kind`` field in an event document represents the type of a\nsingle server in a topology and can have the following values:\n\n.. list-table::\n   :widths: 30 70\n   :header-rows: 1\n\n   * - Value\n     - Description\n   * - ``0``\n     - Unknown instance\n   * - ``1``\n     - Standalone instance\n   * - ``2``\n     - Replica set member\n   * - ``6``\n     - Primary instance\n   * - ``10``\n     - Secondary instance\n   * - ``18``\n     - Arbiter instance\n   * - ``34``\n     - Replica set ghost (a member that cannot be queried)\n   * - ``256``\n     - ``mongos`` proxy instance\n   * - ``512``\n     - Load balancer instance\n\nServerOpeningEvent\n~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.ServerOpeningEvent\n   {\n       \"Address\": \"...\",\n       \"TopologyID\": \"...\"\n   }\n\nServerClosedEvent\n~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.ServerClosedEvent\n   {\n       \"Address\": \"...\",\n       \"TopologyID\": \"...\"\n   }\n\nTopologyDescriptionChangedEvent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. important::\n\n   Because the driver calls ``TopologyDescriptionChangedEvent`` when the\n   deployment topology is locked, the callback (function argument) for this event\n   must not attempt any operation that requires server selection on\n   the same client.\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.TopologyDescriptionChangedEvent\n   {\n       \"TopologyID\": \"...\",\n       \"PreviousDescription\": {\n           \"Servers\": [\n               {\n                   \"Addr\": \"...\",\n                   \"Arbiters\": null,\n                   \"AverageRTT\": 0,\n                   \"AverageRTTSet\": false,\n                   \"Compression\": null,\n                   \"CanonicalAddr\": \"...\",\n                   \"ElectionID\": \"...\",\n                   \"HeartbeatInterval\": 0,\n                   \"HelloOK\": false,\n                   \"Hosts\": null,\n                   \"LastError\": null,\n                   \"LastUpdateTime\": \"...\",\n                   \"LastWriteTime\": \"...\",\n                   \"MaxBatchCount\": 0,\n                   \"MaxDocumentSize\": 0,\n                   \"MaxMessageSize\": 0,\n                   \"Members\": null,\n                   \"Passives\": null,\n                   \"Passive\": false,\n                   \"Primary\": \"...\",\n                   \"ReadOnly\": false,\n                   \"ServiceID\": null,\n                   \"SessionTimeoutMinutes\": 0,\n                   \"SetName\": \"...\",\n                   \"SetVersion\": 0,\n                   \"Tags\": null,\n                   \"TopologyVersion\": null,\n                   \"Kind\": 0,\n                   \"WireVersion\": null\n               },\n               ...\n           ],\n           \"SetName\": \"...\",\n           \"Kind\": 10,\n           \"SessionTimeoutMinutes\": 30,\n           \"CompatibilityErr\": null\n       },\n       \"NewDescription\": {\n           \"Servers\": [...],\n           \"SetName\": \"...\",\n           \"Kind\": 10,\n           \"SessionTimeoutMinutes\": 30,\n           \"CompatibilityErr\": null\n       }\n   }\n\nTo interpret the value of the ``Kind`` field, see the :ref:`Kind Field\nValue section <golang-monitoring-kind-field>`.\n\nTopologyOpeningEvent\n~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.TopologyOpeningEvent\n   {\n       \"TopologyID\": \"...\"\n   }\n\nTopologyClosedEvent\n~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.TopologyClosedEvent\n   {\n       \"TopologyID\": \"...\"\n   }\n\nServerHeartbeatStartedEvent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.ServerHeartbeatStartedEvent\n   {\n       \"ConnectionID\": \"...\",\n       \"Awaited\": true\n   }\n\nServerHeartbeatSucceededEvent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.ServerHeartbeatSucceededEvent\n   {\n    \"DurationNanos\": ...,\n       \"Reply\": {\n           \"Addr\": \"...\",\n           \"Arbiters\": null,\n           \"AverageRTT\": 0,\n           \"AverageRTTSet\": false,\n           \"Compression\": null,\n           \"CanonicalAddr\": \"...\",\n           \"ElectionID\": \"...\",\n           \"HeartbeatInterval\": 0,\n           \"HelloOK\": true,\n           \"Hosts\": [...],\n           \"LastError\": null,\n           \"LastUpdateTime\": \"...\",\n           \"LastWriteTime\": \"...\",\n           \"MaxBatchCount\": ...,\n           \"MaxDocumentSize\": ...,\n           \"MaxMessageSize\": ...,\n           \"Members\": [...],\n           \"Passives\": null,\n           \"Passive\": false,\n           \"Primary\": \"...\",\n           \"ReadOnly\": false,\n           \"ServiceID\": null,\n           \"SessionTimeoutMinutes\": 30,\n           \"SetName\": \"...\",\n           \"SetVersion\": 9,\n           \"Tags\": [...],\n           \"TopologyVersion\": {...},\n           \"Kind\": 6,\n           \"WireVersion\": {...}\n       },\n       \"ConnectionID\": \"...\",\n       \"Awaited\": true\n   }\n\nTo interpret the value of the ``Kind`` field, see the :ref:`Kind Field\nValue section <golang-monitoring-kind-field>`.\n\nServerHeartbeatFailedEvent\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.ServerHeartbeatFailedEvent\n   {\n       \"DurationNanos\": ...,\n       \"Failure\": \"<error message>\"\n       \"ConnectionID\": \"...\",\n       \"Awaited\": true\n   }\n\nAPI Documentation\n-----------------\n\n- `ServerMonitor <{+api+}/event#ServerMonitor>`__ type\n- `SetServerMonitor() <{+api+}/mongo/options#ClientOptions.SetServerMonitor>`__ method\n- `event <{+api+}/event>`__ package\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/cluster-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.CommandStartedEvent\n   {\n       \"Command\": \"...\",\n       \"DatabaseName\": \"...\",\n       \"CommandName\": \"...\",\n       \"RequestID\": ...,\n       \"ConnectionID\": \"...\",\n       \"ServerConnectionID\": ...,\n       \"ServiceID\": \"...\"\n   }\n\nCommandSucceededEvent\n~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/command-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.CommandSucceededEvent\n   {\n       \"DurationNanos\": 38717583,\n       \"Duration\": 38717583,\n       \"CommandName\": \"insert\",\n       \"RequestID\": 13,\n       \"ConnectionID\": \"...\",\n       \"ServerConnectionID\": ...,\n       \"ServiceID\": null,\n       \"Reply\": \"...\"\n   }\n\nCommandFailedEvent\n~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/command-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.CommandFailedEvent\n   {\n       \"DurationNanos\": 38717583,\n       \"Duration\": 38717583,\n       \"CommandName\": \"insert\",\n       \"RequestID\": 13,\n       \"ConnectionID\": \"...\",\n       \"ServerConnectionID\": ...,\n       \"ServiceID\": null,\n       \"Failure\": \"...\"\n   }\n\nAdditional Information\n----------------------\n\nTo learn more about monitoring a MongoDB deployment, see the :website:`How\nto Monitor MongoDB\n</basics/how-to-monitor-mongodb-and-what-metrics-to-monitor>` article.\n\nTo learn more about performing MongoDB operations, see the\n:ref:`golang-crud` guides.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods and types mentioned in this\nguide, see the following API documentation:\n\n- `CommandMonitor <{+api+}/event#CommandMonitor>`__ type\n- `SetMonitor() <{+api+}/mongo/options#ClientOptions.SetMonitor>`__ method\n- `CommandStartedEvent <{+api+}/event#CommandStartedEvent>`__ type\n- `CommandSucceededEvent <{+api+}/event#CommandSucceededEvent>`__ type\n- `CommandFailedEvent <{+api+}/event#CommandFailedEvent>`__ type\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/command-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionPoolCreated\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": {\n           \"maxPoolSize\": 100,\n           \"minPoolSize\": 0,\n           \"maxIdleTimeMS\": 0\n       },\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionPoolReady\n~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionPoolReady\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionPoolCleared\n~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionPoolCleared\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionPoolClosed\n~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionPoolClosed\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionCreated\n~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionCreated\",\n       \"address\": \"...\",\n       \"connectionId\": 1,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionReady\n~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionReady\",\n       \"address\": \"...\",\n       \"connectionId\": 1,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionClosed\n~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionClosed\",\n       \"address\": \"...\",\n       \"connectionId\": 1,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionCheckOutStarted\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionCheckOutStarted\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionCheckOutFailed\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionCheckOutFailed\",\n       \"address\": \"...\",\n       \"connectionId\": 0,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionCheckedOut\n~~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionCheckedOut\",\n       \"address\": \"...\",\n       \"connectionId\": 1,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nConnectionCheckedIn\n~~~~~~~~~~~~~~~~~~~\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :copyable: false\n\n   *event.PoolEvent\n   {\n       \"type\": \"ConnectionCheckedIn\",\n       \"address\": \"...\",\n       \"connectionId\": 1,\n       \"options\": null,\n       \"reason\": \"\",\n       \"serviceId\": null,\n       \"error\": null\n   }\n\nAdditional Information\n----------------------\n\nTo learn more about monitoring a MongoDB deployment, see the :website:`How\nto Monitor MongoDB\n</basics/how-to-monitor-mongodb-and-what-metrics-to-monitor>` article.\n\nTo learn more about connecting to MongoDB, see the\n:ref:`golang-connection-guide`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about the methods and types mentioned in this\nguide, see the following API documentation:\n\n- `PoolMonitor <{+api+}/event#PoolMonitor>`__ type\n- `PoolEvent <{+api+}/event#PoolEvent>`__ type\n- `SetPoolMonitor() <{+api+}/mongo/options#ClientOptions.SetPoolMonitor>`__ method\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/monitoring/connection-monitoring.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: start-runcommand\n   :end-before: end-runcommand\n\nOutput\n~~~~~~\n\nIn the output, you should see fields explaining the\nexecution of the ``count`` operation, such as the winning plan, which is\nthe plan selected by the query optimizer, and any rejected\nplans. The output also contains information about the execution of the\n``explain`` command:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/run-command.txt"
  },
  {
    "code": "   :emphasize-lines: 9-13,19-29\n\n   {\n       \"$clusterTime\": {\n           \"clusterTime\": {\n               \"T\": 1673969525,\n               \"I\": 24\n           },\n           \"signature\": {...}\n       },\n       \"command\": {\n           \"$db\": \"db\",\n           \"count\": \"flowers\"\n       },\n       \"explainVersion\": \"1\",\n       \"ok\": 1,\n       \"operationTime\": {\n           \"T\": 1673969525,\n           \"I\": 24\n       },\n       \"queryPlanner\": {\n           \"indexFilterSet\": false,\n           \"maxIndexedAndSolutionsReached\": false,\n           \"maxIndexedOrSolutionsReached\": false,\n           \"maxScansToExplodeReached\": false,\n           \"namespace\": \"db.flowers\",\n           \"rejectedPlans\": [],\n           \"winningPlan\": {\n               \"stage\": \"RECORD_STORE_FAST_COUNT\"\n           }\n       },\n       \"serverInfo\": {...},\n       \"serverParameters\": {\n           \"internalDocumentSourceGroupMaxMemoryBytes\": 104857600,\n           ...\n       }\n   }\n\n.. _addl-info-runcommand:\n\nAdditional Information\n----------------------\n\nFor more information about the concepts in this guide, see the following documentation:\n\n- :manual:`db.runCommand() </reference/method/db.runCommand/>`\n- :manual:`Database Commands </reference/command/>`\n- :manual:`hello Command </reference/command/hello/>`\n- :manual:`explain Command </reference/command/explain/>`\n\nTo learn how to retrieve data from a cursor, see the\n:ref:`golang-cursor` fundamentals page.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `RunCommand() <{+api+}/mongo#Database.RunCommand>`__\n- `RunCommandCursor() <{+api+}/mongo#Database.RunCommandCursor>`__\n- `RunCmdOptions <{+api+}/mongo/options#RunCmdOptions>`__\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/run-command.txt"
  },
  {
    "code": "   :copyable: true\n\n   // Specify a server URI to connect to\n   uri := \"mongodb://<hostname>:<port>\"\n\n   // Specify the Stable API version in the ClientOptions object\n   serverAPI := options.ServerAPI(options.ServerAPIVersion1)\n   \n   // Pass in the URI and the ClientOptions to the Client\n   client, err := mongo.Connect(options.Client().ApplyURI(uri).SetServerAPIOptions(serverAPI))\n   if err != nil {\n       panic(err)\n   }\n\n.. _golang-stable-api-options:\n\nModify Behavior\n---------------\n\nYou can further modify the behavior of the stable API feature by\nappending to the ``ServerAPIOptions`` type. If you don't specify any\noptions, the driver uses the default values for each option.\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 30 70\n\n   * - Method\n     - Description\n\n   * - ``ServerAPI()``\n     - | The API version to use.\n       |\n       | Default: **ServerAPIVersion1**\n\n   * - ``SetStrict()``\n     - | Flag that indicates whether the server should return errors for features that aren't part of the API version.\n       |\n       | Default: **false**\n\n   * - ``SetDeprecationErrors()``\n     - | Flag that indicates whether the server should return errors for deprecated features.\n       |\n       | Default: **false**\n\nExample\n~~~~~~~\n\nThis example specifies for the server to perform the following actions:\n\n- Use Version 1 of the API\n- Return errors for features that aren't part of Version 1\n- Return errors for deprecated features\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/stable-api.txt"
  },
  {
    "code": "   :copyable: true\n    \n   // Specify a server URI to connect to\n   uri := \"mongodb://<hostname>:<port>\"\n\n   // Specify the Stable API version and append options in the ClientOptions object\n   serverAPI := options.ServerAPI(options.ServerAPIVersion1).SetStrict(true).SetDeprecationErrors(true)\n   \n   // Pass in the URI and the ClientOptions to the Client\n   client, err := mongo.Connect(options.Client().ApplyURI(uri).SetServerAPIOptions(serverAPI))\n   if err != nil {\n       panic(err)\n   }\n\nAdditional Information\n----------------------\n\nTo learn more about connecting to your MongoDB instance or replica set,\nsee :ref:`golang-connection-guide`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nFor more information on the options in this section, see the following\nAPI Documentation:\n\n- `Client <{+api+}/mongo/options#Client>`__\n- `ClientOptions <{+api+}/mongo/options#ClientOptions>`__\n- `ServerAPI() <{+api+}/mongo/options#ServerAPI>`__\n- `ServerAPIOptions <{+api+}/mongo/options#ServerAPIOptions>`__\n- `ServerApiVersion <{+api+}/mongo/options#ServerAPIVersion>`__\n- `SetDeprecationErrors() <{+api+}/mongo/options#ServerAPIOptions.SetDeprecationErrors>`__\n- `SetStrict() <{+api+}/mongo/options#ServerAPIOptions.SetStrict>`__\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/stable-api.txt"
  },
  {
    "code": "   :start-after: begin create ts coll\n   :end-before: end create ts coll\n   :emphasize-lines: 4, 7\n   :language: go\n   :dedent:\n\nTo check if you created the collection, send the ``\"listCollections\"``\ncommand to the ``RunCommand()`` method:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/time-series.txt"
  },
  {
    "code": "   :copyable: true\n\n   .. input:: /includes/fundamentals/code-snippets/timeSeriesRunCommand.go\n      :language: go\n      :emphasize-lines: 2, 6\n\n   .. output:: \n      :visible: false\n      :emphasize-lines: 9, 11, 15\n      :language: json\n\n      {  \n         ...\n         \"cursor\": {\n              \"firstBatch\": [\n                  {\n                      \"info\": {\n                          \"readOnly\": false\n                      },\n                      \"name\": \"march2022\",\n                      \"options\": {\n                          \"timeseries\": {\n                              ...\n                          }\n                      },\n                      \"type\": \"timeseries\"\n                  },\n          ...\n       }\n\nQuery a Time Series Collection\n------------------------------\n\nTo query a time series collection, use the same conventions as you\nwould for :ref:`retrieving <golang-retrieve>` and aggregating data.\n\nAdditional Information\n----------------------\n\nTo learn more about the operations mentioned, see the following\nguides:\n\n- :ref:`manual-timeseries-collection`\n- :ref:`manual-timeseries-collection-limitations`\n- :ref:`golang-run-command-usage-example`\n- :ref:`golang-retrieve`\n\n.. TODO: db and collections, run command fundamentals page, aggregation page\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the methods or types discussed in this\nguide, see the following API Documentation:\n\n- `TimeSeriesOptions <{+api+}/mongo/options#TimeSeriesOptions>`__\n- `SetTimeField() <{+api+}/mongo/options#TimeSeriesOptions.SetTimeField>`__\n- `CreateCollection() <{+api+}/mongo#Database.CreateCollection>`__\n- `SetTimeSeriesOptions() <{+api+}/mongo/options#CreateCollectionOptions.SetTimeSeriesOptions>`__\n- `RunCommand() <{+api+}/mongo#Database.RunCommand>`__\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/time-series.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :start-after: begin-session-txn-options\n   :end-before: end-session-txn-options\n\n.. sharedinclude:: dbx/transactions-parallelism.rst\n\nExample\n-------\n\nThe following example shows how you can create a session, create a\ntransaction, and commit a multi-document insert operation through the\nfollowing steps:\n\n1. Create a session from the client using the ``StartSession()`` method.\n#. Use the ``WithTransaction()`` method to start a transaction.\n#. Insert multiple documents. The ``WithTransaction()`` method executes the\n   insert and commits the transaction. If any operation results in\n   errors, ``WithTransaction()`` handles canceling the transaction.\n#. Close the transaction and session using the ``EndSession()`` method.\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/transactions.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n   :emphasize-lines: 5,10,14-15\n   :start-after: start-session\n   :end-before: end-session\n\nIf you require more control over your transactions, you can find an example\nshowing how to manually create, commit, and end transactions in the\n`full code example <https://raw.githubusercontent.com/mongodb/docs-golang/{+docs-branch+}/source/includes/fundamentals/code-snippets/transaction.go>`__.\n\nAdditional Information\n----------------------\n\nFor more information about insert operations, see the\n:ref:`golang-insert-guide` fundamentals page.\n\nFor more information about specifying write concerns in the\n{+driver-short+}, see :ref:`Write Concern <golang-writeconcern>`.\n\nFor an additional example using sessions and transactions with the {+driver-short+}, see the\n:website:`developer blog post on Multi-Document ACID Transactions\n</developer/languages/go/golang-multi-document-acid-transactions/>`.\n\n.. _api-docs-transaction:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nTo learn more about any of the types or methods discussed in this\nguide, see the following API Documentation:\n\n- `Session <{+api+}/mongo#Session>`__\n- `Client <{+api+}/mongo#Client>`__\n- `StartSession() <{+api+}/mongo#Client.StartSession>`__\n- `TransactionOptions <{+api+}/mongo/options#TransactionOptions>`__\n- `SetWriteConcern() <{+api+}/mongo/options#TransactionOptions.SetWriteConcern>`__\n- `InsertMany() <{+api+}/mongo#Collection.InsertMany>`__\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/fundamentals/transactions.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             err = coll.FindOne(context.TODO(), bson.D{{\"firstName\", Mike}}).Decode(&result)\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Mike}, {lastName Smith} ...]\n\n   * - | **Find Multiple Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.Find>`__\n       | :ref:`Usage Example <golang-find-multiple>`\n       | :ref:`Fundamentals <golang-retrieve>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(context.TODO(), bson.D{{\"age\", bson.D{{\"$gte\", 46}}}})\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Kyle}, {age 51}, ... ]\n             [{firstName Omar}, {age 47}, ... ]\n\n   * - | **Insert a Document**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.InsertOne>`__\n       | :ref:`Usage Example <golang-insert-one>`\n       | :ref:`Fundamentals <golang-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          result, err := coll.InsertOne(\n              context.TODO(), \n              bson.D{\n                  {\"animal\", \"Dog\"}, \n                  {\"breed\", \"Beagle\"} \n              }\n          )\n\n   * - | **Insert Multiple Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.InsertMany>`__\n       | :ref:`Usage Example <golang-insert-many>`\n       | :ref:`Fundamentals <golang-insert-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          docs := []interface{} {\n              bson.D{{\"firstName\", \"Erik\"}, {\"age\", 27}},\n              bson.D{{\"firstName\", \"Mohammad\"}, {\"lastName\", \"Ahmad\"}, {\"age\", 10}},\n              bson.D{{\"firstName\", \"Todd\"}},\n              bson.D{{\"firstName\", \"Juan\"}, {\"lastName\", \"Pablo\"}}\n           }\n\n          result, err := coll.InsertMany(context.TODO(), docs)\n\n   * - | **Update a Document**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.UpdateOne>`__\n       | :ref:`Usage Example <golang-update-one>`\n       | :ref:`Fundamentals <golang-update-documents>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             result, err := coll.UpdateOne(\n                 context.TODO(), \n                 bson.D{{\"firstName\", \"Erik\"}}, \n                 bson.D{{\"$set\", bson.D{{\"age\", 28}}}}\n             )\n             fmt.Printf(\"The number of modified documents: %d\\n\", result.ModifiedCount)\n\t\t\n          .. output::\n             :language: go\n             :visible: false \n\n             The number of modified documents: 1\n\n   * - | **Update Multiple Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.UpdateMany>`__\n       | :ref:`Usage Example <golang-update-many>`\n       | :ref:`Fundamentals <golang-update-documents>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             result, err := coll.UpdateMany(\n                 context.TODO(), \n                 bson.D{{\"age\", bson.D{{\"$gte\", 58}}}}, \n                 bson.D{{\"$set\", bson.D{{\"description\", \"Senior\"}}}}\n             )\n             fmt.Printf(\"The number of modified documents: %d\\n\", result.ModifiedCount)\n\n          .. output::\n             :language: go\n             :visible: false \n\n             The number of modified documents: 4\n\n   * - | **Update Arrays in Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.UpdateMany>`__\n       | :ref:`Fundamentals <golang-update-arrays>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             result, err := coll.UpdateMany(\n                 context.TODO(), \n                 bson.D{}, \n                 bson.D{{\"$push\", bson.D{{family, \"brother\"}}}}\n             )\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Xiao}, {family [\"brother\"]}, ... ]\n             [{firstName Omar}, {family [\"brother\", \"mother\"]}, ... ]\n             ...\n\n   * - | **Replace a Document**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.ReplaceOne>`__\n       | :ref:`Usage Example <golang-replace>`\n       | :ref:`Fundamentals <golang-replacement-document>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             result, err := coll.ReplaceOne(\n                 context.TODO(), \n                 bson.D{{\"firstName\", \"Mick\"}}, \n                 bson.D{{\"firstName\", \"Mike\"}, {\"lastName\", \"Doe\"}}\n             )\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{{firstName Mike}, {lastName Doe} }]\n\n   * - | **Delete a Document**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.DeleteOne>`__\n       | :ref:`Usage Example <golang-delete-one>`\n       | :ref:`Fundamentals <golang-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          result, err := coll.DeleteOne(\n              context.TODO(), \n              bson.D{{\"firstName\", \"Xiao\"}}\n          )\n\n   * - | **Delete Multiple Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.DeleteMany>`__\n       | :ref:`Usage Example <golang-delete-many>`\n       | :ref:`Fundamentals <golang-delete-guide>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          results, err := coll.DeleteMany(\n              context.TODO(), \n              bson.D{{\"age\", bson.D{{\"$lte\", 12}}}}\n          )\n\n   * - | **Bulk Write**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.BulkWrite>`__\n       | :ref:`Usage Example <golang-bulk-ops-usage-example>`\n       | :ref:`Fundamentals <golang-bulk>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go \n\n             models := []mongo.WriteModel{\n                 mongo.NewInsertOneModel().SetDocument(bson.D{{\"firstName\", \"John\"}, {\"age\", 5}}),\n                 mongo.NewUpdateOneModel().SetFilter(bson.D{{\"firstName\", \"Juan\"}}).\n                     SetUpdate(bson.D{{\"$set\", bson.D{{\"age\", 12}}}}),\n             }\n             opts := options.BulkWrite().SetOrdered(true)\n\n             results, err := coll.BulkWrite(context.TODO(), models, opts)\n\n          .. output::\n             :language: go\n             :visible: false\n\n             [{firstName John}, {age 5} ... ]\n             [{firstName Juan}, {age 12} ... ]\n\n   * - | **Monitor Data Changes**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.Watch>`__\n       | :ref:`Usage Example <golang-usageex-monitor-changes>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          pipeline := mongo.Pipeline{bson.D{{\"$match\", bson.D{{\"operationType\", \"insert\"}}}}}\n          cs, err := coll.Watch(context.TODO(), pipeline)\n\n   * - | **Access Data from a Cursor Iteratively**\n       |\n       | `API Documentation <{+api+}/mongo#Cursor.Next>`__\n       | :ref:`Fundamentals <golang-individual-documents>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(context.TODO(), bson.D{})\n\n             for cursor.Next(context.TODO()) {\n                 var result bson.D\n                 if err := cursor.Decode(&result); err != nil {\n                     log.Fatal(err)\n                 }\n                 fmt.Println(result)\n             }\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Doug} ... ]\n             [{firstName Erik} ...]\n             [{lastName Chang} ...]\n             ...\n\n   * - | **Access Data from a Cursor as an Array**\n       |\n       | `API Documentation <{+api+}/mongo#Cursor.All>`__\n       | :ref:`Fundamentals <golang-all-documents>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(context.TODO(), bson.D{})\n\n             var results []bson.D\n             if err = cursor.All(context.TODO(), &results); err != nil {\n                 panic(err)\n             }\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{name Mike} ... ]\n             [{name Edgar} ...]\n             [{name Freddie} ...]\n             ...\n\n   * - | **Count Documents**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.CountDocuments>`__\n       | :ref:`Usage Example <golang-count-usage-example>`\n       | :ref:`Fundamentals <golang-count-documents>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             count, err := coll.CountDocuments(context.TODO(), bson.D{})\n\n          .. output::\n             :language: go\n             :visible: false \n\n             6\n\n   * - | **List the Distinct Documents or Field Values**\n       | `API Documentation <{+api+}/mongo#Collection.Distinct>`__\n       | :ref:`Usage Example <golang-distinct-usage-example>`\n       | :ref:`Fundamentals <golang-retrieve-distinct>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             var results []string\n             err = coll.Distinct(context.TODO(), \"firstName\", bson.D{}).Decode(&results)\n\n          .. output::\n             :language: go\n             :visible: false \n             \n             [Mike Xiao Sandy ...]\n\n   * - | **Limit the Number of Documents Retrieved**\n       |\n       | `API Documentation <{+api+}/mongo/options#FindOptions.SetLimit>`__\n       | :ref:`Fundamentals <golang-limit>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetLimit(2))\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{breed Beagle} ... ]\n             [{breed German Shepard} ...]\n\n   * - | **Skip Retrieved Documents**\n       |\n       | `API Documentation <{+api+}/mongo/options#FindOptions.SetSkip>`__\n       | :ref:`Fundamentals <golang-skip>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n             \n             // the collection has 6 documents\n             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetSkip(4))\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{item Pen} ... ]\n             [{item Chair} ...]\n\n   * - | **Sort the Documents When Retrieving Them**\n       |\n       | `API Documentation <{+api+}/mongo/options#FindOptions.SetSort>`__\n       | :ref:`Fundamentals <golang-sort-results>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetSort(bson.D{{\"age\", 1}}))\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Dev} {age 5} ... ]\n             [{firstName Jose} {age 7} ... ]\n             [{firstName Om} {age 8} ... ]\n\n   * - | **Project Document Fields When Retrieving Them**\n       |\n       | `API Documentation <{+api+}/mongo/options#FindOptions.SetProjection>`__\n       | :ref:`Fundamentals <golang-project>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             cursor, err := coll.Find(\n                 context.TODO(), \n                 bson.D{},\n                 options.Find().SetProjection(\n                     bson.D{{\"age\", 0}, {\"_id\",0}}\n                 )\n             )\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{firstName Lester}]\n             [{firstName Wendall} {lastName Griffin}]\n             ...\n\n   * - | **Create an Index**\n       |\n       | `API Documentation <{+api+}/mongo#IndexView.CreateOne>`__\n       | :ref:`Fundamentals <golang-indexes>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          model := mongo.IndexModel{Keys: bson.D{{\"firstName\", 1}, {\"lastName\", -1}}}\n          name, err := coll.Indexes().CreateOne(context.TODO(), model)\n\n   * - | **Search Text**\n       |\n       | `API Documentation <{+api+}/mongo#Collection.Find>`__\n       | :ref:`Fundamentals <golang-search-text>`\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "          :copyable: true\n\n          .. input::\n             :language: go\n\n             // only searches fields with text indexes\n             cursor, err := coll.Find(context.TODO(), bson.D{{\"$text\", bson.D{{\"$search\", \"beagle\"}}}})\n\n          .. output::\n             :language: go\n             :visible: false \n\n             [{\"firstName\": \"Emily\" , \"Description\": \"I love to play sports and walk my beagle.\"} ... ]\n\n",
    "language": "",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-reference.txt"
  },
  {
    "code": "   :language: go\n   :dedent:\n\nRun the sample code with the following command from your command line:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/quick-start.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` omits the corresponding \nfield from the inserted document when left empty.\n\nThe following example performs the following in order on the ``restaurants``\ncollection:\n\n- Matches a document in which the ``name`` is \"Cafe Tomato\" and replaces it with a new document\n- Matches a document in which the ``name`` is \"Cafe Zucchini\" and updates\n  the value to \"Zucchini Land\"\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/bulkWrite.txt"
  },
  {
    "code": "   :start-after: begin bulk\n   :end-before: end bulk\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/bulk.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following document\nin the ``restaurants`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/bulkWrite.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ObjectId(\"...\"),\n     \"name\": \"Zucchini Land\",\n     \"cuisine\": \"French\"\n   }\n\nFor an example on how to find a document, see :ref:`golang-find-one`.\n\nAdditional Information\n----------------------\n\nTo learn more about performing bulk write operations on a collection\nand handling potential errors, see :ref:`golang-bulk`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `BulkWrite() <{+api+}/mongo#Collection.BulkWrite>`__\n- `NewUpdateOneModel() <{+api+}/mongo#NewUpdateOneModel>`__\n- `NewReplaceOneModel() <{+api+}/mongo#NewReplaceOneModel>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/bulkWrite.txt"
  },
  {
    "code": "   :start-after: begin watch\n   :end-before: end watch\n   :emphasize-lines: 7\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/watch.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, run the :ref:`Insert a\nDocument usage example <golang-insert-one>` in a different\nshell. Once you run the insert operation, you should see the following\noutput:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/changestream.txt"
  },
  {
    "code": "   :copyable: false\n\n   // results truncated\n   {\n     \"_id\": ...,\n     \"name\": \"8282\",\n     \"cuisine\": \"Korean\"\n   }\n\n.. important::\n\n   Make sure to shut down this usage example once you finish by closing\n   your terminal.\n\nAdditional Information\n----------------------\n\nTo learn more about opening a change stream and handling\npotential errors, see:\n\n- Fundamentals page on :ref:`change streams <golang-monitor-changes>`\n- MongoDB Server Manual :manual:`Change Streams Documentation </changeStreams>`\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`Watch() <{+api+}/mongo#Collection.Watch>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/changestream.txt"
  },
  {
    "code": "   :start-after: begin runCommand\n   :end-before: end runCommand\n   :emphasize-lines: 8\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/command.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, it returns a ``SingleResult`` type\nthat contains the following values:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/command.txt"
  },
  {
    "code": "   :start-after: begin countDocuments\n   :end-before: end countDocuments\n   :emphasize-lines: 8, 15\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/count.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you should see the following:\n\n- There are about ``23541`` documents in the ``movies`` collection\n- There are ``303`` documents in the ``movies`` collection that contain \"China\" in the ``countries`` field\n\n.. note::\n\n    The exact number of documents may vary depending on your data set.\n\nAdditional Information\n----------------------\n\nTo learn more about counting documents, see \n:ref:`golang-count-documents`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__\n- `EstimatedDocumentCount() <{+api+}/mongo#Collection.EstimatedDocumentCount>`__\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/count.txt"
  },
  {
    "code": "   :start-after: begin deleteMany\n   :end-before: end deleteMany\n   :emphasize-lines: 5\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/deleteMany.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, it removes the following documents\nin the ``movies`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/deleteMany.txt"
  },
  {
    "code": "   :copyable: false\n\n   // results truncated\n   { \"_id\": ObjectId(\"573a1397f29313caabce69db\"), ... , \"runtime\": 1256, ... },\n   { \"_id\": ObjectId(\"573a1397f29313caabce75fe\"), ... , \"runtime\": 910, ... },\n   { \"_id\": ObjectId(\"573a1399f29313caabcee1aa\"), ... , \"runtime\": 1140, ... },\n   { \"_id\": ObjectId(\"573a13a6f29313caabd18ae0\"), ... , \"runtime\": 877, ... }\n\nFor an example on how to find multiple documents, see :ref:`golang-find-multiple`.\n\nAdditional Information\n----------------------\n\nTo learn more about deleting documents, see :ref:`golang-delete-guide`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`DeleteMany() <{+api+}/mongo#Collection.DeleteMany>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/deleteMany.txt"
  },
  {
    "code": "   :start-after: begin deleteOne\n   :end-before: end deleteOne\n   :emphasize-lines: 5\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/deleteOne.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, it removes the following document\nin the ``movies`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/deleteOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   // result truncated\n   { \"_id\": ObjectId(\"...\"), ..., \"title\": \"Twilight\", ... }\n\nFor an example on how to find a document, see :ref:`golang-find-one`.\n\nAdditional Information\n----------------------\n\nTo learn more about deleting documents, see :ref:`golang-delete-guide`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`DeleteOne() <{+api+}/mongo#Collection.DeleteOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/deleteOne.txt"
  },
  {
    "code": "   :start-after: begin distinct\n   :end-before: end distinct\n   :emphasize-lines: 7\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/distinct.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, it prints a slice that contains the\nfollowing values:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/distinct.txt"
  },
  {
    "code": "   :copyable: false\n\n    A Tale of Love and Darkness\n    New York, I Love You\n\nAdditional Information\n----------------------\n\nTo learn more about retrieving distinct values, see :ref:`golang-retrieve-distinct`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`Distinct() <{+api+}/mongo#Collection.Distinct>`__\n\n",
    "language": "none",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/distinct.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe following example matches documents in the ``restaurants`` collection\nin which the ``cuisine`` is ``\"Italian\"``, returns a cursor that\nreferences the matched documents, then unpacks the documents into a slice:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/find.txt"
  },
  {
    "code": "   :start-after: begin find\n   :end-before: end find\n   :language: go\n   :dedent:\n   :emphasize-lines: 8\n\nView a `fully runnable example <{+example+}/find.go>`__\n\nExpected Result\n---------------\n\nRunning the full example prints the following documents, which are stored in \nthe ``results`` variable as ``Restaurant`` structs:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/find.txt"
  },
  {
    "code": "   :copyable: false\n\n   // results truncated\n   ...\n   { ... , \"Name\" : \"Epistrophy Cafe\", \"RestaurantId\": \"41117553\", \"Cuisine\" : \"Italian\", ... },\n   { ... , \"Name\" : \"Remi\", \"RestaurantId\": \"41118090\", \"Cuisine\" : \"Italian\", ... },\n   { ... , \"Name\" : \"Sant Ambroeus\", \"RestaurantId\": \"41120682\", \"Cuisine\" : \"Italian\", ... },\n   ...\n\nAdditional Information\n----------------------\n\nTo learn more about specifying query filters and\nhandling potential errors, see \n:ref:`golang-retrieve`.\n\nTo learn more about query operators,\nsee the :manual:`MongoDB query operator reference documentation\n</reference/operator/query/>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `Find() <{+api+}/mongo#Collection.Find>`__\n- `Cursor <{+api+}/mongo#Cursor>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/find.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe following example matches documents in the ``restaurants`` collection\nin which the ``name`` is \"Bagels N Buns\", returning the first document\nmatched:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/findOne.txt"
  },
  {
    "code": "   :start-after: begin findOne\n   :end-before: end findOne\n   :language: go\n   :dedent:\n   :emphasize-lines: 9\n\nView a `fully runnable example <{+example+}/findOne.go>`__\n\nExpected Result\n---------------\n\nRunning the full example prints the following document, which is stored in the \n``result`` variable as a ``Restaurant`` struct:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/findOne.txt"
  },
  {
    "code": "   :copyable: False\n\n   // results truncated\n   {\n      \"ID\": \"5eb3d668b31de5d588f42950\",\n      \"Name\": \"Bagels N Buns\",\n      \"RestaurantId\": \"40363427\"\n      \"Address\": [...],\n      \"Borough\": \"Staten Island\",\n      \"Cuisine\": \"Delicatessen\",\n      \"Grades\": [...]\n   }\n\n\nAdditional Information\n----------------------\n\nTo learn more about specifying query filters and\nhandling potential errors, see \n:ref:`golang-retrieve`.\n\nTo learn more about query operators,\nsee the :manual:`MongoDB query operator reference documentation\n</reference/operator/query/>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`FindOne() <{+api+}/mongo#Collection.FindOne>`__\n\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/findOne.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` omits the corresponding \nfield from the inserted document when left empty.\n\nThe following example inserts two new documents to the ``restaurants`` \ncollection:\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertMany.txt"
  },
  {
    "code": "   :start-after: begin insertMany\n   :end-before: end insertMany\n   :emphasize-lines: 10\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/insertMany.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following inserted\ndocuments in the ``restaurants`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertMany.txt"
  },
  {
    "code": "  :copyable: false\n    \n    { \"_id\": ObjectID(\"...\"), \"name\": \"Rule of Thirds\", \"cuisine\": \"Japanese\"},\n    { \"_id\": ObjectID(\"...\"), \"name\": \"Madame Vo\", \"cuisine\": \"Vietnamese\"}\n\nFor an example on how to find multiple documents, see the \n:ref:`golang-find-multiple` usage example.\n\nAdditional Information\n----------------------\n\nTo learn more about inserting documents, see \n:ref:`inserting documents <golang-insert-guide>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`InsertMany() <{+api+}/mongo#Collection.InsertMany>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertMany.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` omits the corresponding \nfield from the inserted document when left empty.\n\nThe following example inserts a new document to the ``restaurants`` collection:\n\n.. include:: /includes/fundamentals/automatic-db-coll-creation.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertOne.txt"
  },
  {
    "code": "   :start-after: begin insertOne\n   :end-before: end insertOne\n   :emphasize-lines: 4\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/insertOne.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following inserted\ndocument in the ``restaurants`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n     \"_id\": ObjectId(\"...\"),\n     \"name\": \"8282\",\n     \"cuisine\": \"Korean\"\n   }\n\nFor an example on how to find a document, see the :ref:`golang-find-one` usage \nexample.\n\nAdditional Information\n----------------------\n\nTo learn more about inserting documents, see \n:ref:`inserting documents <golang-insert-guide>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`InsertOne() <{+api+}/mongo#Collection.InsertOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/insertOne.txt"
  },
  {
    "code": "   :start-after: start-restaurant-struct\n   :end-before: end-restaurant-struct\n   :language: go \n   :copyable: \n   :dedent:\n\nThe ``omitempty`` :ref:`struct tag<golang-struct-tags>` omits the corresponding \nfield from the inserted document when left empty.\n\nThis example performs the following actions on the ``restaurants``\ncollection:\n\n- Matches a document in which the ``name`` is \"Madame Vo\"\n- Replaces the matched document with a new document\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/replaceOne.txt"
  },
  {
    "code": "   :start-after: begin replace\n   :end-before: end replace\n   :emphasize-lines: 8\n   :language: go\n   :dedent:\n\nView a `fully runnable example <{+example+}/replace.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following replaced\ndocument in the ``restaurants`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/replaceOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n      \"_id\" : ObjectId(\"...\"),\n      \"name\" : \"Monsieur Vo\",\n      \"cuisine\" : \"Asian Fusion\"\n   }\n\nFor an example on how to find a document, see the :ref:`golang-find-one` usage \nexample.\n\nAdditional Information\n----------------------\n\nTo learn more about replacing documents, specifying query filters, and\nhandling potential errors, see :ref:`golang-change-document`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`ReplaceOne() <{+api+}/mongo#Collection.ReplaceOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/replaceOne.txt"
  },
  {
    "code": "   :start-after: begin struct\n   :end-before: end struct\n   :language: go\n   :dedent:\n\nThe following example creates a ``BlogPost`` instance and inserts it\ninto the ``posts`` collection. During the insert operation, the driver\ninterprets the struct tag to marshal the ``WordCount``\nstruct field as ``word_count``:\n\n.. include:: /includes/usage-examples/run-example-tip.rst\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/struct-tagging.txt"
  },
  {
    "code": "   :start-after: begin create and insert\n   :end-before: end create and insert\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/struct-tag.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following document\nin the ``posts`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/struct-tagging.txt"
  },
  {
    "code": "   :copyable: false\n\n   {\n       \"_id\" : ObjectId(\"...\"),\n       \"title\" : \"Annuals vs. Perennials?\",\n       \"author\" : \"Sam Lee\",\n       \"word_count\" : 682,\n       \"lastupdated\": ...,\n       \"tags\" : [\"seasons\", \"gardening\", \"flower\"]\n   }\n\nFor an example on how to find a document, see :ref:`golang-find-one`.\n\nAdditional Information\n----------------------\n\nTo learn more about using struct tags, converting to/from BSON, and\nhandling potential errors, see :ref:`working with BSON <golang-bson>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n- `Structs and Struct Tags <https://pkg.go.dev/go.mongodb.org/mongo-driver/bson#hdr-Structs>`__\n- `InsertOne() <https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.InsertOne>`__\n- `FindOne() <https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.FindOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/struct-tagging.txt"
  },
  {
    "code": "   :start-after: begin updatemany\n   :end-before: end updatemany\n   :emphasize-lines: 9\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/updateMany.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following updated\ndocuments in the ``listingsAndReviews`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/updateMany.txt"
  },
  {
    "code": "   :copyable: false\n\n   // results truncated\n   ...\n   { \"_id\" : \"10091713\", ... , \"name\" : \"Surry Hills Studio\", ... , \"price\" : 181.00, ... },\n   { \"_id\" : \"9908871\", ... , \"name\" : \"Family friendly beach house\", ... , \"price\" : 751.00, ... },\n   { \"_id\" : \"20989061\", ... , \"name\" : \"Big and sunny Narraben room\", ... , \"price\" : 60.00, ... },\n   ...\n\nFor an example on how to find multiple documents, see :ref:`golang-find-multiple`.\n\nAdditional Information\n----------------------\n\nTo learn more about replacing documents, specifying query filters, and\nhandling potential errors, see :ref:`golang-change-document`.\n\nTo learn more about update operators,\nsee the :manual:`MongoDB update operator reference documentation\n</reference/operator/update/#update-operators>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/updateMany.txt"
  },
  {
    "code": "   :start-after: begin updateone\n   :end-before: end updateone\n   :emphasize-lines: 9\n   :language: go\n   :dedent:\n\nView a `fully runnable example. <{+example+}/updateOne.go>`__\n\nExpected Result\n---------------\n\nAfter you run the full example, you can find the following updated\ndocument in the ``restaurants`` collection:\n\n",
    "language": "go",
    "type": "literalinclude",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/updateOne.txt"
  },
  {
    "code": "   :copyable: false\n\n   // result truncated\n   {\n      \"_id\" : ObjectId(\"5eb3d668b31de5d588f42a7a\"),\n      ...\n      \"name\" : \"Green House Cafe\",\n      \"restaurant_id\" : \"40372112\",\n      \"avg_rating\" : 4.4\n   }\n\nFor an example on how to find a document, see :ref:`golang-find-one`.\n\nAdditional Information\n----------------------\n\nTo learn more about replacing documents, specifying query filters, and\nhandling potential errors, see :ref:`golang-change-document`.\n\nTo learn more about update operators,\nsee the :manual:`MongoDB update operator reference documentation\n</reference/operator/update/#update-operators>`.\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\n`UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__\n\n",
    "language": "json",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/usage-examples/updateOne.txt"
  },
  {
    "code": "     :emphasize-lines: 6\n\n     res, err := coll.InsertOne(context.TODO(), bson.D{{\"x\", 2}})\n     if err != nil {\n     \tpanic(err)\n     }\n     \n     fmt.Print(res.Acknowledged)\n\n- You can set options for transactions run in a given session by\n  creating a ``TransactionOptions`` instance and passing the instance to\n  the ``SetDefaultTransactionOptions()`` method of the\n  ``SessionOptions`` type. To learn more, see the\n  :ref:`golang-session-txn-options` section of the Transactions guide.\n\n- The ``Collection.Clone()`` method does not return an error.\n\n- Renames the ``canonical`` parameter of the ``UnmarshalExtJSON()``\n  method to ``canonicalOnly``. If you set ``canonicalOnly`` to ``true``,\n  the method returns an error if the extended JSON is not marshaled in\n  canonical mode. If set to ``false``, the method can unmarshal\n  canonical or relaxed extended JSON. To learn more, see the\n  `UnmarshalExtJSON() <{+api+}/bson#UnmarshalExtJSON>`__ API documentation.\n\n.. _golang-version-1.17:\n\nWhat's New in 1.17\n------------------\n\n.. important::\n\n   v1.17 is the final planned 1.x version release. This version will\n   receive security and bug fixes, but future development and features\n   will be included only in 2.x versions of the driver.\n\nThe 1.17 {+driver-short+} release includes the following improvements\nand fixes:\n\n- Adds support for OpenID Connect (OIDC) authentication. To learn more, see\n  the :ref:`golang-mongodb-oidc` section of the Enterprise\n  Authentication Mechanisms guide.\n\n- Adds support for Queryable Encryption (QE) range queries. To use this\n  feature, your app must connect to {+mdb-server+} 8.0 or later. For\n  more information about QE range queries, see :manual:`Queryable\n  Encryption </core/queryable-encryption>` in the {+mdb-server+} manual.\n\n- Adds support for {+mdb-server+} 8.0, except for\n  the client bulk write feature.\n\n- Extends the ``IndexView`` type to include the\n  ``DropOneWithKey()`` and ``DropWithKey()`` methods so you can\n  drop indexes by using their key specifications instead of their names.\n\nFor more information about the changes in this version, see the\n:github:`v1.17 release notes\n</mongodb/mongo-go-driver/releases/tag/v1.17.0>` on GitHub.\n\n.. _version-1.16:\n\nWhat's New in 1.16\n------------------\n\nThe 1.16 {+driver-short+} release includes the following improvements and fixes:\n\n- Adds support for specifying an index type when creating an Atlas Search index.\n\n- Reduces memory usage when the ``zstd`` compression algorithm is enabled.\n\n- Upgrades some dependency requirements. For a list of upgrades, see the \"Upgrade Dependencies\"\n  section of the :github:`v1.16 release notes </mongodb/mongo-go-driver/releases/tag/v1.16.0>`.\n\nFor more information about these changes, see the :github:`v1.16 release notes\n</mongodb/mongo-go-driver/releases/tag/v1.16.0>` on Github.\n\n.. _version-1.15.1:\n\nWhat's New in 1.15.1\n--------------------\n\nThe 1.15.1 {+driver-short+} patch release includes the following improvements\nand fixes:\n\n- Fixes a possible connection leak where disconnecting from a replica set cluster\n  left behind ``rttMonitor`` connections.\n\n- Adds support for manually specifying a ``maxTimeMS`` value for read and aggregation\n  operations when a client-wide timeout and an operation timeout are set.\n\n- Adds a ``RemainingBatchLength()`` method that you can call on a change stream.\n\nFor more information about these changes, see the :github:`v1.15.1 release notes\n</mongodb/mongo-go-driver/releases/tag/v1.15.1>` on Github.\n\n.. _version-1.15:\n\nWhat's New in 1.15\n------------------\n\nThe 1.15 {+driver-short+} release includes the following improvements and fixes:\n\n- Connection churn can be mitigated by setting a client-wide timeout by\n  specifying the ``timeoutMS`` connection option or by calling the\n  `SetTimeout() <https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo/options#ClientOptions.SetTimeout>`__\n  function. When the timeout is set, the driver attempts to reuse a connection\n  after an operation times out and waits for up to one second to check if\n  the connection can be reused before closing it.\n\n- Connection pool events include a ``Duration`` field to measure the checkout\n  duration and total amount of time it took to establish a connection.\n\n.. _version-1.14:\n\nWhat's New in 1.14\n------------------\n\nThe 1.14 {+driver-short+} release includes the following improvements and fixes:\n\n- Go versions before 1.18 are no longer supported.\n\n- In case of a heartbeat timeout, in-progress operations are preemptively canceled.\n\n- Connection strings that include the ``\"mongodb+srv://\"`` prefix can contain capital\n  letters in the SRV hostname.\n\n.. _version-1.13:\n\nWhat's New in 1.13\n------------------\n\nThe 1.13 {+driver-short+} release includes the following improvements and fixes:\n\n- Logging for server selection and SDAM. To learn more about logging, see the\n  :ref:`golang-logging` documentation.\n\n- Methods on the ``Collection`` type that allow you to manage search indexes programmatically.\n\n- The ``event.CommandStartedEvent`` and ``event.CommandFinishedEvent`` events return\n  the ``DatabaseName`` field. This field is also included in the command-logging analogs.\n\n- In a sharded topology, when selecting a server to retry an unsuccessful query, the driver\n  excludes the server used for the initial attempt. Instead, if there's more than\n  one eligible ``mongos`` instance, the driver randomly selects one. Unhealthy instances\n  are automatically excluded from selection.\n\n- Streaming SDAM is disabled by default on AWS Lambda and similar function-as-a-service\n  (FaaS) platforms. You can enable monitoring by using the\n  ``serverMonitoringMode`` URI option.\n\n.. _version-1.12.1:\n\nWhat's New in 1.12.1\n--------------------\n\nThe 1.12 {+driver-short+} release includes the following improvements and fixes:\n\n- The driver unpins connections when ending a session. This prevents connections\n  from leaking when a user runs a transaction while connected to a load balancer.\n\n- The driver does not throw a runtime error when you unmarshal an empty\n  ``bson.RawValue`` type with an invalid type or marshal a ``nil`` pointer of a ``ReadConcern`` instance.\n\n- Setting ``options.LogComponentAll`` as the log component correctly results in the publication of logs against all components.\n\n.. _version-1.12:\n\nWhat's New in 1.12\n------------------\n\n.. important:: Deprecation Notice\n\n   - The ``mongo.NewClient()`` and ``client.Connect()`` methods are\n     deprecated. You can create a client and connect in one call\n     by using the ``mongo.Connect()`` method.\n\nNew features of the 1.12 Go driver release include:\n\nQueryable Encryption\n~~~~~~~~~~~~~~~~~~~~\n\nThis driver version adds support for :ref:`qe-manual-feature-qe` (QE). To learn\nmore about the requirements for using the QE feature, see the\n:ref:`Queryable Encryption Driver Compatibility Table\n<qe-compatibility-reference>`.\n\nThe ``ClientEncryption.CreateEncryptedCollection()``\nmethod automatically creates data encryption keys when\nyou create a new encrypted collection. To learn how to use the QE\nfeature, see the :ref:`qe-quick-start` in the Server manual.\n\nLogging Interface\n~~~~~~~~~~~~~~~~~\n\nYou can now record connection management and command execution events by\nusing the ``LogSink`` logging interface.\n\nTo learn more, see the :ref:`golang-logging` Fundamentals guide.\n\nAdditional BSON Marshalling Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis driver version adds features to the ``options`` package to specify\nhow the driver marshals and unmarshals BSON.\n\nThe following example shows how to set BSON options on your\n``Client``. The options specify the following behaviors:\n\n- The driver falls back to ``json`` :ref:`struct tags\n  <golang-struct-tags>` if ``bson`` struct tags are absent.\n- The driver marshals ``nil`` Go map types as empty BSON documents.\n- The driver marshals ``nil`` Go slice types as empty BSON arrays.\n\n",
    "language": "go",
    "type": "code-block",
    "id": "",
    "path": "/Users/kyle.rollins/Documents/GitHub/docs-golang/source/whats-new.txt"
  }
]
